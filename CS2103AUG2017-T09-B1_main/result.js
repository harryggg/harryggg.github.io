var resultJson = [{"path":"src/test/java/systemtests/SortCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":""},{"lineNumber":3,"author":{"gitID":"inGall"},"content":"public class SortCommandSystemTest {"},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":4}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // changes made to Person reflects on card"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            personWithTags.setName(ALICE.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            personWithTags.setAddress(ALICE.getAddress());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            personWithTags.setEmail(ALICE.getEmail());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            personWithTags.setPhone(ALICE.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            personWithTags.setTags(ALICE.getTags());"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"            personWithTags.setBirthday(ALICE.getBirthday());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"-":84}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import guitests.guihandles.ReminderCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    public static void assertReminderCardEquals(ReminderCardHandle expectedCard, ReminderCardHandle actualCard) {"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedCard.getTask(), actualCard.getTask());"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedCard.getPriority(), actualCard.getPriority());"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedCard.getDate(), actualCard.getDate());"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedCard.getMessage(), actualCard.getMessage());"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(ReadOnlyPerson expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedPerson.getBirthday().value, actualCard.getBirthday());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedReminder}."},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"    public static void assertCardDisplaysReminder(ReadOnlyReminder expectedReminder, ReminderCardHandle actualCard) {"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedReminder.getTask().taskName, actualCard.getTask());"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedReminder.getPriority().value, actualCard.getPriority());"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedReminder.getDate().date, actualCard.getDate());"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedReminder.getMessage().message, actualCard.getMessage());"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedReminder.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"                actualCard.getTags());"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, ReadOnlyPerson... persons) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new ReadOnlyPerson[0]));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"duyson98":30,"-":73}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), model.getDatabase(), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":1,"-":122}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"        String defaultConfigAsString \u003d \"App title : Gentleman\u0027s Guide\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"-":31}},{"path":"src/test/java/seedu/address/ui/ReminderCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.ui;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalReminders.BIRTHDAY;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysReminder;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import guitests.guihandles.ReminderCardHandle;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"public class ReminderCardTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    public void display() {"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        // no tags"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"        Reminder reminderWithNoTags \u003d new ReminderBuilder().withTags(new String[0]).build();"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"        ReminderCard reminderCard \u003d new ReminderCard(reminderWithNoTags, 1);"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"        uiPartRule.setUiPart(reminderCard);"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"        assertCardDisplay(reminderCard, reminderWithNoTags, 1);"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        // with tags"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        Reminder reminderWithTags \u003d new ReminderBuilder().build();"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        reminderCard \u003d new ReminderCard(reminderWithTags, 2);"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"        uiPartRule.setUiPart(reminderCard);"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        assertCardDisplay(reminderCard, reminderWithTags, 2);"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        // changes made to Reminder reflects on card"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"            reminderWithTags.setTask(BIRTHDAY.getTask());"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"            reminderWithTags.setPriority(BIRTHDAY.getPriority());"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"            reminderWithTags.setDate(BIRTHDAY.getDate());"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"            reminderWithTags.setMessage(BIRTHDAY.getMessage());"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"            reminderWithTags.setTags(BIRTHDAY.getTags());"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        });"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        assertCardDisplay(reminderCard, reminderWithTags, 2);"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    public void equals() {"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        Reminder reminder \u003d new ReminderBuilder().build();"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        ReminderCard reminderCard \u003d new ReminderCard(reminder, 0);"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        // same reminder, same index -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        ReminderCard copy \u003d new ReminderCard(reminder, 0);"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        assertTrue(reminderCard.equals(copy));"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        // same object -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        assertTrue(reminderCard.equals(reminderCard));"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        assertFalse(reminderCard.equals(null));"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        // different types -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"        assertFalse(reminderCard.equals(0));"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        // different reminder, same index -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        Reminder differentReminder \u003d new ReminderBuilder().withTask(\"differentName\").build();"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        assertFalse(reminderCard.equals(new ReminderCard(differentReminder, 0)));"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        // same reminder, different index -\u003e returns false"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        assertFalse(reminderCard.equals(new ReminderCard(reminder, 1)));"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"     * Asserts that {@code reminderCard} displays the details of {@code expectedReminder} correctly and matches"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"     * {@code expectedId}."},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"    private void assertCardDisplay(ReminderCard reminderCard, ReadOnlyReminder expectedReminder, int expectedId) {"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        ReminderCardHandle reminderCardHandle \u003d new ReminderCardHandle(reminderCard.getRoot());"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        // verify id is displayed correctly"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", reminderCardHandle.getId());"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"        // verify reminder details are displayed correctly"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"        assertCardDisplaysReminder(expectedReminder, reminderCardHandle);"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":86}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                + ALICE.getName().fullName.replaceAll(\" \", \"+\") + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        //assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":2,"-":50}},{"path":"src/test/java/systemtests/ModelReminderHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":14,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class ModelReminderHelper {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"    private static final Predicate\u003cReadOnlyReminder\u003e PREDICATE_MATCHING_NO_PRIORITY \u003d unused -\u003e false;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"     * Updates {@code model}\u0027s filtered reminder list to display only {@code toDisplay}."},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    public static void setFilteredReminderList(Model model, List\u003cReadOnlyReminder\u003e toDisplay) {"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"        Optional\u003cPredicate\u003cReadOnlyReminder\u003e\u003e predicate \u003d"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"                toDisplay.stream().map(ModelReminderHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        model.updateFilteredReminderList(predicate.orElse(PREDICATE_MATCHING_NO_PRIORITY));"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"     * @see ModelReminderHelper#setFilteredReminderList(Model, List)"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    public static void setFilteredReminderList(Model model, ReadOnlyReminder... toDisplay) {"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        setFilteredReminderList(model, Arrays.asList(toDisplay));"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":""},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"     * Returns a predicate that evaluates to true if this {@code ReadOnlyReminder} equals to {@code other}."},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    private static Predicate\u003cReadOnlyReminder\u003e getPredicateMatching(ReadOnlyReminder other) {"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"        return reminder -\u003e reminder.equals(other);"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":40}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":3,"-":121}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":45,"author":{"gitID":"-"},"content":" */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":185,"author":{"gitID":"cqhchan"},"content":"        String selectedCardAddress \u003d getPersonListPanel().getHandleToSelectedCard().getAddress();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"cqhchan"},"content":"            expectedUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX + selectedCardAddress.replaceAll(\" \", \"+\")"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                    + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"cqhchan"},"content":"        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":3,"-":262}},{"path":"src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    public static void assertParse(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception pe) {"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"            throw new IllegalArgumentException(\"Invalid.\", pe);"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":7,"-":47}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_REMINDER;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.BirthdayCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.DeleteReminderCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.RetagCommand;"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.RetrieveCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.UntagCommand;"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.TagContainsKeywordPredicate;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.ReminderUtil;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"    public void parseCommand_addReminder() throws Exception {"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"        Reminder reminder \u003d new ReminderBuilder().build();"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        AddReminderCommand command \u003d (AddReminderCommand) parser.parseCommand("},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"                ReminderUtil.getAddReminderCommand(reminder));"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"        assertEquals(new AddReminderCommand(reminder), command);"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"    public void parseCommand_deleteReminder() throws Exception {"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"        DeleteReminderCommand command \u003d (DeleteReminderCommand) parser.parseCommand("},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"                DeleteReminderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_REMINDER.getOneBased());"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        assertEquals(new DeleteReminderCommand(INDEX_FIRST_REMINDER), command);"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":103,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"inGall"},"content":"    public void parseCommand_birthday() throws Exception {"},{"lineNumber":109,"author":{"gitID":"inGall"},"content":"        final Birthday birthday \u003d new Birthday(\"01/01/1991\");"},{"lineNumber":110,"author":{"gitID":"inGall"},"content":"        BirthdayCommand command \u003d (BirthdayCommand) parser.parseCommand(BirthdayCommand.COMMAND_WORD + \" \""},{"lineNumber":111,"author":{"gitID":"inGall"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_BIRTHDAY + \" \" + birthday.value);"},{"lineNumber":112,"author":{"gitID":"inGall"},"content":"        assertEquals(new BirthdayCommand(INDEX_FIRST_PERSON, birthday), command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":125,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":"    public void parseCommand_retrieve() throws Exception {"},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"        RetrieveCommand command \u003d (RetrieveCommand) parser.parseCommand(RetrieveCommand.COMMAND_WORD + \" \" + \"friends\");"},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":"        assertEquals(new RetrieveCommand(new TagContainsKeywordPredicate(new Tag(\"friends\"))), command);"},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":163,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"duyson98"},"content":"    public void parseCommand_view() throws Exception {"},{"lineNumber":165,"author":{"gitID":"duyson98"},"content":"        ViewCommand command \u003d (ViewCommand) parser.parseCommand("},{"lineNumber":166,"author":{"gitID":"duyson98"},"content":"                ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":167,"author":{"gitID":"duyson98"},"content":"        assertEquals(new ViewCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":168,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":170,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":174,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":179,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"duyson98"},"content":"    public void parseCommand_tag() throws Exception {"},{"lineNumber":181,"author":{"gitID":"duyson98"},"content":"        TagCommand command \u003d (TagCommand) parser.parseCommand(TagCommand.COMMAND_WORD + \" \""},{"lineNumber":182,"author":{"gitID":"duyson98"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \",\""},{"lineNumber":183,"author":{"gitID":"duyson98"},"content":"                + INDEX_SECOND_PERSON.getOneBased() + \",\""},{"lineNumber":184,"author":{"gitID":"duyson98"},"content":"                + INDEX_THIRD_PERSON.getOneBased() + \" \" + \"friends\");"},{"lineNumber":185,"author":{"gitID":"duyson98"},"content":"        assertEquals(new TagCommand(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON, INDEX_THIRD_PERSON),"},{"lineNumber":186,"author":{"gitID":"duyson98"},"content":"                new Tag(\"friends\")), command);"},{"lineNumber":187,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":189,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"duyson98"},"content":"    public void parseCommand_untag() throws Exception {"},{"lineNumber":191,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d (UntagCommand) parser.parseCommand(UntagCommand.COMMAND_WORD + \" \""},{"lineNumber":192,"author":{"gitID":"duyson98"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \",\""},{"lineNumber":193,"author":{"gitID":"duyson98"},"content":"                + INDEX_SECOND_PERSON.getOneBased() + \",\""},{"lineNumber":194,"author":{"gitID":"duyson98"},"content":"                + INDEX_THIRD_PERSON.getOneBased() + \" \" + \"friends/enemies\");"},{"lineNumber":195,"author":{"gitID":"duyson98"},"content":"        Tag firstTag \u003d new Tag(\"friends\");"},{"lineNumber":196,"author":{"gitID":"duyson98"},"content":"        Tag secondTag \u003d new Tag(\"enemies\");"},{"lineNumber":197,"author":{"gitID":"duyson98"},"content":"        assertEquals(new UntagCommand(false, Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON,"},{"lineNumber":198,"author":{"gitID":"duyson98"},"content":"                INDEX_THIRD_PERSON), Arrays.asList(secondTag, firstTag)), command);"},{"lineNumber":199,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":200,"author":{"gitID":"duyson98"},"content":"        command \u003d (UntagCommand) parser.parseCommand(UntagCommand.COMMAND_WORD + \" 1,2,3\");"},{"lineNumber":201,"author":{"gitID":"duyson98"},"content":"        assertEquals(new UntagCommand(false, Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON,"},{"lineNumber":202,"author":{"gitID":"duyson98"},"content":"                INDEX_THIRD_PERSON), Collections.emptyList()), command);"},{"lineNumber":203,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":204,"author":{"gitID":"duyson98"},"content":"        command \u003d (UntagCommand) parser.parseCommand(UntagCommand.COMMAND_WORD + \" -all \" + \"friends/enemies\");"},{"lineNumber":205,"author":{"gitID":"duyson98"},"content":"        assertEquals(new UntagCommand(true, Collections.emptyList(),"},{"lineNumber":206,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(secondTag, firstTag)), command);"},{"lineNumber":207,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":208,"author":{"gitID":"duyson98"},"content":"        command \u003d (UntagCommand) parser.parseCommand(UntagCommand.COMMAND_WORD + \" -all\");"},{"lineNumber":209,"author":{"gitID":"duyson98"},"content":"        assertEquals(new UntagCommand(true, Collections.emptyList(), Collections.emptyList()), command);"},{"lineNumber":210,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":212,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"duyson98"},"content":"    public void parseCommand_retag() throws Exception {"},{"lineNumber":214,"author":{"gitID":"duyson98"},"content":"        RetagCommand command \u003d (RetagCommand) parser.parseCommand(RetagCommand.COMMAND_WORD + \" \""},{"lineNumber":215,"author":{"gitID":"duyson98"},"content":"                + \"enemies\" + \" \" + \"friends\");"},{"lineNumber":216,"author":{"gitID":"duyson98"},"content":"        assertEquals(new RetagCommand(new Tag(\"enemies\"), new Tag(\"friends\")), command);"},{"lineNumber":217,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":219,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":9,"duyson98":90,"-":146}},{"path":"src/test/java/seedu/address/logic/parser/RetrieveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.RetrieveCommand;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.TagContainsKeywordPredicate;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"public class RetrieveCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    private RetrieveCommandParser parser \u003d new RetrieveCommandParser();"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        final String expectedMessage \u003d String.format(RetrieveCommand.MESSAGE_EMPTY_ARGS, RetrieveCommand.MESSAGE_USAGE);"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"     \", expectedMessage);"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    public void parse_invalidArg_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"*\u0026%nonAlphanumericCharacters!!!%\u0026*\", MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    public void parse_validArgs_returnsRetrieveCommand() throws Exception {"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        TagContainsKeywordPredicate predicate \u003d new TagContainsKeywordPredicate(new Tag(\"friends\"));"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        RetrieveCommand expectedCommand \u003d"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"                new RetrieveCommand(predicate);"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"friends\", expectedCommand);"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"\\n friends \\t \\n\", expectedCommand);"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":43}},{"path":"src/test/java/seedu/address/logic/parser/BirthdayCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_JOHN;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":""},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.BirthdayCommand;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"public class BirthdayCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    private BirthdayCommandParser parser \u003d new BirthdayCommandParser();"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    public void parse_indexSpecified_failure() throws Exception {"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"        final Birthday birthday \u003d new Birthday(\"01/01/1991\");"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        // have birthday"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_BIRTHDAY.toString() + \" \" + birthday;"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        BirthdayCommand expectedCommand \u003d new BirthdayCommand(INDEX_FIRST_PERSON, birthday);"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":""},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        // no birthday"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_BIRTHDAY.toString();"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        expectedCommand \u003d new BirthdayCommand(INDEX_FIRST_PERSON, new Birthday(\"\"));"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    public void parse_noFieldSpecified_failure() throws Exception {"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, BirthdayCommand.MESSAGE_USAGE);"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":""},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        // nothing at all"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"        assertParseFailure(parser, BirthdayCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":""},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"    public void parse_invalidBirthday() throws Exception {"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, BirthdayCommand.MESSAGE_USAGE);"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        // Invalid birthday"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        assertParseFailure(parser, BirthdayCommand.COMMAND_WORD + BIRTHDAY_DESC_JOHN, expectedMessage);"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":50}},{"path":"src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_USERNAME;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_PRIVATE;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"public class LoginCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    private LoginCommandParser parser \u003d new LoginCommandParser();"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE);"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"        // missing username prefix"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"        assertParseFailure(parser, LoginCommand.COMMAND_WORD + VALID_USERNAME_PRIVATE"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"                + PASSWORD_DESC_PASSWORD , expectedMessage);"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"        // missing password prefix"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"        assertParseFailure(parser, LoginCommand.COMMAND_WORD + USERNAME_DESC_USERNAME"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"                + VALID_PASSWORD_PASSWORD , expectedMessage);"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":33}},{"path":"src/test/java/seedu/address/logic/parser/TagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.TagCommand.MESSAGE_EMPTY_INDEX_LIST;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"public class TagCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    private static final String VALID_TAG_NAME \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    private static final String VALID_INDEX_LIST \u003d \"1,2,3\";"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    private static final String MESSAGE_NO_INDEXES \u003d"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"            String.format(MESSAGE_EMPTY_INDEX_LIST, TagCommand.MESSAGE_USAGE);"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    private TagCommandParser parser \u003d new TagCommandParser();"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        // no indexes specified"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, VALID_TAG_NAME, MESSAGE_INVALID_FORMAT);"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        // no tag name specified"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, VALID_INDEX_LIST, MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        // no indexes and no tag name specified"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        // no indexes"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \",,,, \" + VALID_TAG_NAME, MESSAGE_NO_INDEXES);"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        // negative index"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"-5 \" + VALID_TAG_NAME, MESSAGE_INVALID_FORMAT);"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        // zero index"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"0 \" + VALID_TAG_NAME, MESSAGE_INVALID_FORMAT);"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        // indexes are not all integers"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"1,2,three \" + VALID_TAG_NAME, MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"        // invalid tag name"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, VALID_INDEX_LIST + \" !@#$\", MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        // invalid arguments being parsed"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"1,2,three dummy tag\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"    public void parse_validArgs_returnsTagCommand() throws Exception {"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        TagCommand expectedCommand \u003d new TagCommand(Arrays.asList(INDEX_FIRST_PERSON,"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"                INDEX_SECOND_PERSON, INDEX_THIRD_PERSON), new Tag(VALID_TAG_NAME));"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, VALID_INDEX_LIST + \" \" + VALID_TAG_NAME, expectedCommand);"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"\\t \" + VALID_INDEX_LIST + \" \\n\""},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"                + VALID_TAG_NAME + \"\\t \\n\", expectedCommand);"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"        // multiple duplicated indexes"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"1,1,1,2,2,3\" + \" \" + VALID_TAG_NAME, expectedCommand);"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":83}},{"path":"src/test/java/seedu/address/logic/parser/DeleteReminderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_REMINDER;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.DeleteReminderCommand;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"public class DeleteReminderCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"    private DeleteReminderCommandParser parser \u003d new DeleteReminderCommandParser();"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    public void parse_validArgs_returnsDeleteReminderCommand() {"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"1\", new DeleteReminderCommand(INDEX_FIRST_REMINDER));"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"                DeleteReminderCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":27}},{"path":"src/test/java/seedu/address/logic/parser/FindEmailCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindEmailCommand;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class FindEmailCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    private FindEmailCommandParser parser \u003d new FindEmailCommandParser();"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"                FindEmailCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    public void parse_validArgs_returnsFindEmailCommand() {"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        FindEmailCommand expectedFindEmailCommand \u003d new FindEmailCommand("},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"                new EmailContainsKeywordsPredicate(Arrays.asList(\"Alice@example.com\", \"Bob@example.com\")));"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, \"Alice@example.com Bob@example.com\", expectedFindEmailCommand);"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, \" \\n Alice@example.com \\n \\t Bob@example.com  \\t\", expectedFindEmailCommand);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":36}},{"path":"src/test/java/systemtests/RetrieveCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.RetrieveCommand.MESSAGE_NOT_FOUND;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_RETRIEVETESTER;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import java.util.StringJoiner;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.RetrieveCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"public class RetrieveCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    public void retrieve() {"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        /* Case: retrieve tag in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"        String command \u003d \"   \" + RetrieveCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_RETRIEVETESTER + \"   \";"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        /* Case: undo previous retrieve command -\u003e rejected */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        /* Case: redo previous retrieve command -\u003e rejected */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        /* Case: retrieve same tag in address book after deleting 1 of the persons -\u003e 1 person found */"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(ALICE);"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        command \u003d RetrieveCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_RETRIEVETESTER;"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        /* Case: retrieve tag in address book, keyword is same as tag name but of different case -\u003e tag not found */"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        command \u003d RetrieveCommand.COMMAND_WORD + \" FriEND\";"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        assertAnotherCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        /* Case: retrieve tag not in address book -\u003e tag not found */"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        command \u003d RetrieveCommand.COMMAND_WORD + \" UnknownTag\";"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        assertAnotherCommandSuccess(command, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        command \u003d \"REtriEvE Meier\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":85,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"    private void assertAnotherCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"        Set\u003cTag\u003e uniqueTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : expectedModel.getAddressBook().getPersonList()) {"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"            uniqueTags.addAll(person.getTags());"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"        StringJoiner joiner \u003d new StringJoiner(\", \");"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"        for (Tag tag: uniqueTags) {"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"            joiner.add(tag.toString());"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_NOT_FOUND, joiner.toString());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":53,"-":84}},{"path":"src/test/java/seedu/address/ui/ReminderListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.ui;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_REMINDER;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalReminders.getTypicalReminders;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysReminder;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertReminderCardEquals;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import guitests.guihandles.ReminderCardHandle;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import guitests.guihandles.ReminderListPanelHandle;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.events.ui.JumpToReminderRequestEvent;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"public class ReminderListPanelTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    private static final ObservableList\u003cReadOnlyReminder\u003e TYPICAL_REMINDERS \u003d"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"            FXCollections.observableList(getTypicalReminders());"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    private static final JumpToReminderRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToReminderRequestEvent("},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"            INDEX_SECOND_REMINDER);"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    private ReminderListPanelHandle reminderListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        ReminderListPanel reminderListPanel \u003d new ReminderListPanel(TYPICAL_REMINDERS);"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        uiPartRule.setUiPart(reminderListPanel);"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        reminderListPanelHandle \u003d new ReminderListPanelHandle(getChildNode(reminderListPanel.getRoot(),"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"                ReminderListPanelHandle.REMINDER_LIST_VIEW_ID));"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"    public void display() {"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_REMINDERS.size(); i++) {"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"            reminderListPanelHandle.navigateToCard(TYPICAL_REMINDERS.get(i));"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"            ReadOnlyReminder expectedReminder \u003d TYPICAL_REMINDERS.get(i);"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"            ReminderCardHandle actualCard \u003d reminderListPanelHandle.getReminderCardHandle(i);"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"            assertCardDisplaysReminder(expectedReminder, actualCard);"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    public void handleJumpToReminderRequestEvent() {"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        ReminderCardHandle expectedCard \u003d reminderListPanelHandle.getReminderCardHandle("},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"                INDEX_SECOND_REMINDER.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        ReminderCardHandle selectedCard \u003d reminderListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        assertReminderCardEquals(expectedCard, selectedCard);"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":62}},{"path":"src/test/java/seedu/address/logic/parser/FindPhoneCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class FindPhoneCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    private FindPhoneCommandParser parser \u003d new FindPhoneCommandParser();"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"                FindPhoneCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    public void parse_validArgs_returnsFindPhoneCommand() {"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        FindPhoneCommand expectedFindPhoneCommand \u003d"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"                new FindPhoneCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"87654321\", \"98765432\")));"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, \"87654321 98765432\", expectedFindPhoneCommand);"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, \" \\n 87654321 \\n \\t 98765432  \\t\", expectedFindPhoneCommand);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":36}},{"path":"src/test/java/seedu/address/logic/parser/FindPriorityCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindPriorityCommand;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.PriorityContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class FindPriorityCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    private FindPriorityCommandParser parser \u003d new FindPriorityCommandParser();"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"                FindPriorityCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    public void parse_validArgs_returnsFindPriorityCommand() {"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        FindPriorityCommand expectedFindPriorityCommand \u003d"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"                new FindPriorityCommand(new PriorityContainsKeywordsPredicate(Arrays.asList(\"Low\", \"High\")));"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, \"Low High\", expectedFindPriorityCommand);"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, \" \\n Low \\n \\t High  \\t\", expectedFindPriorityCommand);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":36}},{"path":"src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"public class ViewCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    private ViewCommandParser parser \u003d new ViewCommandParser();"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    public void parse_validArgs_returnsViewCommand() {"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_PERSON));"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":31}},{"path":"src/test/java/seedu/address/logic/parser/CreateAccountCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_USERNAME;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_PASSWORD;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_PRIVATE;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.CreateAccountCommand;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"public class CreateAccountCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    private CreateAccountCommandParser parser \u003d new CreateAccountCommandParser();"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateAccountCommand.MESSAGE_USAGE);"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"        // missing username prefix"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"        assertParseFailure(parser, CreateAccountCommand.COMMAND_WORD + VALID_USERNAME_PRIVATE"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"                + PASSWORD_DESC_PASSWORD , expectedMessage);"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        // missing password prefix"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        assertParseFailure(parser, CreateAccountCommand.COMMAND_WORD + USERNAME_DESC_USERNAME"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"                + VALID_PASSWORD_PASSWORD , expectedMessage);"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"        // invalid name"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"        assertParseFailure(parser, CreateAccountCommand.COMMAND_WORD + INVALID_USERNAME_DESC"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"                + PASSWORD_DESC_PASSWORD, Username.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"        // invalid Password"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"        assertParseFailure(parser, CreateAccountCommand.COMMAND_WORD + USERNAME_DESC_USERNAME"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"                + INVALID_PASSWORD_DESC, Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":50}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteCommand}."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().isEmpty();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":4,"-":116}},{"path":"src/test/java/seedu/address/logic/parser/FindReminderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindReminderCommand;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.TaskContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class FindReminderCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    private FindReminderCommandParser parser \u003d new FindReminderCommandParser();"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"                FindReminderCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    public void parse_validArgs_returnsFindReminderCommand() {"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        FindReminderCommand expectedFindReminderCommand \u003d"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"                new FindReminderCommand(new TaskContainsKeywordsPredicate(Arrays.asList(\"Submission\", \"Meeting\")));"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, \"Submission Meeting\", expectedFindReminderCommand);"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        assertParseSuccess(parser, \" \\n Submission \\n \\t Meeting  \\t\", expectedFindReminderCommand);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":36}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ReadOnlyPerson lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        ReadOnlyPerson editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":10,"-":179}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":3,"-":42}},{"path":"src/test/java/seedu/address/logic/parser/UntagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_EMPTY_INDEX_LIST;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.UntagCommand;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"public class UntagCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    private static final String VALID_TAG_NAMES \u003d \"friends/enemies\";"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    private static final String VALID_INDEX_LIST \u003d \"1,2,3\";"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE);"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    private static final String MESSAGE_NO_INDEXES \u003d"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"            String.format(MESSAGE_EMPTY_INDEX_LIST, UntagCommand.MESSAGE_USAGE);"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"    private UntagCommandParser parser \u003d new UntagCommandParser();"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        // no indexes specified"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, VALID_TAG_NAMES, MESSAGE_INVALID_FORMAT);"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        // no indexes and no tag name specified"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        // no indexes"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \",,,, \" + VALID_TAG_NAMES, MESSAGE_NO_INDEXES);"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        // negative index"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"-5,-1\" + VALID_TAG_NAMES, MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        // zero index"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"0, 0,  0 \" + VALID_TAG_NAMES, MESSAGE_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        // indexes are not all integers"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"1,2,three \" + VALID_TAG_NAMES, MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        // invalid tag name"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, VALID_INDEX_LIST + \" friends/!@#$\", MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        // invalid arguments being parsed"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"1,2,three dummy friends/enemies\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"    public void parse_validArgs_returnsUntagCommand() throws Exception {"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        Tag firstTag \u003d new Tag(\"friends\");"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        Tag secondTag \u003d new Tag(\"enemies\");"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"        UntagCommand expectedCommand \u003d new UntagCommand(false, Arrays.asList(INDEX_FIRST_PERSON,"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"                INDEX_SECOND_PERSON, INDEX_THIRD_PERSON), Arrays.asList(secondTag, firstTag));"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, VALID_INDEX_LIST + \" \" + VALID_TAG_NAMES, expectedCommand);"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"\\t \" + VALID_INDEX_LIST + \" \\n\""},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"                + VALID_TAG_NAMES + \"\\t \\n\", expectedCommand);"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        // multiple duplicated indexes"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"1,1,1,2,2,3\" + \" \" + VALID_TAG_NAMES, expectedCommand);"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"        // remove all tags from the specified persons"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"        expectedCommand \u003d new UntagCommand(false, Arrays.asList(INDEX_FIRST_PERSON,"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"                INDEX_SECOND_PERSON, INDEX_THIRD_PERSON), Collections.emptyList());"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"  1,2,3  \", expectedCommand);"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"        // remove all tags"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"        expectedCommand \u003d new UntagCommand(true, Collections.emptyList(), Collections.emptyList());"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"  -all  \", expectedCommand);"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        // remove a tag from all persons"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"        expectedCommand \u003d new UntagCommand(true, Collections.emptyList(),"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(secondTag, firstTag));"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \" -all  \" + \" friends/enemies  \", expectedCommand);"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":98}},{"path":"src/test/java/seedu/address/logic/parser/RetagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.RetagCommand.MESSAGE_INVALID_ARGS;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.RetagCommand;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"public class RetagCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RetagCommand.MESSAGE_USAGE);"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    private static final String MESSAGE_DUPLICATED_TAG_NAMES \u003d"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"            String.format(MESSAGE_INVALID_ARGS, RetagCommand.MESSAGE_USAGE);"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    private RetagCommandParser parser \u003d new RetagCommandParser();"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        // no tag name specified"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"     \", MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"        // only one tag name specified"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \" friends  \", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    public void parse_invalidArg_throwsParseException() {"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        // invalid tag name"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"friends !@#$!\", MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        // target tag name is the same as new tag name"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, \"friends friends\", MESSAGE_DUPLICATED_TAG_NAMES);"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    public void parse_validArgs_returnsRetagCommand() throws Exception {"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        Tag newTag \u003d new Tag(\"friends\");"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        Tag targetTag \u003d new Tag(\"enemies\");"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        RetagCommand expectedCommand \u003d new RetagCommand(targetTag, newTag);"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"enemies friends\", expectedCommand);"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, \"\\t enemies \\n friends \\t \\n\", expectedCommand);"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":56}},{"path":"src/test/java/systemtests/TagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package systemtests;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.TagCommand.MESSAGE_INVALID_INDEXES;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.TagCommand.MESSAGE_PERSONS_ALREADY_HAVE_TAG;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.TagCommand.MESSAGE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import java.util.StringJoiner;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"public class TagCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    public void tag() throws Exception {"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        Model model \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        /* ----------------- Performing tag operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        /* Case: tag persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"         * and multiple spaces between each argument"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"         * -\u003e tagged"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"         */"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        Index indexOne \u003d INDEX_FIRST_PERSON;"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        Index indexTwo \u003d INDEX_SECOND_PERSON;"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        Tag tag \u003d new Tag(\"tagTester\");"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        String command \u003d \" \" + TagCommand.COMMAND_WORD + \"  \" + indexOne.getOneBased() + \",\" + indexTwo.getOneBased()"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"                + \" \" + \"tagTester\" + \" \";"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        Person firstTaggedPerson \u003d new PersonBuilder(ALICE).withTags(\"friends\", \"retrieveTester\", \"tagTester\").build();"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        Person secondTaggedPerson \u003d new PersonBuilder(BENSON).withTags(\"owesMoney\", \"friends\","},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\", \"tagTester\").build();"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, Arrays.asList(indexOne, indexTwo),"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"                tag, Arrays.asList(firstTaggedPerson, secondTaggedPerson));"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        model.updatePerson("},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), firstTaggedPerson);"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        model.updatePerson("},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"                getModel().getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased()), secondTaggedPerson);"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        /* Case: tag persons, some of whom already have the tag in address book,"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"         * command with leading spaces and trailing spaces and multiple spaces between each argument"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"         * -\u003e tagged"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"         */"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"        tag \u003d new Tag(\"owesMoney\");"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        command \u003d \" \" + TagCommand.COMMAND_WORD + \"  \" + indexOne.getOneBased() + \",\" + indexTwo.getOneBased()"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"                + \" \" + \"owesMoney\" + \" \";"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        firstTaggedPerson \u003d new PersonBuilder(ALICE).withTags(\"friends\", \"retrieveTester\","},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"                \"tagTester\", \"owesMoney\").build();"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"        secondTaggedPerson \u003d new PersonBuilder(BENSON).withTags(\"owesMoney\", \"friends\","},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\", \"tagTester\").build();"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, Arrays.asList(indexOne, indexTwo),"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"                tag, Arrays.asList(firstTaggedPerson, secondTaggedPerson));"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"        /* ------------------ Performing tag operation while a filtered list is being shown ------------------------ */"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"        /* Case: filtered person list, tag index within bounds of address book and person list -\u003e tagged */"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"        // all persons tagged"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        tag \u003d new Tag(\"tagTesterNo2\");"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"        command \u003d \" \" + TagCommand.COMMAND_WORD + \"  \" + indexOne.getOneBased() + \",\" + indexTwo.getOneBased()"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"                + \" \" + \"tagTesterNo2\" + \" \";"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        firstTaggedPerson \u003d new PersonBuilder(BENSON).withTags(\"owesMoney\", \"friends\","},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\", \"tagTester\", \"tagTesterNo2\").build();"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"        secondTaggedPerson \u003d new PersonBuilder(DANIEL).withTags(\"friends\", \"tagTesterNo2\").build();"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, Arrays.asList(indexOne, indexTwo),"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"                tag, Arrays.asList(firstTaggedPerson, secondTaggedPerson));"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"        // some persons already have the tag"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"        tag \u003d new Tag(\"owesMoney\");"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"        command \u003d \" \" + TagCommand.COMMAND_WORD + \"  \" + indexOne.getOneBased() + \",\" + indexTwo.getOneBased()"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"                + \" \" + \"owesMoney\" + \" \";"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"        firstTaggedPerson \u003d new PersonBuilder(BENSON).withTags(\"owesMoney\", \"friends\","},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\", \"tagTester\", \"tagTesterNo2\").build();"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"        secondTaggedPerson \u003d new PersonBuilder(DANIEL).withTags(\"friends\", \"tagTesterNo2\", \"owesMoney\").build();"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, Arrays.asList(indexOne, indexTwo),"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"                tag, Arrays.asList(firstTaggedPerson, secondTaggedPerson));"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"        /* Case: filtered person list, tag index within bounds of address book but out of bounds of person list"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"         * -\u003e rejected"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"         */"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + indexOne.getOneBased() + \",\""},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"                + invalidIndex + \" \" + \"dummyTag\", MESSAGE_INVALID_INDEXES);"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + indexOne.getOneBased() + \",\" + 0 + \" \""},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"                + \"dummyTag\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + indexOne.getOneBased() + \",\" + -1 + \" \""},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":"                + \"dummyTag\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + indexOne.getOneBased() + \",\" + invalidIndex + \" \""},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"                + \"dummyTag\", MESSAGE_INVALID_INDEXES);"},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + \"dummyTag\","},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"        /* Case: invalid tag name -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + indexOne.getOneBased() + \",\""},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"                + indexTwo.getOneBased() + \" \" + \"!@#$\", MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":143,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code TagCommand}.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at indexes {@code targetIndexes}"},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"     * being updated to values specified {@code taggedPersons}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":"     * @param targetIndexes the indexes of the current model\u0027s filtered list."},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":"     * @see TagCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"    private void assertCommandSuccess(String command, List\u003cIndex\u003e targetIndexes,"},{"lineNumber":152,"author":{"gitID":"duyson98"},"content":"                                      Tag tag, List\u003cReadOnlyPerson\u003e taggedPersons) {"},{"lineNumber":153,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":154,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e alreadyTaggedPersons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":155,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e toBeTaggedPersons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":156,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"duyson98"},"content":"            for (int i \u003d 0; i \u003c targetIndexes.size(); i++) {"},{"lineNumber":158,"author":{"gitID":"duyson98"},"content":"                ReadOnlyPerson person \u003d expectedModel.getFilteredPersonList().get("},{"lineNumber":159,"author":{"gitID":"duyson98"},"content":"                        targetIndexes.get(i).getZeroBased());"},{"lineNumber":160,"author":{"gitID":"duyson98"},"content":"                if (person.getTags().contains(tag)) {"},{"lineNumber":161,"author":{"gitID":"duyson98"},"content":"                    alreadyTaggedPersons.add(person);"},{"lineNumber":162,"author":{"gitID":"duyson98"},"content":"                    continue;"},{"lineNumber":163,"author":{"gitID":"duyson98"},"content":"                }"},{"lineNumber":164,"author":{"gitID":"duyson98"},"content":"                toBeTaggedPersons.add(person);"},{"lineNumber":165,"author":{"gitID":"duyson98"},"content":"                expectedModel.updatePerson(person, taggedPersons.get(i));"},{"lineNumber":166,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"duyson98"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":168,"author":{"gitID":"duyson98"},"content":"            throw new IllegalArgumentException("},{"lineNumber":169,"author":{"gitID":"duyson98"},"content":"                    \"taggedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":170,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":172,"author":{"gitID":"duyson98"},"content":"        StringJoiner toBeTaggedJoiner \u003d new StringJoiner(\", \");"},{"lineNumber":173,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : toBeTaggedPersons) {"},{"lineNumber":174,"author":{"gitID":"duyson98"},"content":"            toBeTaggedJoiner.add(person.getName().toString());"},{"lineNumber":175,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"duyson98"},"content":"        if (alreadyTaggedPersons.size() \u003e 0) {"},{"lineNumber":177,"author":{"gitID":"duyson98"},"content":"            StringJoiner alreadyTaggedJoiner \u003d new StringJoiner(\", \");"},{"lineNumber":178,"author":{"gitID":"duyson98"},"content":"            for (ReadOnlyPerson person : alreadyTaggedPersons) {"},{"lineNumber":179,"author":{"gitID":"duyson98"},"content":"                alreadyTaggedJoiner.add(person.getName().toString());"},{"lineNumber":180,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":181,"author":{"gitID":"duyson98"},"content":"            assertCommandSuccess(command, expectedModel, String.format(MESSAGE_SUCCESS,"},{"lineNumber":182,"author":{"gitID":"duyson98"},"content":"                    targetIndexes.size() - alreadyTaggedPersons.size(), tag.toString()) + \" \""},{"lineNumber":183,"author":{"gitID":"duyson98"},"content":"                    + toBeTaggedJoiner.toString() + \"\\n\""},{"lineNumber":184,"author":{"gitID":"duyson98"},"content":"                    + String.format(MESSAGE_PERSONS_ALREADY_HAVE_TAG, alreadyTaggedPersons.size()) + \" \""},{"lineNumber":185,"author":{"gitID":"duyson98"},"content":"                    + alreadyTaggedJoiner.toString());"},{"lineNumber":186,"author":{"gitID":"duyson98"},"content":"        } else {"},{"lineNumber":187,"author":{"gitID":"duyson98"},"content":"            assertCommandSuccess(command, expectedModel, String.format(MESSAGE_SUCCESS,"},{"lineNumber":188,"author":{"gitID":"duyson98"},"content":"                    targetIndexes.size(), tag.toString()) + \" \" + toBeTaggedJoiner.toString());"},{"lineNumber":189,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":192,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"duyson98"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"duyson98"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"duyson98"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"duyson98"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"duyson98"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":198,"author":{"gitID":"duyson98"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"duyson98"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"duyson98"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"duyson98"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":202,"author":{"gitID":"duyson98"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"duyson98"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":204,"author":{"gitID":"duyson98"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":205,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"duyson98"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":207,"author":{"gitID":"duyson98"},"content":"        executeCommand(command);"},{"lineNumber":208,"author":{"gitID":"duyson98"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":209,"author":{"gitID":"duyson98"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":210,"author":{"gitID":"duyson98"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":211,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":213,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"duyson98"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"duyson98"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"duyson98"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"duyson98"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"duyson98"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"duyson98"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":220,"author":{"gitID":"duyson98"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":221,"author":{"gitID":"duyson98"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"duyson98"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":223,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"duyson98"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":225,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":226,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":227,"author":{"gitID":"duyson98"},"content":"        executeCommand(command);"},{"lineNumber":228,"author":{"gitID":"duyson98"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":229,"author":{"gitID":"duyson98"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":230,"author":{"gitID":"duyson98"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":231,"author":{"gitID":"duyson98"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":232,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":234,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":234}},{"path":"src/test/java/seedu/address/logic/parser/SelectReminderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_REMINDER;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.SelectReminderCommand;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"public class SelectReminderCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    private SelectReminderCommandParser parser \u003d new SelectReminderCommandParser();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"        assertParseSuccess(parser, \"1\", new SelectReminderCommand(INDEX_FIRST_REMINDER));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"                        SelectReminderCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"duyson98":4,"cqhchan":11,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertSortSuccess;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"public class SortCommandTest {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public static final int FIRST_PERSON \u003d 0;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    private Model model;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    private Model expectedModel;"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"    private SortCommand sortCommand;"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"        sortCommand \u003d new SortCommand();"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":""},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"    public void execute_sortList_successful() throws Exception {"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"    public void execute_sameFirstPersonBeforeSorted() throws Exception {"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        Person Adeline \u003d new PersonBuilder().withName(\"Adeline\").build();"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        model.addPerson(Adeline);"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(FIRST_PERSON).equals("},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"                expectedModel.getFilteredPersonList().get(FIRST_PERSON)));"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":""},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    public void execute_differentFirstPersonAfterSorted() throws Exception {"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        Person Adeline \u003d new PersonBuilder().withName(\"Adeline\").build();"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        model.addPerson(Adeline);"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        assertSortSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        assertFalse(model.getFilteredPersonList().get(FIRST_PERSON).equals("},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"                expectedModel.getFilteredPersonList().get(FIRST_PERSON)));"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":""},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":62}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":4,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person personInList \u003d new Person(model.getAddressBook().getPersonList().get(0));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":3,"-":53}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.TaskContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"import seedu.address.testutil.EditReminderDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"01/01/1991\";"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"02/02/1992\";"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"    public static final String INVALID_BIRTHDAY_JOHN \u003d \"99/99/9999\";"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"    public static final String VALID_USERNAME_PRIVATE \u003d \"private\";"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    public static final String VALID_PASSWORD_PASSWORD \u003d \"password\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"    public static final String BIRTHDAY_DESC_JOHN \u003d \" \" + PREFIX_BIRTHDAY + INVALID_BIRTHDAY_JOHN;"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"    public static final String USERNAME_DESC_USERNAME \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME_PRIVATE;"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"    public static final String PASSWORD_DESC_PASSWORD \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD_PASSWORD;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"    public static final String INVALID_USERNAME_DESC \u003d \" \" + PREFIX_USERNAME + \"$@#^\u0026\";"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"    public static final String INVALID_PASSWORD_DESC \u003d \" \" + PREFIX_PASSWORD + \" \";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"    public static final String VALID_TASK_PROJECT \u003d \"Project Submission\";"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"    public static final String VALID_TASK_ASSIGNMENT \u003d \"Task assignment\";"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"    public static final String VALID_PRIORITY_PROJECT \u003d \"High\";"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"    public static final String VALID_PRIORITY_ASSIGNMENT \u003d \"Medium\";"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"    public static final String VALID_DATE_PROJECT \u003d \"09/09/2017 09:00\";"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"    public static final String VALID_DATE_ASSIGNMENT \u003d \"10/10/2017 10:00\";"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"    public static final String VALID_MESSAGE_PROJECT \u003d \"Submit to Manager\";"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"    public static final String VALID_MESSAGE_ASSIGNMENT \u003d \"Submit by soft copy\";"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"    public static final String VALID_TAG_OFFICE \u003d \"office\";"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"    public static final String VALID_TAG_SOFTCOPY \u003d \"softcopy\";"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":""},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"    public static final String TASK_DESC_PROJECT \u003d \" \" + PREFIX_TASK + VALID_TASK_PROJECT;"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"    public static final String TASK_DESC_ASSIGNMENT \u003d \" \" + PREFIX_TASK + VALID_TASK_ASSIGNMENT;"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"    public static final String PRIORITY_DESC_PROJECT \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PROJECT;"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"    public static final String PRIORITY_DESC_ASSIGNMENT \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_ASSIGNMENT;"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"    public static final String DATE_DESC_PROJECT \u003d \" \" + PREFIX_DATE + VALID_DATE_PROJECT;"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"    public static final String DATE_DESC_ASSIGNMENT \u003d \" \" + PREFIX_DATE + VALID_DATE_ASSIGNMENT;"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_DESC_PROJECT \u003d \" \" + PREFIX_MESSAGE + VALID_MESSAGE_PROJECT;"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_DESC_ASSIGNMENT \u003d \" \" + PREFIX_MESSAGE + VALID_MESSAGE_ASSIGNMENT;"},{"lineNumber":99,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"    public static final String TAG_DESC_OFFICE \u003d \" \" + PREFIX_TAG + VALID_TAG_OFFICE;"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"    public static final String TAG_DESC_SOFTCOPY \u003d \" \" + PREFIX_TAG + VALID_TAG_SOFTCOPY;"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":"    public static final String INVALID_TASK_DESC \u003d \" \" + PREFIX_TASK + \"Submission\u0026\"; // \u0027\u0026\u0027 not allowed in tasks"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"low1\"; // \u00271\u0027 not allowed in priorities"},{"lineNumber":104,"author":{"gitID":"inGall"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"0!\"; // \u0027!\u0027 not allowed in dates"},{"lineNumber":105,"author":{"gitID":"inGall"},"content":""},{"lineNumber":106,"author":{"gitID":"inGall"},"content":"    public static final EditReminderCommand.EditReminderDescriptor DESC_PROJECT;"},{"lineNumber":107,"author":{"gitID":"inGall"},"content":"    public static final EditReminderCommand.EditReminderDescriptor DESC_ASSIGNMENT;"},{"lineNumber":108,"author":{"gitID":"inGall"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"inGall"},"content":"    static {"},{"lineNumber":119,"author":{"gitID":"inGall"},"content":"        DESC_PROJECT \u003d new EditReminderDescriptorBuilder().withTask(VALID_TASK_PROJECT)"},{"lineNumber":120,"author":{"gitID":"inGall"},"content":"                .withPriority(VALID_PRIORITY_PROJECT).withDate(VALID_DATE_PROJECT).withMessage(VALID_MESSAGE_PROJECT)"},{"lineNumber":121,"author":{"gitID":"inGall"},"content":"                .withTags(VALID_TAG_OFFICE).build();"},{"lineNumber":122,"author":{"gitID":"inGall"},"content":"        DESC_ASSIGNMENT \u003d new EditReminderDescriptorBuilder().withTask(VALID_TASK_ASSIGNMENT)"},{"lineNumber":123,"author":{"gitID":"inGall"},"content":"                .withPriority(VALID_PRIORITY_ASSIGNMENT).withDate(VALID_DATE_ASSIGNMENT)"},{"lineNumber":124,"author":{"gitID":"inGall"},"content":"                .withMessage(VALID_MESSAGE_ASSIGNMENT).withTags(VALID_TAG_OFFICE, VALID_TAG_SOFTCOPY).build();"},{"lineNumber":125,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"inGall"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":152,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"inGall"},"content":"    //@@author inGall"},{"lineNumber":166,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"inGall"},"content":"     * @param command"},{"lineNumber":168,"author":{"gitID":"inGall"},"content":"     * @param actualModel"},{"lineNumber":169,"author":{"gitID":"inGall"},"content":"     * @param expectedMessage"},{"lineNumber":170,"author":{"gitID":"inGall"},"content":"     * @param expectedModel"},{"lineNumber":171,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"inGall"},"content":"    public static void assertSortSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":173,"author":{"gitID":"inGall"},"content":"                                         Model expectedModel) {"},{"lineNumber":174,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":175,"author":{"gitID":"inGall"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":176,"author":{"gitID":"inGall"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":177,"author":{"gitID":"inGall"},"content":"            assertNotEquals(expectedModel, actualModel);"},{"lineNumber":178,"author":{"gitID":"inGall"},"content":"        } catch (CommandException ce) {"},{"lineNumber":179,"author":{"gitID":"inGall"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":180,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"inGall"},"content":"    //@@author"},{"lineNumber":183,"author":{"gitID":"inGall"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public static void showFirstPersonOnly(Model model) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"duyson98"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first reminder in the {@code model}\u0027s address book."},{"lineNumber":197,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"duyson98"},"content":"    public static void showFirstReminderOnly(Model model) {"},{"lineNumber":199,"author":{"gitID":"duyson98"},"content":"        ReadOnlyReminder reminder \u003d model.getAddressBook().getReminderList().get(0);"},{"lineNumber":200,"author":{"gitID":"duyson98"},"content":"        final String[] splitTask \u003d reminder.getTask().taskName.split(\"\\\\s+\");"},{"lineNumber":201,"author":{"gitID":"duyson98"},"content":"        model.updateFilteredReminderList(new TaskContainsKeywordsPredicate(Arrays.asList(splitTask[0])));"},{"lineNumber":202,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":203,"author":{"gitID":"duyson98"},"content":"        assert model.getFilteredReminderList().size() \u003d\u003d 1;"},{"lineNumber":204,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":206,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"duyson98"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first and second persons"},{"lineNumber":208,"author":{"gitID":"duyson98"},"content":"     * in the {@code model}\u0027s address book."},{"lineNumber":209,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"duyson98"},"content":"    public static void showFirstAndSecondPersonsOnly(Model model) {"},{"lineNumber":211,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson firstPerson \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":212,"author":{"gitID":"duyson98"},"content":"        final String[] splitFirstName \u003d firstPerson.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":213,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson secondPerson \u003d model.getAddressBook().getPersonList().get(1);"},{"lineNumber":214,"author":{"gitID":"duyson98"},"content":"        final String[] splitSecondName \u003d secondPerson.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":215,"author":{"gitID":"duyson98"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate("},{"lineNumber":216,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(splitFirstName[0], splitSecondName[0])));"},{"lineNumber":217,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":218,"author":{"gitID":"duyson98"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 2;"},{"lineNumber":219,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":53,"duyson98":42,"cqhchan":9,"-":128}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":2,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/RetrieveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.RetrieveCommand.MESSAGE_NOT_FOUND;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import java.util.StringJoiner;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.TagContainsKeywordPredicate;"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":" * Contains integration tests (interaction with the Model) for {@code RetrieveCommand}."},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"public class RetrieveCommandTest {"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    public void equals() throws Exception {"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        TagContainsKeywordPredicate predicate \u003d new TagContainsKeywordPredicate(new Tag(\"friends\"));"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        RetrieveCommand command \u003d new RetrieveCommand(predicate);"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        // same value -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(new RetrieveCommand(predicate)));"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        // same object -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        // different type -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(new ClearCommand()));"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        // different tag name -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(new RetrieveCommand(new TagContainsKeywordPredicate(new Tag(\"family\")))));"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    public void execute_noPersonFound() throws Exception {"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        StringJoiner joiner \u003d new StringJoiner(\", \");"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        for (Tag tag: model.getAddressBook().getTagList()) {"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"            joiner.add(tag.toString());"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(MESSAGE_NOT_FOUND, joiner.toString());"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        RetrieveCommand command \u003d prepareCommand(\"thisTag\");"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"    public void execute_multiplePersonsFound() throws Exception {"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        RetrieveCommand command \u003d prepareCommand(\"retrieveTester\");"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"     * Parses {@code userInput} into a {@code RetrieveCommand}."},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"    private RetrieveCommand prepareCommand(String userInput) throws Exception {"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"        if (userInput.isEmpty()) {"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"            RetrieveCommand command \u003d new RetrieveCommand(new TagContainsKeywordPredicate(new Tag(userInput)));"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"        RetrieveCommand command \u003d new RetrieveCommand(new TagContainsKeywordPredicate(new Tag(userInput)));"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"        return command;"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"    public void assertCommandSuccess(RetrieveCommand command, String expectedMessage,"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"                                     List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":106}},{"path":"src/test/java/seedu/address/logic/commands/BirthdayCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":""},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":" * Contains integration tests (interaction with the Model) and unit tests for BirthdayCommand."},{"lineNumber":33,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"public class BirthdayCommandTest {"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":""},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"    public void execute_addBirthday_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        Person editedPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"        editedPerson.setBirthday(new Birthday(\"01/01/1991\"));"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":""},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        BirthdayCommand birthdayCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getBirthday().value);"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(BirthdayCommand.MESSAGE_ADD_BIRTHDAY_SUCCESS, editedPerson);"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":""},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":""},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(birthdayCommand, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":""},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"    public void execute_deleteBirthday_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        Person editedPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        editedPerson.setBirthday(new Birthday(\"\"));"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":""},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        BirthdayCommand birthdayCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getBirthday().toString());"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":""},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(BirthdayCommand.MESSAGE_DELETE_BIRTHDAY_SUCCESS, editedPerson);"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":""},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":""},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(birthdayCommand, model, expectedMessage, expectedModel);"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":""},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        BirthdayCommand birthdayCommand \u003d prepareCommand(outOfBoundIndex, VALID_BIRTHDAY_BOB);"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":""},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(birthdayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":""},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"     * but smaller than size of address book"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"     * */"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":""},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"        BirthdayCommand birthdayCommand \u003d prepareCommand(outOfBoundIndex, VALID_BIRTHDAY_BOB);"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":""},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(birthdayCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"inGall"},"content":""},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"    public void equals() throws Exception {"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":"        final BirthdayCommand standardCommand \u003d new BirthdayCommand(INDEX_FIRST_PERSON,"},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"                new Birthday(VALID_BIRTHDAY_AMY));"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":""},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        // same values -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"        BirthdayCommand commandWithSameValues \u003d new BirthdayCommand(INDEX_FIRST_PERSON,"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"                new Birthday(VALID_BIRTHDAY_AMY));"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":103,"author":{"gitID":"inGall"},"content":""},{"lineNumber":104,"author":{"gitID":"inGall"},"content":"        // same object -\u003e returns true"},{"lineNumber":105,"author":{"gitID":"inGall"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":106,"author":{"gitID":"inGall"},"content":""},{"lineNumber":107,"author":{"gitID":"inGall"},"content":"        // null -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"inGall"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":109,"author":{"gitID":"inGall"},"content":""},{"lineNumber":110,"author":{"gitID":"inGall"},"content":"        // different types -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"inGall"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":112,"author":{"gitID":"inGall"},"content":""},{"lineNumber":113,"author":{"gitID":"inGall"},"content":"        // different index -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"inGall"},"content":"        assertFalse(standardCommand.equals(new BirthdayCommand(INDEX_SECOND_PERSON, new Birthday(VALID_BIRTHDAY_AMY))));"},{"lineNumber":115,"author":{"gitID":"inGall"},"content":""},{"lineNumber":116,"author":{"gitID":"inGall"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"inGall"},"content":"        assertFalse(standardCommand.equals(new BirthdayCommand(INDEX_FIRST_PERSON, new Birthday(VALID_BIRTHDAY_BOB))));"},{"lineNumber":118,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"inGall"},"content":""},{"lineNumber":120,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"inGall"},"content":"     * Returns an {@code BirthdayCommand} with parameters {@code index} and {@code birthday}"},{"lineNumber":122,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"inGall"},"content":"    private BirthdayCommand prepareCommand(Index index, String birthday) throws IllegalValueException {"},{"lineNumber":124,"author":{"gitID":"inGall"},"content":"        BirthdayCommand birthdayCommand \u003d new BirthdayCommand(index, new Birthday(birthday));"},{"lineNumber":125,"author":{"gitID":"inGall"},"content":"        birthdayCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":126,"author":{"gitID":"inGall"},"content":"        return birthdayCommand;"},{"lineNumber":127,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":128}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":4,"-":64}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":3,"-":53}},{"path":"src/test/java/seedu/address/logic/commands/RetagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.RetagCommand.MESSAGE_SUCCESS;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.RetagCommand.MESSAGE_TAG_NOT_FOUND;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"public class RetagCommandTest {"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    public void execute_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        Tag targetTag \u003d new Tag(\"friends\");"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        Tag newTag \u003d new Tag(\"enemies\");"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        RetagCommand command \u003d prepareCommand(targetTag, newTag);"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, targetTag.toString(), newTag.toString());"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : expectedModel.getFilteredPersonList()) {"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"            Person retaggedPerson \u003d new Person(person);"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"            UniqueTagList updatedTags \u003d new UniqueTagList(retaggedPerson.getTags());"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"            if (updatedTags.contains(targetTag)) {"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"                updatedTags.remove(targetTag);"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"                updatedTags.add(newTag);"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"            retaggedPerson.setTags(updatedTags.toSet());"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"            expectedModel.updatePerson(person, retaggedPerson);"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(targetTag);"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"    public void execute_tagNotFound() throws Exception {"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        Tag targetTag \u003d new Tag(\"enemies\");"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        Tag newTag \u003d new Tag(\"friends\");"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        RetagCommand command \u003d prepareCommand(targetTag, newTag);"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TAG_NOT_FOUND, targetTag.toString());"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(command, model, expectedMessage);"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"    public void equals() throws Exception {"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        Tag targetTag \u003d new Tag(\"enemies\");"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"        Tag newTag \u003d new Tag(\"friends\");"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        RetagCommand command \u003d new RetagCommand(targetTag, newTag);"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        // same value -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(new RetagCommand(targetTag, newTag)));"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"        // different type -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(new ClearCommand()));"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"        // different tag name -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"        Tag anotherTag \u003d new Tag(\"partners\");"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(new RetagCommand(targetTag, anotherTag)));"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"     * Parses {@code userInput} into a {@code RetagCommand}."},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"    private RetagCommand prepareCommand(Tag targetTag, Tag newTag) throws Exception {"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"        RetagCommand command \u003d new RetagCommand(targetTag, newTag);"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":99}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":2,"-":140}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":2,"-":97}},{"path":"src/test/java/seedu/address/logic/commands/SortAgeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertSortSuccess;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"public class SortAgeCommandTest {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    public static final int FIRST_PERSON \u003d 0;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public static final int SECOND_PERSON \u003d 1;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    public static final int THIRD_PERSON \u003d 2;"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":""},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"    private Model expectedModel;"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    private SortAgeCommand sortAgeCommand;"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":""},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        sortAgeCommand \u003d new SortAgeCommand();"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"        sortAgeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":""},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"    public void execute_sortList_successful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(sortAgeCommand, model, SortAgeCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":""},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"    public void execute_sameFirstPersonBeforeSorted() throws Exception {"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        Person Adeline \u003d new PersonBuilder().withName(\"Adeline\").withBirthday(\"05/05/1995\").build();"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        model.addPerson(Adeline);"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(FIRST_PERSON).equals("},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"                expectedModel.getFilteredPersonList().get(FIRST_PERSON)));"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":""},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"    public void execute_differentFirstPersonAfterSorted() throws Exception {"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        Person Adeline \u003d new PersonBuilder().withName(\"Adeline\").withBirthday(\"05/05/1995\").build();"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        model.addPerson(Adeline);"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        assertSortSuccess(sortAgeCommand, model, SortAgeCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(FIRST_PERSON).equals(Adeline));"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":""},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"    public void execute_listWithMultipleBirthdaysAfterSorted() throws Exception {"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        Person Adeline \u003d new PersonBuilder().withName(\"Adeline\").withBirthday(\"05/05/1995\").build();"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        Person Jamie \u003d new PersonBuilder().withName(\"Jamie\").withBirthday(\"08/02/1995\").build();"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"        Person Tom \u003d new PersonBuilder().withName(\"Tom\").withBirthday(\"08/08/1992\").build();"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        model.addPerson(Adeline);"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"        model.addPerson(Jamie);"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        model.addPerson(Tom);"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"        assertSortSuccess(sortAgeCommand, model, SortAgeCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(FIRST_PERSON).equals(Tom));"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(SECOND_PERSON).equals(Jamie));"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(THIRD_PERSON).equals(Adeline));"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":""},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":76}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"cqhchan"},"content":"        public boolean checkAccount(ReadOnlyAccount account) {"},{"lineNumber":112,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":113,"author":{"gitID":"cqhchan"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"cqhchan"},"content":"        public void addAccount(ReadOnlyAccount account) throws DuplicateAccountException {"},{"lineNumber":118,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":119,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"        public void addReminder(ReadOnlyReminder newData) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"inGall"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"cqhchan"},"content":"        public void resetDatabase(ReadOnlyDatabase newData) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"cqhchan"},"content":"        public ReadOnlyDatabase getDatabase() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"cqhchan"},"content":"        public void deleteAccount(ReadOnlyAccount account) throws PersonNotFoundException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":157,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"cqhchan"},"content":"        public void deleteReminder(ReadOnlyReminder target) throws ReminderNotFoundException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"cqhchan"},"content":"        public void updateAccount(ReadOnlyAccount account, ReadOnlyAccount editedAccount)"},{"lineNumber":169,"author":{"gitID":"cqhchan"},"content":"                throws DuplicateAccountException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":173,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":174,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"duyson98"},"content":"        public void updateReminder(ReadOnlyReminder target, ReadOnlyReminder editedReminder)"},{"lineNumber":176,"author":{"gitID":"cqhchan"},"content":"                throws DuplicateReminderException {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"duyson98"},"content":"        public void deleteUnusedTag(Tag tag) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":183,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"cqhchan"},"content":"        public ObservableList\u003cReadOnlyAccount\u003e getFilteredAccountList() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":198,"author":{"gitID":"inGall"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"inGall"},"content":"        public ObservableList\u003cReadOnlyReminder\u003e getFilteredReminderList() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":207,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"inGall"},"content":""},{"lineNumber":209,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":210,"author":{"gitID":"cqhchan"},"content":"        public void updateFilteredAccountList(Predicate\u003cReadOnlyAccount\u003e predicate) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":212,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":214,"author":{"gitID":"inGall"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"duyson98"},"content":"        public void updateFilteredReminderList(Predicate\u003cReadOnlyReminder\u003e predicate) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"cqhchan"},"content":"        public void deletePersonTag(Tag tag) {"},{"lineNumber":221,"author":{"gitID":"inGall"},"content":"            fail(\"This metthod should not be called.\");"},{"lineNumber":222,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"inGall"},"content":""},{"lineNumber":224,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"cqhchan"},"content":"        public void deleteReminderTag(Tag tag) {"},{"lineNumber":226,"author":{"gitID":"inGall"},"content":"            fail(\"This metthod should not be called.\");"},{"lineNumber":227,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"inGall"},"content":""},{"lineNumber":229,"author":{"gitID":"duyson98"},"content":"        public Boolean checkIfPersonListEmpty(ArrayList\u003cReadOnlyPerson\u003e contactList) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":231,"author":{"gitID":"inGall"},"content":"            return false;"},{"lineNumber":232,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"inGall"},"content":""},{"lineNumber":234,"author":{"gitID":"cqhchan"},"content":"        public Boolean checkIfReminderListEmpty(ArrayList\u003cReadOnlyReminder\u003e reminderList) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":236,"author":{"gitID":"inGall"},"content":"            return false;"},{"lineNumber":237,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"inGall"},"content":""},{"lineNumber":239,"author":{"gitID":"inGall"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"inGall"},"content":"        public void sortListByName(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":242,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"inGall"},"content":""},{"lineNumber":244,"author":{"gitID":"inGall"},"content":"        @Override"},{"lineNumber":245,"author":{"gitID":"inGall"},"content":"        public void sortListByBirthday(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":250,"author":{"gitID":"inGall"},"content":"        public void sortListByAge(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":252,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"inGall"},"content":""},{"lineNumber":254,"author":{"gitID":"inGall"},"content":"        @Override"},{"lineNumber":255,"author":{"gitID":"inGall"},"content":"        public void sortListByPriority(ArrayList\u003cReadOnlyReminder\u003e contactList)  throws CommandException {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":277,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":34,"cqhchan":43,"duyson98":8,"-":207}},{"path":"src/test/java/seedu/address/logic/commands/LogoutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import org.junit.Rule;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"public class LogoutCommandTest {"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"    public void execute_exit_success() {"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"        CommandResult result \u003d new LogoutCommand().execute();"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":18}},{"path":"src/test/java/seedu/address/logic/parser/AddReminderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_ASSIGNMENT;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PROJECT;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_DESC;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MESSAGE_DESC_ASSIGNMENT;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MESSAGE_DESC_PROJECT;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_ASSIGNMENT;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_OFFICE;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SOFTCOPY;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_ASSIGNMENT;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DESC_PROJECT;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ASSIGNMENT;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PROJECT;"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_ASSIGNMENT;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_PROJECT;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_ASSIGNMENT;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_OFFICE;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SOFTCOPY;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_ASSIGNMENT;"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PROJECT;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Date;"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Priority;"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Task;"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"public class AddReminderCommandParserTest {"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    private AddReminderCommandParser parser \u003d new AddReminderCommandParser();"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        Reminder expectedReminder \u003d new ReminderBuilder().withTask(VALID_TASK_ASSIGNMENT)"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"                .withPriority(VALID_PRIORITY_ASSIGNMENT).withDate(VALID_DATE_ASSIGNMENT)"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"                .withMessage(VALID_MESSAGE_ASSIGNMENT).withTags(VALID_TAG_SOFTCOPY).build();"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        // multiple task names - last task name accepted"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_PROJECT + TASK_DESC_ASSIGNMENT"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"                + TAG_DESC_SOFTCOPY, new AddReminderCommand(expectedReminder));"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        // multiple priorities - last priority accepted"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_PROJECT + PRIORITY_DESC_ASSIGNMENT + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"                + TAG_DESC_SOFTCOPY, new AddReminderCommand(expectedReminder));"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        // multiple dates - last date accepted"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + DATE_DESC_PROJECT + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"                + TAG_DESC_SOFTCOPY, new AddReminderCommand(expectedReminder));"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        // multiple messages - last message accepted"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_PROJECT + MESSAGE_DESC_ASSIGNMENT"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"                + TAG_DESC_SOFTCOPY, new AddReminderCommand(expectedReminder));"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"        // multiple tags - all accepted"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        Reminder expectedReminderMultipleTags \u003d new ReminderBuilder().withTask(VALID_TASK_ASSIGNMENT)"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"                .withPriority(VALID_PRIORITY_ASSIGNMENT).withDate(VALID_DATE_ASSIGNMENT)"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"                .withMessage(VALID_MESSAGE_ASSIGNMENT).withTags(VALID_TAG_OFFICE, VALID_TAG_SOFTCOPY).build();"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT + TAG_DESC_SOFTCOPY"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"                + TAG_DESC_OFFICE, new AddReminderCommand(expectedReminderMultipleTags));"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"        // zero tags"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"        Reminder expectedReminder \u003d new ReminderBuilder().withTask(VALID_TASK_PROJECT)"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"                .withPriority(VALID_PRIORITY_PROJECT).withDate(VALID_DATE_PROJECT).withMessage(VALID_MESSAGE_PROJECT)"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"                .withTags().build();"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"        assertParseSuccess(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_PROJECT + PRIORITY_DESC_PROJECT"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"                + DATE_DESC_PROJECT + MESSAGE_DESC_PROJECT, new AddReminderCommand(expectedReminder));"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE);"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        // missing task name prefix"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + VALID_TASK_ASSIGNMENT"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT, expectedMessage);"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"        // missing priority prefix"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"                + VALID_PRIORITY_ASSIGNMENT + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT, expectedMessage);"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"        // missing date prefix"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + VALID_DATE_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT, expectedMessage);"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"        // missing message prefix"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + DATE_DESC_ASSIGNMENT + VALID_MESSAGE_ASSIGNMENT, expectedMessage);"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        // all prefixes missing"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + VALID_TASK_ASSIGNMENT"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"                + VALID_PRIORITY_ASSIGNMENT + VALID_DATE_ASSIGNMENT + VALID_MESSAGE_ASSIGNMENT, expectedMessage);"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"        // invalid task name"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + INVALID_TASK_DESC"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT + TAG_DESC_OFFICE"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"                + TAG_DESC_SOFTCOPY, Task.MESSAGE_TASK_NAME_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"        // invalid priority"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"                + INVALID_PRIORITY_DESC + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT + TAG_DESC_OFFICE"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"                + TAG_DESC_SOFTCOPY, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"        // invalid date"},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + INVALID_DATE_DESC + MESSAGE_DESC_ASSIGNMENT + TAG_DESC_OFFICE"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":"                + TAG_DESC_SOFTCOPY, Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":"        // invalid tag"},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + TASK_DESC_ASSIGNMENT"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"                + PRIORITY_DESC_ASSIGNMENT + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT + INVALID_TAG_DESC"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"                + VALID_TAG_SOFTCOPY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":"        assertParseFailure(parser, AddReminderCommand.COMMAND_WORD + INVALID_TASK_DESC + INVALID_PRIORITY_DESC"},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"                + DATE_DESC_ASSIGNMENT + MESSAGE_DESC_ASSIGNMENT, Task.MESSAGE_TASK_NAME_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":142}},{"path":"src/test/java/seedu/address/logic/commands/AddReminderCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalReminders.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":" * Contains integration tests (interaction with the Model) for {@code AddReminderCommand}."},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"public class AddReminderCommandIntegrationTest {"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    private Model model;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"    public void execute_newReminder_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        Reminder validReminder \u003d new ReminderBuilder().build();"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        expectedModel.addReminder(validReminder);"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(prepareCommand(validReminder, model), model,"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"                String.format(AddReminderCommand.MESSAGE_SUCCESS, validReminder), expectedModel);"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    public void execute_duplicateReminder_throwsCommandException() {"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        Reminder reminderInList \u003d new Reminder(model.getAddressBook().getReminderList().get(0));"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(prepareCommand(reminderInList, model), model,"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"                AddReminderCommand.MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"     * Generates a new {@code AddReminderCommand} which upon execution, adds {@code reminder} into the {@code model}."},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"    private AddReminderCommand prepareCommand(Reminder reminder, Model model) {"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        AddReminderCommand command \u003d new AddReminderCommand(reminder);"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        return command;"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":59}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"        XmlDatabaseStorage databaseStorage \u003d new XmlDatabaseStorage(getTempFilePath(\"ab\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, databaseStorage);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":49,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"                new JsonUserPrefsStorage(\"dummy\"),"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"                new XmlDatabaseStorageExceptionThrowingStub(\"dummy\"));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"    class XmlDatabaseStorageExceptionThrowingStub extends XmlDatabaseStorage {"},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":"        public XmlDatabaseStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"cqhchan"},"content":"        public void saveDatabase(ReadOnlyDatabase database, String filePath) throws IOException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":9,"-":107}},{"path":"src/test/java/seedu/address/logic/commands/FindReminderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_REMINDERS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.BIRTHDAY;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.GATHERING;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.MEETING;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.TaskContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":" * Contains integration tests (interaction with the Model) for {@code FindReminderCommand}."},{"lineNumber":31,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"public class FindReminderCommandTest {"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":""},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        TaskContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"                new TaskContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"        TaskContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"                new TaskContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        FindReminderCommand findFirstReminderCommand \u003d new FindReminderCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        FindReminderCommand findSecondReminderCommand \u003d new FindReminderCommand(secondPredicate);"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        assertTrue(findFirstReminderCommand.equals(findFirstReminderCommand));"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":""},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        // same values -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        FindReminderCommand findFirstReminderCommandCopy \u003d new FindReminderCommand(firstPredicate);"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        assertTrue(findFirstReminderCommand.equals(findFirstReminderCommandCopy));"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":""},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstReminderCommand.equals(1));"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":""},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstReminderCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":""},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        // different reminder -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstReminderCommand.equals(findSecondReminderCommand));"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":""},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"    public void execute_zeroKeywords_noReminderFound() {"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMINDERS_LISTED_OVERVIEW, 0);"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        FindReminderCommand command \u003d prepareCommand(\" \");"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":""},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"    public void execute_multipleKeywords_multipleRemindersFound() {"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMINDERS_LISTED_OVERVIEW, 3);"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        FindReminderCommand command \u003d prepareCommand(\"birthday Gathering Meeting\");"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BIRTHDAY, GATHERING, MEETING));"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":""},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"     * Parses {@code userInput} into a {@code FindReminderCommand}."},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"    private FindReminderCommand prepareCommand(String userInput) {"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"        FindReminderCommand command \u003d"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"                new FindReminderCommand(new TaskContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"        return command;"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":""},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"     *     - the {@code FilteredList\u003cReadOnlyReminder\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":"    private void assertCommandSuccess(FindReminderCommand command, String expectedMessage,"},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"                                      List\u003cReadOnlyReminder\u003e expectedList) {"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":""},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedList, model.getFilteredReminderList());"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":101}},{"path":"src/test/java/seedu/address/logic/commands/LoginCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Database;"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"public class LoginCommandTest {"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    public void equals() throws Exception {"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"        LoginCommand findFirstCommand \u003d prepareCommand(\"private\", \"password\");"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"        LoginCommand findSecondCommand \u003d prepareCommand(\"Bro\", \"password\");"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"        LoginCommand findThirdCommand \u003d prepareCommand(\"Bro\", \"123\");"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"        assertTrue(findSecondCommand.equals(findSecondCommand));"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        assertTrue(findThirdCommand.equals(findThirdCommand));"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"        // different objects -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        LoginCommand findFirstCommandCopy \u003d prepareCommand(\"private\", \"password\");"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        assertFalse(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"        // different person -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"        assertFalse(findSecondCommand.equals(findThirdCommand));"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"    public void execute_invalidLogin() throws Exception {"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"        String expectedMessage \u003d String.format(LoginCommand.MESSAGE_FAILURE, 0);"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"        LoginCommand command \u003d prepareCommand(\"unknown\", \"unknown\");"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        assertTrue(commandResult.feedbackToUser.equals(expectedMessage));"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"    public void execute_validLogin() throws Exception {"},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":"        String expectedMessage \u003d String.format(LoginCommand.MESSAGE_SUCCESS, 0);"},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"        LoginCommand command \u003d prepareCommand(\"private\", \"password\");"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"        assertTrue(commandResult.feedbackToUser.equals(expectedMessage));"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":"    private LoginCommand prepareCommand(String userInput, String userPassword) throws Exception {"},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"        LoginCommand command \u003d"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"                new LoginCommand(new Account(new Username(userInput), new Password(userPassword)));"},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":"        return command;"},{"lineNumber":89,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":90,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":92,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"cqhchan"},"content":"    private void assertCommandSuccess(LoginCommand command,"},{"lineNumber":99,"author":{"gitID":"cqhchan"},"content":"                                      String expectedMessage, List\u003cReadOnlyAccount\u003e expectedList) {"},{"lineNumber":100,"author":{"gitID":"cqhchan"},"content":"        Database expectedDatabase \u003d new Database(model.getDatabase());"},{"lineNumber":101,"author":{"gitID":"cqhchan"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":"        assertEquals(expectedList, model.getFilteredAccountList());"},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":"        assertEquals(expectedDatabase, model.getDatabase());"},{"lineNumber":106,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":108,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":108}},{"path":"src/test/java/seedu/address/logic/commands/TagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstAndSecondPersonsOnly;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.TagCommand.MESSAGE_INVALID_INDEXES;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"public class TagCommandTest {"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        PersonBuilder firstPersonInList \u003d new PersonBuilder(ALICE);"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        Person firstTaggedPerson \u003d firstPersonInList.withTags(\"friends\", \"retrieveTester\", \"tagTester\").build();"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        PersonBuilder secondPersonInList \u003d new PersonBuilder(BENSON);"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        Person secondTaggedPerson \u003d secondPersonInList.withTags(\"owesMoney\", \"friends\","},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\", \"tagTester\").build();"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        Tag tag \u003d new Tag(\"tagTester\");"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        TagCommand command \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), tag);"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, 2, tag.toString()) + \" \""},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"                + firstTaggedPerson.getName().toString() + \", \""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"                + secondTaggedPerson.getName().toString();"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstTaggedPerson);"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondTaggedPerson);"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"    public void execute_unfilteredListContainsPersonsWithTag_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        PersonBuilder firstPersonInList \u003d new PersonBuilder(ALICE);"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        Person firstTaggedPerson \u003d firstPersonInList.withTags(\"friends\", \"retrieveTester\", \"owesMoney\").build();"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        PersonBuilder secondPersonInList \u003d new PersonBuilder(BENSON);"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        Person secondTaggedPerson \u003d secondPersonInList.withTags(\"owesMoney\", \"friends\", \"retrieveTester\").build();"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        Tag tag \u003d new Tag(\"owesMoney\");"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        TagCommand command \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), tag);"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, 1, tag.toString()) + \" \""},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"                + firstTaggedPerson.getName().toString() + \"\\n\""},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"                + String.format(TagCommand.MESSAGE_PERSONS_ALREADY_HAVE_TAG, 1) + \" \""},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"                + secondTaggedPerson.getName().toString();"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstTaggedPerson);"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondTaggedPerson);"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(model);"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson firstPersonInList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"        Person firstTaggedPerson \u003d new PersonBuilder(firstPersonInList).withTags(\"friends\","},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\", \"tagTester\").build();"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson secondPersonInList \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        Person secondTaggedPerson \u003d new PersonBuilder(secondPersonInList).withTags(\"owesMoney\", \"friends\","},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\", \"tagTester\").build();"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"        Tag tag \u003d new Tag(\"tagTester\");"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        TagCommand command \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), tag);"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, 2, tag.toString()) + \" \""},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"                + firstTaggedPerson.getName().toString() + \", \""},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"                + secondTaggedPerson.getName().toString();"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstTaggedPerson);"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondTaggedPerson);"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(expectedModel);"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"    public void execute_filteredListContainsPersonsWithTag_success() throws Exception {"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(model);"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson firstPersonInList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"        Person firstTaggedPerson \u003d new PersonBuilder(firstPersonInList).withTags(\"friends\","},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\", \"owesMoney\").build();"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson secondPersonInList \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"        Person secondTaggedPerson \u003d new PersonBuilder(secondPersonInList).withTags(\"owesMoney\", \"friends\","},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\").build();"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"        Tag tag \u003d new Tag(\"owesMoney\");"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"        TagCommand command \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), tag);"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_SUCCESS, 1, tag.toString()) + \" \""},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"                + firstTaggedPerson.getName().toString() + \"\\n\""},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"                + String.format(TagCommand.MESSAGE_PERSONS_ALREADY_HAVE_TAG, 1) + \" \""},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"                + secondTaggedPerson.getName().toString();"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstTaggedPerson);"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondTaggedPerson);"},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(expectedModel);"},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"    public void execute_invalidPersonIndexesUnfilteredList_failure() throws Exception {"},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":"        Index outOfBound \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"        TagCommand command \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON, outOfBound), new Tag(\"tagTester\"));"},{"lineNumber":141,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(command, model, MESSAGE_INVALID_INDEXES);"},{"lineNumber":143,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":"    public void execute_invalidPersonIndexesFilteredList_failure() throws Exception {"},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(model);"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":152,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":153,"author":{"gitID":"duyson98"},"content":"        TagCommand command \u003d prepareCommand(Arrays.asList(INDEX_FIRST_PERSON, outOfBoundIndex), new Tag(\"tagTester\"));"},{"lineNumber":154,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":155,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(command, model, MESSAGE_INVALID_INDEXES);"},{"lineNumber":156,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":158,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"duyson98"},"content":"    public void equals() throws Exception {"},{"lineNumber":160,"author":{"gitID":"duyson98"},"content":"        final List\u003cIndex\u003e indexList \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);"},{"lineNumber":161,"author":{"gitID":"duyson98"},"content":"        final Tag tag \u003d new Tag(\"dummyTag\");"},{"lineNumber":162,"author":{"gitID":"duyson98"},"content":"        final TagCommand command \u003d new TagCommand(indexList, tag);"},{"lineNumber":163,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":164,"author":{"gitID":"duyson98"},"content":"        // same values -\u003e returns true"},{"lineNumber":165,"author":{"gitID":"duyson98"},"content":"        final List\u003cIndex\u003e indexListCopy \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);"},{"lineNumber":166,"author":{"gitID":"duyson98"},"content":"        final Tag tagCopy \u003d new Tag(\"dummyTag\");"},{"lineNumber":167,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(new TagCommand(indexListCopy, tagCopy)));"},{"lineNumber":168,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":169,"author":{"gitID":"duyson98"},"content":"        // same object -\u003e returns true"},{"lineNumber":170,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":171,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":172,"author":{"gitID":"duyson98"},"content":"        // null -\u003e returns false"},{"lineNumber":173,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":174,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":175,"author":{"gitID":"duyson98"},"content":"        // different types -\u003e returns false"},{"lineNumber":176,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(new ClearCommand()));"},{"lineNumber":177,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":178,"author":{"gitID":"duyson98"},"content":"        // different index list -\u003e returns false"},{"lineNumber":179,"author":{"gitID":"duyson98"},"content":"        final List\u003cIndex\u003e anotherIndexList \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_THIRD_PERSON);"},{"lineNumber":180,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(new TagCommand(anotherIndexList, tag)));"},{"lineNumber":181,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":182,"author":{"gitID":"duyson98"},"content":"        // different tag -\u003e returns false"},{"lineNumber":183,"author":{"gitID":"duyson98"},"content":"        final Tag anotherTag \u003d new Tag(\"anotherTag\");"},{"lineNumber":184,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(new TagCommand(indexList, anotherTag)));"},{"lineNumber":185,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":187,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"duyson98"},"content":"     * Returns an {@code TagCommand}."},{"lineNumber":189,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"duyson98"},"content":"    private TagCommand prepareCommand(List\u003cIndex\u003e indexes, Tag tag) {"},{"lineNumber":191,"author":{"gitID":"duyson98"},"content":"        TagCommand command \u003d new TagCommand(indexes, tag);"},{"lineNumber":192,"author":{"gitID":"duyson98"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":193,"author":{"gitID":"duyson98"},"content":"        return command;"},{"lineNumber":194,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":196,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":196}},{"path":"src/test/java/seedu/address/logic/commands/FindEmailCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_EMAILS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":" * Contains integration tests (interaction with the Model) for {@code FindEmailCommand}."},{"lineNumber":31,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"public class FindEmailCommandTest {"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":""},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        EmailContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"        EmailContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        FindEmailCommand findFirstEmailCommand \u003d new FindEmailCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        FindEmailCommand findSecondEmailCommand \u003d new FindEmailCommand(secondPredicate);"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        assertTrue(findFirstEmailCommand.equals(findFirstEmailCommand));"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":""},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        // same values -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        FindEmailCommand findFirstEmailCommandCopy \u003d new FindEmailCommand(firstPredicate);"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        assertTrue(findFirstEmailCommand.equals(findFirstEmailCommandCopy));"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":""},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstEmailCommand.equals(1));"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":""},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstEmailCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":""},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        // different person -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstEmailCommand.equals(findSecondEmailCommand));"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":""},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"    public void execute_zeroKeywords_noEmailFound() {"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EMAILS_LISTED_OVERVIEW, 0);"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        FindEmailCommand command \u003d prepareCommand(\" \");"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":""},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"    public void execute_multipleKeywords_multipleEmailsFound() {"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EMAILS_LISTED_OVERVIEW, 3);"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        FindEmailCommand command \u003d prepareCommand(\"alice@example.com cornelia@example.com anna@example.com\");"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, DANIEL, GEORGE));"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":""},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"     * Parses {@code userInput} into a {@code FindEmailCommand}."},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"    private FindEmailCommand prepareCommand(String userInput) {"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"        FindEmailCommand command \u003d"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"                new FindEmailCommand(new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"        return command;"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":""},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":"    private void assertCommandSuccess(FindEmailCommand command, String expectedMessage,"},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":""},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":101}},{"path":"src/test/java/seedu/address/logic/commands/SortPriorityCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertSortSuccess;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"public class SortPriorityCommandTest {"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public static final int FIRST_REMINDER \u003d 0;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    public static final int SECOND_REMINDER \u003d 1;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    private SortPriorityCommand sortPriorityCommand;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        model \u003d new ModelManager();"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        expectedModel \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        sortPriorityCommand \u003d new SortPriorityCommand();"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        sortPriorityCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    public void execute_firstReminderAdded_unsorted() throws Exception {"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"        Reminder Breakfast \u003d new ReminderBuilder().withTask(\"Breakfast\").withPriority(\"Low\").build();"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"        model.addReminder(Breakfast);"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredReminderList().get(FIRST_REMINDER).equals(Breakfast));"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":""},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"    public void execute_sameFirstReminderAfterAdded_unSorted() throws Exception {"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        Reminder Breakfast \u003d new ReminderBuilder().withTask(\"Breakfast\").withPriority(\"Low\").build();"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        Reminder Lunch \u003d new ReminderBuilder().withTask(\"Lunch\").withPriority(\"High\").build();"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        model.addReminder(Breakfast);"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        model.addReminder(Lunch);"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredReminderList().get(FIRST_REMINDER).equals(Breakfast));"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredReminderList().get(SECOND_REMINDER).equals(Lunch));"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":""},{"lineNumber":53,"author":{"gitID":"inGall"},"content":""},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"    public void execute_differentFirstReminderAfterSorted() throws Exception {"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        Reminder Breakfast \u003d new ReminderBuilder().withTask(\"Breakfast\").withPriority(\"Low\").build();"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        Reminder Lunch \u003d new ReminderBuilder().withTask(\"Lunch\").withPriority(\"High\").build();"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        model.addReminder(Breakfast);"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        model.addReminder(Lunch);"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"        assertSortSuccess(sortPriorityCommand, model, SortPriorityCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredReminderList().get(FIRST_REMINDER).equals(Lunch));"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredReminderList().get(SECOND_REMINDER).equals(Breakfast));"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":""},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":""},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":66}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"public class BirthdayTest {"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":""},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"    public void equals() throws IllegalValueException {"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"        Birthday birthday \u003d new Birthday(\"01/01/1991\");"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"        // same object -\u003e returns true"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"        assertTrue(birthday.equals(birthday));"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"        // same values -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"        Birthday birthdayCopy \u003d new Birthday(birthday.value);"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"        assertTrue(birthday.equals(birthdayCopy));"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        // different types -\u003e returns false"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"        assertFalse(birthday.equals(1));"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        assertFalse(birthday.equals(null));"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":""},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        // different person -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        Birthday differentBirthday \u003d new Birthday(\"02/02/1992\");"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        assertFalse(birthday.equals(differentBirthday));"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":""},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        // Non-existent birthday -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        assertFalse(Birthday.isValidBirthday(\"99/99/9999\"));"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":""},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"    public void validBirthday() {"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        // invalid date"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"        assertTrue(Birthday.isValidBirthday(\"\")); // empty string"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        assertTrue(Birthday.isValidBirthday(\"01/01/1991\"));  // valid date"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":""},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"        assertFalse(Birthday.isValidBirthday(\"0d/fd/199g\")); // contains non-numeric characters"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        assertFalse(Birthday.isValidBirthday(\"10/28/1999 \")); // wrong date format"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        assertFalse(Birthday.isValidBirthday(\"1/1/1994\")); // Insufficient digits"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        assertFalse(Birthday.isValidBirthday(\"40/01/1994\")); // invalid day"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        assertFalse(Birthday.isValidBirthday(\"01/16/1995\")); // invalid month"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        assertFalse(Birthday.isValidBirthday(\"01/01/20000\")); // invalid year"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":""},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":52}},{"path":"src/test/java/seedu/address/logic/commands/FindPriorityCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PRIORITY_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.PriorityContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":""},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPriorityCommand}."},{"lineNumber":28,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"public class FindPriorityCommandTest {"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        PriorityContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"                new PriorityContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"        PriorityContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"                new PriorityContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":""},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"        FindPriorityCommand findFirstPriorityCommand \u003d new FindPriorityCommand(firstPredicate);"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        FindPriorityCommand findSecondPriorityCommand \u003d new FindPriorityCommand(secondPredicate);"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        assertTrue(findFirstPriorityCommand.equals(findFirstPriorityCommand));"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        FindPriorityCommand findFirstPriorityCommandCopy \u003d new FindPriorityCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        assertTrue(findFirstPriorityCommand.equals(findFirstPriorityCommandCopy));"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":""},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstPriorityCommand.equals(1));"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":""},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstPriorityCommand.equals(null));"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":""},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        // different reminder -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstPriorityCommand.equals(findSecondPriorityCommand));"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":""},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"    public void execute_zeroKeywords_noPriorityFound() {"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PRIORITY_LISTED_OVERVIEW, 0);"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"        FindPriorityCommand command \u003d prepareCommand(\" \");"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":""},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"     * Parses {@code userInput} into a {@code FindPriorityCommand}."},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"    private FindPriorityCommand prepareCommand(String userInput) {"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"        FindPriorityCommand command \u003d"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"                new FindPriorityCommand(new PriorityContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        return command;"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":""},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"     *     - the {@code FilteredList\u003cReadOnlyReminder\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"    private void assertCommandSuccess(FindPriorityCommand command, String expectedMessage,"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"                                      List\u003cReadOnlyReminder\u003e expectedList) {"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":""},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedList, model.getFilteredReminderList());"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":91}},{"path":"src/test/java/systemtests/FindPhoneCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PHONES_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":""},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"public class FindPhoneCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public void findPhone() {"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":""},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        /* Case: find phone where phone list is not displaying the phone we are finding -\u003e 1 phone found */"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        String command \u003d FindPhoneCommand.COMMAND_WORD + \" 95352563\";"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":""},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple phones in address book, 2 keywords -\u003e 2 phones found */"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 98765432 87652533\";"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":""},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple phones in address book, 2 keywords in reversed order -\u003e 2 phones found */"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 87652533 98765432\";"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple phones in address book, 2 keywords with 1 repeat -\u003e 2 phones found */"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 87652533 98765432 87652533\";"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":""},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple phones in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"         * -\u003e 2 phones found"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 87652533 98765432 NonMatchingKeyWord\";"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":""},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":""},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":""},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        /* Case: find phone in address book, keyword is substring of name -\u003e 0 phones found */"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 9876\";"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":""},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        /* Case: find phone in address book, name is substring of keyword -\u003e 0 phones found */"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 987654321\";"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":""},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"        /* Case: find phone not in address book -\u003e 0 phones found */"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 82345678\";"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":""},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"        /* Case: find name of person in address book -\u003e 0 phones found */"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + BENSON.getName().fullName;"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":""},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"        /* Case: find address of person in address book -\u003e 0 phones found */"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"inGall"},"content":""},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"        /* Case: find email of person in address book -\u003e 0 phones found */"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":""},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        /* Case: find tags of person in address book -\u003e 0 phones found */"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":103,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"inGall"},"content":""},{"lineNumber":105,"author":{"gitID":"inGall"},"content":"        /* Case: find phone in empty address book -\u003e 0 phones found */"},{"lineNumber":106,"author":{"gitID":"inGall"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":107,"author":{"gitID":"inGall"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":108,"author":{"gitID":"inGall"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 87652533\";"},{"lineNumber":109,"author":{"gitID":"inGall"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":110,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":111,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"inGall"},"content":""},{"lineNumber":114,"author":{"gitID":"inGall"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"inGall"},"content":"        command \u003d \"FiNdpHONE 87652533\";"},{"lineNumber":116,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":117,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"inGall"},"content":""},{"lineNumber":119,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"inGall"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":121,"author":{"gitID":"inGall"},"content":"     * box displays {@code Messages#MESSAGE_PHONES_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":122,"author":{"gitID":"inGall"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":123,"author":{"gitID":"inGall"},"content":"     * These verifications are done by"},{"lineNumber":124,"author":{"gitID":"inGall"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"inGall"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":126,"author":{"gitID":"inGall"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":127,"author":{"gitID":"inGall"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":128,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"inGall"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":130,"author":{"gitID":"inGall"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":131,"author":{"gitID":"inGall"},"content":"                MESSAGE_PHONES_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":132,"author":{"gitID":"inGall"},"content":""},{"lineNumber":133,"author":{"gitID":"inGall"},"content":"        executeCommand(command);"},{"lineNumber":134,"author":{"gitID":"inGall"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":135,"author":{"gitID":"inGall"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":136,"author":{"gitID":"inGall"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":137,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"inGall"},"content":""},{"lineNumber":139,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"inGall"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":141,"author":{"gitID":"inGall"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":142,"author":{"gitID":"inGall"},"content":"     * These verifications are done by"},{"lineNumber":143,"author":{"gitID":"inGall"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"inGall"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":145,"author":{"gitID":"inGall"},"content":"     * error style."},{"lineNumber":146,"author":{"gitID":"inGall"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":147,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"inGall"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":149,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":150,"author":{"gitID":"inGall"},"content":""},{"lineNumber":151,"author":{"gitID":"inGall"},"content":"        executeCommand(command);"},{"lineNumber":152,"author":{"gitID":"inGall"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":153,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":154,"author":{"gitID":"inGall"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":155,"author":{"gitID":"inGall"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":156,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":157}},{"path":"src/test/java/systemtests/FindEmailCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_EMAILS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":""},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindEmailCommand;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"public class FindEmailCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public void find() {"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        String command \u003d FindEmailCommand.COMMAND_WORD + \" heinz@example.com\";"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":""},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"        /* Case: repeat previous find email command where person list is displaying the persons we are finding"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"         * -\u003e 1 person found"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"         */"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" \" + CARL.getEmail().value;"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":""},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple emails in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" alice@example.com lydia@example.com\";"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, FIONA);"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":""},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple emails in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" lydia@example.com alice@example.com\";"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":""},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple emails in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" lydia@example.com alice@example.com lydia@example.com\";"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":""},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple emails in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"         * -\u003e 2 persons found"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" lydia@example.com alice@example.com test@example.com\";"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":""},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":""},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":""},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"        /* Case: find email in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" alic\";"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":""},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        /* Case: find email in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" alice@example.coma\";"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":""},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"        /* Case: find email not in address book -\u003e 0 persons found */"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" bobby@example.com\";"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":""},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" \" + FIONA.getPhone().value;"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"inGall"},"content":""},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" \" + FIONA.getAddress().value;"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":""},{"lineNumber":103,"author":{"gitID":"inGall"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"inGall"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(FIONA.getTags());"},{"lineNumber":105,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":106,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"inGall"},"content":""},{"lineNumber":109,"author":{"gitID":"inGall"},"content":"        /* Case: find email in empty address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"inGall"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":111,"author":{"gitID":"inGall"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":112,"author":{"gitID":"inGall"},"content":"        command \u003d FindEmailCommand.COMMAND_WORD + \" alice@example.com\";"},{"lineNumber":113,"author":{"gitID":"inGall"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":114,"author":{"gitID":"inGall"},"content":"        ModelHelper.setFilteredList(expectedModel, FIONA);"},{"lineNumber":115,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"inGall"},"content":""},{"lineNumber":118,"author":{"gitID":"inGall"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":119,"author":{"gitID":"inGall"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":120,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":121,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"inGall"},"content":""},{"lineNumber":123,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"inGall"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":125,"author":{"gitID":"inGall"},"content":"     * box displays {@code Messages#MESSAGE_EMAILS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":126,"author":{"gitID":"inGall"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":127,"author":{"gitID":"inGall"},"content":"     * These verifications are done by"},{"lineNumber":128,"author":{"gitID":"inGall"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"inGall"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":130,"author":{"gitID":"inGall"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":131,"author":{"gitID":"inGall"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":132,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"inGall"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":134,"author":{"gitID":"inGall"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":135,"author":{"gitID":"inGall"},"content":"                MESSAGE_EMAILS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":136,"author":{"gitID":"inGall"},"content":""},{"lineNumber":137,"author":{"gitID":"inGall"},"content":"        executeCommand(command);"},{"lineNumber":138,"author":{"gitID":"inGall"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":139,"author":{"gitID":"inGall"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":140,"author":{"gitID":"inGall"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":141,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"inGall"},"content":""},{"lineNumber":143,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"inGall"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":145,"author":{"gitID":"inGall"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":146,"author":{"gitID":"inGall"},"content":"     * These verifications are done by"},{"lineNumber":147,"author":{"gitID":"inGall"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"inGall"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":149,"author":{"gitID":"inGall"},"content":"     * error style."},{"lineNumber":150,"author":{"gitID":"inGall"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":151,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"inGall"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":153,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":154,"author":{"gitID":"inGall"},"content":""},{"lineNumber":155,"author":{"gitID":"inGall"},"content":"        executeCommand(command);"},{"lineNumber":156,"author":{"gitID":"inGall"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":157,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":158,"author":{"gitID":"inGall"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":159,"author":{"gitID":"inGall"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":160,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":161}},{"path":"src/test/java/seedu/address/model/reminder/PriorityTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"public class PriorityTest {"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"    public void isValidPriority() {"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"        // invalid priority"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"        assertFalse(Priority.isValidPriority(\"\")); // empty string"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"        assertFalse(Priority.isValidPriority(\" \")); // spaces only"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"        assertFalse(Priority.isValidPriority(\"12345\")); // less than 3 numbers"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"        assertFalse(Priority.isValidPriority(\"priority\")); // non-numeric"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"        assertFalse(Priority.isValidPriority(\"Pr90i0ori23ty\")); // alphabets within digits"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"        assertFalse(Priority.isValidPriority(\"1234 5678\")); // spaces within digits"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        assertFalse(Priority.isValidPriority(\"LOW\")); // capital letters"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        assertFalse(Priority.isValidPriority(\"LoW\")); // mixed non-capital and capital letters"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"        assertFalse(Priority.isValidPriority(\"Low Medium High\")); // multiple priorities"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"        // valid priority"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"        assertTrue(Priority.isValidPriority(\"Low\"));"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"        assertTrue(Priority.isValidPriority(\"Medium\"));"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        assertTrue(Priority.isValidPriority(\"High\"));"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":30}},{"path":"src/test/java/seedu/address/model/reminder/DateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"public class DateTest {"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"    public void isValidDate() {"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"        // invalid date"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\"\")); // empty string"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\" \")); // spaces only"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\"0abc/01/1998 12:30\")); // contains non-numeric characters"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\"1998/01/01 12:30\")); // wrong format"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\"1/1/2017 6:30\")); // without zeroes"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\"32/01/2017 12:30\")); // invalid day"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\"01/13/2017 12:30\")); // invalid month"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\"01/01/20170 12:30\")); // invalid year"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\"01/01/2017 25:30\")); // invalid hour"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"        assertFalse(Date.isValidDate(\"01/01/2017 12:60\")); // invalid minute"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"        // valid date"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"        assertTrue(Date.isValidDate(\"10/08/2017 20:30\"));"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        assertTrue(Date.isValidDate(\"    01/01/2017    12:30  \")); // trailing space"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":30}},{"path":"src/test/java/seedu/address/model/reminder/MessageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"public class MessageTest {"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"    public void isValidMessage() {"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"        assertTrue(Message.isValidMessage(\"Buy present for friend.\"));"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":15}},{"path":"src/test/java/seedu/address/model/reminder/TaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"public class TaskTest {"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"    public void isValidTaskName() {"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"        // invalid task name"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"        assertFalse(Task.isValidTaskName(\"\")); // empty string"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"        assertFalse(Task.isValidTaskName(\" \")); // spaces only"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"        assertFalse(Task.isValidTaskName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"        assertFalse(Task.isValidTaskName(\"birthday*\")); // contains non-alphanumeric characters"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"        // valid task name"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        assertTrue(Task.isValidTaskName(\"birthday\")); // alphabets only"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        assertTrue(Task.isValidTaskName(\"12345\")); // numbers only"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"        assertTrue(Task.isValidTaskName(\"birthday 2morrow\")); // alphanumeric characters"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"        assertTrue(Task.isValidTaskName(\"Birthday tomorrow\")); // with capital letters"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"        assertTrue(Task.isValidTaskName(\"Tomorrow is my birthday\")); // long task names"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":27}},{"path":"src/test/java/seedu/address/logic/commands/SortBirthdayCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertSortSuccess;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"public class SortBirthdayCommandTest {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    public static final int FIRST_PERSON \u003d 0;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public static final int SECOND_PERSON \u003d 1;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    private Model model;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    private Model expectedModel;"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"    private SortBirthdayCommand sortBirthdayCommand;"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"        sortBirthdayCommand \u003d new SortBirthdayCommand();"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        sortBirthdayCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":""},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"    public void execute_sortList_successful() throws Exception {"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(sortBirthdayCommand, model, SortBirthdayCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"    public void execute_sameFirstPersonBeforeSorted() throws Exception {"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        Person Adeline \u003d new PersonBuilder().withName(\"Adeline\").withBirthday(\"05/05/1995\").build();"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        model.addPerson(Adeline);"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(FIRST_PERSON).equals("},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"                expectedModel.getFilteredPersonList().get(FIRST_PERSON)));"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":""},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    public void execute_differentFirstPersonAfterSorted() throws Exception {"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        Person Adeline \u003d new PersonBuilder().withName(\"Adeline\").withBirthday(\"05/05/1995\").build();"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        model.addPerson(Adeline);"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        assertSortSuccess(sortBirthdayCommand, model, SortBirthdayCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(FIRST_PERSON).equals(Adeline));"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":""},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"    public void execute_differentFirstPersonAfterSecondPersonAddedAndSorted() throws Exception {"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"        Person Adeline \u003d new PersonBuilder().withName(\"Adeline\").withBirthday(\"05/05/1995\").build();"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        Person Zoe \u003d new PersonBuilder().withName(\"Zoe\").withBirthday(\"01/01/1991\").build();"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        model.addPerson(Adeline);"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"        model.addPerson(Zoe);"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        assertSortSuccess(sortBirthdayCommand, model, SortBirthdayCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(FIRST_PERSON).equals(Zoe));"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        assertTrue(model.getFilteredPersonList().get(SECOND_PERSON).equals(Adeline));"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":""},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":72}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REMINDERS;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.BROTHER;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.PRIVATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalReminders.BIRTHDAY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.TaskContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"import seedu.address.testutil.DatabaseBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    public void getFilteredReminderList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        modelManager.getFilteredReminderList().remove(0);"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        Database database \u003d new DatabaseBuilder().withAccount(BROTHER).withAccount(PRIVATE).build();"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        Database differentDatabase \u003d new Database();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, database, userPrefs);"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, database, userPrefs);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, database, userPrefs)));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, database, userPrefs)));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        keywords \u003d BIRTHDAY.getTask().taskName.split(\"\\\\s+\");"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"        modelManager.updateFilteredReminderList(new TaskContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, database, userPrefs)));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        modelManager.updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, database, differentUserPrefs)));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"duyson98":11,"cqhchan":13,"-":63}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalReminders.BIRTHDAY;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalReminders.DATING;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        assertEquals(Collections.emptyList(), addressBook.getReminderList());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(new Person(ALICE), new Person(ALICE));"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        List\u003cReminder\u003e newReminders \u003d Arrays.asList(new Reminder(BIRTHDAY), new Reminder(DATING));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newReminders, newTags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"    public void resetData_withDuplicateReminders_throwsAssertionError() {"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"        // Repeat BRITHDAY twice"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(new Person(ALICE), new Person(BENSON));"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"        List\u003cReminder\u003e newReminders \u003d Arrays.asList(new Reminder(BIRTHDAY), new Reminder(BIRTHDAY));"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(BIRTHDAY.getTags());"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newReminders, newTags);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"    public void getReminderList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"        addressBook.getReminderList().remove(0);"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"     * A stub ReadOnlyAddressBook whose persons, reminders and tags lists can violate interface constraints."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cReadOnlyPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":"        private final ObservableList\u003cReadOnlyReminder\u003e reminders \u003d FXCollections.observableArrayList();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"        AddressBookStub(Collection\u003c? extends ReadOnlyPerson\u003e persons, Collection\u003c? extends ReadOnlyReminder\u003e reminders,"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"                        Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"            this.reminders.setAll(reminders);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"cqhchan"},"content":"        public ObservableList\u003cReadOnlyReminder\u003e getReminderList() {"},{"lineNumber":118,"author":{"gitID":"cqhchan"},"content":"            return reminders;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":121,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":124,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"duyson98":22,"cqhchan":6,"-":98}},{"path":"src/test/java/seedu/address/testutil/DatabaseBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Database;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"public class DatabaseBuilder {"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    private Database database;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    public DatabaseBuilder() {"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"        database \u003d new Database();"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"    public DatabaseBuilder(Database database) {"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"        this.database \u003d database;"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"     * Adds a new {@code Account} to the {@code Database} that we are building."},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    public DatabaseBuilder withAccount(ReadOnlyAccount account) {"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"            database.addAccount(account);"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"        } catch (DuplicateAccountException dpe) {"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"            throw new IllegalArgumentException(\"account is expected to be unique.\");"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        return this;"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code Database} that we are building."},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"    public Database build() {"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"        return database;"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"}"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":""}],"authorContributionMap":{"cqhchan":42}},{"path":"src/test/java/seedu/address/model/tag/TagContainsKeywordPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.tag;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"public class TagContainsKeywordPredicateTest {"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"    public void equals() throws Exception {"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"        TagContainsKeywordPredicate predicate \u003d new TagContainsKeywordPredicate(new Tag(\"friends\"));"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"        // same values -\u003e returns true"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"        assertTrue(predicate.equals(new TagContainsKeywordPredicate(new Tag(\"friends\"))));"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        // same object -\u003e returns true"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        assertTrue(predicate.equals(predicate));"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"        // different types -\u003e returns false"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"        assertFalse(predicate.equals(1));"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        assertFalse(predicate.equals(null));"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        // different person -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"        assertFalse(predicate.equals(new TagContainsKeywordPredicate(new Tag(\"family\"))));"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    public void test_tagFound_returnsTrue() throws Exception {"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        TagContainsKeywordPredicate predicate \u003d new TagContainsKeywordPredicate(new Tag(\"friends\"));"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"friends\", \"tester\").build()));"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"    public void test_tagNotFound_returnsFalse() throws Exception {"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        TagContainsKeywordPredicate predicate \u003d new TagContainsKeywordPredicate(new Tag(\"friends\"));"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withTags(\"family\", \"tester\").build()));"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":46}},{"path":"src/test/java/seedu/address/model/account/UsernameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"public class UsernameTest {"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"    public void isValidUsername() {"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"        // invalid name"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"        assertFalse(Username.isValidName(\"\")); // empty string"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"        assertFalse(Username.isValidName(\" \")); // spaces only"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"        assertFalse(Username.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"        assertFalse(Username.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"        // valid name"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"        assertTrue(Username.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"        assertTrue(Username.isValidName(\"12345\")); // numbers only"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"        assertTrue(Username.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"        assertTrue(Username.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"        assertTrue(Username.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":27}},{"path":"src/test/java/seedu/address/model/account/PasswordTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"public class PasswordTest {"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    public void isValidPassword() {"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"        // invalid addresses"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"        assertFalse(Password.isValidPassword(\"\")); // empty string"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"        assertFalse(Password.isValidPassword(\" \")); // spaces only"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"        // valid addresses"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"        assertTrue(Password.isValidPassword(\"Passdwner\"));"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"        assertTrue(Password.isValidPassword(\"11231784.;lkfw\")); // one character"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"        assertTrue(Password.isValidPassword(\"Francisco CA 2349879; USA\")); // long address"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":22}},{"path":"src/test/java/seedu/address/logic/commands/ViewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.events.ui.ShowProfileRequestEvent;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":" * Contains integration tests (interaction with the Model) for {@code ViewCommand}."},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"public class ViewCommandTest {"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    private Model model;"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    @Before"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"    public void equals() {"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"        ViewCommand command \u003d new ViewCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"        // same object -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"        // same values -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"        ViewCommand commandCopy \u003d new ViewCommand(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(commandCopy));"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"        // different types -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(new ClearCommand()));"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"        // null -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"        // different person -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"        ViewCommand anotherCommand \u003d new ViewCommand(INDEX_SECOND_PERSON);"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(anotherCommand));"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"     * Executes a {@code ViewCommand} with the given {@code index}, and checks that {@code ShowProfileRequestEvent}"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"     * is raised with the correct person."},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson personToViewProfile \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"        ViewCommand command \u003d prepareCommand(index);"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"            assertEquals(String.format(ViewCommand.MESSAGE_VIEW_PROFILE_SUCCESS,"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"                    personToViewProfile.getName().toString()), commandResult.feedbackToUser);"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"        } catch (CommandException ce) {"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"        ShowProfileRequestEvent lastEvent \u003d"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"                (ShowProfileRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"        assertEquals(personToViewProfile, (ReadOnlyPerson) new Person(lastEvent.person));"},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"     * Executes a {@code ViewCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"        ViewCommand viewCommand \u003d prepareCommand(index);"},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"            viewCommand.execute();"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":"        } catch (CommandException ce) {"},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":143,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":"     * Returns a {@code ViewCommand} with parameters {@code index}."},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":"    private ViewCommand prepareCommand(Index index) {"},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(index);"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":"        viewCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":"        return viewCommand;"},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":151}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":14,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(ReadOnlyPerson person) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"     * Adds a new {@code Reminder} to the {@code AddressBook} that we are building."},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    public AddressBookBuilder withReminder(ReadOnlyReminder reminder) {"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"            addressBook.addReminder(reminder);"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        } catch (DuplicateReminderException dre) {"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"            throw new IllegalArgumentException(\"reminder is expected to be unique.\");"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"duyson98":14,"-":53}},{"path":"src/test/java/seedu/address/testutil/TypicalAccounts.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Database;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"public class TypicalAccounts {"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    public static final ReadOnlyAccount PRIVATE \u003d new AccountBuilder().withUsername(\"private\")"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"            .withPassword(\"password\").build();"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"    public static final ReadOnlyAccount BROTHER \u003d new AccountBuilder().withUsername(\"BROTHER\")"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"            .withPassword(\"password\").build();"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"    public static Database getTypicalDatabase() {"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"        Database ab \u003d new Database();"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"        for (ReadOnlyAccount account : getTypicalAccounts()) {"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"            try {"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"                ab.addAccount(account);"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"            } catch (DuplicateAccountException e) {"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"                assert false : \"not possible\";"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        return ab;"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    public static List\u003cReadOnlyAccount\u003e getTypicalAccounts() {"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BROTHER, PRIVATE));"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":39}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    public static final Index INDEX_FIRST_REMINDER \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"    public static final Index INDEX_SECOND_REMINDER \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    public static final Index INDEX_THIRD_REMINDER \u003d Index.fromOneBased(3);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":3,"-":12}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Person person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"            Birthday defaultBirthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail, defaultAddress,"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"                    defaultBirthday, defaultTags);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            this.person.setName(new Name(name));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            this.person.setAddress(new Address(address));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            this.person.setPhone(new Phone(phone));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            this.person.setEmail(new Email(email));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"inGall"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building."},{"lineNumber":114,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"inGall"},"content":"    public PersonBuilder withBirthday(String birthday) throws IllegalValueException {"},{"lineNumber":116,"author":{"gitID":"inGall"},"content":"        this.person.setBirthday(new Birthday(birthday));"},{"lineNumber":117,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":118,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"inGall"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return this.person;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":13,"-":111}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"            .withTags(\"friends\", \"retrieveTester\").build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"            .withTags(\"owesMoney\", \"friends\", \"retrieveTester\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"94822324\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"94828427\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"94802442\")"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"84827424\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"84828131\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    // A keyword that matches RETRIEVETESTER"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"    public static final String KEYWORD_MATCHING_RETRIEVETESTER \u003d \"retrieveTester\";"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":6,"duyson98":5,"-":73}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 8000;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"duyson98":1,"-":104}},{"path":"src/test/java/systemtests/FindPriorityCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PRIORITY_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.DATING;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.GATHERING;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":""},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindPriorityCommand;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"public class FindPriorityCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public void find() {"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        /* Case: find priority where reminder list is not displaying the reminder we are finding -\u003e 1 reminder found */"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        String command \u003d FindPriorityCommand.COMMAND_WORD + \" Low\";"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel, DATING);"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":""},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        /* Case: repeat previous find command where reminder list is displaying the reminders we are finding"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"         * -\u003e 2 reminders found"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"         */"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" Low\";"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":""},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple priorities in address book, 2 keywords -\u003e 2 reminders found */"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" Low Medium\";"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel, BIRTHDAY, GATHERING);"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":""},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple priorities in address book, 2 keywords in reversed order -\u003e 2 reminders found */"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" Medium Low\";"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":""},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple priorities in address book, 2 keywords with 1 repeat -\u003e 2 reminders found */"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" Medium Low Medium\";"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":""},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple priorities in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"         * -\u003e 2 reminders found"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" Medium Low NonMatchingKeyWord\";"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":""},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":""},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":""},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"        /* Case: find priority in address book, keyword is substring of name -\u003e 0 reminders found */"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" Med\";"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel);"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":""},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        /* Case: find priority in address book, name is substring of keyword -\u003e 0 reminders found */"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" Lows\";"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel);"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":""},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"        /* Case: find priority not in address book -\u003e 0 reminders found */"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" Average\";"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":""},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"        /* Case: find name of reminder in address book -\u003e 0 reminders found */"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" \" + GATHERING.getTask().taskName;"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"inGall"},"content":""},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"        /* Case: find date of reminder in address book -\u003e 0 reminders found */"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" \" + GATHERING.getDate().date;"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":""},{"lineNumber":103,"author":{"gitID":"inGall"},"content":"        /* Case: find message of reminder in address book -\u003e 0 reminders found */"},{"lineNumber":104,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" \" + GATHERING.getMessage().message;"},{"lineNumber":105,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":106,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":107,"author":{"gitID":"inGall"},"content":""},{"lineNumber":108,"author":{"gitID":"inGall"},"content":"        /* Case: find tags of reminder in address book -\u003e 0 reminders found */"},{"lineNumber":109,"author":{"gitID":"inGall"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(GATHERING.getTags());"},{"lineNumber":110,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":111,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"inGall"},"content":""},{"lineNumber":114,"author":{"gitID":"inGall"},"content":"        /* Case: find priority in empty address book -\u003e 0 reminders found */"},{"lineNumber":115,"author":{"gitID":"inGall"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":116,"author":{"gitID":"inGall"},"content":"        assert getModel().getAddressBook().getReminderList().size() \u003d\u003d 0;"},{"lineNumber":117,"author":{"gitID":"inGall"},"content":"        command \u003d FindPriorityCommand.COMMAND_WORD + \" Medium\";"},{"lineNumber":118,"author":{"gitID":"inGall"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":119,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel, GATHERING);"},{"lineNumber":120,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"inGall"},"content":""},{"lineNumber":123,"author":{"gitID":"inGall"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":124,"author":{"gitID":"inGall"},"content":"        command \u003d \"FiNdpRIORITY Low\";"},{"lineNumber":125,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":126,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"inGall"},"content":""},{"lineNumber":128,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"inGall"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":130,"author":{"gitID":"inGall"},"content":"     * box displays {@code Messages#MESSAGE_PRIORITY_LISTED_OVERVIEW} with the number of reminders in the filtered list,"},{"lineNumber":131,"author":{"gitID":"inGall"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":132,"author":{"gitID":"inGall"},"content":"     * These verifications are done by"},{"lineNumber":133,"author":{"gitID":"inGall"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"inGall"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":135,"author":{"gitID":"inGall"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":136,"author":{"gitID":"inGall"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":137,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"inGall"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":139,"author":{"gitID":"inGall"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":140,"author":{"gitID":"inGall"},"content":"                MESSAGE_PRIORITY_LISTED_OVERVIEW, expectedModel.getFilteredReminderList().size());"},{"lineNumber":141,"author":{"gitID":"inGall"},"content":""},{"lineNumber":142,"author":{"gitID":"inGall"},"content":"        executeCommand(command);"},{"lineNumber":143,"author":{"gitID":"inGall"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":144,"author":{"gitID":"inGall"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":145,"author":{"gitID":"inGall"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":146,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"inGall"},"content":""},{"lineNumber":148,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"inGall"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":150,"author":{"gitID":"inGall"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":151,"author":{"gitID":"inGall"},"content":"     * These verifications are done by"},{"lineNumber":152,"author":{"gitID":"inGall"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"inGall"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":154,"author":{"gitID":"inGall"},"content":"     * error style."},{"lineNumber":155,"author":{"gitID":"inGall"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":156,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"inGall"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":158,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":159,"author":{"gitID":"inGall"},"content":""},{"lineNumber":160,"author":{"gitID":"inGall"},"content":"        executeCommand(command);"},{"lineNumber":161,"author":{"gitID":"inGall"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":162,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":163,"author":{"gitID":"inGall"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":164,"author":{"gitID":"inGall"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":165,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":166}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    private static final String BIRTHDAY_FIELD_ID \u003d \"#birthday\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    private final Label birthdayLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"        this.birthdayLabel \u003d getChildNode(BIRTHDAY_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"    public String getBirthday() {"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        return birthdayLabel.getText();"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":7,"-":71}},{"path":"src/test/java/seedu/address/model/UniqueAccountListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import org.junit.Rule;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"public class UniqueAccountListTest {"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"        UniqueAccountList uniqueAccountList \u003d new UniqueAccountList();"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"        uniqueAccountList.asObservableList().remove(0);"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":21}},{"path":"src/test/java/seedu/address/logic/commands/AddReminderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"public class AddReminderCommandTest {"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    public void constructor_nullReminder_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        new AddReminderCommand(null);"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    public void execute_reminderAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        ModelStubAcceptingReminderAdded modelStub \u003d new ModelStubAcceptingReminderAdded();"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        Reminder validReminder \u003d new ReminderBuilder().build();"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        CommandResult commandResult \u003d getAddReminderCommandForReminder(validReminder, modelStub).execute();"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        assertEquals(String.format(AddReminderCommand.MESSAGE_SUCCESS, validReminder), commandResult.feedbackToUser);"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        assertEquals(Arrays.asList(validReminder), modelStub.remindersAdded);"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    public void execute_duplicateReminder_throwsCommandException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateReminderException();"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        Reminder validReminder \u003d new ReminderBuilder().build();"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        thrown.expectMessage(AddReminderCommand.MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        getAddReminderCommandForReminder(validReminder, modelStub).execute();"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"    public void equals() {"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        Reminder reminder \u003d new ReminderBuilder().withTask(\"Project\").build();"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        Reminder anotherReminder \u003d new ReminderBuilder().withTask(\"Assignment\").build();"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"        AddReminderCommand command \u003d new AddReminderCommand(reminder);"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        AddReminderCommand anotherCommand \u003d new AddReminderCommand(anotherReminder);"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        // same object -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"        // same values -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"        AddReminderCommand commandCopy \u003d new AddReminderCommand(reminder);"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(commandCopy));"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"        // different types -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(1));"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"        // null -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"        // different reminder -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(anotherCommand));"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"     * Generates a new AddReminderCommand with the details of the given reminder."},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"    private AddReminderCommand getAddReminderCommandForReminder(Reminder reminder, Model model) {"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"        AddReminderCommand command \u003d new AddReminderCommand(reminder);"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"        return command;"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"    private class ModelStub implements Model {"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"        public boolean checkAccount(ReadOnlyAccount account) {"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"            return true;"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"        public void addAccount(ReadOnlyAccount account) throws DuplicateAccountException {"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"        public void addReminder(ReadOnlyReminder newData) throws DuplicateReminderException {"},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"        public void resetDatabase(ReadOnlyDatabase newData) {"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"duyson98"},"content":"            return null;"},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"        public ReadOnlyDatabase getDatabase() {"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"            return null;"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":152,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":155,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"duyson98"},"content":"        public void deleteAccount(ReadOnlyAccount account) throws PersonNotFoundException {"},{"lineNumber":157,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":160,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"duyson98"},"content":"        public void deleteReminder(ReadOnlyReminder target) throws ReminderNotFoundException {"},{"lineNumber":162,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":165,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"duyson98"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":167,"author":{"gitID":"duyson98"},"content":"                throws DuplicatePersonException {"},{"lineNumber":168,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":171,"author":{"gitID":"duyson98"},"content":"        public void updateAccount(ReadOnlyAccount account, ReadOnlyAccount editedAccount)"},{"lineNumber":172,"author":{"gitID":"duyson98"},"content":"                throws DuplicateAccountException {"},{"lineNumber":173,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":176,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":177,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"duyson98"},"content":"        public void updateReminder(ReadOnlyReminder target, ReadOnlyReminder editedReminder)"},{"lineNumber":179,"author":{"gitID":"duyson98"},"content":"                throws DuplicateReminderException {"},{"lineNumber":180,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":183,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"duyson98"},"content":"        public void deleteUnusedTag(Tag tag) {"},{"lineNumber":185,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":188,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"duyson98"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":190,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"duyson98"},"content":"            return null;"},{"lineNumber":192,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":194,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"duyson98"},"content":"        public ObservableList\u003cReadOnlyAccount\u003e getFilteredAccountList() {"},{"lineNumber":196,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitID":"duyson98"},"content":"            return null;"},{"lineNumber":198,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":200,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":201,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"duyson98"},"content":"        public ObservableList\u003cReadOnlyReminder\u003e getFilteredReminderList() {"},{"lineNumber":203,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitID":"duyson98"},"content":"            return null;"},{"lineNumber":205,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":207,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"duyson98"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":209,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":212,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"duyson98"},"content":"        public void updateFilteredAccountList(Predicate\u003cReadOnlyAccount\u003e predicate) {"},{"lineNumber":214,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":217,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"duyson98"},"content":"        public void updateFilteredReminderList(Predicate\u003cReadOnlyReminder\u003e predicate) {"},{"lineNumber":219,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":220,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":222,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"duyson98"},"content":"        public void deletePersonTag(Tag tag) {"},{"lineNumber":224,"author":{"gitID":"duyson98"},"content":"            fail(\"This metthod should not be called.\");"},{"lineNumber":225,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":227,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"duyson98"},"content":"        public void deleteReminderTag(Tag tag) {"},{"lineNumber":229,"author":{"gitID":"duyson98"},"content":"            fail(\"This metthod should not be called.\");"},{"lineNumber":230,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":232,"author":{"gitID":"duyson98"},"content":"        public Boolean checkIfPersonListEmpty(ArrayList\u003cReadOnlyPerson\u003e contactList) {"},{"lineNumber":233,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":234,"author":{"gitID":"duyson98"},"content":"            return false;"},{"lineNumber":235,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":237,"author":{"gitID":"duyson98"},"content":"        public Boolean checkIfReminderListEmpty(ArrayList\u003cReadOnlyReminder\u003e reminderList) {"},{"lineNumber":238,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":239,"author":{"gitID":"duyson98"},"content":"            return false;"},{"lineNumber":240,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":242,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"duyson98"},"content":"        public void sortListByName(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":244,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":245,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":247,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":248,"author":{"gitID":"duyson98"},"content":"        public void sortListByBirthday(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":249,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":250,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":252,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":253,"author":{"gitID":"duyson98"},"content":"        public void sortListByAge(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":254,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":255,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":257,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":258,"author":{"gitID":"duyson98"},"content":"        public void sortListByPriority(ArrayList\u003cReadOnlyReminder\u003e contactList)  throws CommandException {"},{"lineNumber":259,"author":{"gitID":"duyson98"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":260,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":263,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"duyson98"},"content":"     * A Model stub that always throw a DuplicateReminderException when trying to add a reminder."},{"lineNumber":265,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"duyson98"},"content":"    private class ModelStubThrowingDuplicateReminderException extends ModelStub {"},{"lineNumber":267,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":268,"author":{"gitID":"duyson98"},"content":"        public void addReminder(ReadOnlyReminder reminder) throws DuplicateReminderException {"},{"lineNumber":269,"author":{"gitID":"duyson98"},"content":"            throw new DuplicateReminderException();"},{"lineNumber":270,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":272,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":273,"author":{"gitID":"duyson98"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":274,"author":{"gitID":"duyson98"},"content":"            return new AddressBook();"},{"lineNumber":275,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":278,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"duyson98"},"content":"     * A Model stub that always accept the reminder being added."},{"lineNumber":280,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"duyson98"},"content":"    private class ModelStubAcceptingReminderAdded extends ModelStub {"},{"lineNumber":282,"author":{"gitID":"duyson98"},"content":"        final ArrayList\u003cReminder\u003e remindersAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":283,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":284,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":285,"author":{"gitID":"duyson98"},"content":"        public void addReminder(ReadOnlyReminder reminder) throws DuplicateReminderException {"},{"lineNumber":286,"author":{"gitID":"duyson98"},"content":"            remindersAdded.add(new Reminder(reminder));"},{"lineNumber":287,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":289,"author":{"gitID":"duyson98"},"content":"        @Override"},{"lineNumber":290,"author":{"gitID":"duyson98"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":291,"author":{"gitID":"duyson98"},"content":"            return new AddressBook();"},{"lineNumber":292,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":294}},{"path":"src/test/java/seedu/address/model/UniqueReminderListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.UniqueReminderList;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"public class UniqueReminderListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"        UniqueReminderList uniqueReminderList \u003d new UniqueReminderList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"        uniqueReminderList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":7,"-":12}},{"path":"src/test/java/seedu/address/model/reminder/TaskContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"public class TaskContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        TaskContainsKeywordsPredicate firstPredicate \u003d new TaskContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        TaskContainsKeywordsPredicate secondPredicate \u003d new TaskContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        TaskContainsKeywordsPredicate firstPredicateCopy \u003d new TaskContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    public void test_taskContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate("},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"                Collections.singletonList(\"Birthday\"));"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        assertTrue(predicate.test(new ReminderBuilder().withTask(\"Birthday tomorrow\").build()));"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        // Multiple keywords"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        predicate \u003d new TaskContainsKeywordsPredicate(Arrays.asList(\"Birthday\", \"tomorrow\"));"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        assertTrue(predicate.test(new ReminderBuilder().withTask(\"Birthday tomorrow\").build()));"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        // Only one matching keyword"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        predicate \u003d new TaskContainsKeywordsPredicate(Arrays.asList(\"Birthday\", \"tomorrow\"));"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        assertTrue(predicate.test(new ReminderBuilder().withTask(\"Birthday yesterday\").build()));"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        // Mixed-case keywords"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        predicate \u003d new TaskContainsKeywordsPredicate(Arrays.asList(\"BIrThdAY\", \"TOmoRRoW\"));"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        assertTrue(predicate.test(new ReminderBuilder().withTask(\"Birthday Tomorrow\").build()));"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"    public void test_taskDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        // Zero keywords"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        assertFalse(predicate.test(new ReminderBuilder().withTask(\"Birthday\").build()));"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        // Non-matching keyword"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        predicate \u003d new TaskContainsKeywordsPredicate(Arrays.asList(\"Work\"));"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        assertFalse(predicate.test(new ReminderBuilder().withTask(\"Birthday Tomorrow\").build()));"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        // Keywords match priority, date and message, but does not match task name"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"        predicate \u003d new TaskContainsKeywordsPredicate(Arrays.asList(\"Low\", \"02/02/2017\", \"16:00\","},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"                \"Buy\", \"present\"));"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        assertFalse(predicate.test(new ReminderBuilder().withTask(\"Birthday\").withPriority(\"Low\")"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"                .withDate(\"02/02/2017 16:00\").withMessage(\"Buy present with others.\").build()));"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":43,"-":34}},{"path":"src/main/java/seedu/address/ui/Ui.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /** Starts the UI (and the App).  */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /** Stops the UI. */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    void stop();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    void restart(String userName);"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":2,"-":16}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.events.ui.ReminderPanelSelectionChangedEvent;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.events.ui.ShowProfileRequestEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/maps/search/\";"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"/\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    private Browser browser;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    private PersonProfile personProfile;"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    private DisplayPanel displayPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    //@@author cqhchan"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    private StackPane browserPanel;"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    public BrowserPanel() {"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"        browser \u003d new Browser();"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"        browserPanel.getChildren().add(browser.getRoot());"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"     * @param person"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"            browserPanel.getChildren().remove(personProfile.getRoot());"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception e) {"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"            logger.info(\"PersonProfilePanel does not exist\");"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"            browserPanel.getChildren().remove(displayPanel.getRoot());"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception e) {"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"            logger.info(\"DisplayPanel does not exist\");"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"            browserPanel.getChildren().remove(browser.getRoot());"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception e) {"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"            logger.info(\"BrowserPanel does not exist\");"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"        browserPanel.getChildren().add(browser.getRoot());"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"        String personUrl \u003d GOOGLE_SEARCH_URL_PREFIX + person.getAddress().toString() + GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"        browser.loadPage(personUrl);"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"     * @param reminder"},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"    private void displayReminder(ReadOnlyReminder reminder) {"},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"            browserPanel.getChildren().remove(personProfile.getRoot());"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception e) {"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"            logger.info(\"PersonProfilePanel does not exist\");"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":"            browserPanel.getChildren().remove(displayPanel.getRoot());"},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception e) {"},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"            logger.info(\"DisplayPanel does not exist\");"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"            browserPanel.getChildren().remove(browser.getRoot());"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception e) {"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"            logger.info(\"BrowserPanel does not exist\");"},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":"        displayPanel \u003d new DisplayPanel(reminder);"},{"lineNumber":89,"author":{"gitID":"cqhchan"},"content":"        browserPanel.getChildren().add(displayPanel.getRoot());"},{"lineNumber":90,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":92,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":"    public void freeResources() {"},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"        browser.freeResources();"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"cqhchan"},"content":"    //@@author"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"     * @param person"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"    private void loadPersonProfile(ReadOnlyPerson person) {"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"            browserPanel.getChildren().remove(personProfile.getRoot());"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"        } catch (Exception e) {"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"            logger.info(\"PersonProfilePanel does not exist\");"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"            browserPanel.getChildren().remove(displayPanel.getRoot());"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"        } catch (Exception e) {"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"            logger.info(\"DisplayPanel does not exist\");"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"            browserPanel.getChildren().remove(browser.getRoot());"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"        } catch (Exception e) {"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"            logger.info(\"BrowserPanel does not exist\");"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"        personProfile \u003d new PersonProfile(person);"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"        browserPanel.getChildren().add(personProfile.getRoot());"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"    @Subscribe"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"    private void handleShowProfileRequestEvent(ShowProfileRequestEvent event) {"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"        loadPersonProfile(event.person);"},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":131,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":138,"author":{"gitID":"cqhchan"},"content":"    //@@author cqhchan"},{"lineNumber":139,"author":{"gitID":"cqhchan"},"content":"    @Subscribe"},{"lineNumber":140,"author":{"gitID":"cqhchan"},"content":"    private void handleReminderPanelSelectionChangedEvent(ReminderPanelSelectionChangedEvent event) {"},{"lineNumber":141,"author":{"gitID":"cqhchan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":142,"author":{"gitID":"cqhchan"},"content":"        displayReminder(event.getNewSelection().reminder);"},{"lineNumber":143,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"cqhchan"},"content":"    //@@author"},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"cqhchan":83,"duyson98":33,"-":28}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import java.util.Timer;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import java.util.TimerTask;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import javafx.scene.control.Label;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.clock.ClockDisplay;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    private ClockDisplay footerClock;"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    private Label displayDate;"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"    private Label displayTime;"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        this.footerClock \u003d new ClockDisplay();"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        startFooterClock(footerClock);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"     * Starts running the clock display."},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"    private void startFooterClock(ClockDisplay footerClock) {"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"        final Timer timer \u003d new Timer();"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"        TimerTask task \u003d new TimerTask() {"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"            @Override"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"            public void run() {"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"                setFooterClockTime(footerClock);"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"                setFooterClockDate(footerClock);"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"        };"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        timer.scheduleAtFixedRate(task, 0, 1000);"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"    private void setFooterClockTime(ClockDisplay footerClock) {"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"        requireNonNull(footerClock.getTime());"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"        footerClock.getTime().setCurrentTime();"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"        Platform.runLater(() -\u003e displayTime.setText(footerClock.getTimeAsText()));"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"    private void setFooterClockDate(ClockDisplay footerClock) {"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"        requireNonNull(footerClock.getDate());"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"        footerClock.getDate().setCurrentDate();"},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"        Platform.runLater(() -\u003e displayDate.setText(footerClock.getDateAsText()));"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"duyson98":48,"-":81}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Database;"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"import seedu.address.storage.DataBaseStorage;"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    private static Stage primaryStage;"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    private static Logic logic;"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"    private static Config config;"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"    private static UserPrefs prefs;"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"    private static MainWindow mainWindow;"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"    protected DataBaseStorage dataBaseStorage;"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs, DataBaseStorage dataBaseStorage) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"        this.dataBaseStorage \u003d dataBaseStorage;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"    // From here, use the commented code is you want the full feature."},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"    // i left it commented as i didnt  have time to make it pass the tests"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(config.getAppTitle());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":"            logger.info(\"Fatal error during initializing\" + e);"},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":"    //@@author cqhchan"},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"cqhchan"},"content":"    public void restart(String userName) {"},{"lineNumber":90,"author":{"gitID":"cqhchan"},"content":"        stop();"},{"lineNumber":91,"author":{"gitID":"cqhchan"},"content":"        primaryStage \u003d new Stage();"},{"lineNumber":92,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath(userName));"},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, dataBaseStorage);"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":98,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":99,"author":{"gitID":"cqhchan"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":100,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":101,"author":{"gitID":"cqhchan"},"content":"        prefs \u003d userPrefs;"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":"        primaryStage.setTitle(config.getAppTitle() + \" \" + userName);"},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":106,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":107,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"cqhchan"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":109,"author":{"gitID":"cqhchan"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":110,"author":{"gitID":"cqhchan"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":111,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":112,"author":{"gitID":"cqhchan"},"content":"        } catch (Throwable e) {"},{"lineNumber":113,"author":{"gitID":"cqhchan"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":114,"author":{"gitID":"cqhchan"},"content":"            logger.info(\"Fatal error during initializing\" + e);"},{"lineNumber":115,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":118,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"cqhchan"},"content":"     * get new user prefs"},{"lineNumber":120,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"cqhchan"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":122,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":123,"author":{"gitID":"cqhchan"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":124,"author":{"gitID":"cqhchan"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":125,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":126,"author":{"gitID":"cqhchan"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":127,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":128,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":130,"author":{"gitID":"cqhchan"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":131,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":132,"author":{"gitID":"cqhchan"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":133,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":134,"author":{"gitID":"cqhchan"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":135,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":136,"author":{"gitID":"cqhchan"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":137,"author":{"gitID":"cqhchan"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":138,"author":{"gitID":"cqhchan"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":139,"author":{"gitID":"cqhchan"},"content":"        } catch (IOException e) {"},{"lineNumber":140,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":141,"author":{"gitID":"cqhchan"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":142,"author":{"gitID":"cqhchan"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":143,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":145,"author":{"gitID":"cqhchan"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":146,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":147,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":148,"author":{"gitID":"cqhchan"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":149,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":150,"author":{"gitID":"cqhchan"},"content":"        } catch (IOException e) {"},{"lineNumber":151,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":152,"author":{"gitID":"cqhchan"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":153,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":155,"author":{"gitID":"cqhchan"},"content":"        return initializedPrefs;"},{"lineNumber":156,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":159,"author":{"gitID":"cqhchan"},"content":"     * @param storage"},{"lineNumber":160,"author":{"gitID":"cqhchan"},"content":"     * @param userPrefs"},{"lineNumber":161,"author":{"gitID":"cqhchan"},"content":"     * @return"},{"lineNumber":162,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"cqhchan"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":164,"author":{"gitID":"cqhchan"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":165,"author":{"gitID":"cqhchan"},"content":"        Optional\u003cReadOnlyDatabase\u003e databaseOptional;"},{"lineNumber":166,"author":{"gitID":"cqhchan"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":167,"author":{"gitID":"cqhchan"},"content":"        ReadOnlyDatabase initialDatabase;"},{"lineNumber":168,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":169,"author":{"gitID":"cqhchan"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":170,"author":{"gitID":"cqhchan"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":171,"author":{"gitID":"cqhchan"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":172,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"cqhchan"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":174,"author":{"gitID":"cqhchan"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":175,"author":{"gitID":"cqhchan"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":176,"author":{"gitID":"cqhchan"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":177,"author":{"gitID":"cqhchan"},"content":"        } catch (IOException e) {"},{"lineNumber":178,"author":{"gitID":"cqhchan"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":179,"author":{"gitID":"cqhchan"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":180,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":182,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"cqhchan"},"content":"            databaseOptional \u003d storage.readDatabase();"},{"lineNumber":184,"author":{"gitID":"cqhchan"},"content":"            if (!databaseOptional.isPresent()) {"},{"lineNumber":185,"author":{"gitID":"cqhchan"},"content":"                logger.info(\"Data file not found. Will be starting with a empty AddressBook\");"},{"lineNumber":186,"author":{"gitID":"cqhchan"},"content":"                initialDatabase \u003d new Database();"},{"lineNumber":187,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":188,"author":{"gitID":"cqhchan"},"content":"            initialDatabase \u003d databaseOptional.orElseGet(SampleDataUtil::getSampleDatabase);"},{"lineNumber":189,"author":{"gitID":"cqhchan"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":190,"author":{"gitID":"cqhchan"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":191,"author":{"gitID":"cqhchan"},"content":"            initialDatabase \u003d new Database();"},{"lineNumber":192,"author":{"gitID":"cqhchan"},"content":"        } catch (IOException e) {"},{"lineNumber":193,"author":{"gitID":"cqhchan"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":194,"author":{"gitID":"cqhchan"},"content":"            initialDatabase \u003d new Database();"},{"lineNumber":195,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":197,"author":{"gitID":"cqhchan"},"content":"        return new ModelManager(initialData, initialDatabase, userPrefs);"},{"lineNumber":198,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"cqhchan"},"content":"    //@@author"},{"lineNumber":200,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":201,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":206,"author":{"gitID":"inGall"},"content":"        /*"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            mainWindow.releaseResources();"},{"lineNumber":208,"author":{"gitID":"inGall"},"content":"        */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":2,"cqhchan":147,"-":110}},{"path":"src/test/java/seedu/address/logic/commands/FindPhoneCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PHONES_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPhoneCommand}."},{"lineNumber":31,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"public class FindPhoneCommandTest {"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":""},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        PhoneContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"        PhoneContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        FindPhoneCommand findFirstPhoneCommand \u003d new FindPhoneCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        FindPhoneCommand findSecondPhoneCommand \u003d new FindPhoneCommand(secondPredicate);"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        assertTrue(findFirstPhoneCommand.equals(findFirstPhoneCommand));"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":""},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        // same values -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        FindPhoneCommand findFirstPhoneCommandCopy \u003d new FindPhoneCommand(firstPredicate);"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        assertTrue(findFirstPhoneCommand.equals(findFirstPhoneCommandCopy));"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":""},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstPhoneCommand.equals(1));"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":""},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstPhoneCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":""},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        // different person -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        assertFalse(findFirstPhoneCommand.equals(findSecondPhoneCommand));"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":""},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"    public void execute_zeroKeywords_noPhoneFound() {"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PHONES_LISTED_OVERVIEW, 0);"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        FindPhoneCommand command \u003d prepareCommand(\" \");"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":""},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"    public void execute_multipleKeywords_multiplePhonesFound() {"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PHONES_LISTED_OVERVIEW, 3);"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        FindPhoneCommand command \u003d prepareCommand(\"95352563 94822324 94828427\");"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":""},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"     * Parses {@code userInput} into a {@code FindPhoneCommand}."},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"    private FindPhoneCommand prepareCommand(String userInput) {"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"        FindPhoneCommand command \u003d"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"                new FindPhoneCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"        return command;"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":""},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":"    private void assertCommandSuccess(FindPhoneCommand command, String expectedMessage,"},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":""},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/address_book_32.png\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    private static final int MIN_HEIGHT \u003d 900;"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    private static final int MIN_WIDTH \u003d 1550;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    private ReminderListPanel reminderListPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"    private StackPane reminderListPanelPlaceholder;"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":114,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":120,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":124,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"cqhchan"},"content":"        reminderListPanel \u003d new ReminderListPanel(logic.getFilteredReminderList());"},{"lineNumber":144,"author":{"gitID":"cqhchan"},"content":"        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"},{"lineNumber":145,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"inGall"},"content":"    /*"},{"lineNumber":223,"author":{"gitID":"inGall"},"content":"    void releaseResources() {"},{"lineNumber":224,"author":{"gitID":"inGall"},"content":"        browserPanel.freeResources();"},{"lineNumber":225,"author":{"gitID":"inGall"},"content":"    }*/"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":4,"cqhchan":13,"-":215}},{"path":"src/test/java/seedu/address/testutil/AccountBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"public class AccountBuilder {"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    public static final String DEFAULT_NAME \u003d \"private\";"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"    public static final String DEFAULT_PASSWORD \u003d \"password\";"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    private Account account;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"    public AccountBuilder() {"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"            Username defaultName \u003d new Username(DEFAULT_NAME);"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"            Password defaultPassword \u003d new Password(DEFAULT_PASSWORD);"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"            this.account \u003d new Account(defaultName, defaultPassword);"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"     * Initializes the AccountBuilder with the data of {@code personToCopy}."},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    public AccountBuilder(ReadOnlyAccount accountToCopy) {"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"        this.account \u003d new Account(accountToCopy);"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"     * Sets the {@code Username} of the {@code Account} that we are building."},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"    public AccountBuilder withUsername(String username) {"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"            this.account.setUsername(new Username(username));"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"        return this;"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"     * Sets the {@code Username} of the {@code Account} that we are building."},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    public AccountBuilder withPassword(String password) {"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"            this.account.setPassword(new Password(password));"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"            throw new IllegalArgumentException(\"Password is expected to be unique.\");"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"    public Account build() {"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"        return this.account;"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":66}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"inGall"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.Random;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    private static String[] colors \u003d { \"red\", \"blue\", \"purple\", \"orange\", \"brown\","},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        \"green\", \"magenta\", \"black\", \"grey\" };"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    private static HashMap\u003cString, String\u003e tagColors \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    private static Random random \u003d new Random();"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"    private Label birthday;"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        bindListeners(person);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"        birthday.textProperty().bind(Bindings.convert(person.birthdayProperty()));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            tags.getChildren().clear();"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"            initTags(person);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"     * @param person"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"            tagLabel.setStyle(\"-fx-background-color: \" + getColorForTag(tag.tagName));"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"        });"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"     * @param tagValue"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"     * @return"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":"    private static String getColorForTag(String tagValue) {"},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"        if (!tagColors.containsKey(tagValue)) {"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"            tagColors.put(tagValue, colors[random.nextInt(colors.length)]);"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":""},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"        return tagColors.get(tagValue);"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":31,"duyson98":1,"-":85}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX \u003d \"The reminder index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_PHONES_LISTED_OVERVIEW \u003d \"%1$d persons with phone(s) listed!\";"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_EMAILS_LISTED_OVERVIEW \u003d \"%1$d persons with email(s) listed!\";"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_PRIORITY_LISTED_OVERVIEW \u003d \"%1$d reminders with priorities(s) listed!\";"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_REMINDERS_LISTED_OVERVIEW \u003d \"%1$d reminders listed!\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":4,"duyson98":1,"-":13}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"    private String appTitle \u003d \"Gentleman\u0027s Guide\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"-":71}},{"path":"src/test/java/seedu/address/model/DatabaseTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.PRIVATE;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"public class DatabaseTest {"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    private final Database database \u003d new Database();"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        assertEquals(Collections.emptyList(), database.getAccountList());"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"        database.resetData(null);"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"    public void resetData_withValidReadOnlyDatabase_replacesData() {"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"        Database newData \u003d getTypicalDatabase();"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"        database.resetData(newData);"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"        assertEquals(newData, database);"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"    public void resetData_withDuplicateAccounts_throwsAssertionError() {"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        // Repeat ALICE twice"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        List\u003cAccount\u003e newAccounts \u003d Arrays.asList(new Account(PRIVATE), new Account(PRIVATE));"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"        DatabaseStub newData \u003d new DatabaseStub(newAccounts);"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"        database.resetData(newData);"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"    public void getAccountList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"        database.getAccountList().remove(0);"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"    private static class DatabaseStub implements ReadOnlyDatabase {"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        private final ObservableList\u003cReadOnlyAccount\u003e accounts \u003d FXCollections.observableArrayList();"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"        DatabaseStub(Collection\u003c? extends ReadOnlyAccount\u003e accounts) {"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"            this.accounts.setAll(accounts);"},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"        public ObservableList\u003cReadOnlyAccount\u003e getAccountList() {"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":"            return accounts;"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":80}},{"path":"src/test/java/seedu/address/testutil/EditReminderDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.EditReminderCommand.EditReminderDescriptor;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" * A utility class to help with building EditReminderDescriptor objects."},{"lineNumber":14,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class EditReminderDescriptorBuilder {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    private EditReminderDescriptor descriptor;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    public EditReminderDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"        descriptor \u003d new EditReminderDescriptor();"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    public EditReminderDescriptorBuilder(EditReminderDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        this.descriptor \u003d new EditReminderDescriptor(descriptor);"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"     * Returns an {@code EditReminderDescriptor} with fields containing {@code reminder}\u0027s details"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    public EditReminderDescriptorBuilder(ReadOnlyReminder reminder) {"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        descriptor \u003d new EditReminderDescriptor();"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        descriptor.setTask(reminder.getTask());"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        descriptor.setPriority(reminder.getPriority());"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        descriptor.setDate(reminder.getDate());"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        descriptor.setMessage(reminder.getMessage());"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"        descriptor.setTags(reminder.getTags());"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":""},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"     * Sets the {@code Task} of the {@code EditReminderDescriptor} that we are building."},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"    public EditReminderDescriptorBuilder withTask(String task) {"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"            ParserUtil.parseTask(Optional.of(task)).ifPresent(descriptor::setTask);"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"            throw new IllegalArgumentException(\"task is expected to be unique.\");"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":""},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"     * Sets the {@code Priority} of the {@code EditReminderDescriptor} that we are building."},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    public EditReminderDescriptorBuilder withPriority(String priority) {"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"            ParserUtil.parsePriority(Optional.of(priority)).ifPresent(descriptor::setPriority);"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"            throw new IllegalArgumentException(\"priority is expected to be unique.\");"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":""},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"     * Sets the {@code Date} of the {@code EditReminderDescriptor} that we are building."},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"    public EditReminderDescriptorBuilder withDate(String date) {"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"            ParserUtil.parseDate(Optional.of(date)).ifPresent(descriptor::setDate);"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"            throw new IllegalArgumentException(\"date is expected to be unique.\");"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":""},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"     * Sets the {@code Message} of the {@code EditReminderDescriptor} that we are building."},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"    public EditReminderDescriptorBuilder withMessage(String message) {"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"            ParserUtil.parseMessage(Optional.of(message)).ifPresent(descriptor::setMessage);"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"            throw new IllegalArgumentException(\"message is expected to be unique.\");"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":""},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditReminderDescriptor}"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"     * that we are building."},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"    public EditReminderDescriptorBuilder withTags(String... tags) {"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":""},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"    public EditReminderDescriptor build() {"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"        return descriptor;"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":103}},{"path":"src/test/java/systemtests/FindReminderCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_REMINDERS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.DATING;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.GATHERING;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.testutil.TypicalReminders.KEYWORD_MATCHING_GROUP;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindReminderCommand;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"public class FindReminderCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":""},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        /* Case: find reminder where reminder list is not displaying the reminder we are finding -\u003e 1 reminder found */"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        String command \u003d FindReminderCommand.COMMAND_WORD + \" Dating\";"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel, DATING);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":""},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        /* Case: repeat previous find command where reminder list is displaying the reminders we are finding"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"         * -\u003e 2 reminders found"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_GROUP;"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":""},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple reminders in address book, 2 keywords -\u003e 2 reminders found */"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" birthday Gathering\";"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel, BIRTHDAY, GATHERING);"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":""},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple reminders in address book, 2 keywords in reversed order -\u003e 2 reminders found */"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" Gathering birthday\";"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":""},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple reminders in address book, 2 keywords with 1 repeat -\u003e 2 reminders found */"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" Gathering birthday Gathering\";"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":""},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"        /* Case: find multiple reminders in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"         * -\u003e 2 reminders found"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" Gathering birthday NonMatchingKeyWord\";"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":""},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":""},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":76,"author":{"gitID":"inGall"},"content":""},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"        /* Case: find same reminders in address book after deleting 1 of them -\u003e 1 reminder found */"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"        assert !getModel().getAddressBook().getReminderList().contains(BIRTHDAY);"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_GROUP;"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel, GATHERING);"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":""},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"        /* Case: find reminder in address book, keyword is same as name but of different case -\u003e 1 reminder found */"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" GrOuP\";"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":""},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"        /* Case: find reminder in address book, keyword is substring of name -\u003e 0 reminders found */"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" Gro\";"},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel);"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":""},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"        /* Case: find reminder in address book, name is substring of keyword -\u003e 0 reminders found */"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" Groups\";"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":""},{"lineNumber":103,"author":{"gitID":"inGall"},"content":"        /* Case: find reminder not in address book -\u003e 0 reminders found */"},{"lineNumber":104,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" Fishing\";"},{"lineNumber":105,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":106,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":107,"author":{"gitID":"inGall"},"content":""},{"lineNumber":108,"author":{"gitID":"inGall"},"content":"        /* Case: find priority of reminder in address book -\u003e 0 reminders found */"},{"lineNumber":109,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" \" + GATHERING.getPriority().value;"},{"lineNumber":110,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":111,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":112,"author":{"gitID":"inGall"},"content":""},{"lineNumber":113,"author":{"gitID":"inGall"},"content":"        /* Case: find date of reminder in address book -\u003e 0 reminders found */"},{"lineNumber":114,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" \" + GATHERING.getDate().date;"},{"lineNumber":115,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"inGall"},"content":""},{"lineNumber":118,"author":{"gitID":"inGall"},"content":"        /* Case: find message of reminder in address book -\u003e 0 reminders found */"},{"lineNumber":119,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" \" + GATHERING.getMessage().message;"},{"lineNumber":120,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"inGall"},"content":""},{"lineNumber":123,"author":{"gitID":"inGall"},"content":"        /* Case: find tags of reminder in address book -\u003e 0 reminders found */"},{"lineNumber":124,"author":{"gitID":"inGall"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(GATHERING.getTags());"},{"lineNumber":125,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":126,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"inGall"},"content":""},{"lineNumber":129,"author":{"gitID":"inGall"},"content":"        /* Case: find reminder in empty address book -\u003e 0 reminders found */"},{"lineNumber":130,"author":{"gitID":"inGall"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":131,"author":{"gitID":"inGall"},"content":"        assert getModel().getAddressBook().getReminderList().size() \u003d\u003d 0;"},{"lineNumber":132,"author":{"gitID":"inGall"},"content":"        command \u003d FindReminderCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_GROUP;"},{"lineNumber":133,"author":{"gitID":"inGall"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":134,"author":{"gitID":"inGall"},"content":"        ModelReminderHelper.setFilteredReminderList(expectedModel, GATHERING);"},{"lineNumber":135,"author":{"gitID":"inGall"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":136,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":137,"author":{"gitID":"inGall"},"content":""},{"lineNumber":138,"author":{"gitID":"inGall"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"inGall"},"content":"        command \u003d \"FiNdRemiNdeR Group\";"},{"lineNumber":140,"author":{"gitID":"inGall"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":141,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"inGall"},"content":""},{"lineNumber":143,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"inGall"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":145,"author":{"gitID":"inGall"},"content":"     * box displays {@code Messages#MESSAGE_REMINDER_LISTED_OVERVIEW} with the number of reminders in the filtered list,"},{"lineNumber":146,"author":{"gitID":"inGall"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":147,"author":{"gitID":"inGall"},"content":"     * These verifications are done by"},{"lineNumber":148,"author":{"gitID":"inGall"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"inGall"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":150,"author":{"gitID":"inGall"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":151,"author":{"gitID":"inGall"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":152,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"inGall"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":154,"author":{"gitID":"inGall"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":155,"author":{"gitID":"inGall"},"content":"                MESSAGE_REMINDERS_LISTED_OVERVIEW, expectedModel.getFilteredReminderList().size());"},{"lineNumber":156,"author":{"gitID":"inGall"},"content":""},{"lineNumber":157,"author":{"gitID":"inGall"},"content":"        executeCommand(command);"},{"lineNumber":158,"author":{"gitID":"inGall"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":159,"author":{"gitID":"inGall"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":160,"author":{"gitID":"inGall"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":161,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"inGall"},"content":""},{"lineNumber":163,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"inGall"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":165,"author":{"gitID":"inGall"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":166,"author":{"gitID":"inGall"},"content":"     * These verifications are done by"},{"lineNumber":167,"author":{"gitID":"inGall"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":168,"author":{"gitID":"inGall"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":169,"author":{"gitID":"inGall"},"content":"     * error style."},{"lineNumber":170,"author":{"gitID":"inGall"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":171,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"inGall"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":173,"author":{"gitID":"inGall"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":174,"author":{"gitID":"inGall"},"content":""},{"lineNumber":175,"author":{"gitID":"inGall"},"content":"        executeCommand(command);"},{"lineNumber":176,"author":{"gitID":"inGall"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":177,"author":{"gitID":"inGall"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":178,"author":{"gitID":"inGall"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":179,"author":{"gitID":"inGall"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":180,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":181}},{"path":"src/main/java/seedu/address/ui/Browser.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.MainApp;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":" * The Browser of the App."},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"public class Browser extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"    private static final String FXML \u003d \"Browser.fxml\";"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    private WebView browser;"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    public Browser() {"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"        loadDefaultPage();"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"    public void loadPage(String url) {"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"     *  Loads a default HTML file with a background that matches the general theme."},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    private void loadDefaultPage() {"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        // loadPage(\"https://i.pinimg.com/736x/25/9e/ab/"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"        // 259eab749e20a2594e83025c5cf9c79c--being-a-gentleman-gentleman-rules.jpg\");"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"    public void freeResources() {"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"        browser \u003d null;"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":60}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    /** Returns an unmodifiable view of the filtered list of reminders */"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    ObservableList\u003cReadOnlyReminder\u003e getFilteredReminderList();"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":4,"-":27}},{"path":"src/test/java/seedu/address/testutil/ReminderUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":" * A utility class for Reminder."},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"public class ReminderUtil {"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"     * Returns an add command string for adding the {@code reminder}."},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    public static String getAddReminderCommand(ReadOnlyReminder reminder) {"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        return AddReminderCommand.COMMAND_WORD + \" \" + getReminderDetails(reminder);"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"     * Returns the part of command string for the given {@code reminder}\u0027s details."},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    public static String getReminderDetails(ReadOnlyReminder reminder) {"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        sb.append(PREFIX_TASK + reminder.getTask().taskName + \" \");"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        sb.append(PREFIX_DATE + reminder.getDate().date + \" \");"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"        sb.append(PREFIX_PRIORITY + reminder.getPriority().value + \" \");"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        sb.append(PREFIX_MESSAGE + reminder.getMessage().message + \" \");"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        reminder.getTags().stream().forEach("},{"lineNumber":34,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":9,"duyson98":23,"-":6}},{"path":"src/test/java/guitests/guihandles/ReminderCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package guitests.guihandles;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":" * Provides a handle to a reminder card in the reminder list panel."},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"public class ReminderCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    private static final String TASK_FIELD_ID \u003d \"#task\";"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    private static final String PRIORITY_FIELD_ID \u003d \"#priority\";"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"    private static final String DATE_FIELD_ID \u003d \"#datentime\";"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    private static final String MESSAGE_FIELD_ID \u003d \"#message\";"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    private final Label idLabel;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    private final Label taskLabel;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    private final Label priorityLabel;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    private final Label dateLabel;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    private final Label messageLabel;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    public ReminderCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        this.taskLabel \u003d getChildNode(TASK_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        this.priorityLabel \u003d getChildNode(PRIORITY_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        this.dateLabel \u003d getChildNode(DATE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        this.messageLabel \u003d getChildNode(MESSAGE_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"                .stream()"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"                .map(Label.class::cast)"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"                .collect(Collectors.toList());"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    public String getId() {"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        return idLabel.getText();"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"    public String getTask() {"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        return taskLabel.getText();"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"    public String getPriority() {"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        return priorityLabel.getText();"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    public String getDate() {"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        return dateLabel.getText();"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"    public String getMessage() {"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        return messageLabel.getText();"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        return tagLabels"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"                .stream()"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"                .map(Label::getText)"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"                .collect(Collectors.toList());"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":73}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"            Birthday birthday \u003d new Birthday(\"\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"            ReadOnlyPerson person \u003d new Person(name, phone, email, address, birthday, tagList);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":3,"-":64}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToReminderRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":" * Indicates a request to jump to the list of reminder"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"public class JumpToReminderRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"    public JumpToReminderRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":7,"-":15}},{"path":"src/main/java/seedu/address/commons/events/ui/ReminderPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import seedu.address.ui.ReminderCard;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":" * Represents a selection change in the Reminder List Panel"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"public class ReminderPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    private final ReminderCard newSelection;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    public ReminderPanelSelectionChangedEvent(ReminderCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"    public ReminderCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"inGall":3,"cqhchan":12,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/DeleteReminderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstReminderOnly;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_REMINDER;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_REMINDER;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalReminders.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteReminderCommand}."},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"public class DeleteReminderCommandTest {"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        ReadOnlyReminder reminderToDelete \u003d model.getFilteredReminderList().get(INDEX_FIRST_REMINDER.getZeroBased());"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        DeleteReminderCommand command \u003d prepareCommand(INDEX_FIRST_REMINDER);"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(DeleteReminderCommand.MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete);"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteReminder(reminderToDelete);"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredReminderList().size() + 1);"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        DeleteReminderCommand command \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        showFirstReminderOnly(model);"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        ReadOnlyReminder reminderToDelete \u003d model.getFilteredReminderList().get(INDEX_FIRST_REMINDER.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        DeleteReminderCommand command \u003d prepareCommand(INDEX_FIRST_REMINDER);"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(DeleteReminderCommand.MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete);"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getDatabase(), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteReminder(reminderToDelete);"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        showNoReminder(expectedModel);"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"        showFirstReminderOnly(model);"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_REMINDER;"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getReminderList().size());"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        DeleteReminderCommand command \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"    public void equals() {"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"        DeleteReminderCommand command \u003d new DeleteReminderCommand(INDEX_FIRST_REMINDER);"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"        // same object -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"        // same values -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"        DeleteReminderCommand commandCopy \u003d new DeleteReminderCommand(INDEX_FIRST_REMINDER);"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        assertTrue(command.equals(commandCopy));"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"        // different types -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(new ClearCommand()));"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"        // null -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"        // different reminder -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"        DeleteReminderCommand anotherCommand \u003d new DeleteReminderCommand(INDEX_SECOND_REMINDER);"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"        assertFalse(command.equals(anotherCommand));"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"     * Returns a {@code DeleteReminderCommand} with the parameter {@code index}."},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"    private DeleteReminderCommand prepareCommand(Index index) {"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"        DeleteReminderCommand command \u003d new DeleteReminderCommand(index);"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        return command;"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"     * Updates {@code model}\u0027s filtered list to show no reminder."},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"    private void showNoReminder(Model model) {"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"        model.updateFilteredReminderList(r -\u003e false);"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"        assert model.getFilteredReminderList().isEmpty();"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":122}},{"path":"src/main/java/seedu/address/ui/ReminderCard.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import java.util.Random;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import java.util.Timer;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import java.util.TimerTask;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.control.Label;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":" * An UI component that displays information of a {@code Reminder}."},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"public class ReminderCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    public static final int TIMER_DELAY \u003d 0; // in milliseconds"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    public static final int TIMER_PERIOD \u003d 5000000; // in milliseconds"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    public static final int GREEN_WARNING_DAYS_LEFT \u003d 7;"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"    public static final int YELLOW_WARNING_DAYS_LEFT \u003d 3;"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"    public static final int ORANGE_WARNING_DAYS_LEFT \u003d 0;"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"    private static final String FXML \u003d \"ReminderListCard.fxml\";"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    private static String[] colors \u003d { \"red\", \"blue\", \"purple\", \"orange\", \"brown\","},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"        \"green\", \"magenta\", \"black\", \"grey\" };"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    private static HashMap\u003cString, String\u003e tagColors \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"    private static Random random \u003d new Random();"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"    public final ReadOnlyReminder reminder;"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    @javafx.fxml.FXML"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    private HBox remindercardPane;"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    private Label task;"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"    private Label id;"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"    private Label priority;"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"    private Label datentime;"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"    private Label message;"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"    private FlowPane tags;"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"    private Label daysCountdown;"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"    public ReminderCard(ReadOnlyReminder reminder, int displayedIndex) {"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        super(FXML);"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"        this.reminder \u003d reminder;"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"        initTags(reminder);"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"        bindListeners(reminder);"},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":"        initCountdown(reminder);"},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"    private static String getColorForTag(String tagValue) {"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":"        if (!tagColors.containsKey(tagValue)) {"},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"            tagColors.put(tagValue, colors[random.nextInt(colors.length)]);"},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"        return tagColors.get(tagValue);"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"     * so that they will be notified of any changes."},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":"    private void bindListeners(ReadOnlyReminder reminder) {"},{"lineNumber":89,"author":{"gitID":"cqhchan"},"content":"        task.textProperty().bind(Bindings.convert(reminder.taskProperty()));"},{"lineNumber":90,"author":{"gitID":"cqhchan"},"content":"        priority.textProperty().bind(Bindings.convert(reminder.priorityProperty()));"},{"lineNumber":91,"author":{"gitID":"cqhchan"},"content":"        datentime.textProperty().bind(Bindings.convert(reminder.dateProperty()));"},{"lineNumber":92,"author":{"gitID":"cqhchan"},"content":"        message.textProperty().bind(Bindings.convert(reminder.messageProperty()));"},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":"        reminder.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":"            tags.getChildren().clear();"},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":"            initTags(reminder);"},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"        });"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":99,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"cqhchan"},"content":"     * @param reminder"},{"lineNumber":101,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":"    private void initTags(ReadOnlyReminder reminder) {"},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"        reminder.getTags().forEach(tag -\u003e {"},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":"            tagLabel.setStyle(\"-fx-background-color: \" + getColorForTag(tag.tagName));"},{"lineNumber":106,"author":{"gitID":"cqhchan"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":107,"author":{"gitID":"cqhchan"},"content":"        });"},{"lineNumber":108,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"     * @param reminder"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"    private void initCountdown(ReadOnlyReminder reminder) {"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"        // Calculates the day difference between the reminder\u0027s date and the current date"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"        // Todo: Minus 1 day in day difference if the current time passes the reminder\u0027s time"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"        final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"        LocalDate deadline \u003d LocalDate.parse(reminder.getDate().toString(), dateFormatter);"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"        LocalDate currentTime \u003d LocalDate.now();"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"        int daysBetween \u003d (int) ChronoUnit.DAYS.between(currentTime, deadline);"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"        setDaysCountdownBasedOnDays(daysBetween);"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"        if (daysBetween \u003e\u003d ORANGE_WARNING_DAYS_LEFT) { // Only start the countdown if the deadline is not overdue"},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"            startDaysCountdown(deadline);"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"     * Starts the countdown."},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"    private void startDaysCountdown(LocalDate date) {"},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":"        final Timer timer \u003d new Timer();"},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"        TimerTask task \u003d new TimerTask() {"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"            @Override"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"            public void run() {"},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":"                LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"                int newDaysBetween \u003d (int) ChronoUnit.DAYS.between(currentDate, date);"},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":"                Platform.runLater(() -\u003e setDaysCountdownBasedOnDays(newDaysBetween));"},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":141,"author":{"gitID":"duyson98"},"content":"        };"},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":"        timer.scheduleAtFixedRate(task, TIMER_DELAY, TIMER_PERIOD);"},{"lineNumber":143,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"    private void setDaysCountdownBasedOnDays(int days) {"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":"        setDaysCountdownContentBasedOnDays(days);"},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"        setDaysCountdownColorBasedOnDays(days);"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":"    private void setDaysCountdownContentBasedOnDays(int days) {"},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"        if (days \u003e ORANGE_WARNING_DAYS_LEFT) {"},{"lineNumber":152,"author":{"gitID":"duyson98"},"content":"            daysCountdown.setText(days + \" day(s)\" + \" left\");"},{"lineNumber":153,"author":{"gitID":"duyson98"},"content":"        } else if (days \u003d\u003d ORANGE_WARNING_DAYS_LEFT) {"},{"lineNumber":154,"author":{"gitID":"duyson98"},"content":"            daysCountdown.setText(\"today\");"},{"lineNumber":155,"author":{"gitID":"duyson98"},"content":"        } else {"},{"lineNumber":156,"author":{"gitID":"duyson98"},"content":"            daysCountdown.setText(\"overdue\");"},{"lineNumber":157,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":160,"author":{"gitID":"duyson98"},"content":"    private void setDaysCountdownColorBasedOnDays(int days) {"},{"lineNumber":161,"author":{"gitID":"duyson98"},"content":"        if (days \u003e\u003d GREEN_WARNING_DAYS_LEFT) {"},{"lineNumber":162,"author":{"gitID":"duyson98"},"content":"            daysCountdown.setStyle(\"-fx-text-fill: \" + \"greenyellow\");"},{"lineNumber":163,"author":{"gitID":"duyson98"},"content":"        } else if (days \u003e\u003d YELLOW_WARNING_DAYS_LEFT) {"},{"lineNumber":164,"author":{"gitID":"duyson98"},"content":"            daysCountdown.setStyle(\"-fx-text-fill: \" + \"yellow\");"},{"lineNumber":165,"author":{"gitID":"duyson98"},"content":"        } else if (days \u003e\u003d ORANGE_WARNING_DAYS_LEFT) {"},{"lineNumber":166,"author":{"gitID":"duyson98"},"content":"            daysCountdown.setStyle(\"-fx-text-fill: \" + \"orange\");"},{"lineNumber":167,"author":{"gitID":"duyson98"},"content":"        } else {"},{"lineNumber":168,"author":{"gitID":"duyson98"},"content":"            daysCountdown.setStyle(\"-fx-text-fill: \" + \"red\");"},{"lineNumber":169,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":172,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":173,"author":{"gitID":"cqhchan"},"content":"    //@@author cqhchan"},{"lineNumber":174,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"cqhchan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":176,"author":{"gitID":"cqhchan"},"content":"        // short circuit if same object"},{"lineNumber":177,"author":{"gitID":"cqhchan"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":178,"author":{"gitID":"cqhchan"},"content":"            return true;"},{"lineNumber":179,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":181,"author":{"gitID":"cqhchan"},"content":"        // instanceof handles nulls"},{"lineNumber":182,"author":{"gitID":"cqhchan"},"content":"        if (!(other instanceof ReminderCard)) {"},{"lineNumber":183,"author":{"gitID":"cqhchan"},"content":"            return false;"},{"lineNumber":184,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":186,"author":{"gitID":"cqhchan"},"content":"        // state check"},{"lineNumber":187,"author":{"gitID":"cqhchan"},"content":"        ReminderCard card \u003d (ReminderCard) other;"},{"lineNumber":188,"author":{"gitID":"cqhchan"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":189,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 reminder.equals(card.reminder);"},{"lineNumber":190,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":192,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":128,"duyson98":64}},{"path":"src/main/java/seedu/address/ui/ReminderListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.events.ui.JumpToReminderRequestEvent;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.events.ui.ReminderPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":" * Panel containing the list of reminders."},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"public class ReminderListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    private static final String FXML \u003d \"ReminderListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    @javafx.fxml.FXML"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    private ListView\u003cReminderCard\u003e reminderListView;"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"    public ReminderListPanel(ObservableList\u003cReadOnlyReminder\u003e reminderList) {"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"        setConnections(reminderList);"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    private void setConnections(ObservableList\u003cReadOnlyReminder\u003e reminderList) {"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"        ObservableList\u003cReminderCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"                reminderList, (reminder) -\u003e new ReminderCard(reminder, reminderList.indexOf(reminder) + 1));"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"        reminderListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"        reminderListView.setCellFactory(listView -\u003e new ReminderListPanel.ReminderListViewCell());"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        reminderListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"                        raise(new ReminderPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"            reminderListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"            reminderListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"    private void handleJumpToListRequestEvent(JumpToReminderRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"    class ReminderListViewCell extends ListCell\u003cReminderCard\u003e {"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":"        protected void updateItem(ReminderCard reminder, boolean empty) {"},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"            super.updateItem(reminder, empty);"},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"            if (empty || reminder \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"                setGraphic(null);"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"                setText(null);"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":"            } else {"},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"                setGraphic(reminder.getRoot());"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":89,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":89}},{"path":"src/main/java/seedu/address/commons/events/model/DatabaseChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"public class DatabaseChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"    public final ReadOnlyDatabase data;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    public DatabaseChangedEvent(ReadOnlyDatabase data) {"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"        this.data \u003d data;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"        return \"number of persons \" + data.getAccountList().size();"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":20}},{"path":"src/test/java/seedu/address/testutil/ReminderBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Date;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Message;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Priority;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Task;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":" * A utility class to help with building Reminder objects."},{"lineNumber":18,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"public class ReminderBuilder {"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":""},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    public static final String DEFAULT_TASK \u003d \"James birthday\";"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"Low\";"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    public static final String DEFAULT_DATE \u003d \"02/02/2017 20:17\";"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    public static final String DEFAULT_MESSAGE \u003d \"Buy present with others\";"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public static final String DEFAULT_TAGS \u003d \"Watch\";"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    private Reminder reminder;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"    public ReminderBuilder() {"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"            Task defaultTask \u003d new Task(DEFAULT_TASK);"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            Priority defaultPriority \u003d new Priority(DEFAULT_PRIORITY);"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"            Date defaultDate \u003d new Date(DEFAULT_DATE);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"            Message defaultMessage \u003d new Message(DEFAULT_MESSAGE);"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"            this.reminder \u003d new Reminder(defaultTask, defaultPriority, defaultDate, defaultMessage, defaultTags);"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"            throw new AssertionError(\"Default reminder\u0027s values are invalid.\");"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"     * Initializes the ReminderBuilder with the data of {@code reminderToCopy}."},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"    public ReminderBuilder(ReadOnlyReminder reminderToCopy) {"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        this.reminder \u003d new Reminder(reminderToCopy);"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":""},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"     * Sets the {@code Task} of the {@code Reminder} that we are building."},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"    public ReminderBuilder withTask(String task) {"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"            this.reminder.setTask(new Task(task));"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"            throw new IllegalArgumentException(\"task is expected to be unique.\");"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":""},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Reminder} that we are building."},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"    public ReminderBuilder withTags(String ... tags) {"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"            this.reminder.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":""},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"     * Sets the {@code Message} of the {@code Reminder} that we are building."},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"    public ReminderBuilder withMessage(String message) {"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"        this.reminder.setMessage(new Message(message));"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":""},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"     * Sets the {@code Priority} of the {@code Reminder} that we are building."},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"    public ReminderBuilder withPriority(String priority) {"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"            this.reminder.setPriority(new Priority(priority));"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"            throw new IllegalArgumentException(\"priority is expected to be unique.\");"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":""},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"     * Sets the {@code Date} of the {@code Reminder} that we are building."},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"inGall"},"content":"    public ReminderBuilder withDate(String date) {"},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"            this.reminder.setDate(new Date(date));"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":"            throw new IllegalArgumentException(\"date is expected to be unique.\");"},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"inGall"},"content":""},{"lineNumber":105,"author":{"gitID":"inGall"},"content":"    public Reminder build() {"},{"lineNumber":106,"author":{"gitID":"inGall"},"content":"        return this.reminder;"},{"lineNumber":107,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"inGall"},"content":""},{"lineNumber":109,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":109}},{"path":"src/test/java/seedu/address/logic/commands/CreateAccountCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Database;"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"import seedu.address.testutil.AccountBuilder;"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"public class CreateAccountCommandTest {"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"        new CreateAccountCommand(null);"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"    public void execute_accountAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        ModelStubAcceptingAccountAdded modelStub \u003d new ModelStubAcceptingAccountAdded();"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"        Account validAccount \u003d new AccountBuilder().build();"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"        CommandResult commandResult \u003d getCreateAccountCommandForAccount(validAccount, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"        assertEquals(String.format(CreateAccountCommand.MESSAGE_SUCCESS, validAccount), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"        assertEquals(Arrays.asList(validAccount), modelStub.accountsAdded);"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateAccountException();"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"        Account validAccount \u003d new AccountBuilder().build();"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"        thrown.expectMessage(CreateAccountCommand.MESSAGE_DUPLICATE_ACCOUNT);"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"        getCreateAccountCommandForAccount(validAccount, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"        Account alice \u003d new AccountBuilder().withUsername(\"Alice\").build();"},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":"        Account bob \u003d new AccountBuilder().withUsername(\"Bob\").build();"},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"        CreateAccountCommand addAliceCommand \u003d new CreateAccountCommand(alice);"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":"        CreateAccountCommand addBobCommand \u003d new CreateAccountCommand(bob);"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"        CreateAccountCommand addAliceCommandCopy \u003d new CreateAccountCommand(alice);"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":89,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":90,"author":{"gitID":"cqhchan"},"content":"        // different person -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"cqhchan"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":92,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":"     * Generates a new CreateAccountCommand with the details of the given person."},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":"    private CreateAccountCommand getCreateAccountCommandForAccount(Account account, Model model) {"},{"lineNumber":98,"author":{"gitID":"cqhchan"},"content":"        CreateAccountCommand command \u003d new CreateAccountCommand(account);"},{"lineNumber":99,"author":{"gitID":"cqhchan"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"cqhchan"},"content":"        return command;"},{"lineNumber":101,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"    private class ModelStub implements Model {"},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"cqhchan"},"content":"        public boolean checkAccount(ReadOnlyAccount account) {"},{"lineNumber":110,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":111,"author":{"gitID":"cqhchan"},"content":"            return true;"},{"lineNumber":112,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"cqhchan"},"content":"        public void addAccount(ReadOnlyAccount account) throws DuplicateAccountException {"},{"lineNumber":115,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":116,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"cqhchan"},"content":"        public void addReminder(ReadOnlyReminder newData) {"},{"lineNumber":119,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":122,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"cqhchan"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":124,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":127,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"cqhchan"},"content":"        public void resetDatabase(ReadOnlyDatabase newData) {"},{"lineNumber":129,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":132,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"cqhchan"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":134,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"cqhchan"},"content":"            return null;"},{"lineNumber":136,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":138,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"cqhchan"},"content":"        public ReadOnlyDatabase getDatabase() {"},{"lineNumber":140,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"cqhchan"},"content":"            return null;"},{"lineNumber":142,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":144,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"cqhchan"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":146,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":149,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"cqhchan"},"content":"        public void deleteAccount(ReadOnlyAccount account) throws PersonNotFoundException {"},{"lineNumber":151,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":154,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"cqhchan"},"content":"        public void deleteReminder(ReadOnlyReminder target) throws ReminderNotFoundException {"},{"lineNumber":156,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":159,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"cqhchan"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":161,"author":{"gitID":"cqhchan"},"content":"                throws DuplicatePersonException {"},{"lineNumber":162,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":165,"author":{"gitID":"cqhchan"},"content":"        public void updateAccount(ReadOnlyAccount account, ReadOnlyAccount editedAccount)"},{"lineNumber":166,"author":{"gitID":"cqhchan"},"content":"                throws DuplicateAccountException {"},{"lineNumber":167,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":170,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":171,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"cqhchan"},"content":"        public void updateReminder(ReadOnlyReminder target, ReadOnlyReminder editedReminder)"},{"lineNumber":173,"author":{"gitID":"cqhchan"},"content":"                throws DuplicateReminderException {"},{"lineNumber":174,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":177,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"cqhchan"},"content":"        public void deleteUnusedTag(Tag tag) {"},{"lineNumber":179,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":182,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"cqhchan"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":184,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"cqhchan"},"content":"            return null;"},{"lineNumber":186,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":188,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"cqhchan"},"content":"        public ObservableList\u003cReadOnlyAccount\u003e getFilteredAccountList() {"},{"lineNumber":190,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"cqhchan"},"content":"            return null;"},{"lineNumber":192,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":194,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":195,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"cqhchan"},"content":"        public ObservableList\u003cReadOnlyReminder\u003e getFilteredReminderList() {"},{"lineNumber":197,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":198,"author":{"gitID":"cqhchan"},"content":"            return null;"},{"lineNumber":199,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":201,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"cqhchan"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":203,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":206,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"cqhchan"},"content":"        public void updateFilteredAccountList(Predicate\u003cReadOnlyAccount\u003e predicate) {"},{"lineNumber":208,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":209,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":211,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":212,"author":{"gitID":"cqhchan"},"content":"        public void updateFilteredReminderList(Predicate\u003cReadOnlyReminder\u003e predicate) {"},{"lineNumber":213,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":214,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":216,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"cqhchan"},"content":"        public void deletePersonTag(Tag tag) {"},{"lineNumber":218,"author":{"gitID":"cqhchan"},"content":"            fail(\"This metthod should not be called.\");"},{"lineNumber":219,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":221,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":222,"author":{"gitID":"cqhchan"},"content":"        public void deleteReminderTag(Tag tag) {"},{"lineNumber":223,"author":{"gitID":"cqhchan"},"content":"            fail(\"This metthod should not be called.\");"},{"lineNumber":224,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":226,"author":{"gitID":"cqhchan"},"content":"        public Boolean checkIfPersonListEmpty(ArrayList\u003cReadOnlyPerson\u003e contactList) {"},{"lineNumber":227,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":228,"author":{"gitID":"cqhchan"},"content":"            return false;"},{"lineNumber":229,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":231,"author":{"gitID":"cqhchan"},"content":"        public Boolean checkIfReminderListEmpty(ArrayList\u003cReadOnlyReminder\u003e reminderList) {"},{"lineNumber":232,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":233,"author":{"gitID":"cqhchan"},"content":"            return false;"},{"lineNumber":234,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":236,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"cqhchan"},"content":"        public void sortListByName(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":238,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":239,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":241,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":242,"author":{"gitID":"cqhchan"},"content":"        public void sortListByBirthday(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":243,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":244,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":246,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"cqhchan"},"content":"        public void sortListByAge(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":248,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":249,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":251,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"cqhchan"},"content":"        public void sortListByPriority(ArrayList\u003cReadOnlyReminder\u003e contactList)  throws CommandException {"},{"lineNumber":253,"author":{"gitID":"cqhchan"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":254,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":257,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"cqhchan"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":259,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"cqhchan"},"content":"    private class ModelStubThrowingDuplicateAccountException extends ModelStub {"},{"lineNumber":261,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":262,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":263,"author":{"gitID":"cqhchan"},"content":"        public void addAccount(ReadOnlyAccount account) throws DuplicateAccountException {"},{"lineNumber":264,"author":{"gitID":"cqhchan"},"content":"            throw new DuplicateAccountException();"},{"lineNumber":265,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":267,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":268,"author":{"gitID":"cqhchan"},"content":"        public ReadOnlyDatabase getDatabase() {"},{"lineNumber":269,"author":{"gitID":"cqhchan"},"content":"            return new Database();"},{"lineNumber":270,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":273,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":274,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"cqhchan"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":276,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"cqhchan"},"content":"    private class ModelStubAcceptingAccountAdded extends ModelStub {"},{"lineNumber":278,"author":{"gitID":"cqhchan"},"content":"        final ArrayList\u003cAccount\u003e accountsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":279,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":280,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":281,"author":{"gitID":"cqhchan"},"content":"        public void addAccount(ReadOnlyAccount account) throws DuplicateAccountException {"},{"lineNumber":282,"author":{"gitID":"cqhchan"},"content":"            accountsAdded.add(new Account(account));"},{"lineNumber":283,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":285,"author":{"gitID":"cqhchan"},"content":"        @Override"},{"lineNumber":286,"author":{"gitID":"cqhchan"},"content":"        public ReadOnlyDatabase getDatabase() {"},{"lineNumber":287,"author":{"gitID":"cqhchan"},"content":"            return new Database();"},{"lineNumber":288,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":290}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowProfileRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":" * Indicates a request to view the profile of a person in filtered list."},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"public class ShowProfileRequestEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"    public ShowProfileRequestEvent(ReadOnlyPerson person) {"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"        this.person \u003d person;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":24}},{"path":"src/test/java/seedu/address/testutil/TypicalReminders.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ASSIGNMENT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PROJECT;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_ASSIGNMENT;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MESSAGE_PROJECT;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_ASSIGNMENT;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_OFFICE;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SOFTCOPY;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_ASSIGNMENT;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PROJECT;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":" * A utility class containing a list of {@code Reminder} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"public class TypicalReminders {"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":""},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder BIRTHDAY \u003d new ReminderBuilder().withTask(\"James birthday\")"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"            .withPriority(\"Low\").withDate(\"02/02/2017 16:00\").withMessage(\"Buy present with others.\")"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"            .withTags(\"Watch\", \"friends\", \"retrieveTester\").build();"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder DATING \u003d new ReminderBuilder().withTask(\"Dating with Joanne\")"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            .withPriority(\"Low\").withDate(\"01/01/2017 15:00\").withMessage(\"Meet at Clementi\")"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"            .withTags(\"Present\", \"retrieveTester\").build();"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder GATHERING \u003d new ReminderBuilder().withTask(\"Gathering with friends\")"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"            .withMessage(\"Gather at John\u0027s house\").withDate(\"05/05/2017 12:00\").withPriority(\"Medium\").build();"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder LUNCH \u003d new ReminderBuilder().withTask(\"Lunch with Joseph\")"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"            .withMessage(\"Venue at JE\").withDate(\"06/06/2017 12:00\").withPriority(\"Medium\").build();"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder MEETING \u003d new ReminderBuilder().withTask(\"Group Meeting\")"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"            .withMessage(\"Have all reports ready\").withDate(\"04/04/2017 09:00\").withPriority(\"High\").build();"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder PARTY \u003d new ReminderBuilder().withTask(\"Group Party\")"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"            .withMessage(\"DressCode is black and white\").withDate(\"03/03/2017 20:00\").withPriority(\"High\").build();"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":""},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"    // Manually added"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder DINNER \u003d new ReminderBuilder().withTask(\"Dinner at home\")"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"            .withMessage(\"Steamboat\").withDate(\"07/07/2017 18:00\").withPriority(\"Medium\").build();"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder COLLECTION \u003d new ReminderBuilder().withTask(\"Items Collection\")"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"            .withMessage(\"Collect items at post office\").withDate(\"08/08/2017 18:00\").withPriority(\"Low\").build();"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":""},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"    // Manually added - Reminder\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder PROJECT \u003d new ReminderBuilder().withTask(VALID_TASK_PROJECT)"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"            .withMessage(VALID_MESSAGE_PROJECT).withDate(VALID_DATE_PROJECT).withPriority(VALID_PRIORITY_PROJECT)"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"            .withTags(VALID_TAG_OFFICE).build();"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"    public static final ReadOnlyReminder ASSIGNMENT \u003d new ReminderBuilder().withTask(VALID_TASK_ASSIGNMENT)"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"            .withMessage(VALID_MESSAGE_ASSIGNMENT).withDate(VALID_DATE_ASSIGNMENT)"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"            .withPriority(VALID_PRIORITY_ASSIGNMENT).withTags(VALID_TAG_SOFTCOPY, VALID_TAG_OFFICE).build();"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":""},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"    public static final String KEYWORD_MATCHING_GROUP \u003d \"Group\"; // A keyword that matches GROUP"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":""},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"    // A keyword that matches RETRIEVETESTER"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"    public static final String KEYWORD_MATCHING_RETRIEVETESTER \u003d \"retrieveTester\";"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":""},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"    private TypicalReminders() {} // prevents instantiation"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":""},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        for (ReadOnlyReminder reminder : getTypicalReminders()) {"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"            try {"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"                ab.addReminder(reminder);"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"            } catch (DuplicateReminderException e) {"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"                assert false : \"not possible\";"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"        return ab;"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":""},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"    public static List\u003cReadOnlyReminder\u003e getTypicalReminders() {"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BIRTHDAY, DATING, GATHERING, LUNCH, MEETING, PARTY));"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":82}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    public static final Prefix PREFIX_TASK \u003d new Prefix(\"z/\");"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public static final Prefix PREFIX_MESSAGE \u003d new Prefix(\"m/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":4,"cqhchan":2,"duyson98":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.BirthdayCommand;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.CreateAccountCommand;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.DeleteReminderCommand;"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.EditReminderCommand;"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindEmailCommand;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindPriorityCommand;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindReminderCommand;"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.ListReminderCommand;"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.LogoutCommand;"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.RetagCommand;"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.RetrieveCommand;"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.SelectReminderCommand;"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.SortAgeCommand;"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.SortBirthdayCommand;"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.SortPriorityCommand;"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.UntagCommand;"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"        case CreateAccountCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"        case CreateAccountCommand.COMMAND_ALIAS:"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"            return new CreateAccountCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        case BirthdayCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"        case BirthdayCommand.COMMAND_ALIAS:"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"            return new BirthdayCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"cqhchan"},"content":"        case LoginCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"cqhchan"},"content":"            return new LoginCommandParser().parse(arguments);"},{"lineNumber":92,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":"        case LogoutCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":"            return new LogoutCommand();"},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"cqhchan"},"content":"        case SelectReminderCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"cqhchan"},"content":"        case SelectReminderCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":"            return new SelectReminderCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"        case ViewCommand.COMMAND_ALIAS:"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"inGall"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"inGall"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"inGall"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"inGall"},"content":"        case FindEmailCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"inGall"},"content":"        case FindEmailCommand.COMMAND_ALIAS:"},{"lineNumber":122,"author":{"gitID":"inGall"},"content":"            return new FindEmailCommandParser().parse(arguments);"},{"lineNumber":123,"author":{"gitID":"inGall"},"content":""},{"lineNumber":124,"author":{"gitID":"inGall"},"content":"        case FindPhoneCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"inGall"},"content":"        case FindPhoneCommand.COMMAND_ALIAS:"},{"lineNumber":126,"author":{"gitID":"inGall"},"content":"            return new FindPhoneCommandParser().parse(arguments);"},{"lineNumber":127,"author":{"gitID":"inGall"},"content":""},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"        case RetrieveCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"inGall"},"content":"        case RetrieveCommand.COMMAND_ALIAS:"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"            return new RetrieveCommandParser().parse(arguments);"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"        case TagCommand.COMMAND_WORD:"},{"lineNumber":133,"author":{"gitID":"inGall"},"content":"        case TagCommand.COMMAND_ALIAS:"},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"            return new TagCommandParser().parse(arguments);"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"        case UntagCommand.COMMAND_WORD:"},{"lineNumber":137,"author":{"gitID":"inGall"},"content":"        case UntagCommand.COMMAND_ALIAS:"},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"            return new UntagCommandParser().parse(arguments);"},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"        case RetagCommand.COMMAND_WORD:"},{"lineNumber":141,"author":{"gitID":"inGall"},"content":"        case RetagCommand.COMMAND_ALIAS:"},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":"            return new RetagCommandParser().parse(arguments);"},{"lineNumber":143,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":145,"author":{"gitID":"inGall"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":149,"author":{"gitID":"inGall"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":156,"author":{"gitID":"inGall"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":160,"author":{"gitID":"inGall"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":164,"author":{"gitID":"inGall"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"inGall"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":168,"author":{"gitID":"inGall"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":169,"author":{"gitID":"inGall"},"content":"            return new SortCommand();"},{"lineNumber":170,"author":{"gitID":"inGall"},"content":""},{"lineNumber":171,"author":{"gitID":"inGall"},"content":"        case SortAgeCommand.COMMAND_WORD:"},{"lineNumber":172,"author":{"gitID":"inGall"},"content":"        case SortAgeCommand.COMMAND_ALIAS:"},{"lineNumber":173,"author":{"gitID":"inGall"},"content":"            return new SortAgeCommand();"},{"lineNumber":174,"author":{"gitID":"inGall"},"content":""},{"lineNumber":175,"author":{"gitID":"inGall"},"content":"        case SortBirthdayCommand.COMMAND_WORD:"},{"lineNumber":176,"author":{"gitID":"inGall"},"content":"        case SortBirthdayCommand.COMMAND_ALIAS:"},{"lineNumber":177,"author":{"gitID":"inGall"},"content":"            return new SortBirthdayCommand();"},{"lineNumber":178,"author":{"gitID":"inGall"},"content":""},{"lineNumber":179,"author":{"gitID":"inGall"},"content":"        case AddReminderCommand.COMMAND_WORD:"},{"lineNumber":180,"author":{"gitID":"inGall"},"content":"        case AddReminderCommand.COMMAND_ALIAS:"},{"lineNumber":181,"author":{"gitID":"inGall"},"content":"            return new AddReminderCommandParser().parse(arguments);"},{"lineNumber":182,"author":{"gitID":"inGall"},"content":""},{"lineNumber":183,"author":{"gitID":"inGall"},"content":"        case DeleteReminderCommand.COMMAND_WORD:"},{"lineNumber":184,"author":{"gitID":"inGall"},"content":"        case DeleteReminderCommand.COMMAND_ALIAS:"},{"lineNumber":185,"author":{"gitID":"inGall"},"content":"            return new DeleteReminderCommandParser().parse(arguments);"},{"lineNumber":186,"author":{"gitID":"inGall"},"content":""},{"lineNumber":187,"author":{"gitID":"inGall"},"content":"        case EditReminderCommand.COMMAND_WORD:"},{"lineNumber":188,"author":{"gitID":"inGall"},"content":"        case EditReminderCommand.COMMAND_ALIAS:"},{"lineNumber":189,"author":{"gitID":"inGall"},"content":"            return new EditReminderCommandParser().parse(arguments);"},{"lineNumber":190,"author":{"gitID":"inGall"},"content":""},{"lineNumber":191,"author":{"gitID":"inGall"},"content":"        case FindPriorityCommand.COMMAND_WORD:"},{"lineNumber":192,"author":{"gitID":"inGall"},"content":"        case FindPriorityCommand.COMMAND_ALIAS:"},{"lineNumber":193,"author":{"gitID":"inGall"},"content":"            return new FindPriorityCommandParser().parse(arguments);"},{"lineNumber":194,"author":{"gitID":"inGall"},"content":""},{"lineNumber":195,"author":{"gitID":"inGall"},"content":"        case FindReminderCommand.COMMAND_WORD:"},{"lineNumber":196,"author":{"gitID":"inGall"},"content":"        case FindReminderCommand.COMMAND_ALIAS:"},{"lineNumber":197,"author":{"gitID":"inGall"},"content":"            return new FindReminderCommandParser().parse(arguments);"},{"lineNumber":198,"author":{"gitID":"inGall"},"content":""},{"lineNumber":199,"author":{"gitID":"inGall"},"content":"        case ListReminderCommand.COMMAND_WORD:"},{"lineNumber":200,"author":{"gitID":"inGall"},"content":"        case ListReminderCommand.COMMAND_ALIAS:"},{"lineNumber":201,"author":{"gitID":"inGall"},"content":"            return new ListReminderCommand();"},{"lineNumber":202,"author":{"gitID":"inGall"},"content":""},{"lineNumber":203,"author":{"gitID":"inGall"},"content":"        case SortPriorityCommand.COMMAND_WORD:"},{"lineNumber":204,"author":{"gitID":"inGall"},"content":"        case SortPriorityCommand.COMMAND_ALIAS:"},{"lineNumber":205,"author":{"gitID":"inGall"},"content":"            return new SortPriorityCommand();"},{"lineNumber":206,"author":{"gitID":"inGall"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":76,"cqhchan":37,"duyson98":19,"-":80}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Date;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Message;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Priority;"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Task;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"     * Parses a {@code Optional\u003cString\u003e taskName} into an {@code Optional\u003cTask\u003e} if {@code taskName} is present."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"    public static Optional\u003cTask\u003e parseTask(Optional\u003cString\u003e taskName) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"        requireNonNull(taskName);"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"        return taskName.isPresent() ? Optional.of(new Task(taskName.get())) : Optional.empty();"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"     * Parses a {@code Optional\u003cString\u003e priority} into an {@code Optional\u003cPriority\u003e} if {@code priority} is present."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"    public static Optional\u003cPriority\u003e parsePriority(Optional\u003cString\u003e priority) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"        requireNonNull(priority);"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"        return priority.isPresent() ? Optional.of(new Priority(priority.get())) : Optional.empty();"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDate\u003e} if {@code date} is present."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        requireNonNull(date);"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"        return date.isPresent() ? Optional.of(new Date(date.get())) : Optional.empty();"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"     * Parses a {@code Optional\u003cString\u003e message} into an {@code Optional\u003cMessage\u003e} if {@code message} is present."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"    public static Optional\u003cMessage\u003e parseMessage(Optional\u003cString\u003e message) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"        requireNonNull(message);"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"        return message.isPresent() ? Optional.of(new Message(message.get())) : Optional.empty();"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"     * Parses a {@code Optional\u003cString\u003e message} into an {@code Optional\u003cMessage\u003e} if {@code message} is present."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"cqhchan"},"content":"    public static Optional\u003cUsername\u003e parseUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":129,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(username);"},{"lineNumber":130,"author":{"gitID":"cqhchan"},"content":"        return username.isPresent() ? Optional.of(new Username(username.get())) : Optional.empty();"},{"lineNumber":131,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"     * Parses a {@code Optional\u003cString\u003e message} into an {@code Optional\u003cMessage\u003e} if {@code message} is present."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"cqhchan"},"content":"    public static Optional\u003cPassword\u003e parsePassword(Optional\u003cString\u003e password) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(password);"},{"lineNumber":140,"author":{"gitID":"cqhchan"},"content":"        return password.isPresent() ? Optional.of(new Password(password.get())) : Optional.empty();"},{"lineNumber":141,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            tagSet.add(new Tag(tagName));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":3,"cqhchan":12,"duyson98":34,"-":105}},{"path":"src/main/java/seedu/address/logic/parser/TagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.TagCommand.MESSAGE_EMPTY_INDEX_LIST;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":" * Parses input arguments and creates a new TagCommand object"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"public class TagCommandParser implements Parser\u003cTagCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"     * Parses the given {@code String} of arguments in the context of the TagCommand"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"     * and returns a TagCommand object for execution."},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    public TagCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        requireNonNull(args);"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        String[] splittedArgs \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        if (trimmedArgs.isEmpty() || splittedArgs.length !\u003d 2) {"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"            throw new ParseException("},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        Set\u003cString\u003e uniqueIndexes \u003d new HashSet\u003c\u003e(Arrays.asList(splittedArgs[0].split(\",\")));"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        if (uniqueIndexes.isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"            throw new ParseException(String.format(MESSAGE_EMPTY_INDEX_LIST, TagCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"            for (String indexArg : uniqueIndexes) {"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"                indexList.add(ParserUtil.parseIndex(indexArg));"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"            Tag tag \u003d new Tag(splittedArgs[1]);"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"            return new TagCommand(indexList, tag);"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"}"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":""}],"authorContributionMap":{"duyson98":62}},{"path":"src/main/java/seedu/address/logic/parser/RetrieveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.RetrieveCommand;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.TagContainsKeywordPredicate;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":" * Parses input arguments and creates a new RetrieveCommand object"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"public class RetrieveCommandParser implements Parser\u003cRetrieveCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"     * Parses the given {@code String} of arguments in the context of the RetrieveCommand"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"     * and returns an RetrieveCommand object for execution."},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    public RetrieveCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"                    String.format(RetrieveCommand.MESSAGE_EMPTY_ARGS, RetrieveCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"            return new RetrieveCommand(new TagContainsKeywordPredicate(new Tag(trimmedArgs)));"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":35}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS))"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"                    .ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":2,"-":78}},{"path":"src/main/java/seedu/address/ui/DisplayPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":" * The Display Panel of the App."},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"public class DisplayPanel  extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"    private static final String FXML \u003d \"ReminderDisplay.fxml\";"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    public final ReadOnlyReminder reminder;"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    private Label task;"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"    private Label priority;"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    private Label datentime;"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    private TextArea message;"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"    public DisplayPanel(ReadOnlyReminder reminder) {"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"        this.reminder \u003d reminder;"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        initTags(reminder);"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        setDisplay(reminder);"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"     * so that they will be notified of any changes."},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"    private void setDisplay(ReadOnlyReminder reminder) {"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"        task.textProperty().bind(Bindings.convert(reminder.taskProperty()));"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"        priority.textProperty().bind(Bindings.convert(reminder.priorityProperty()));"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"        datentime.textProperty().bind(Bindings.convert(reminder.dateProperty()));"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"        message.textProperty().bind(Bindings.convert(reminder.messageProperty()));"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"        reminder.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"            tags.getChildren().clear();"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"            reminder.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"        });"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"    private void initTags(ReadOnlyReminder reminder) {"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"        reminder.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":72}},{"path":"src/test/java/guitests/guihandles/ReminderListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package guitests.guihandles;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import seedu.address.ui.ReminderCard;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":" * Provides a handle for {@code ReminderListPanel} containing the list of {@code ReminderCard}."},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"public class ReminderListPanelHandle extends NodeHandle\u003cListView\u003cReminderCard\u003e\u003e {"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"    public static final String REMINDER_LIST_VIEW_ID \u003d \"#reminderListView\";"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    private Optional\u003cReminderCard\u003e lastRememberedSelectedReminderCard;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    public ReminderListPanelHandle(ListView\u003cReminderCard\u003e reminderListPanelNode) {"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        super(reminderListPanelNode);"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"     * Returns a handle to the selected {@code ReminderCardHandle}."},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    public ReminderCardHandle getHandleToSelectedCard() {"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        List\u003cReminderCard\u003e reminderList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        if (reminderList.size() !\u003d 1) {"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"            throw new AssertionError(\"Reminder list size expected 1.\");"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        return new ReminderCardHandle(reminderList.get(0).getRoot());"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"     * Returns the index of the selected card."},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        List\u003cReminderCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"     * Navigates the listview to display and select the reminder."},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"    public void navigateToCard(ReadOnlyReminder reminder) {"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        List\u003cReminderCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        Optional\u003cReminderCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.reminder.equals(reminder)).findFirst();"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"            throw new IllegalArgumentException(\"Reminder does not exist.\");"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        });"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"     * Returns the reminder card handle of a reminder associated with the {@code index} in the list."},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"    public ReminderCardHandle getReminderCardHandle(int index) {"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"        return getReminderCardHandle(getRootNode().getItems().get(index).reminder);"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"     * Returns the {@code ReminderCardHandle} of the specified {@code reminder} in the list."},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"    public ReminderCardHandle getReminderCardHandle(ReadOnlyReminder reminder) {"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"        Optional\u003cReminderCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"                .filter(card -\u003e card.reminder.equals(reminder))"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"                .map(card -\u003e new ReminderCardHandle(card.getRoot()))"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"                .findFirst();"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Reminder does not exist.\"));"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"     * Selects the {@code ReminderCard} at {@code index} in the list."},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"    public void select(int index) {"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"     * Remembers the selected {@code ReminderCard} in the list."},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"    public void rememberSelectedReminderCard() {"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"        List\u003cReminderCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"            lastRememberedSelectedReminderCard \u003d Optional.empty();"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"        } else {"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"            lastRememberedSelectedReminderCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"     * Returns true if the selected {@code ReminderCard} is different from the value remembered by the most recent"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"     * {@code rememberSelectedReminderCard()} call."},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"    public boolean isSelectedReminderCardChanged() {"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"        List\u003cReminderCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"            return lastRememberedSelectedReminderCard.isPresent();"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"            return !lastRememberedSelectedReminderCard.isPresent()"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"                    || !lastRememberedSelectedReminderCard.get().equals(selectedItems.get(0));"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":"     * Returns the size of the list."},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":"    public int getListSize() {"},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":136}},{"path":"src/main/java/seedu/address/logic/parser/SelectReminderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.SelectReminderCommand;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"public class SelectReminderCommandParser implements Parser\u003cSelectReminderCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"    public SelectReminderCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"            return new SelectReminderCommand(index);"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectReminderCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":30}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":2,"-":19}},{"path":"src/main/java/seedu/address/logic/parser/BirthdayCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.BirthdayCommand;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":" * Parses input arguments and creates a new BirthdayCommand object"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"public class BirthdayCommandParser implements Parser\u003cBirthdayCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"     * Parses the given {@code String} of arguments in the context of the BirthdayCommand"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"     * and returns an BirthdayCommand object for execution."},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    public BirthdayCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_BIRTHDAY);"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":""},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        Index index;"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BirthdayCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":""},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        String birthday \u003d argMultimap.getValue(PREFIX_BIRTHDAY).orElse(\"\");"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":""},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"            Birthday bday \u003d new Birthday(birthday);"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"            return new BirthdayCommand(index, bday);"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":44}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"-":58}},{"path":"src/main/java/seedu/address/logic/parser/DeleteReminderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.DeleteReminderCommand;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":" * Parses input arguments and creates a new DeleteReminderCommand object"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"public class DeleteReminderCommandParser implements Parser\u003cDeleteReminderCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteReminderCommand"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"     * and returns an DeleteReminderCommand object for execution."},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    public DeleteReminderCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"            return new DeleteReminderCommand(index);"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReminderCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"}"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":""}],"authorContributionMap":{"inGall":32}},{"path":"src/test/java/seedu/address/logic/commands/EditReminderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_ASSIGNMENT;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_PROJECT;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PROJECT;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PROJECT;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstReminderOnly;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_REMINDER;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_REMINDER;"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.testutil.TypicalReminders.getTypicalAddressBook;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.EditReminderCommand.EditReminderDescriptor;"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"import seedu.address.testutil.EditReminderDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"import seedu.address.testutil.ReminderBuilder;"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"public class EditReminderCommandTest {"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        Reminder editedReminder \u003d new ReminderBuilder().build();"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"        EditReminderDescriptor descriptor \u003d new EditReminderDescriptorBuilder(editedReminder).build();"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"        EditReminderCommand editReminderCommand \u003d prepareCommand(INDEX_FIRST_REMINDER, descriptor);"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        String expectedMessage \u003d String.format(EditReminderCommand.MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder);"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"        expectedModel.updateReminder(model.getFilteredReminderList().get(0), editedReminder);"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"        assertCommandSuccess(editReminderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"        Index indexLastReminder \u003d Index.fromOneBased(model.getFilteredReminderList().size());"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"        ReadOnlyReminder lastReminder \u003d model.getFilteredReminderList().get(indexLastReminder.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"        ReminderBuilder reminderInList \u003d new ReminderBuilder(lastReminder);"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"        Reminder editedReminder \u003d reminderInList.withTask(VALID_TASK_PROJECT).withDate(VALID_DATE_PROJECT)"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"                .withPriority(VALID_PRIORITY_PROJECT).build();"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        EditReminderDescriptor descriptor \u003d new EditReminderDescriptorBuilder().withTask(VALID_TASK_PROJECT)"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"                .withDate(VALID_DATE_PROJECT).withPriority(VALID_PRIORITY_PROJECT).build();"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"        EditReminderCommand editReminderCommand \u003d prepareCommand(indexLastReminder, descriptor);"},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"        String expectedMessage \u003d String.format(EditReminderCommand.MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder);"},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"        expectedModel.updateReminder(lastReminder, editedReminder);"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"        assertCommandSuccess(editReminderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":"        EditReminderCommand editReminderCommand \u003d prepareCommand(INDEX_FIRST_REMINDER, new EditReminderDescriptor());"},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"        ReadOnlyReminder editedReminder \u003d model.getFilteredReminderList().get(INDEX_FIRST_REMINDER.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"        String expectedMessage \u003d String.format(EditReminderCommand.MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder);"},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":89,"author":{"gitID":"cqhchan"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":91,"author":{"gitID":"cqhchan"},"content":"        assertCommandSuccess(editReminderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"        showFirstReminderOnly(model);"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":98,"author":{"gitID":"cqhchan"},"content":"        ReadOnlyReminder reminderInFilteredList \u003d"},{"lineNumber":99,"author":{"gitID":"cqhchan"},"content":"            model.getFilteredReminderList().get(INDEX_FIRST_REMINDER.getZeroBased());"},{"lineNumber":100,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":101,"author":{"gitID":"cqhchan"},"content":"        Reminder editedReminder \u003d new ReminderBuilder(reminderInFilteredList).withTask(VALID_TASK_PROJECT).build();"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":"        EditReminderCommand editReminderCommand \u003d prepareCommand(INDEX_FIRST_REMINDER,"},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"                new EditReminderDescriptorBuilder().withTask(VALID_TASK_PROJECT).build());"},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":"        String expectedMessage \u003d String.format(EditReminderCommand.MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder);"},{"lineNumber":106,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":107,"author":{"gitID":"cqhchan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":108,"author":{"gitID":"cqhchan"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":109,"author":{"gitID":"cqhchan"},"content":"        expectedModel.updateReminder(model.getFilteredReminderList().get(0), editedReminder);"},{"lineNumber":110,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":111,"author":{"gitID":"cqhchan"},"content":"        assertCommandSuccess(editReminderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":112,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":114,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"cqhchan"},"content":"    public void execute_duplicateReminderUnfilteredList_failure() {"},{"lineNumber":116,"author":{"gitID":"cqhchan"},"content":"        Reminder firstReminder \u003d new Reminder(model.getFilteredReminderList().get(INDEX_FIRST_REMINDER.getZeroBased()));"},{"lineNumber":117,"author":{"gitID":"cqhchan"},"content":"        EditReminderDescriptor descriptor \u003d new EditReminderDescriptorBuilder(firstReminder).build();"},{"lineNumber":118,"author":{"gitID":"cqhchan"},"content":"        EditReminderCommand editReminderCommand \u003d prepareCommand(INDEX_SECOND_REMINDER, descriptor);"},{"lineNumber":119,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":120,"author":{"gitID":"cqhchan"},"content":"        assertCommandFailure(editReminderCommand, model, EditReminderCommand.MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":121,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":123,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"cqhchan"},"content":"    public void execute_duplicateReminderFilteredList_failure() {"},{"lineNumber":125,"author":{"gitID":"cqhchan"},"content":"        showFirstReminderOnly(model);"},{"lineNumber":126,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":127,"author":{"gitID":"cqhchan"},"content":"        // edit reminder in filtered list into a duplicate in address book"},{"lineNumber":128,"author":{"gitID":"cqhchan"},"content":"        ReadOnlyReminder reminderInList \u003d"},{"lineNumber":129,"author":{"gitID":"cqhchan"},"content":"            model.getAddressBook().getReminderList().get(INDEX_SECOND_REMINDER.getZeroBased());"},{"lineNumber":130,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":131,"author":{"gitID":"cqhchan"},"content":"        EditReminderCommand editReminderCommand \u003d prepareCommand(INDEX_FIRST_REMINDER,"},{"lineNumber":132,"author":{"gitID":"cqhchan"},"content":"                new EditReminderDescriptorBuilder(reminderInList).build());"},{"lineNumber":133,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":134,"author":{"gitID":"cqhchan"},"content":"        assertCommandFailure(editReminderCommand, model, EditReminderCommand.MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":135,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":137,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"cqhchan"},"content":"    public void execute_invalidReminderIndexUnfilteredList_failure() {"},{"lineNumber":139,"author":{"gitID":"cqhchan"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredReminderList().size() + 1);"},{"lineNumber":140,"author":{"gitID":"cqhchan"},"content":"        EditReminderDescriptor descriptor \u003d new EditReminderDescriptorBuilder().withTask(VALID_TASK_PROJECT).build();"},{"lineNumber":141,"author":{"gitID":"cqhchan"},"content":"        EditReminderCommand editReminderCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":142,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":143,"author":{"gitID":"cqhchan"},"content":"        assertCommandFailure(editReminderCommand, model, Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"},{"lineNumber":144,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":146,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"cqhchan"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":148,"author":{"gitID":"cqhchan"},"content":"     * but smaller than size of address book"},{"lineNumber":149,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"cqhchan"},"content":"    public void execute_invalidReminderIndexFilteredList_failure() {"},{"lineNumber":152,"author":{"gitID":"cqhchan"},"content":"        showFirstReminderOnly(model);"},{"lineNumber":153,"author":{"gitID":"cqhchan"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_REMINDER;"},{"lineNumber":154,"author":{"gitID":"cqhchan"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":155,"author":{"gitID":"cqhchan"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getReminderList().size());"},{"lineNumber":156,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":157,"author":{"gitID":"cqhchan"},"content":"        EditReminderCommand editReminderCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":158,"author":{"gitID":"cqhchan"},"content":"                new EditReminderDescriptorBuilder().withTask(VALID_TASK_PROJECT).build());"},{"lineNumber":159,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":160,"author":{"gitID":"cqhchan"},"content":"        assertCommandFailure(editReminderCommand, model, Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"},{"lineNumber":161,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":163,"author":{"gitID":"cqhchan"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"cqhchan"},"content":"    public void equals() {"},{"lineNumber":165,"author":{"gitID":"cqhchan"},"content":"        final EditReminderCommand standardCommand \u003d new EditReminderCommand(INDEX_FIRST_REMINDER, DESC_PROJECT);"},{"lineNumber":166,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":167,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":168,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":169,"author":{"gitID":"cqhchan"},"content":"        // same object -\u003e returns true"},{"lineNumber":170,"author":{"gitID":"cqhchan"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":171,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":172,"author":{"gitID":"cqhchan"},"content":"        // null -\u003e returns false"},{"lineNumber":173,"author":{"gitID":"cqhchan"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":174,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":175,"author":{"gitID":"cqhchan"},"content":"        // different types -\u003e returns false"},{"lineNumber":176,"author":{"gitID":"cqhchan"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":177,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":178,"author":{"gitID":"cqhchan"},"content":"        // different index -\u003e returns false"},{"lineNumber":179,"author":{"gitID":"cqhchan"},"content":"        assertFalse(standardCommand.equals(new EditReminderCommand(INDEX_SECOND_REMINDER, DESC_PROJECT)));"},{"lineNumber":180,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":181,"author":{"gitID":"cqhchan"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":182,"author":{"gitID":"cqhchan"},"content":"        assertFalse(standardCommand.equals(new EditReminderCommand(INDEX_FIRST_REMINDER, DESC_ASSIGNMENT)));"},{"lineNumber":183,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":185,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"cqhchan"},"content":"     * Returns an {@code EditReminderCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":187,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"cqhchan"},"content":"    private EditReminderCommand prepareCommand(Index index, EditReminderDescriptor descriptor) {"},{"lineNumber":189,"author":{"gitID":"cqhchan"},"content":"        EditReminderCommand editReminderCommand \u003d new EditReminderCommand(index, descriptor);"},{"lineNumber":190,"author":{"gitID":"cqhchan"},"content":"        editReminderCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":191,"author":{"gitID":"cqhchan"},"content":"        return editReminderCommand;"},{"lineNumber":192,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":193}},{"path":"src/main/java/seedu/address/ui/PersonProfile.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.ui;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":" * An UI component that displays the full profile of a {@code Person}."},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"public class PersonProfile extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    private static final String FXML \u003d \"PersonProfile.fxml\";"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    private HBox profilePane;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    private Label profileName;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    private TextArea name;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    private TextArea birthday;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    private TextArea phone;"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    private TextArea email;"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    private TextArea address;"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    private FlowPane tags;"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"    public PersonProfile(ReadOnlyPerson person) {"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        this.person \u003d person;"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        initTags(person);"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        bindListeners(person);"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"     * so that they will be notified of any changes."},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        profileName.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        birthday.textProperty().bind(Bindings.convert(person.birthdayProperty()));"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"            tags.getChildren().clear();"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"            initTags(person);"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"     * @param person"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"        // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"        // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"            return false;"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"        // state check"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"        PersonProfile profile \u003d (PersonProfile) other;"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"        return person.equals(profile.person);"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":91}},{"path":"src/main/java/seedu/address/logic/commands/LoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import seedu.address.MainApp;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"public class LoginCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Username or Password Incorrect\";"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Login Successful\";"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"    private static String MESSAGE_LOGIN_ACKNOWLEDGEMENT;"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Login to private Database. \""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"            + PREFIX_PASSWORD + \"PASSWORD\";"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    private ReadOnlyAccount account;"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"    public LoginCommand(ReadOnlyAccount account) {"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        this.account \u003d account;"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    public CommandResult execute() {"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"        if (model.checkAccount(account)) {"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"            try {"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"                MainApp.getUi().restart(account.getUsername().fullName);"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"            } catch (Exception e) {"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"                logger.info(\"Exception caught\" + e.toString());"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"        return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":50}},{"path":"src/main/java/seedu/address/logic/parser/LoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    public LoginCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)) {"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"            Password userPassword \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD)).get();"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"            Username userName \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"            ReadOnlyAccount account \u003d new Account(userName, userPassword);"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"            return new LoginCommand(account);"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception e) {"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":55}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":2,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":2,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of emails."},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"     * @param displaySize"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"     * @return"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    public static String getMessageForEmailListShownSummary(int displaySize) {"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        return String.format(Messages.MESSAGE_EMAILS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":""},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of reminders."},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"     * @param displaySize"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"     * @return"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"    public static String getMessageForReminderListShownSummary(int displaySize) {"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"        return String.format(Messages.MESSAGE_REMINDERS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"    public static String getMessageForPriorityListShownSummary(int displaySize) {"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"        return String.format(Messages.MESSAGE_PRIORITY_LISTED_OVERVIEW, displaySize);"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":""},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of phones."},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"     * @param displaySize"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"     * @return"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"    public static String getMessageForPhoneListShownSummary(int displaySize) {"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        return String.format(Messages.MESSAGE_PHONES_LISTED_OVERVIEW, displaySize);"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":34,"-":49}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        toAdd \u003d new Person(person);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/FindEmailCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindEmailCommand;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" * Parses input arguments and creates a new FindEmailCommand object"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class FindEmailCommandParser implements Parser\u003cFindEmailCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"     * Parses the given {@code String} of arguments in the context of the FindEmailCommand"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"     * and returns an FindEmailCommand object for execution."},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    public FindEmailCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEmailCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":""},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        String[] emailKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"        return new FindEmailCommand(new EmailContainsKeywordsPredicate(Arrays.asList(emailKeywords)));"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":34}},{"path":"src/main/java/seedu/address/logic/parser/FindReminderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindReminderCommand;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.TaskContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" * Parses input arguments and creates a new FindReminderCommand object"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class FindReminderCommandParser implements Parser\u003cFindReminderCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"     * Parses the given {@code String} of arguments in the context of the FindReminderCommand"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"     * and returns an FindReminderCommand object for execution."},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public FindReminderCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindReminderCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        String[] reminderKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        return new FindReminderCommand(new TaskContainsKeywordsPredicate(Arrays.asList(reminderKeywords)));"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":""},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":34}},{"path":"src/main/java/seedu/address/logic/parser/CreateAccountCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.CreateAccountCommand;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"public class CreateAccountCommandParser implements Parser\u003cCreateAccountCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    public CreateAccountCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)) {"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateAccountCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"            Password userPassword \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD)).get();"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"            Username userName \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"            ReadOnlyAccount account \u003d new Account(userName, userPassword);"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"            return new CreateAccountCommand(account);"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":53}},{"path":"src/main/java/seedu/address/logic/parser/FindPhoneCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" * Parses input arguments and creates a new FindPhoneCommand object"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class FindPhoneCommandParser implements Parser\u003cFindPhoneCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPhoneCommand"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"     * and returns an FindPhoneCommand object for execution."},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public FindPhoneCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPhoneCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        String[] phoneKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        return new FindPhoneCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(phoneKeywords)));"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":""},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":34}},{"path":"src/main/java/seedu/address/logic/commands/RetrieveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import java.util.StringJoiner;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.TagContainsKeywordPredicate;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":" * Lists all contacts having a certain tag in the address book."},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"public class RetrieveCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_WORD \u003d \"retrieve\";"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_ALIAS \u003d \"re\";"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Retrieves all persons belonging to an existing tag \""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"            + \"and displays them as a list with index numbers.\\n\""},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"            + \"Parameters: TAGNAME\\n\""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends\";"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_EMPTY_ARGS \u003d \"Please provide a tag name! \\n%1$s\";"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_NOT_FOUND \u003d \"Tag not found in person list.\" + \"\\n\""},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"            + \"You may want to refer to the following existing tags inside the unfiltered person list: %s\";"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    private final TagContainsKeywordPredicate predicate;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    public RetrieveCommand(TagContainsKeywordPredicate predicate) {"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    public CommandResult execute() {"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        final int personListSize \u003d model.getFilteredPersonList().size();"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        if (personListSize \u003d\u003d 0) {"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"            Set\u003cTag\u003e uniqueTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"            for (ReadOnlyPerson person : model.getAddressBook().getPersonList()) {"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"                uniqueTags.addAll(person.getTags());"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"            StringJoiner joiner \u003d new StringJoiner(\", \");"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"            for (Tag tag: uniqueTags) {"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"                joiner.add(tag.toString());"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"            return new CommandResult(String.format(MESSAGE_NOT_FOUND, joiner.toString()));"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(personListSize));"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"                || (other instanceof RetrieveCommand // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.predicate.equals(((RetrieveCommand) other).predicate)); // state check"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":62}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":" * Parses input arguments and creates a new ViewCommand object"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"     * and returns an ViewCommand object for execution."},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    public ViewCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"            return new ViewCommand(index);"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":31}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"his\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":2,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/FindEmailCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":" * Finds and lists all persons in address book whose email contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"inGall"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"public class FindEmailCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"findEmail\";"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"fe\";"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose emails contain any of \""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"            + \"Example: \" + COMMAND_WORD + \" test@example.com\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    private final EmailContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public FindEmailCommand(EmailContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":""},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        return new CommandResult(getMessageForEmailListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"                || (other instanceof FindEmailCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.predicate.equals(((FindEmailCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":38}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"    public static final String COMMAND_ALIAS \u003d \"se\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACCOUNTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"    private ReadOnlyDatabase previousDatabase;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"        model.updateFilteredAccountList(PREDICATE_SHOW_ALL_ACCOUNTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":4,"-":58}},{"path":"src/main/java/seedu/address/logic/parser/UntagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_EMPTY_INDEX_LIST;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.UntagCommand;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":" * Parses input arguments and creates a new UntagCommand object"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"public class UntagCommandParser implements Parser\u003cUntagCommand\u003e {"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"     * Parses the given {@code String} of arguments in the context of the UntagCommand"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"     * and returns a UntagCommand object for execution."},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    public UntagCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        requireNonNull(args);"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        if (trimmedArgs.equals(\"-all\")) {"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"            return new UntagCommand(true, Collections.emptyList(), Collections.emptyList());"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        String[] splittedArgs \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        if (trimmedArgs.isEmpty() || splittedArgs.length !\u003d 1 \u0026\u0026 splittedArgs.length !\u003d 2) {"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"            throw new ParseException("},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        if (splittedArgs.length \u003d\u003d 2) {"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"            Set\u003cString\u003e uniqueTags \u003d new HashSet\u003c\u003e(Arrays.asList(splittedArgs[1].split(\"/\")));"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"            try {"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"                for (String tagArg : uniqueTags) {"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"                    tagList.add(new Tag(tagArg));"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"                }"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"                throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        if (splittedArgs[0].equals(\"-all\")) {"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"            return new UntagCommand(true, indexList, tagList);"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"        Set\u003cString\u003e uniqueIndexes \u003d new HashSet\u003c\u003e(Arrays.asList(splittedArgs[0].split(\",\")));"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        if (uniqueIndexes.isEmpty()) {"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"            throw new ParseException(String.format(MESSAGE_EMPTY_INDEX_LIST, UntagCommand.MESSAGE_USAGE));"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"            for (String indexArg : uniqueIndexes) {"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"                indexList.add(ParserUtil.parseIndex(indexArg));"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE));"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        return new UntagCommand(false, indexList, tagList);"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":76}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"-":36}},{"path":"src/main/java/seedu/address/logic/parser/RetagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.parser;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.RetagCommand.MESSAGE_INVALID_ARGS;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.RetagCommand;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":" * Parses input arguments and creates a new RetagCommand object"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"public class RetagCommandParser implements Parser\u003cRetagCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"     * Parses the given {@code String} of arguments in the context of the RetagCommand"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"     * and returns a RetagCommand object for execution."},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    public RetagCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"        String[] splittedArgs \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        if (trimmedArgs.isEmpty() || splittedArgs.length !\u003d 2) {"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RetagCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        if (splittedArgs[0].equals(splittedArgs[1])) {"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_ARGS, RetagCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"            Tag targetTag \u003d new Tag(splittedArgs[0]);"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"            Tag newTag \u003d new Tag(splittedArgs[1]);"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"            return new RetagCommand(targetTag, newTag);"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":46}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"inGall"},"content":""},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"  * Sort names of contacts by alphabetical order"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"  */"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All contacts are sorted.\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_EMPTY_LIST \u003d \"Contact list is empty.\";"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":""},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    private ArrayList\u003cReadOnlyPerson\u003e contactList;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    public SortCommand() {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        contactList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        Boolean isEmpty \u003d model.checkIfPersonListEmpty(contactList);"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        if (!isEmpty) {"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            model.sortListByName(contactList);"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        return new CommandResult(MESSAGE_EMPTY_LIST);"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":31,"duyson98":1,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":2,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                                             EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":104,"author":{"gitID":"inGall"},"content":"        Birthday updatedBirthday \u003d personToEdit.getBirthday();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"inGall"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedBirthday, updatedTags);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":151,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            this.tags \u003d tags;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":214,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":4,"-":214}},{"path":"src/main/java/seedu/address/logic/commands/FindReminderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.TaskContainsKeywordsPredicate;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":" * Finds and lists all reminders in address book whose name contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"inGall"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"public class FindReminderCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"findReminder\";"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"fr\";"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all reminders whose names contain any of \""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    private final TaskContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public FindReminderCommand(TaskContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":""},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        model.updateFilteredReminderList(predicate);"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        return new CommandResult(getMessageForReminderListShownSummary(model.getFilteredReminderList().size()));"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"                || (other instanceof FindReminderCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.predicate.equals(((FindReminderCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":38}},{"path":"src/main/java/seedu/address/logic/commands/FindPhoneCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"inGall"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"public class FindPhoneCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"findPhone\";"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"fp\";"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose phone numbers contain any of \""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"            + \"Example: \" + COMMAND_WORD + \" 84281299\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    private final PhoneContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public FindPhoneCommand(PhoneContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":""},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        return new CommandResult(getMessageForPhoneListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"                || (other instanceof FindPhoneCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.predicate.equals(((FindPhoneCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":38}},{"path":"src/main/java/seedu/address/logic/commands/LogoutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import seedu.address.MainApp;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":" * The LOgout Function"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":" **/"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"public class LogoutCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    public static final String COMMAND_WORD \u003d \"logout\";"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_LOGOUT_FAILURE \u003d \"Logout Failed ...\";"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_LOGOUT_ACKNOWLEDGEMENT \u003d \"Logout as requested ...\";"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"        Ui ui \u003d MainApp.getUi();"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"            ui.restart(\"addressbook\");"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"            return new CommandResult(MESSAGE_LOGOUT_ACKNOWLEDGEMENT);"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"        } catch (Exception e) {"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"            return new CommandResult(MESSAGE_LOGOUT_FAILURE);"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":29}},{"path":"src/main/java/seedu/address/logic/parser/FindPriorityCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.FindPriorityCommand;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.PriorityContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" * Parses input arguments and creates a new FindPriorityCommand object"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class FindPriorityCommandParser implements Parser\u003cFindPriorityCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPriorityCommand"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"     * and returns an FindPriorityCommand object for execution."},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public FindPriorityCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPriorityCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        String[] priorityKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        return new FindPriorityCommand(new PriorityContainsKeywordsPredicate(Arrays.asList(priorityKeywords)));"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":""},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":34}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.events.model.DatabaseChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, DataBaseStorage {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    String getDatabaseFilePath();"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    Optional\u003cReadOnlyDatabase\u003e readDatabase() throws DataConversionException, IOException;"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    //@@author cqhchan"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"    void saveDatabase(ReadOnlyDatabase database) throws IOException;"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    void handleDatabaseChangedEvent(DatabaseChangedEvent abce);"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":26,"-":30}},{"path":"src/main/java/seedu/address/logic/commands/SortAgeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"inGall"},"content":""},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":" * Sort names of contacts by alphabetical order"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"public class SortAgeCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"sortAge\";"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"sa\";"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All contacts are sorted by age. (Oldest To Youngest)\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_EMPTY_LIST \u003d \"Contact list is empty.\";"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":""},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    private ArrayList\u003cReadOnlyPerson\u003e contactList;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    public SortAgeCommand() {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        contactList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        Boolean isEmpty \u003d model.checkIfPersonListEmpty(contactList);"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        if (!isEmpty) {"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            model.sortListByAge(contactList);"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        return new CommandResult(MESSAGE_EMPTY_LIST);"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":31,"duyson98":1,"-":5}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"    public ObservableList\u003cReadOnlyReminder\u003e getFilteredReminderList() {"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"        logger.info(model.getFilteredReminderList().toString());"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"        return model.getFilteredReminderList();"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":6,"cqhchan":2,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/SortBirthdayCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"inGall"},"content":""},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":" * Sort names of contacts by alphabetical order"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"public class SortBirthdayCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"sortBirthday\";"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"sb\";"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All contacts are sorted by birthday.\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_EMPTY_LIST \u003d \"Contact list is empty.\";"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":""},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    private ArrayList\u003cReadOnlyPerson\u003e contactList;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    public SortBirthdayCommand() {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        contactList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        Boolean isEmpty \u003d model.checkIfPersonListEmpty(contactList);"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        if (!isEmpty) {"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            model.sortListByBirthday(contactList);"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        return new CommandResult(MESSAGE_EMPTY_LIST);"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":31,"duyson98":1,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddReminderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.AddReminderCommand;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Date;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Message;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Priority;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Task;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":""},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":" * Parses input arguments and creates a new AddReminderCommand object"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"public class AddReminderCommandParser implements Parser\u003cAddReminderCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"     * Parses the given {@code String} of arguments in the context of the AddReminderCommand"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"     * and returns an AddReminderCommand object for execution."},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    public AddReminderCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_PRIORITY, PREFIX_DATE, PREFIX_MESSAGE,"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"                        PREFIX_TAG);"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":""},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TASK, PREFIX_PRIORITY, PREFIX_DATE, PREFIX_MESSAGE)) {"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"            Task task \u003d ParserUtil.parseTask(argMultimap.getValue(PREFIX_TASK)).get();"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"            Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).get();"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"            Message message \u003d ParserUtil.parseMessage(argMultimap.getValue(PREFIX_MESSAGE)).get();"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":""},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"            ReadOnlyReminder reminder \u003d new Reminder(task, priority, date, message, tagList);"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":""},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"            return new AddReminderCommand(reminder);"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":""},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":""},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":68}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.events.ui.ShowProfileRequestEvent;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":" * Views profile of a person identified using its last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"public class ViewCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_ALIAS \u003d \"v\";"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"            + \": View full profile of a person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_VIEW_PROFILE_SUCCESS \u003d \"Retrieved Profile of: %s\";"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    public ViewCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson personToShowProfile \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        EventsCenter.getInstance().post(new ShowProfileRequestEvent(personToShowProfile));"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        return new CommandResult(String.format(MESSAGE_VIEW_PROFILE_SUCCESS, personToShowProfile.getName().toString()));"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.targetIndex.equals(((ViewCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":55}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to a fixed temporary location."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"duyson98":4,"-":47}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.events.model.DatabaseChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    private static AddressBookStorage addressBookStorage;"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    private static DataBaseStorage dataBaseStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"                          DataBaseStorage dataBaseStorage) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"        this.dataBaseStorage \u003d dataBaseStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"        String addressBookBackupFilePath \u003d \"backup/addressbook-backup.xml\";"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"        saveAddressBook(addressBook, addressBookBackupFilePath);"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"cqhchan"},"content":"    // database methods"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":"    public String getDatabaseFilePath() {"},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":"        return dataBaseStorage.getDatabaseFilePath();"},{"lineNumber":106,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":108,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":109,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":110,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"cqhchan"},"content":"    public Optional\u003cReadOnlyDatabase\u003e readDatabase() throws DataConversionException, IOException {"},{"lineNumber":112,"author":{"gitID":"cqhchan"},"content":"        return readDatabase(dataBaseStorage.getDatabaseFilePath());"},{"lineNumber":113,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":115,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"cqhchan"},"content":"    public Optional\u003cReadOnlyDatabase\u003e readDatabase(String filePath) throws DataConversionException, IOException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":118,"author":{"gitID":"cqhchan"},"content":"        return dataBaseStorage.readDatabase(filePath);"},{"lineNumber":119,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":121,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"cqhchan"},"content":"    public void saveDatabase(ReadOnlyDatabase database) throws IOException {"},{"lineNumber":123,"author":{"gitID":"cqhchan"},"content":"        saveDatabase(database, dataBaseStorage.getDatabaseFilePath());"},{"lineNumber":124,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":126,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"cqhchan"},"content":"    public void saveDatabase(ReadOnlyDatabase database, String filePath) throws IOException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":129,"author":{"gitID":"cqhchan"},"content":"        dataBaseStorage.saveDatabase(database, filePath);"},{"lineNumber":130,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":132,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"cqhchan"},"content":"    public void backupDatabase(ReadOnlyDatabase database) throws IOException {"},{"lineNumber":134,"author":{"gitID":"cqhchan"},"content":"        String databaseBackupFilePath \u003d \"backup/addressbook-backup.xml\";"},{"lineNumber":135,"author":{"gitID":"cqhchan"},"content":"        saveDatabase(database, databaseBackupFilePath);"},{"lineNumber":136,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":138,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"cqhchan"},"content":"    @Subscribe"},{"lineNumber":140,"author":{"gitID":"cqhchan"},"content":"    public void handleDatabaseChangedEvent(DatabaseChangedEvent event) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"cqhchan"},"content":"            saveDatabase(event.data);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":46,"duyson98":5,"-":98}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return Optional.of(addressBookOptional);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"        String addressBookBackupFilePath \u003d \"backup/addressbook-backup.xml\";"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        saveAddressBook(addressBook, addressBookBackupFilePath);"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"duyson98":6,"-":77}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    private String birthday;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        birthday \u003d source.getBirthday().value;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"        final Birthday birthday \u003d new Birthday(this.birthday);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"        return new Person(name, phone, email, address, birthday, tags);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":5,"-":76}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            assert false : \"Unexpected exception \" + e.getMessage();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"     * @param file"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"     * @param database"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"     * @throws FileNotFoundException"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"    public static void saveDataBaseToFile(File file, XmlSerializableDatabase database)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"            XmlUtil.saveDataToFile(file, database);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            assert false : \"Unexpected exception \" + e.getMessage();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static XmlSerializableAddressBook loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"    //@@author cqhchan"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"     * @param file"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"     * @return"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"     * @throws DataConversionException"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"     * @throws FileNotFoundException"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"    public static XmlSerializableDatabase loadDataBaseFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"            FileNotFoundException {"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableDatabase.class);"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"        } catch (JAXBException e) {"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"            throw new DataConversionException(e);"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":26,"-":45}},{"path":"src/main/java/seedu/address/logic/parser/EditReminderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.EditReminderCommand;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.EditReminderCommand.EditReminderDescriptor;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":" * Parses input arguments and creates a new EditReminderCommand object"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"public class EditReminderCommandParser implements Parser\u003cEditReminderCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"     * Parses the given {@code String} of arguments in the context of the EditReminderCommand"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"     * and returns an EditReminderCommand object for execution."},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    public EditReminderCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_PRIORITY, PREFIX_DATE, PREFIX_TAG,"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"                        PREFIX_MESSAGE);"},{"lineNumber":39,"author":{"gitID":"inGall"},"content":""},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditReminderCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":""},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        EditReminderDescriptor editReminderDescriptor \u003d new EditReminderDescriptor();"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"            ParserUtil.parseTask(argMultimap.getValue(PREFIX_TASK)).ifPresent("},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"                    editReminderDescriptor::setTask);"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"            ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).ifPresent("},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"                    editReminderDescriptor::setPriority);"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"            ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE)).ifPresent("},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"                    editReminderDescriptor::setDate);"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"            ParserUtil.parseMessage(argMultimap.getValue(PREFIX_MESSAGE)).ifPresent("},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"                    editReminderDescriptor::setMessage);"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent("},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"                    editReminderDescriptor::setTags);"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":""},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        if (!editReminderDescriptor.isAnyFieldEdited()) {"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"            throw new ParseException(EditReminderCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":""},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"        return new EditReminderCommand(index, editReminderDescriptor);"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":""},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"        assert tags !\u003d null;"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":""},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"            return Optional.empty();"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":""},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":86}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import javafx.scene.text.Font;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Database;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"import seedu.address.storage.DataBaseStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"import seedu.address.storage.XmlDatabaseStorage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":" **/"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, true);"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    protected static Ui ui;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"        DataBaseStorage dataBaseStorage \u003d new XmlDatabaseStorage(userPrefs.getUserDataBase());"},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, dataBaseStorage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":"        ui \u003d new UiManager(logic, config, userPrefs, dataBaseStorage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"        Optional\u003cReadOnlyDatabase\u003e databaseOptional;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":98,"author":{"gitID":"cqhchan"},"content":"        ReadOnlyDatabase initialDatabase;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":113,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"cqhchan"},"content":"            databaseOptional \u003d storage.readDatabase();"},{"lineNumber":115,"author":{"gitID":"cqhchan"},"content":"            if (!databaseOptional.isPresent()) {"},{"lineNumber":116,"author":{"gitID":"cqhchan"},"content":"                logger.info(\"Data file not found. Will be starting with a empty AddressBook\");"},{"lineNumber":117,"author":{"gitID":"cqhchan"},"content":"                initialDatabase \u003d new Database();"},{"lineNumber":118,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"cqhchan"},"content":"            initialDatabase \u003d databaseOptional.orElseGet(SampleDataUtil::getSampleDatabase);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":122,"author":{"gitID":"cqhchan"},"content":"            initialDatabase \u003d new Database();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":125,"author":{"gitID":"cqhchan"},"content":"            initialDatabase \u003d new Database();"},{"lineNumber":126,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":128,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":129,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":130,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":131,"author":{"gitID":"cqhchan"},"content":"        return new ModelManager(initialData, initialDatabase, userPrefs);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":161,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":189,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"cqhchan"},"content":"    public static Ui getUi() {"},{"lineNumber":207,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":208,"author":{"gitID":"cqhchan"},"content":"        return ui;"},{"lineNumber":209,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":217,"author":{"gitID":"duyson98"},"content":"        //@@author duyson98"},{"lineNumber":218,"author":{"gitID":"duyson98"},"content":"        logger.info(\"Loading custom fonts.\");"},{"lineNumber":219,"author":{"gitID":"duyson98"},"content":"        Font timeFont \u003d Font.loadFont(MainApp.class.getClassLoader().getResourceAsStream("},{"lineNumber":220,"author":{"gitID":"duyson98"},"content":"                \"fonts/NovaSquare.ttf\"), 10);"},{"lineNumber":221,"author":{"gitID":"duyson98"},"content":"        Font dateFont \u003d Font.loadFont(MainApp.class.getClassLoader().getResourceAsStream("},{"lineNumber":222,"author":{"gitID":"duyson98"},"content":"                \"fonts/digital-7 (italic).ttf\"), 10);"},{"lineNumber":223,"author":{"gitID":"duyson98"},"content":"        Font profileNameFont \u003d Font.loadFont(MainApp.class.getClassLoader().getResourceAsStream("},{"lineNumber":224,"author":{"gitID":"duyson98"},"content":"                \"fonts/HaloHandletter.otf\"), 10);"},{"lineNumber":225,"author":{"gitID":"duyson98"},"content":"        if (dateFont \u003d\u003d null || timeFont \u003d\u003d null || profileNameFont \u003d\u003d null) {"},{"lineNumber":226,"author":{"gitID":"duyson98"},"content":"            logger.warning(\"Failed to load custom fonts.\");"},{"lineNumber":227,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"duyson98"},"content":"        //@@author"},{"lineNumber":229,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"duyson98":15,"cqhchan":33,"-":208}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook implements ReadOnlyAddressBook {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    private List\u003cXmlAdaptedReminder\u003e reminders;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        reminders \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        reminders.addAll(src.getReminderList().stream().map(XmlAdaptedReminder::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final ObservableList\u003cReadOnlyPerson\u003e persons \u003d this.persons.stream().map(p -\u003e {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                return p.toModelType();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(persons);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"    public ObservableList\u003cReadOnlyReminder\u003e getReminderList() {"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        final ObservableList\u003cReadOnlyReminder\u003e reminders \u003d this.reminders.stream().map(p -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                return p.toModelType();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"        return FXCollections.unmodifiableObservableList(reminders);"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        final ObservableList\u003cTag\u003e tags \u003d this.tags.stream().map(t -\u003e {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                return t.toModelType();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(tags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"duyson98":10,"cqhchan":1,"-":82}},{"path":"src/main/java/seedu/address/logic/commands/ListReminderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REMINDERS;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":8,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"public class ListReminderCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"listReminder\";"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"lr\";"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all reminders\";"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    public CommandResult execute() {"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"        model.updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":22}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.Database;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            return new Person[] {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Birthday(\"01/01/1991\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Birthday(\"02/02/1992\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Birthday(\"03/03/1993\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Birthday(\"04/04/1994\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Birthday(\"05/05/1995\"),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Birthday(\"06/06/1996\"),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            };"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"    public static Account[] getSampleAccounts() {"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"            return new Account[] {"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"                new Account(new Username(\"private\"), new Password(\"password\"))"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            };"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":"    public static ReadOnlyDatabase getSampleDatabase() {"},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":"            Database sampleAb \u003d new Database();"},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"            for (Account sampleAccount : getSampleAccounts()) {"},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"                sampleAb.addAccount(sampleAccount);"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":"            return sampleAb;"},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"        } catch (DuplicateAccountException e) {"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate account\", e);"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":7,"cqhchan":22,"-":72}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    Name getName();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Phone getPhone();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Email getEmail();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Address getAddress();"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    ObjectProperty\u003cBirthday\u003e birthdayProperty();"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    Birthday getBirthday();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getPhone().equals(this.getPhone())"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getEmail().equals(this.getEmail())"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 other.getAddress().equals(this.getAddress())"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 other.getBirthday().equals(this.getBirthday()));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    default String getAsText() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"                .append(\" Birthday: \")"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"                .append(getBirthday())"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":6,"-":54}},{"path":"src/main/java/seedu/address/model/person/AgeComparator.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":" * Compares Age of ReadOnlyPerson"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"public class AgeComparator implements Comparator\u003cReadOnlyPerson\u003e {"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public int compare(ReadOnlyPerson firstNum, ReadOnlyPerson secondNum) {"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"        String newFirstNum \u003d getNewStringAgeFormat(firstNum);"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"        String newSecondNum \u003d getNewStringAgeFormat(secondNum);"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"        if (newFirstNum.equals(\"\") || newSecondNum.equals(\"\")) {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"            return newSecondNum.compareTo(newFirstNum);"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"        } else {"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"            return newFirstNum.compareTo(newSecondNum);"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public static String getNewStringAgeFormat(ReadOnlyPerson person) {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"        if (person.getBirthday().toString().equals(\"\")) {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"            return \"\";"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"        } else {"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"            String numInString \u003d person.getBirthday().toString();    // Converts birthday to String type"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"            String dayForNum \u003d numInString.substring(0, 2);        // Index of day in dd/mm/yyyy"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"            String monthForNum \u003d numInString.substring(3, 5);      // Index of month in dd/mm/yyyy"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"            String yearForNum \u003d numInString.substring(6, 10);      // Index of year in dd/mm/yyyy"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"            return yearForNum + monthForNum + dayForNum;           // Return string format yyyymmdd"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":33}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    private ObjectProperty\u003cBirthday\u003e birthday;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Birthday birthday, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"        this.birthday \u003d new SimpleObjectProperty\u003c\u003e(birthday);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getBirthday(),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                source.getTags());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return name.get();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.phone.set(requireNonNull(phone));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return phone.get();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void setEmail(Email email) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.email.set(requireNonNull(email));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return email.get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void setAddress(Address address) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.address.set(requireNonNull(address));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return address.get();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"inGall"},"content":""},{"lineNumber":108,"author":{"gitID":"inGall"},"content":"    public void setBirthday(Birthday birthday) {"},{"lineNumber":109,"author":{"gitID":"inGall"},"content":"        this.birthday.set(requireNonNull(birthday));"},{"lineNumber":110,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"inGall"},"content":""},{"lineNumber":112,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"inGall"},"content":"    public ObjectProperty\u003cBirthday\u003e birthdayProperty() {"},{"lineNumber":114,"author":{"gitID":"inGall"},"content":"        return birthday;"},{"lineNumber":115,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"inGall"},"content":""},{"lineNumber":117,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"inGall"},"content":"    public Birthday getBirthday() {"},{"lineNumber":119,"author":{"gitID":"inGall"},"content":"        return birthday.get();"},{"lineNumber":120,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"inGall"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Replaces this person\u0027s tags with the tags in the argument tag set."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        tags.set(new UniqueTagList(replacement));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return getAsText();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"inGall"},"content":"     * @param replacement"},{"lineNumber":162,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"inGall"},"content":"    public void resetData(ReadOnlyPerson replacement) {"},{"lineNumber":164,"author":{"gitID":"inGall"},"content":"        requireNonNull(replacement);"},{"lineNumber":165,"author":{"gitID":"inGall"},"content":""},{"lineNumber":166,"author":{"gitID":"inGall"},"content":"        this.setName(replacement.getName());"},{"lineNumber":167,"author":{"gitID":"inGall"},"content":"        this.setPhone(replacement.getPhone());"},{"lineNumber":168,"author":{"gitID":"inGall"},"content":"        this.setEmail(replacement.getEmail());"},{"lineNumber":169,"author":{"gitID":"inGall"},"content":"        this.setAddress(replacement.getAddress());"},{"lineNumber":170,"author":{"gitID":"inGall"},"content":"        this.setBirthday(replacement.getBirthday());"},{"lineNumber":171,"author":{"gitID":"inGall"},"content":"        this.setTags(replacement.getTags());"},{"lineNumber":172,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"inGall"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":33,"-":141}},{"path":"src/main/java/seedu/address/model/person/BirthdayComparator.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":" * Compares Birthday of ReadOnlyPerson"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"public class BirthdayComparator implements Comparator\u003cReadOnlyPerson\u003e {"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public int compare(ReadOnlyPerson firstPerson, ReadOnlyPerson secondPerson) {"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"        String newFirstNum \u003d getNewStringBirthdayFormat(firstPerson);"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"        String newSecondNum \u003d getNewStringBirthdayFormat(secondPerson);"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"        if (newFirstNum.equals(\"\") || newSecondNum.equals(\"\")) {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"            return newSecondNum.compareTo(newFirstNum);"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"        } else {"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"            return newFirstNum.compareTo(newSecondNum);"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public static String getNewStringBirthdayFormat(ReadOnlyPerson person) {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"        if (person.getBirthday().toString().equals(\"\")) {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"            return \"\";"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"        } else {"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"            String numInString \u003d person.getBirthday().toString();  // Converts birthday to String type"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"            String dayForNum \u003d numInString.substring(0, 2);        // Index of day in dd/mm/yyyy"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"            String monthForNum \u003d numInString.substring(3, 5);      // Index of month in dd/mm/yyyy"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"            String yearForNum \u003d numInString.substring(6, 10);      // Index of year in dd/mm/yyyy"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"            return monthForNum + dayForNum + yearForNum;           // Return String format mmddyyy"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":33}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAccount.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":" * JAXB-friendly version of the Account."},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"public class XmlAdaptedAccount {"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"    private String username;"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    private String password;"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"     * Constructs an XmlAdaptedAccount."},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    public XmlAdaptedAccount() {}"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"     * Converts a given Account into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAccount"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    public XmlAdaptedAccount(ReadOnlyAccount source) {"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"        username \u003d source.getUsername().fullName;"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"        password \u003d source.getPassword().value;"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"     * Converts this jaxb-friendly adapted account object into the model\u0027s Account object."},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted account"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    public Account toModelType() throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        final Username username \u003d new Username(this.username);"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"        final Password password \u003d new Password(this.password);"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"        return new Account(username, password);"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":50}},{"path":"src/main/java/seedu/address/logic/commands/AddReminderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":" * Adds a reminder to the address book."},{"lineNumber":18,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"public class AddReminderCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":""},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"addReminder\";"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"ar\";"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a reminder to the address book. \""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"            + PREFIX_TASK + \"NAME \""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"            + PREFIX_PRIORITY + \"PRIORITY \""},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"            + PREFIX_MESSAGE + \"MESSAGE \""},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            + PREFIX_TASK + \"Proposal submission \""},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"            + PREFIX_PRIORITY + \"Low \""},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"            + PREFIX_DATE + \"25/12/2017 15:00 \""},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"            + PREFIX_MESSAGE + \"Submit to manager \""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"            + PREFIX_TAG + \"Work \""},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"            + PREFIX_TAG + \"John\";"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":""},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %1$s\";"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists in the address book\";"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"    private final Reminder toAdd;"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":""},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"     * Creates an AddReminderCommand to add the specified {@code ReadOnlyReminder}"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"    public AddReminderCommand(ReadOnlyReminder reminder) {"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        toAdd \u003d new Reminder(reminder);"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":""},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"            model.addReminder(toAdd);"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        } catch (DuplicateReminderException e) {"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":""},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":""},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"                || (other instanceof AddReminderCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 toAdd.equals(((AddReminderCommand) other).toAdd));"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":69}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"     * Returns an unmodifiable view of the reminders list."},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"     * This list will not contain any duplicate reminders."},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    ObservableList\u003cReadOnlyReminder\u003e getReminderList();"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":1,"duyson98":6,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/SortPriorityCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":""},{"lineNumber":3,"author":{"gitID":"inGall"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REMINDERS;"},{"lineNumber":4,"author":{"gitID":"inGall"},"content":""},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":" * Sort reminders in order or priority."},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"public class SortPriorityCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"sortPriority\";"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"sp\";"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All reminders are sorted by priority. (High -\u003e Medium -\u003e Low)\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_EMPTY_LIST \u003d \"Reminder list is empty.\";"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":""},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    private ArrayList\u003cReadOnlyReminder\u003e contactList;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    public SortPriorityCommand() {"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"        contactList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        model.updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        Boolean isEmpty \u003d model.checkIfReminderListEmpty(contactList);"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        if (!isEmpty) {"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            model.sortListByPriority(contactList);"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"        return new CommandResult(MESSAGE_EMPTY_LIST);"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":35,"cqhchan":1,"-":1}},{"path":"src/main/java/seedu/address/storage/DataBaseStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"public interface DataBaseStorage {"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"    String getDatabaseFilePath();"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"     * Returns AddressBook data as a {@link ReadOnlyDatabase}."},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    Optional\u003cReadOnlyDatabase\u003e readDatabase() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"     * @see #getDatabaseFilePath()"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"    Optional\u003cReadOnlyDatabase\u003e readDatabase(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"     * Saves the given {@link ReadOnlyDatabase} to the storage."},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"     * @param database cannot be null."},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"    void saveDatabase(ReadOnlyDatabase database) throws IOException;"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"     * @see #saveDatabase(ReadOnlyDatabase) (ReadOnlyAddressBook)"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"    void saveDatabase(ReadOnlyDatabase database, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"     * Saves the given {@link ReadOnlyDatabase} to a fixed temporary location."},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"     * @param database cannot be null."},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    void backupDatabase(ReadOnlyDatabase database) throws IOException;"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":51}},{"path":"src/main/java/seedu/address/logic/commands/CreateAccountCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"public class CreateAccountCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"    public static final String COMMAND_WORD \u003d \"create\";"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"    public static final String COMMAND_ALIAS \u003d \"ca\";"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Account to the database. \""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"            + PREFIX_PASSWORD + \"PASSWORD \";"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New account added: %1$s\";"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"This account already exists in the address book\";"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    private final Account toAdd;"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    public CreateAccountCommand(ReadOnlyAccount account) {"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"        toAdd \u003d new Account(account);"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(model);"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"            model.addAccount(toAdd);"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"        } catch (DuplicateAccountException e) {"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ACCOUNT);"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"                || (other instanceof CreateAccountCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 toAdd.equals(((CreateAccountCommand) other).toAdd));"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":56}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" * Represents a Person\u0027s birthday in the address book."},{"lineNumber":14,"author":{"gitID":"inGall"},"content":" * Guarantees: immutable; is always valid"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"public class Birthday {"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"            \"Person birthdays must be either a valid date, of format DD/MM/YYYY or empty\";"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":""},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"     * Validates given birthday."},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"     * @throws IllegalValueException if given birthday string is invalid."},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"    public Birthday(String birthday) throws IllegalValueException {"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        requireNonNull(birthday);"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        String trimmedBirthday \u003d birthday.trim();"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"        if (!isValidBirthday(birthday)) {"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            throw new IllegalValueException(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        this.value \u003d trimmedBirthday;"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":""},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"    public static boolean isValidBirthday(String birthday) {"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"        String trimmedBirthday \u003d birthday.trim();"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":""},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"        if (trimmedBirthday.equals(\"\")) {"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":""},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"            LocalDate.parse(trimmedBirthday, dateFormatter);"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"        return true;"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":""},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        return value;"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":""},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"                || (other instanceof Birthday // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.value.equals(((Birthday) other).value)); // state check"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":""},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"    public int hashCode() {"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        return value.hashCode();"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":73}},{"path":"src/main/java/seedu/address/logic/commands/FindPriorityCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.PriorityContainsKeywordsPredicate;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":" * Finds and lists all reminders in address book whose priority contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"inGall"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"public class FindPriorityCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"findPriority\";"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"fpr\";"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all reminders whose priority contain any of \""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"            + \"Example: \" + COMMAND_WORD + \" High Medium \";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    private final PriorityContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"    public FindPriorityCommand(PriorityContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":""},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"        model.updateFilteredReminderList(predicate);"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"        return new CommandResult(getMessageForPriorityListShownSummary(model.getFilteredReminderList().size()));"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"                || (other instanceof FindPriorityCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.predicate.equals(((FindPriorityCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":38}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedReminder.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.storage;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Date;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Message;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Priority;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.Task;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":" * JAXB-friendly version of the Reminder."},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"public class XmlAdaptedReminder {"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    private String taskName;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    private String priority;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    private String date;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    private String message;"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    @XmlElement"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"     * Constructs an XmlAdaptedReminder."},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    public XmlAdaptedReminder() {}"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"     * Converts a given Reminder into this class for JAXB use."},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedReminder"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    public XmlAdaptedReminder(ReadOnlyReminder source) {"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        taskName \u003d source.getTask().taskName;"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        priority \u003d source.getPriority().value;"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        date \u003d source.getDate().date;"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        message \u003d source.getMessage().message;"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"     * Converts this jaxb-friendly adapted reminder object into the model\u0027s Reminder object."},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted reminder"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"    public Reminder toModelType() throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        final List\u003cTag\u003e reminderTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"            reminderTags.add(tag.toModelType());"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        final Task taskName \u003d new Task(this.taskName);"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"        final Priority priority \u003d new Priority(this.priority);"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        final Date date \u003d new Date(this.date);"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        final Message message \u003d new Message(this.message);"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(reminderTags);"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        return new Reminder(taskName, priority, date, message, tags);"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":78}},{"path":"src/main/java/seedu/address/model/reminder/exceptions/ReminderNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder.exceptions;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":" * Signals that the operation is unable to find the specified reminder."},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"public class ReminderNotFoundException extends Exception {"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":9}},{"path":"src/main/java/seedu/address/storage/XmlDatabaseStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":" * A class to access Database data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"public class XmlDatabaseStorage implements DataBaseStorage {"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlDatabaseStorage.class);"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    public XmlDatabaseStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"    public String getDatabaseFilePath() {"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    public Optional\u003cReadOnlyDatabase\u003e readDatabase() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"        return readDatabase(filePath);"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"     * Similar to {@link #readDatabase()}"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"    public Optional\u003cReadOnlyDatabase\u003e readDatabase(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"            FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"        File databaseFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"        if (!databaseFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"            logger.info(\"Database file \"  + databaseFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"        ReadOnlyDatabase databaseOptional \u003d XmlFileStorage.loadDataBaseFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"        return Optional.of(databaseOptional);"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"    public void saveDatabase(ReadOnlyDatabase database) throws IOException {"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"        saveDatabase(database, filePath);"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"     * Similar to {@link #saveDatabase(ReadOnlyDatabase)}"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"    public void saveDatabase(ReadOnlyDatabase database, String filePath) throws IOException {"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(database);"},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(filePath);"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":"        XmlFileStorage.saveDataBaseToFile(file, new XmlSerializableDatabase(database));"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":"    public void backupDatabase(ReadOnlyDatabase database) throws IOException {"},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"        String databaseBackupFilePath \u003d \"backup/addressbook-backup.xml\";"},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"        saveDatabase(database, databaseBackupFilePath);"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":84}},{"path":"src/main/java/seedu/address/model/reminder/exceptions/DuplicateReminderException.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder.exceptions;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":" * Signals that the operation will result in duplicate Reminder objects."},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"public class DuplicateReminderException extends DuplicateDataException {"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"    public DuplicateReminderException() {"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"        super(\"Operation would result in duplicate reminders\");"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":14}},{"path":"src/main/java/seedu/address/model/reminder/Message.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":" * Represents a reminder\u0027s message in the address book."},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":" * Guarantees: immutable"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"public class Message {"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"    public final String message;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"     * Validates given message."},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    public Message(String message) {"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"        requireNonNull(message);"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"        this.message \u003d message.trim();"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    public static boolean isValidMessage(String message) {"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"        return true;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        return message;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"                || (other instanceof Message // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.message.equals(((Message) other).message)); // state check"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    public int hashCode() {"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        return message.hashCode();"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":44}},{"path":"src/main/java/seedu/address/model/person/PhoneContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"public class PhoneContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":32}},{"path":"src/main/java/seedu/address/logic/commands/EditReminderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REMINDERS;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":""},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":""},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Date;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Message;"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Priority;"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Task;"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":" * Edits the details of an existing reminder in the address book."},{"lineNumber":33,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"public class EditReminderCommand extends UndoableCommand {"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":""},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"editReminder\";"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"er\";"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":""},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the reminder identified \""},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"            + \"by the index number used in the last reminder listing. \""},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"            + \"[\" + PREFIX_TASK + \"TASK] \""},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \""},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"            + \"[\" + PREFIX_MESSAGE + \"MESSAGE] \""},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"            + PREFIX_PRIORITY + \"7 \""},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"            + PREFIX_DATE + \"16/02/2017 1630\";"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":""},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_EDIT_REMINDER_SUCCESS \u003d \"Edited Reminder: %1$s\";"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists in the address book.\";"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":""},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"    private final EditReminderDescriptor editReminderDescriptor;"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":""},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"     * @param index of the reminder in the filtered reminder list to edit"},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"     * @param editReminderDescriptor details to edit the reminder with"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"    public EditReminderCommand(Index index, EditReminderDescriptor editReminderDescriptor) {"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":"        requireNonNull(index);"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        requireNonNull(editReminderDescriptor);"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":""},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        this.index \u003d index;"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"        this.editReminderDescriptor \u003d new EditReminderDescriptor(editReminderDescriptor);"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":""},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":"        List\u003cReadOnlyReminder\u003e lastShownList \u003d model.getFilteredReminderList();"},{"lineNumber":74,"author":{"gitID":"inGall"},"content":""},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":76,"author":{"gitID":"inGall"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":""},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"        ReadOnlyReminder reminderToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"        Reminder editedReminder \u003d createEditedReminder(reminderToEdit, editReminderDescriptor);"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":""},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"            model.updateReminder(reminderToEdit, editedReminder);"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"        } catch (DuplicateReminderException dpe) {"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"        } catch (ReminderNotFoundException pnfe) {"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"            throw new AssertionError(\"The target reminder cannot be missing\");"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"        model.updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_REMINDER_SUCCESS, editedReminder));"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":""},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"     * Creates and returns a {@code Person} with the details of {@code reminderToEdit}"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":"     * edited with {@code editReminderDescriptor}."},{"lineNumber":96,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"    private static Reminder createEditedReminder(ReadOnlyReminder reminderToEdit,"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"                                             EditReminderDescriptor editReminderDescriptor) {"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        assert reminderToEdit !\u003d null;"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":""},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"        Task updatedTask \u003d editReminderDescriptor.getTask().orElse(reminderToEdit.getTask());"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":"        Priority updatedPriority \u003d editReminderDescriptor.getPriority().orElse(reminderToEdit.getPriority());"},{"lineNumber":103,"author":{"gitID":"inGall"},"content":"        Date updatedDate \u003d editReminderDescriptor.getDate().orElse(reminderToEdit.getDate());"},{"lineNumber":104,"author":{"gitID":"inGall"},"content":"        Message updatedMessage \u003d editReminderDescriptor.getMessage().orElse(reminderToEdit.getMessage());"},{"lineNumber":105,"author":{"gitID":"inGall"},"content":"        Set\u003cTag\u003e updatedTags \u003d editReminderDescriptor.getTags().orElse(reminderToEdit.getTags());"},{"lineNumber":106,"author":{"gitID":"inGall"},"content":""},{"lineNumber":107,"author":{"gitID":"inGall"},"content":"        return new Reminder(updatedTask, updatedPriority, updatedDate, updatedMessage, updatedTags);"},{"lineNumber":108,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"inGall"},"content":""},{"lineNumber":110,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"inGall"},"content":"        // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"inGall"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitID":"inGall"},"content":"            return true;"},{"lineNumber":115,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"inGall"},"content":""},{"lineNumber":117,"author":{"gitID":"inGall"},"content":"        // instanceof handles nulls"},{"lineNumber":118,"author":{"gitID":"inGall"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":119,"author":{"gitID":"inGall"},"content":"            return false;"},{"lineNumber":120,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"inGall"},"content":""},{"lineNumber":122,"author":{"gitID":"inGall"},"content":"        // state check"},{"lineNumber":123,"author":{"gitID":"inGall"},"content":"        EditReminderCommand e \u003d (EditReminderCommand) other;"},{"lineNumber":124,"author":{"gitID":"inGall"},"content":"        return index.equals(e.index)"},{"lineNumber":125,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 editReminderDescriptor.equals(e.editReminderDescriptor);"},{"lineNumber":126,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"inGall"},"content":""},{"lineNumber":128,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"inGall"},"content":"     * Stores the details to edit the reminder with. Each non-empty field value will replace the"},{"lineNumber":130,"author":{"gitID":"inGall"},"content":"     * corresponding field value of the reminder."},{"lineNumber":131,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"inGall"},"content":"    public static class EditReminderDescriptor {"},{"lineNumber":133,"author":{"gitID":"inGall"},"content":"        private Task task;"},{"lineNumber":134,"author":{"gitID":"inGall"},"content":"        private Priority priority;"},{"lineNumber":135,"author":{"gitID":"inGall"},"content":"        private Date date;"},{"lineNumber":136,"author":{"gitID":"inGall"},"content":"        private Message message;"},{"lineNumber":137,"author":{"gitID":"inGall"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":138,"author":{"gitID":"inGall"},"content":""},{"lineNumber":139,"author":{"gitID":"inGall"},"content":"        public EditReminderDescriptor() {}"},{"lineNumber":140,"author":{"gitID":"inGall"},"content":""},{"lineNumber":141,"author":{"gitID":"inGall"},"content":"        public EditReminderDescriptor(EditReminderDescriptor toCopy) {"},{"lineNumber":142,"author":{"gitID":"inGall"},"content":"            this.task \u003d toCopy.task;"},{"lineNumber":143,"author":{"gitID":"inGall"},"content":"            this.priority \u003d toCopy.priority;"},{"lineNumber":144,"author":{"gitID":"inGall"},"content":"            this.date \u003d toCopy.date;"},{"lineNumber":145,"author":{"gitID":"inGall"},"content":"            this.message \u003d toCopy.message;"},{"lineNumber":146,"author":{"gitID":"inGall"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":147,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"inGall"},"content":""},{"lineNumber":149,"author":{"gitID":"inGall"},"content":"        /**"},{"lineNumber":150,"author":{"gitID":"inGall"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":151,"author":{"gitID":"inGall"},"content":"         */"},{"lineNumber":152,"author":{"gitID":"inGall"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":153,"author":{"gitID":"inGall"},"content":"            return CollectionUtil.isAnyNonNull(this.task, this.priority, this.date,"},{"lineNumber":154,"author":{"gitID":"inGall"},"content":"                    this.message, this.tags);"},{"lineNumber":155,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"inGall"},"content":""},{"lineNumber":157,"author":{"gitID":"inGall"},"content":"        public void setTask(Task task) {"},{"lineNumber":158,"author":{"gitID":"inGall"},"content":"            this.task \u003d task;"},{"lineNumber":159,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"inGall"},"content":""},{"lineNumber":161,"author":{"gitID":"inGall"},"content":"        public Optional\u003cTask\u003e getTask() {"},{"lineNumber":162,"author":{"gitID":"inGall"},"content":"            return Optional.ofNullable(task);"},{"lineNumber":163,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"inGall"},"content":""},{"lineNumber":165,"author":{"gitID":"inGall"},"content":"        public void setPriority(Priority priority) {"},{"lineNumber":166,"author":{"gitID":"inGall"},"content":"            this.priority \u003d priority;"},{"lineNumber":167,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"inGall"},"content":""},{"lineNumber":169,"author":{"gitID":"inGall"},"content":"        public Optional\u003cPriority\u003e getPriority() {"},{"lineNumber":170,"author":{"gitID":"inGall"},"content":"            return Optional.ofNullable(priority);"},{"lineNumber":171,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"inGall"},"content":""},{"lineNumber":173,"author":{"gitID":"inGall"},"content":"        public void setDate(Date date) {"},{"lineNumber":174,"author":{"gitID":"inGall"},"content":"            this.date \u003d date;"},{"lineNumber":175,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"inGall"},"content":""},{"lineNumber":177,"author":{"gitID":"inGall"},"content":"        public Optional\u003cDate\u003e getDate() {"},{"lineNumber":178,"author":{"gitID":"inGall"},"content":"            return Optional.ofNullable(date);"},{"lineNumber":179,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"inGall"},"content":""},{"lineNumber":181,"author":{"gitID":"inGall"},"content":"        public void setMessage(Message message) {"},{"lineNumber":182,"author":{"gitID":"inGall"},"content":"            this.message \u003d message;"},{"lineNumber":183,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"inGall"},"content":""},{"lineNumber":185,"author":{"gitID":"inGall"},"content":"        public Optional\u003cMessage\u003e getMessage() {"},{"lineNumber":186,"author":{"gitID":"inGall"},"content":"            return Optional.ofNullable(message);"},{"lineNumber":187,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"inGall"},"content":""},{"lineNumber":189,"author":{"gitID":"inGall"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":190,"author":{"gitID":"inGall"},"content":"            this.tags \u003d tags;"},{"lineNumber":191,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"inGall"},"content":""},{"lineNumber":193,"author":{"gitID":"inGall"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":194,"author":{"gitID":"inGall"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":195,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"inGall"},"content":""},{"lineNumber":197,"author":{"gitID":"inGall"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"inGall"},"content":"        public boolean equals(Object other) {"},{"lineNumber":199,"author":{"gitID":"inGall"},"content":"            // short circuit if same object"},{"lineNumber":200,"author":{"gitID":"inGall"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":201,"author":{"gitID":"inGall"},"content":"                return true;"},{"lineNumber":202,"author":{"gitID":"inGall"},"content":"            }"},{"lineNumber":203,"author":{"gitID":"inGall"},"content":""},{"lineNumber":204,"author":{"gitID":"inGall"},"content":"            // instanceof handles nulls"},{"lineNumber":205,"author":{"gitID":"inGall"},"content":"            if (!(other instanceof EditReminderDescriptor)) {"},{"lineNumber":206,"author":{"gitID":"inGall"},"content":"                return false;"},{"lineNumber":207,"author":{"gitID":"inGall"},"content":"            }"},{"lineNumber":208,"author":{"gitID":"inGall"},"content":""},{"lineNumber":209,"author":{"gitID":"inGall"},"content":"            // state check"},{"lineNumber":210,"author":{"gitID":"inGall"},"content":"            EditReminderDescriptor e \u003d (EditReminderDescriptor) other;"},{"lineNumber":211,"author":{"gitID":"inGall"},"content":""},{"lineNumber":212,"author":{"gitID":"inGall"},"content":"            return getTask().equals(e.getTask())"},{"lineNumber":213,"author":{"gitID":"inGall"},"content":"                    \u0026\u0026 getPriority().equals(e.getPriority())"},{"lineNumber":214,"author":{"gitID":"inGall"},"content":"                    \u0026\u0026 getDate().equals(e.getDate())"},{"lineNumber":215,"author":{"gitID":"inGall"},"content":"                    \u0026\u0026 getMessage().equals(e.getMessage())"},{"lineNumber":216,"author":{"gitID":"inGall"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":217,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":219}},{"path":"src/main/java/seedu/address/logic/commands/TagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import java.util.StringJoiner;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":" * Tags one or more persons identified using their last displayed targetIndexes from the address book."},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"public class TagCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_WORD \u003d \"tag\";"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"            + \": Tags one or more persons identified by the index numbers used in the last person listing.\\n\""},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"            + \"Parameters: INDEX,[MORE_INDEXES]... (must be positive integers) + TAGNAME\\n\""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1,2,3 friends\";"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%d persons successfully tagged with %s:\";"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_PERSONS_ALREADY_HAVE_TAG \u003d \"%d person(s) already have this tag:\";"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_EMPTY_INDEX_LIST \u003d \"Please provide one or more indexes! \\n%1$s\";"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_INVALID_INDEXES \u003d \"One or more person indexes provided are invalid.\";"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_DUPLICATE_TAG \u003d \"One or more persons already have this tag.\";"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"    private List\u003cIndex\u003e targetIndexes;"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    private Tag tag;"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"     * @param targetIndexes of the person in the filtered person list to tag"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"     * @param tag of the person"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"    public TagCommand(List\u003cIndex\u003e targetIndexes, Tag tag) {"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        requireNonNull(targetIndexes);"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        requireNonNull(tag);"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        this.targetIndexes \u003d targetIndexes;"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        this.tag \u003d tag;"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        for (Index targetIndex : targetIndexes) {"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"                throw new CommandException(MESSAGE_INVALID_INDEXES);"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        ArrayList\u003cReadOnlyPerson\u003e alreadyTaggedPersons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        ArrayList\u003cReadOnlyPerson\u003e toBeTaggedPersons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        for (Index targetIndex : targetIndexes) {"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"            ReadOnlyPerson personToTag \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"            Person taggedPerson \u003d new Person(personToTag);"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"            UniqueTagList updatedTags \u003d new UniqueTagList(personToTag.getTags());"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"            if (updatedTags.contains(tag)) {"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"                alreadyTaggedPersons.add(personToTag);"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"                continue;"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"            toBeTaggedPersons.add(personToTag);"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"            try {"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"                updatedTags.add(tag);"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"            } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_TAG);"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"            taggedPerson.setTags(updatedTags.toSet());"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"            try {"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"                model.updatePerson(personToTag, taggedPerson);"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"        StringJoiner toBeTaggedJoiner \u003d new StringJoiner(\", \");"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : toBeTaggedPersons) {"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"            toBeTaggedJoiner.add(person.getName().toString());"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"        if (alreadyTaggedPersons.size() \u003e 0) {"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"            StringJoiner alreadyTaggedJoiner \u003d new StringJoiner(\", \");"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"            for (ReadOnlyPerson person : alreadyTaggedPersons) {"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"                alreadyTaggedJoiner.add(person.getName().toString());"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS,"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"                    targetIndexes.size() - alreadyTaggedPersons.size(), tag.toString()) + \" \""},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"                    + toBeTaggedJoiner.toString() + \"\\n\""},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"                    + String.format(MESSAGE_PERSONS_ALREADY_HAVE_TAG, alreadyTaggedPersons.size()) + \" \""},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"                    + alreadyTaggedJoiner.toString());"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"                targetIndexes.size(), tag.toString()) + \" \" + toBeTaggedJoiner.toString());"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"                || (other instanceof TagCommand // instanceof handles nulls"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.targetIndexes.equals(((TagCommand) other).targetIndexes)) // state check"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.tag.equals(((TagCommand) other).tag); // state check"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"}"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":""}],"authorContributionMap":{"duyson98":124}},{"path":"src/main/java/seedu/address/model/person/EmailContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"public class EmailContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":32}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"    private String addressBookFilePathPrefix \u003d \"data/\";"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    private String addressBookFilePathSufix \u003d \".xml\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    private String userDataBase \u003d \"data/database.xml\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    public String getAddressBookFilePath(String name) {"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"        addressBookFilePath \u003d addressBookFilePathPrefix + name + addressBookFilePathSufix;"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    public String getUserDataBase() {"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        return userDataBase;"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"cqhchan":13,"-":81}},{"path":"src/main/java/seedu/address/logic/commands/BirthdayCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":21,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"public class BirthdayCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":""},{"lineNumber":24,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"birthday\";"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"b\";"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the birthday of the person identified \""},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"            + \"Existing birthday will be overwritten by the input.\\n\""},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"            + PREFIX_BIRTHDAY + \"dd/mm/yyyy\\n\""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"            + PREFIX_BIRTHDAY + \"02/03/1994\";"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":""},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_ADD_BIRTHDAY_SUCCESS \u003d \"Added birthday to Person: %1$s\";"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_DELETE_BIRTHDAY_SUCCESS \u003d \"Removed birthday from Person: %1$s\";"},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":""},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"    private final Index index;"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"    private final Birthday birthday;"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":""},{"lineNumber":42,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"     * @param index of the person in the filtered person list to edit the birthday"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":"     * @param birthday of the person"},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"    public BirthdayCommand(Index index, Birthday birthday) {"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        requireNonNull(index);"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"        requireNonNull(birthday);"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        this.index \u003d index;"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":""},{"lineNumber":53,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":""},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":""},{"lineNumber":61,"author":{"gitID":"inGall"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"inGall"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":63,"author":{"gitID":"inGall"},"content":"                personToEdit.getAddress(), birthday, personToEdit.getTags());"},{"lineNumber":64,"author":{"gitID":"inGall"},"content":""},{"lineNumber":65,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"inGall"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":67,"author":{"gitID":"inGall"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":68,"author":{"gitID":"inGall"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitID":"inGall"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":70,"author":{"gitID":"inGall"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":71,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"inGall"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":73,"author":{"gitID":"inGall"},"content":""},{"lineNumber":74,"author":{"gitID":"inGall"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":75,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"inGall"},"content":""},{"lineNumber":77,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"     * @param personToEdit"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"     * @return"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"    private String generateSuccessMessage(ReadOnlyPerson personToEdit) {"},{"lineNumber":82,"author":{"gitID":"inGall"},"content":"        if (!birthday.value.isEmpty()) {"},{"lineNumber":83,"author":{"gitID":"inGall"},"content":"            return String.format(MESSAGE_ADD_BIRTHDAY_SUCCESS, personToEdit);"},{"lineNumber":84,"author":{"gitID":"inGall"},"content":"        } else {"},{"lineNumber":85,"author":{"gitID":"inGall"},"content":"            return String.format(MESSAGE_DELETE_BIRTHDAY_SUCCESS, personToEdit);"},{"lineNumber":86,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"inGall"},"content":""},{"lineNumber":89,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitID":"inGall"},"content":"        // short circuit if same object"},{"lineNumber":92,"author":{"gitID":"inGall"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":93,"author":{"gitID":"inGall"},"content":"            return true;"},{"lineNumber":94,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"inGall"},"content":""},{"lineNumber":96,"author":{"gitID":"inGall"},"content":"        // instanceof handles nulls"},{"lineNumber":97,"author":{"gitID":"inGall"},"content":"        if (!(other instanceof BirthdayCommand)) {"},{"lineNumber":98,"author":{"gitID":"inGall"},"content":"            return false;"},{"lineNumber":99,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"inGall"},"content":""},{"lineNumber":101,"author":{"gitID":"inGall"},"content":"        // state check"},{"lineNumber":102,"author":{"gitID":"inGall"},"content":"        BirthdayCommand e \u003d (BirthdayCommand) other;"},{"lineNumber":103,"author":{"gitID":"inGall"},"content":"        return index.equals(e.index)"},{"lineNumber":104,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 birthday.equals(e.birthday);"},{"lineNumber":105,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":106}},{"path":"src/test/java/seedu/address/logic/commands/UntagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstAndSecondPersonsOnly;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_INVALID_INDEXES;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_SUCCESS_ALL_TAGS;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_SUCCESS_ALL_TAGS_IN_LIST;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_SUCCESS_MULTIPLE_TAGS_IN_LIST;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_TAG_NOT_FOUND;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalDatabase;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"import java.util.Collections;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"import java.util.HashSet;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"import java.util.Set;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"import java.util.StringJoiner;"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"import org.junit.Test;"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.Model;"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"public class UntagCommandTest {"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalDatabase(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        PersonBuilder firstPersonInList \u003d new PersonBuilder(ALICE);"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        Person firstUntaggedPerson \u003d firstPersonInList.withTags().build();"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        PersonBuilder secondPersonInList \u003d new PersonBuilder(BENSON);"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        Person secondUntaggedPerson \u003d secondPersonInList.withTags(\"owesMoney\").build();"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        Tag firstTag \u003d new Tag(\"friends\");"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        Tag secondTag \u003d new Tag(\"retrieveTester\");"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(false,"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), Arrays.asList(firstTag, secondTag));"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(UntagCommand.MESSAGE_SUCCESS, 2,"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"                firstTag.toString() + \", \" + secondTag.toString()) + \" \""},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"                + firstUntaggedPerson.getName().toString() + \", \" + secondUntaggedPerson.getName().toString();"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstUntaggedPerson);"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondUntaggedPerson);"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(firstTag);"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(secondTag);"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"    public void execute_unfilteredListContainsPersonsWithoutTag_success() throws Exception {"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        PersonBuilder firstPersonInList \u003d new PersonBuilder(ALICE);"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"        Person firstUntaggedPerson \u003d firstPersonInList.withTags(\"friends\", \"retrieveTester\").build();"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        PersonBuilder secondPersonInList \u003d new PersonBuilder(BENSON);"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"        Person secondUntaggedPerson \u003d secondPersonInList.withTags(\"friends\", \"retrieveTester\").build();"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        Tag firstTag \u003d new Tag(\"owesMoney\");"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"        Tag secondTag \u003d new Tag(\"retrieveTester\");"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(false,"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), Arrays.asList(firstTag));"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(UntagCommand.MESSAGE_SUCCESS, 1, firstTag.toString()) + \" \""},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"                + secondUntaggedPerson.getName().toString() + \"\\n\""},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"                + String.format(UntagCommand.MESSAGE_PERSONS_DO_NOT_HAVE_TAGS, 1) + \" \""},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"                + firstUntaggedPerson.getName().toString();"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstUntaggedPerson);"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondUntaggedPerson);"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(firstTag);"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(model);"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson firstPersonInList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"        Person firstUntaggedPerson \u003d new PersonBuilder(firstPersonInList).withTags().build();"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson secondPersonInList \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"        Person secondUntaggedPerson \u003d new PersonBuilder(secondPersonInList).withTags(\"owesMoney\").build();"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"        Tag firstTag \u003d new Tag(\"friends\");"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"        Tag secondTag \u003d new Tag(\"retrieveTester\");"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(false,"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), Arrays.asList(firstTag, secondTag));"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(UntagCommand.MESSAGE_SUCCESS, 2,"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"                firstTag.toString() + \", \" + secondTag.toString()) + \" \""},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"                + firstUntaggedPerson.getName().toString() + \", \" + secondUntaggedPerson.getName().toString();"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(expectedModel);"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstUntaggedPerson);"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondUntaggedPerson);"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(firstTag);"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(secondTag);"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"    public void execute_filteredListContainsPersonsWithoutTag_success() throws Exception {"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(model);"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson firstPersonInList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":"        Person firstUntaggedPerson \u003d new PersonBuilder(firstPersonInList).withTags(\"friends\","},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\").build();"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson secondPersonInList \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"        Person secondUntaggedPerson \u003d new PersonBuilder(secondPersonInList).withTags(\"friends\","},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":"                \"retrieveTester\").build();"},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"        Tag firstTag \u003d new Tag(\"owesMoney\");"},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(false,"},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), Arrays.asList(firstTag));"},{"lineNumber":141,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(UntagCommand.MESSAGE_SUCCESS, 1, firstTag.toString()) + \" \""},{"lineNumber":143,"author":{"gitID":"duyson98"},"content":"                + secondUntaggedPerson.getName().toString() + \"\\n\""},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":"                + String.format(UntagCommand.MESSAGE_PERSONS_DO_NOT_HAVE_TAGS, 1) + \" \""},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"                + firstUntaggedPerson.getName().toString();"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(expectedModel);"},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstUntaggedPerson);"},{"lineNumber":152,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondUntaggedPerson);"},{"lineNumber":153,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(firstTag);"},{"lineNumber":154,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":155,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":156,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":158,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"duyson98"},"content":"    public void execute_allTagsInUnfilteredList_success() throws Exception {"},{"lineNumber":160,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":161,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":162,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":163,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : model.getFilteredPersonList()) {"},{"lineNumber":164,"author":{"gitID":"duyson98"},"content":"            Person untaggedPerson \u003d new PersonBuilder(person).withTags().build();"},{"lineNumber":165,"author":{"gitID":"duyson98"},"content":"            expectedModel.updatePerson(person, untaggedPerson);"},{"lineNumber":166,"author":{"gitID":"duyson98"},"content":"            for (Tag tag : person.getTags()) {"},{"lineNumber":167,"author":{"gitID":"duyson98"},"content":"                expectedModel.deleteUnusedTag(tag);"},{"lineNumber":168,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":169,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":171,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(true, Collections.emptyList(), Collections.emptyList());"},{"lineNumber":172,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":173,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d MESSAGE_SUCCESS_ALL_TAGS_IN_LIST;"},{"lineNumber":174,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":175,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":176,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":178,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"duyson98"},"content":"    public void execute_severalTagsInUnfilteredList_success() throws Exception {"},{"lineNumber":180,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":181,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":182,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":183,"author":{"gitID":"duyson98"},"content":"        Tag firstTag \u003d new Tag(\"friends\");"},{"lineNumber":184,"author":{"gitID":"duyson98"},"content":"        Tag secondTag \u003d new Tag(\"retrieveTester\");"},{"lineNumber":185,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : model.getFilteredPersonList()) {"},{"lineNumber":186,"author":{"gitID":"duyson98"},"content":"            Person untaggedPerson \u003d new PersonBuilder(person).build();"},{"lineNumber":187,"author":{"gitID":"duyson98"},"content":"            UniqueTagList updatedTags \u003d new UniqueTagList(untaggedPerson.getTags());"},{"lineNumber":188,"author":{"gitID":"duyson98"},"content":"            updatedTags.remove(firstTag);"},{"lineNumber":189,"author":{"gitID":"duyson98"},"content":"            updatedTags.remove(secondTag);"},{"lineNumber":190,"author":{"gitID":"duyson98"},"content":"            untaggedPerson.setTags(updatedTags.toSet());"},{"lineNumber":191,"author":{"gitID":"duyson98"},"content":"            expectedModel.updatePerson(person, untaggedPerson);"},{"lineNumber":192,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":194,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(firstTag);"},{"lineNumber":195,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(secondTag);"},{"lineNumber":196,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":197,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(true,"},{"lineNumber":198,"author":{"gitID":"duyson98"},"content":"                Collections.emptyList(), Arrays.asList(firstTag, secondTag));"},{"lineNumber":199,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":200,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(MESSAGE_SUCCESS_MULTIPLE_TAGS_IN_LIST,"},{"lineNumber":201,"author":{"gitID":"duyson98"},"content":"                firstTag.toString() + \", \" + secondTag.toString());"},{"lineNumber":202,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":203,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":204,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":206,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"duyson98"},"content":"    public void execute_allTagsInFilteredList_success() throws Exception {"},{"lineNumber":208,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(model);"},{"lineNumber":209,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":210,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson firstPersonInList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":211,"author":{"gitID":"duyson98"},"content":"        Person firstUntaggedPerson \u003d new PersonBuilder(firstPersonInList).withTags().build();"},{"lineNumber":212,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson secondPersonInList \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":213,"author":{"gitID":"duyson98"},"content":"        Person secondUntaggedPerson \u003d new PersonBuilder(secondPersonInList).withTags().build();"},{"lineNumber":214,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(true, Collections.emptyList(), Collections.emptyList());"},{"lineNumber":215,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":216,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d MESSAGE_SUCCESS_ALL_TAGS_IN_LIST;"},{"lineNumber":217,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":218,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":219,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":220,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(expectedModel);"},{"lineNumber":221,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":222,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstUntaggedPerson);"},{"lineNumber":223,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondUntaggedPerson);"},{"lineNumber":224,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(new Tag(\"friends\"));"},{"lineNumber":225,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(new Tag(\"owesMoney\"));"},{"lineNumber":226,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(new Tag(\"retrieveTester\"));"},{"lineNumber":227,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":228,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":229,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":231,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"duyson98"},"content":"    public void execute_severalTagsInFilteredList_success() throws Exception {"},{"lineNumber":233,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(model);"},{"lineNumber":234,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":235,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson firstPersonInList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":236,"author":{"gitID":"duyson98"},"content":"        Person firstUntaggedPerson \u003d new PersonBuilder(firstPersonInList).withTags().build();"},{"lineNumber":237,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson secondPersonInList \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":238,"author":{"gitID":"duyson98"},"content":"        Person secondUntaggedPerson \u003d new PersonBuilder(secondPersonInList).withTags(\"owesMoney\").build();"},{"lineNumber":239,"author":{"gitID":"duyson98"},"content":"        Tag firstTag \u003d new Tag(\"friends\");"},{"lineNumber":240,"author":{"gitID":"duyson98"},"content":"        Tag secondTag \u003d new Tag(\"retrieveTester\");"},{"lineNumber":241,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(true, Collections.emptyList(),"},{"lineNumber":242,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(firstTag, secondTag));"},{"lineNumber":243,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":244,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(MESSAGE_SUCCESS_MULTIPLE_TAGS_IN_LIST,"},{"lineNumber":245,"author":{"gitID":"duyson98"},"content":"                firstTag.toString() + \", \" + secondTag.toString());"},{"lineNumber":246,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":247,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":248,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":249,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(expectedModel);"},{"lineNumber":250,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":251,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstUntaggedPerson);"},{"lineNumber":252,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondUntaggedPerson);"},{"lineNumber":253,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(new Tag(\"friends\"));"},{"lineNumber":254,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(new Tag(\"retrieveTester\"));"},{"lineNumber":255,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":256,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":257,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":259,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"duyson98"},"content":"    public void execute_allTagsOfSelectedPersonsInList_success() throws Exception {"},{"lineNumber":261,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson firstPersonInList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":262,"author":{"gitID":"duyson98"},"content":"        Person firstUntaggedPerson \u003d new PersonBuilder(firstPersonInList).withTags().build();"},{"lineNumber":263,"author":{"gitID":"duyson98"},"content":"        ReadOnlyPerson secondPersonInList \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":264,"author":{"gitID":"duyson98"},"content":"        Person secondUntaggedPerson \u003d new PersonBuilder(secondPersonInList).withTags().build();"},{"lineNumber":265,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(false,"},{"lineNumber":266,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON), Collections.emptyList());"},{"lineNumber":267,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":268,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(MESSAGE_SUCCESS_ALL_TAGS, 2) + \" \""},{"lineNumber":269,"author":{"gitID":"duyson98"},"content":"                + firstUntaggedPerson.getName().toString() + \", \" + secondUntaggedPerson.getName().toString();"},{"lineNumber":270,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":271,"author":{"gitID":"duyson98"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":272,"author":{"gitID":"duyson98"},"content":"                model.getDatabase(), new UserPrefs());"},{"lineNumber":273,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":274,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), firstUntaggedPerson);"},{"lineNumber":275,"author":{"gitID":"duyson98"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(1), secondUntaggedPerson);"},{"lineNumber":276,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(new Tag(\"friends\"));"},{"lineNumber":277,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(new Tag(\"owesMoney\"));"},{"lineNumber":278,"author":{"gitID":"duyson98"},"content":"        expectedModel.deleteUnusedTag(new Tag(\"retrieveTester\"));"},{"lineNumber":279,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":280,"author":{"gitID":"duyson98"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":281,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":283,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":284,"author":{"gitID":"duyson98"},"content":"    public void execute_invalidPersonIndexesUnfilteredList_failure() throws Exception {"},{"lineNumber":285,"author":{"gitID":"duyson98"},"content":"        Index outOfBound \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":286,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(false, Arrays.asList(INDEX_FIRST_PERSON, outOfBound),"},{"lineNumber":287,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(new Tag(\"tagOne\"), new Tag(\"tagTwo\")));"},{"lineNumber":288,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":289,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(command, model, MESSAGE_INVALID_INDEXES);"},{"lineNumber":290,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":292,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":293,"author":{"gitID":"duyson98"},"content":"    public void execute_invalidPersonIndexesFilteredList_failure() throws Exception {"},{"lineNumber":294,"author":{"gitID":"duyson98"},"content":"        showFirstAndSecondPersonsOnly(model);"},{"lineNumber":295,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":296,"author":{"gitID":"duyson98"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":297,"author":{"gitID":"duyson98"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":298,"author":{"gitID":"duyson98"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":299,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":300,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(false, Arrays.asList(INDEX_FIRST_PERSON, outOfBoundIndex),"},{"lineNumber":301,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(new Tag(\"friends\"), new Tag(\"randomTag\")));"},{"lineNumber":302,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":303,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(command, model, MESSAGE_INVALID_INDEXES);"},{"lineNumber":304,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":306,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":307,"author":{"gitID":"duyson98"},"content":"    public void execute_tagsNotFound_failure() throws Exception {"},{"lineNumber":308,"author":{"gitID":"duyson98"},"content":"        Tag firstNotFoundTag \u003d new Tag(\"tagOne\");"},{"lineNumber":309,"author":{"gitID":"duyson98"},"content":"        Tag secondNotFoundTag \u003d new Tag(\"tagTwo\");"},{"lineNumber":310,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":311,"author":{"gitID":"duyson98"},"content":"        Set\u003cTag\u003e uniqueTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":312,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : model.getAddressBook().getPersonList()) {"},{"lineNumber":313,"author":{"gitID":"duyson98"},"content":"            uniqueTags.addAll(person.getTags());"},{"lineNumber":314,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":315,"author":{"gitID":"duyson98"},"content":"        StringJoiner joiner \u003d new StringJoiner(\", \");"},{"lineNumber":316,"author":{"gitID":"duyson98"},"content":"        for (Tag tag : uniqueTags) {"},{"lineNumber":317,"author":{"gitID":"duyson98"},"content":"            joiner.add(tag.toString());"},{"lineNumber":318,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":320,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d prepareCommand(false,"},{"lineNumber":321,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON),"},{"lineNumber":322,"author":{"gitID":"duyson98"},"content":"                Arrays.asList(firstNotFoundTag, secondNotFoundTag));"},{"lineNumber":323,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":324,"author":{"gitID":"duyson98"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TAG_NOT_FOUND,"},{"lineNumber":325,"author":{"gitID":"duyson98"},"content":"                firstNotFoundTag.toString() + \", \" + secondNotFoundTag.toString(), joiner.toString());"},{"lineNumber":326,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":327,"author":{"gitID":"duyson98"},"content":"        assertCommandFailure(command, model, expectedMessage);"},{"lineNumber":328,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":330,"author":{"gitID":"duyson98"},"content":"    @Test"},{"lineNumber":331,"author":{"gitID":"duyson98"},"content":"    public void equals() throws Exception {"},{"lineNumber":332,"author":{"gitID":"duyson98"},"content":"        final List\u003cIndex\u003e indexList \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);"},{"lineNumber":333,"author":{"gitID":"duyson98"},"content":"        final List\u003cTag\u003e tagList \u003d Arrays.asList(new Tag(\"friends\"), new Tag(\"enemies\"));"},{"lineNumber":334,"author":{"gitID":"duyson98"},"content":"        final UntagCommand firstCommandCase \u003d new UntagCommand(false,"},{"lineNumber":335,"author":{"gitID":"duyson98"},"content":"                indexList, tagList);"},{"lineNumber":336,"author":{"gitID":"duyson98"},"content":"        final UntagCommand secondCommandCase \u003d new UntagCommand(false,"},{"lineNumber":337,"author":{"gitID":"duyson98"},"content":"                indexList, Collections.emptyList());"},{"lineNumber":338,"author":{"gitID":"duyson98"},"content":"        final UntagCommand thirdCommandCase \u003d new UntagCommand(true,"},{"lineNumber":339,"author":{"gitID":"duyson98"},"content":"                Collections.emptyList(), tagList);"},{"lineNumber":340,"author":{"gitID":"duyson98"},"content":"        final UntagCommand fourthCommandCase \u003d new UntagCommand(true,"},{"lineNumber":341,"author":{"gitID":"duyson98"},"content":"                Collections.emptyList(), Collections.emptyList());"},{"lineNumber":342,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":343,"author":{"gitID":"duyson98"},"content":"        // same values -\u003e returns true"},{"lineNumber":344,"author":{"gitID":"duyson98"},"content":"        final List\u003cIndex\u003e indexListCopy \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);"},{"lineNumber":345,"author":{"gitID":"duyson98"},"content":"        final List\u003cTag\u003e tagListCopy \u003d Arrays.asList(new Tag(\"friends\"), new Tag(\"enemies\"));"},{"lineNumber":346,"author":{"gitID":"duyson98"},"content":"        assertTrue(firstCommandCase.equals(new UntagCommand(false,"},{"lineNumber":347,"author":{"gitID":"duyson98"},"content":"                indexListCopy, tagListCopy)));"},{"lineNumber":348,"author":{"gitID":"duyson98"},"content":"        assertTrue(secondCommandCase.equals(new UntagCommand(false,"},{"lineNumber":349,"author":{"gitID":"duyson98"},"content":"                indexListCopy, Collections.emptyList())));"},{"lineNumber":350,"author":{"gitID":"duyson98"},"content":"        assertTrue(thirdCommandCase.equals(new UntagCommand(true,"},{"lineNumber":351,"author":{"gitID":"duyson98"},"content":"                Collections.emptyList(), tagListCopy)));"},{"lineNumber":352,"author":{"gitID":"duyson98"},"content":"        assertTrue(fourthCommandCase.equals(new UntagCommand(true,"},{"lineNumber":353,"author":{"gitID":"duyson98"},"content":"                Collections.emptyList(), Collections.emptyList())));"},{"lineNumber":354,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":355,"author":{"gitID":"duyson98"},"content":"        // same object -\u003e returns true"},{"lineNumber":356,"author":{"gitID":"duyson98"},"content":"        assertTrue(firstCommandCase.equals(firstCommandCase));"},{"lineNumber":357,"author":{"gitID":"duyson98"},"content":"        assertTrue(secondCommandCase.equals(secondCommandCase));"},{"lineNumber":358,"author":{"gitID":"duyson98"},"content":"        assertTrue(thirdCommandCase.equals(thirdCommandCase));"},{"lineNumber":359,"author":{"gitID":"duyson98"},"content":"        assertTrue(fourthCommandCase.equals(fourthCommandCase));"},{"lineNumber":360,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":361,"author":{"gitID":"duyson98"},"content":"        // null -\u003e returns false"},{"lineNumber":362,"author":{"gitID":"duyson98"},"content":"        assertFalse(firstCommandCase.equals(null));"},{"lineNumber":363,"author":{"gitID":"duyson98"},"content":"        assertFalse(secondCommandCase.equals(null));"},{"lineNumber":364,"author":{"gitID":"duyson98"},"content":"        assertFalse(thirdCommandCase.equals(null));"},{"lineNumber":365,"author":{"gitID":"duyson98"},"content":"        assertFalse(fourthCommandCase.equals(null));"},{"lineNumber":366,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":367,"author":{"gitID":"duyson98"},"content":"        // different types -\u003e returns false"},{"lineNumber":368,"author":{"gitID":"duyson98"},"content":"        assertFalse(firstCommandCase.equals(new ClearCommand()));"},{"lineNumber":369,"author":{"gitID":"duyson98"},"content":"        assertFalse(secondCommandCase.equals(new ClearCommand()));"},{"lineNumber":370,"author":{"gitID":"duyson98"},"content":"        assertFalse(thirdCommandCase.equals(new ClearCommand()));"},{"lineNumber":371,"author":{"gitID":"duyson98"},"content":"        assertFalse(fourthCommandCase.equals(new ClearCommand()));"},{"lineNumber":372,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":373,"author":{"gitID":"duyson98"},"content":"        // different index list -\u003e returns false"},{"lineNumber":374,"author":{"gitID":"duyson98"},"content":"        final List\u003cIndex\u003e anotherIndexList \u003d Arrays.asList(INDEX_FIRST_PERSON, INDEX_THIRD_PERSON);"},{"lineNumber":375,"author":{"gitID":"duyson98"},"content":"        assertFalse(firstCommandCase.equals(new UntagCommand(false,"},{"lineNumber":376,"author":{"gitID":"duyson98"},"content":"                anotherIndexList, tagList)));"},{"lineNumber":377,"author":{"gitID":"duyson98"},"content":"        assertFalse(secondCommandCase.equals(new UntagCommand(false,"},{"lineNumber":378,"author":{"gitID":"duyson98"},"content":"                anotherIndexList, Collections.emptyList())));"},{"lineNumber":379,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":380,"author":{"gitID":"duyson98"},"content":"        // different tag -\u003e returns false"},{"lineNumber":381,"author":{"gitID":"duyson98"},"content":"        final List\u003cTag\u003e anotherTagList \u003d Arrays.asList(new Tag(\"friends\"), new Tag(\"owesMoney\"));"},{"lineNumber":382,"author":{"gitID":"duyson98"},"content":"        assertFalse(firstCommandCase.equals(new UntagCommand(false,"},{"lineNumber":383,"author":{"gitID":"duyson98"},"content":"                indexList, anotherTagList)));"},{"lineNumber":384,"author":{"gitID":"duyson98"},"content":"        assertFalse(thirdCommandCase.equals(new UntagCommand(false,"},{"lineNumber":385,"author":{"gitID":"duyson98"},"content":"                Collections.emptyList(), anotherTagList)));"},{"lineNumber":386,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":387,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":388,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":389,"author":{"gitID":"duyson98"},"content":"     * Returns an {@code UntagCommand}."},{"lineNumber":390,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":391,"author":{"gitID":"duyson98"},"content":"    private UntagCommand prepareCommand(Boolean toAllPersonsInFilteredList, List\u003cIndex\u003e indexes, List\u003cTag\u003e tags) {"},{"lineNumber":392,"author":{"gitID":"duyson98"},"content":"        UntagCommand command \u003d new UntagCommand(toAllPersonsInFilteredList, indexes, tags);"},{"lineNumber":393,"author":{"gitID":"duyson98"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":394,"author":{"gitID":"duyson98"},"content":"        return command;"},{"lineNumber":395,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":396,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":397,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":397}},{"path":"src/main/java/seedu/address/model/reminder/PriorityComparator.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.model.reminder;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":" * Compares Age of ReadOnlyPerson"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"public class PriorityComparator implements Comparator\u003cReadOnlyReminder\u003e {"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":""},{"lineNumber":11,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"    public int compare(ReadOnlyReminder firstPrior, ReadOnlyReminder secondPrior) {"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"        String newFirstPrior \u003d firstPrior.getPriority().toString();"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":"        String newSecondPrior \u003d secondPrior.getPriority().toString();"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"        if (newFirstPrior.equals(\"High\") || newSecondPrior.equals(\"High\")) {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"            return newFirstPrior.compareTo(newSecondPrior);"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"        } else {"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"            return newSecondPrior.compareTo(newFirstPrior);"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":21}},{"path":"src/main/java/seedu/address/storage/XmlSerializableDatabase.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.ReadOnlyDatabase;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":" * An Immutable Database that is serializable to XML format"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"public class XmlSerializableDatabase implements ReadOnlyDatabase {"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    private List\u003cXmlAdaptedAccount\u003e accounts;"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    private List\u003cXmlAdaptedReminder\u003e reminders;"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"     * Creates an empty XmlSerializableDatabase."},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    public XmlSerializableDatabase() {"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"        accounts \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"        reminders \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"     * Conversion"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    public XmlSerializableDatabase(ReadOnlyDatabase src) {"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        this();"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"        accounts.addAll(src.getAccountList().stream().map(XmlAdaptedAccount::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    public ObservableList\u003cReadOnlyAccount\u003e getAccountList() {"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        final ObservableList\u003cReadOnlyAccount\u003e accounts \u003d this.accounts.stream().map(p -\u003e {"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"            try {"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"                return p.toModelType();"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"                e.printStackTrace();"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"                //TODO: better error handling"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"                return null;"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"        return FXCollections.unmodifiableObservableList(accounts);"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":66}},{"path":"src/main/java/seedu/address/model/ReadOnlyDatabase.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"public interface ReadOnlyDatabase {"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    ObservableList\u003cReadOnlyAccount\u003e getAccountList();"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":13}},{"path":"src/main/java/seedu/address/logic/commands/DeleteReminderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":11,"author":{"gitID":"inGall"},"content":""},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":" * Deletes a reminder identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"public class DeleteReminderCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":""},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_WORD \u003d \"deleteReminder\";"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"    public static final String COMMAND_ALIAS \u003d \"dr\";"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":""},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"            + \": Deletes the reminder identified by the index number used in the last reminder listing.\\n\""},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_DELETE_REMINDER_SUCCESS \u003d \"Deleted Reminder: %1$s\";"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":""},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":""},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"    public DeleteReminderCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":""},{"lineNumber":33,"author":{"gitID":"inGall"},"content":""},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":""},{"lineNumber":37,"author":{"gitID":"inGall"},"content":"        List\u003cReadOnlyReminder\u003e lastShownList \u003d model.getFilteredReminderList();"},{"lineNumber":38,"author":{"gitID":"inGall"},"content":""},{"lineNumber":39,"author":{"gitID":"inGall"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"inGall"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"inGall"},"content":""},{"lineNumber":43,"author":{"gitID":"inGall"},"content":"        ReadOnlyReminder reminderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"inGall"},"content":"            model.deleteReminder(reminderToDelete);"},{"lineNumber":47,"author":{"gitID":"inGall"},"content":"        } catch (ReminderNotFoundException pnfe) {"},{"lineNumber":48,"author":{"gitID":"inGall"},"content":"            assert false : \"The target reminder cannot be missing\";"},{"lineNumber":49,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"inGall"},"content":""},{"lineNumber":51,"author":{"gitID":"inGall"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete));"},{"lineNumber":52,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"inGall"},"content":""},{"lineNumber":54,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"inGall"},"content":"                || (other instanceof DeleteReminderCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteReminderCommand) other).targetIndex)); // state check"},{"lineNumber":59,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":60}},{"path":"src/main/java/seedu/address/logic/commands/SelectReminderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.events.ui.JumpToReminderRequestEvent;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":" * Selects a reminder identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"public class SelectReminderCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"    public static final String COMMAND_WORD \u003d \"selectReminder\";"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    public static final String COMMAND_ALIAS \u003d \"sr\";"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"            + \": Selects the Reminder identified by the index number used in the last reminder listing.\\n\""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_SELECT_REMINDER_SUCCESS \u003d \"Selected Reminder: %1$s\";"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"    public SelectReminderCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"        List\u003cReadOnlyReminder\u003e lastShownList \u003d model.getFilteredReminderList();"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"        EventsCenter.getInstance().post(new JumpToReminderRequestEvent(targetIndex));"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_REMINDER_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"                || (other instanceof SelectReminderCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectReminderCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"}"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":""}],"authorContributionMap":{"cqhchan":56}},{"path":"src/main/java/seedu/address/model/reminder/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":" * Represents a reminder\u0027s date in the address book."},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"public class Date {"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"            \"Date should conform the following format: dd/mm/yyyy hh:mm\";"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    public final String date;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"     * Validates given date."},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    public Date(String dateAndTime) throws IllegalValueException {"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        requireNonNull(dateAndTime);"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        if (!isValidDate(dateAndTime)) {"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        String[] splittedDateAndTime \u003d dateAndTime.trim().split(\"\\\\s+\");"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        String date \u003d splittedDateAndTime[0].trim();"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        String time \u003d splittedDateAndTime[1].trim();"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        this.date \u003d date + \" \" + time;"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    public static boolean isValidDate(String dateAndTime) {"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        String[] splittedDateAndTime \u003d dateAndTime.trim().split(\"\\\\s+\");"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        if (splittedDateAndTime.length !\u003d 2) {"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"            return false;"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        final DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"            String date \u003d splittedDateAndTime[0].trim();"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"            LocalDate.parse(date, dateFormatter);"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"            String time \u003d splittedDateAndTime[1].trim();"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"            LocalTime.parse(time, timeFormatter);"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"        return true;"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        return date;"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"                || (other instanceof Date // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.date.equals(((Date) other).date)); // state check"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"        return date.hashCode();"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":79}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.UniqueReminderList;"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    private final UniqueReminderList reminders;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        reminders \u003d new UniqueReminderList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"    public void setReminders(List\u003c? extends ReadOnlyReminder\u003e reminders) throws DuplicateReminderException {"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        this.reminders.setReminders(reminders);"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            setPersons(newData.getPersonList());"},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"            setReminders(newData.getReminderList());"},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"        } catch (DuplicateReminderException dre) {"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"            assert false : \"AddressBooks should not have duplicate reminders\";"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(persons);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Person newPerson \u003d new Person(p);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(newPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":107,"author":{"gitID":"-"},"content":"        persons.add(newPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"    //// reminder-level operations"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":"     * Adds a reminder to the address book."},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":"     * Also checks the new reminder\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":"     * and updates the Tag objects in the reminder to point to those in {@link #tags}."},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":152,"author":{"gitID":"duyson98"},"content":"     * @throws DuplicateReminderException if an equivalent reminder already exists."},{"lineNumber":153,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"duyson98"},"content":"    public void addReminder(ReadOnlyReminder p) throws DuplicateReminderException {"},{"lineNumber":155,"author":{"gitID":"duyson98"},"content":"        Reminder newReminder \u003d new Reminder(p);"},{"lineNumber":156,"author":{"gitID":"duyson98"},"content":"        syncMasterTagListWith(newReminder);"},{"lineNumber":157,"author":{"gitID":"duyson98"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":158,"author":{"gitID":"duyson98"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any reminder"},{"lineNumber":159,"author":{"gitID":"duyson98"},"content":"        // in the reminder list."},{"lineNumber":160,"author":{"gitID":"duyson98"},"content":"        reminders.add(newReminder);"},{"lineNumber":161,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":163,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"duyson98"},"content":"     * Replaces the given reminder {@code target} in the list with {@code editedReadOnlyReminder}."},{"lineNumber":165,"author":{"gitID":"duyson98"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyReminder}."},{"lineNumber":166,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":167,"author":{"gitID":"duyson98"},"content":"     * @throws DuplicateReminderException if updating the reminder\u0027s details causes the reminder to be equivalent to"},{"lineNumber":168,"author":{"gitID":"duyson98"},"content":"     *      another existing reminder in the list."},{"lineNumber":169,"author":{"gitID":"duyson98"},"content":"     * @throws ReminderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":170,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"duyson98"},"content":"     * @see #syncMasterTagListWith(Reminder)"},{"lineNumber":172,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"duyson98"},"content":"    public void updateReminder(ReadOnlyReminder target, ReadOnlyReminder editedReadOnlyReminder)"},{"lineNumber":174,"author":{"gitID":"duyson98"},"content":"            throws DuplicateReminderException, ReminderNotFoundException {"},{"lineNumber":175,"author":{"gitID":"duyson98"},"content":"        requireNonNull(editedReadOnlyReminder);"},{"lineNumber":176,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":177,"author":{"gitID":"duyson98"},"content":"        Reminder editedReminder \u003d new Reminder(editedReadOnlyReminder);"},{"lineNumber":178,"author":{"gitID":"duyson98"},"content":"        syncMasterTagListWith(editedReminder);"},{"lineNumber":179,"author":{"gitID":"duyson98"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":180,"author":{"gitID":"duyson98"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any reminder"},{"lineNumber":181,"author":{"gitID":"duyson98"},"content":"        // in the reminder list."},{"lineNumber":182,"author":{"gitID":"duyson98"},"content":"        reminders.setReminder(target, editedReminder);"},{"lineNumber":183,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":185,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"duyson98"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":187,"author":{"gitID":"duyson98"},"content":"     * @throws ReminderNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":188,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"duyson98"},"content":"    public boolean removeReminder(ReadOnlyReminder key) throws ReminderNotFoundException {"},{"lineNumber":190,"author":{"gitID":"duyson98"},"content":"        if (reminders.remove(key)) {"},{"lineNumber":191,"author":{"gitID":"duyson98"},"content":"            return true;"},{"lineNumber":192,"author":{"gitID":"duyson98"},"content":"        } else {"},{"lineNumber":193,"author":{"gitID":"duyson98"},"content":"            throw new ReminderNotFoundException();"},{"lineNumber":194,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":197,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"duyson98"},"content":"    public void removeTag(Tag t) {"},{"lineNumber":205,"author":{"gitID":"duyson98"},"content":"        tags.remove(t);"},{"lineNumber":206,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":208,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"duyson98"},"content":"     * Check if tag {@code t} in tag list is not used by any person in person list."},{"lineNumber":210,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"duyson98"},"content":"    public boolean isUnusedTag(Tag t) {"},{"lineNumber":212,"author":{"gitID":"duyson98"},"content":"        boolean notUsedInPersonList \u003d true;"},{"lineNumber":213,"author":{"gitID":"duyson98"},"content":"        boolean notUsedInReminderList \u003d true;"},{"lineNumber":214,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : getPersonList()) {"},{"lineNumber":215,"author":{"gitID":"duyson98"},"content":"            if (person.getTags().contains(t)) {"},{"lineNumber":216,"author":{"gitID":"duyson98"},"content":"                notUsedInPersonList \u003d false;"},{"lineNumber":217,"author":{"gitID":"duyson98"},"content":"                break;"},{"lineNumber":218,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":219,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyReminder reminder : getReminderList()) {"},{"lineNumber":221,"author":{"gitID":"duyson98"},"content":"            if (reminder.getTags().contains(t)) {"},{"lineNumber":222,"author":{"gitID":"duyson98"},"content":"                notUsedInReminderList \u003d false;"},{"lineNumber":223,"author":{"gitID":"duyson98"},"content":"                break;"},{"lineNumber":224,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":225,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"duyson98"},"content":"        return notUsedInPersonList \u0026\u0026 notUsedInReminderList;"},{"lineNumber":227,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":229,"author":{"gitID":"duyson98"},"content":"    //// sync master tag list"},{"lineNumber":230,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Ensures that every tag in this person:"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(Person person) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":246,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        person.setTags(correctTagReferences);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Ensures that every tag in these persons:"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     *  @see #syncMasterTagListWith(Person)"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":262,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"duyson98"},"content":"     * Ensures that every tag in this reminder:"},{"lineNumber":264,"author":{"gitID":"duyson98"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":265,"author":{"gitID":"duyson98"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":266,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"duyson98"},"content":"    private void syncMasterTagListWith(Reminder reminder) {"},{"lineNumber":268,"author":{"gitID":"duyson98"},"content":"        final UniqueTagList reminderTags \u003d new UniqueTagList(reminder.getTags());"},{"lineNumber":269,"author":{"gitID":"duyson98"},"content":"        tags.mergeFrom(reminderTags);"},{"lineNumber":270,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":271,"author":{"gitID":"duyson98"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":272,"author":{"gitID":"duyson98"},"content":"        // used for checking reminder tag references"},{"lineNumber":273,"author":{"gitID":"duyson98"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":274,"author":{"gitID":"duyson98"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":275,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":276,"author":{"gitID":"duyson98"},"content":"        // Rebuild the list of reminder tags to point to the relevant tags in the master tag list."},{"lineNumber":277,"author":{"gitID":"duyson98"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":278,"author":{"gitID":"duyson98"},"content":"        reminderTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":279,"author":{"gitID":"duyson98"},"content":"        reminder.setTags(correctTagReferences);"},{"lineNumber":280,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":282,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"duyson98"},"content":"     * Ensures that every tag in these reminders:"},{"lineNumber":284,"author":{"gitID":"duyson98"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":285,"author":{"gitID":"duyson98"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":286,"author":{"gitID":"duyson98"},"content":"     *  @see #syncMasterTagListWith(Reminder)"},{"lineNumber":287,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"duyson98"},"content":"    private void syncMasterTagListWith(UniqueReminderList reminders) {"},{"lineNumber":289,"author":{"gitID":"duyson98"},"content":"        reminders.forEach(this::syncMasterTagListWith);"},{"lineNumber":290,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":292,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":297,"author":{"gitID":"duyson98"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\" + \"\\n\""},{"lineNumber":298,"author":{"gitID":"duyson98"},"content":"                + reminders.asObservableList().size() + \" reminders, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":308,"author":{"gitID":"duyson98"},"content":"    public ObservableList\u003cReadOnlyReminder\u003e getReminderList() {"},{"lineNumber":309,"author":{"gitID":"duyson98"},"content":"        return reminders.asObservableList();"},{"lineNumber":310,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":320,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":321,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":322,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":4,"duyson98":130,"cqhchan":3,"-":193}},{"path":"src/main/java/seedu/address/model/reminder/PriorityContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.model.reminder;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"public class PriorityContainsKeywordsPredicate implements Predicate\u003cReadOnlyReminder\u003e {"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public PriorityContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public boolean test(ReadOnlyReminder reminder) {"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(reminder.getPriority().value, keyword));"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"                || (other instanceof PriorityContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.keywords.equals(((PriorityContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":32}},{"path":"src/main/java/seedu/address/model/reminder/TaskContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"inGall"},"content":"//@@author inGall"},{"lineNumber":2,"author":{"gitID":"inGall"},"content":"package seedu.address.model.reminder;"},{"lineNumber":3,"author":{"gitID":"inGall"},"content":""},{"lineNumber":4,"author":{"gitID":"inGall"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"inGall"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"inGall"},"content":""},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":""},{"lineNumber":9,"author":{"gitID":"inGall"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"inGall"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"inGall"},"content":" */"},{"lineNumber":12,"author":{"gitID":"inGall"},"content":"public class TaskContainsKeywordsPredicate implements Predicate\u003cReadOnlyReminder\u003e {"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"inGall"},"content":""},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"    public TaskContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":""},{"lineNumber":19,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":"    public boolean test(ReadOnlyReminder reminder) {"},{"lineNumber":21,"author":{"gitID":"inGall"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"inGall"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(reminder.getTask().taskName, keyword));"},{"lineNumber":23,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"inGall"},"content":""},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"inGall"},"content":"                || (other instanceof TaskContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"inGall"},"content":"                \u0026\u0026 this.keywords.equals(((TaskContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":""},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"}"}],"authorContributionMap":{"inGall":32}},{"path":"src/main/java/seedu/address/logic/commands/UntagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import java.util.StringJoiner;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":" * Untags one or more persons identified using their last displayed targetIndexes from the address book."},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"public class UntagCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_WORD \u003d \"untag\";"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_ALIAS \u003d \"ut\";"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"            + \": Untags one or more persons in the last person listing.\\n\""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"            + \"- Untag all tags of persons identified by the index numbers used\\n\""},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"            + \"Parameters: INDEX,[MORE_INDEXES]... (must be positive integers)\\n\""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1,2,3\\n\""},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"            + \"- Untag one or more tags of persons identified by the index numbers used\\n\""},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"            + \"Parameters: INDEX,[MORE_INDEXES]... (must be positive integers) + TAGNAME\\n\""},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1,2,3 friends/colleagues\\n\""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"            + \"- Untag all tags of all persons in the last person listing\\n\""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"            + \"Parameters: -all\\n\""},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"            + \"Example: \" + COMMAND_WORD + \" -all\\n\""},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"            + \"- Untag one or more tags of all persons in the last person listing\\n\""},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"            + \"Parameters: -all + TAGNAME\\n\""},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"            + \"Example: \" + COMMAND_WORD + \" -all friends/colleagues\";"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%d person(s) successfully untagged from %s:\";"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_SUCCESS_ALL_TAGS \u003d \"%d person(s) sucessfully untagged:\";"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_SUCCESS_MULTIPLE_TAGS_IN_LIST \u003d \"%s tag(s) successfully\" + \" \""},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"            + \"removed from person list.\";"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_SUCCESS_ALL_TAGS_IN_LIST \u003d \"All tags in person list successfully removed.\";"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"%s tag(s) not found in person list.\" + \"\\n\""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"            + \"You may want to refer to the following existing tags inside the unfiltered person list: %s\";"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_PERSONS_DO_NOT_HAVE_TAGS \u003d \"%d person(s) do not have any of the specified tags:\";"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_EMPTY_INDEX_LIST \u003d \"Please provide one or more indexes! \\n%1$s\";"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_INVALID_INDEXES \u003d \"One or more person indexes provided are invalid.\";"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    private boolean toAllPersonsInFilteredList;"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"    private List\u003cIndex\u003e targetIndexes;"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    private List\u003cTag\u003e tags;"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"     * @param targetIndexes of the persons in the filtered person list to untag"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"     * @param tags of the persons"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"    public UntagCommand(boolean toAllPersonsInFilteredList, List\u003cIndex\u003e targetIndexes, List\u003cTag\u003e tags) {"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        requireNonNull(targetIndexes);"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        requireNonNull(tags);"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"        this.toAllPersonsInFilteredList \u003d toAllPersonsInFilteredList;"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"        this.targetIndexes \u003d targetIndexes;"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"        this.tags \u003d tags;"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        for (Index targetIndex : targetIndexes) {"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"                throw new CommandException(MESSAGE_INVALID_INDEXES);"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"        Set\u003cTag\u003e uniqueTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : model.getAddressBook().getPersonList()) {"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"            uniqueTags.addAll(person.getTags());"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"        if (!tags.isEmpty() \u0026\u0026 Collections.disjoint(uniqueTags, tags)) {"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND,"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"                    joinTagList(tags), joinTagList(new ArrayList\u003c\u003e(uniqueTags))));"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        if (toAllPersonsInFilteredList) {"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"            return new CommandResult(untagAllPersonsInFilteredList(lastShownList));"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"        return new CommandResult(untagSpecifiedPersonsInFilteredList(lastShownList));"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"                || (other instanceof UntagCommand // instanceof handles nulls"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.targetIndexes.equals(((UntagCommand) other).targetIndexes))"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.tags.equals(((UntagCommand) other).tags); // state check"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"     * @param lastShownList of person filtered list"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"    private String untagSpecifiedPersonsInFilteredList(List\u003cReadOnlyPerson\u003e lastShownList) throws CommandException {"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e toBeUntaggedPerson \u003d new ArrayList\u003c\u003e();"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e alreadyUntaggedPerson \u003d new ArrayList\u003c\u003e();"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"        Set\u003cTag\u003e uniqueTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"        for (Index targetIndex : targetIndexes) {"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"            ReadOnlyPerson person \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"            if (!tags.isEmpty() \u0026\u0026 Collections.disjoint(person.getTags(), tags)) {"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"                alreadyUntaggedPerson.add(person);"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"            } else {"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"                toBeUntaggedPerson.add(person);"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"            uniqueTags.addAll(person.getTags());"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"        List\u003cTag\u003e tagsToRemove \u003d new ArrayList\u003c\u003e(uniqueTags);"},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"        removeTagsFromPersons(toBeUntaggedPerson, (tags.isEmpty()) ? tagsToRemove : tags);"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"        deleteUnusedTagsInTagList(tagsToRemove);"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":"            return String.format(MESSAGE_SUCCESS_ALL_TAGS, targetIndexes.size()) + \" \""},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"                    + joinPersonList(toBeUntaggedPerson);"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"        return (alreadyUntaggedPerson.size() \u003e 0)"},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":"                ? String.format(MESSAGE_SUCCESS, targetIndexes.size() - alreadyUntaggedPerson.size(), joinTagList(tags))"},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"                + \" \" + joinPersonList(toBeUntaggedPerson) + \"\\n\""},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":"                + String.format(MESSAGE_PERSONS_DO_NOT_HAVE_TAGS, alreadyUntaggedPerson.size()) + \" \""},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"                + joinPersonList(alreadyUntaggedPerson)"},{"lineNumber":141,"author":{"gitID":"duyson98"},"content":"                : String.format(MESSAGE_SUCCESS, targetIndexes.size(), joinTagList(tags))"},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":"                + \" \" + joinPersonList(toBeUntaggedPerson);"},{"lineNumber":143,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":"     * @param lastShownList in filtered list"},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":"    private String untagAllPersonsInFilteredList(List\u003cReadOnlyPerson\u003e lastShownList) throws CommandException {"},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e personsToUpdate \u003d new ArrayList\u003c\u003e(lastShownList);"},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"        removeTagsFromPersons(personsToUpdate, tags);"},{"lineNumber":152,"author":{"gitID":"duyson98"},"content":"        deleteUnusedTagsInTagList(new ArrayList\u003c\u003e(tags.isEmpty()"},{"lineNumber":153,"author":{"gitID":"duyson98"},"content":"                ? new ArrayList\u003c\u003e(model.getAddressBook().getTagList()) : tags));"},{"lineNumber":154,"author":{"gitID":"duyson98"},"content":"        return (tags.isEmpty()) ? MESSAGE_SUCCESS_ALL_TAGS_IN_LIST"},{"lineNumber":155,"author":{"gitID":"duyson98"},"content":"                : String.format(MESSAGE_SUCCESS_MULTIPLE_TAGS_IN_LIST, joinTagList(tags));"},{"lineNumber":156,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":158,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"duyson98"},"content":"     * Removes specified tags from the person list"},{"lineNumber":160,"author":{"gitID":"duyson98"},"content":"     * Removes all tags if tag is not specified"},{"lineNumber":161,"author":{"gitID":"duyson98"},"content":"     * @param persons to be untagged"},{"lineNumber":162,"author":{"gitID":"duyson98"},"content":"     * @param tags to be removed"},{"lineNumber":163,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"duyson98"},"content":"    private void removeTagsFromPersons(List\u003cReadOnlyPerson\u003e persons, List\u003cTag\u003e tags) throws CommandException {"},{"lineNumber":165,"author":{"gitID":"duyson98"},"content":"        assert persons !\u003d null;"},{"lineNumber":166,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":167,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : persons) {"},{"lineNumber":168,"author":{"gitID":"duyson98"},"content":"            Person untaggedPerson \u003d new Person(person);"},{"lineNumber":169,"author":{"gitID":"duyson98"},"content":"            UniqueTagList updatedTags \u003d new UniqueTagList();"},{"lineNumber":170,"author":{"gitID":"duyson98"},"content":"            if (!tags.isEmpty()) {"},{"lineNumber":171,"author":{"gitID":"duyson98"},"content":"                updatedTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":172,"author":{"gitID":"duyson98"},"content":"                for (Tag t : tags) {"},{"lineNumber":173,"author":{"gitID":"duyson98"},"content":"                    updatedTags.remove(t);"},{"lineNumber":174,"author":{"gitID":"duyson98"},"content":"                }"},{"lineNumber":175,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":176,"author":{"gitID":"duyson98"},"content":"            untaggedPerson.setTags(updatedTags.toSet());"},{"lineNumber":177,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":178,"author":{"gitID":"duyson98"},"content":"            try {"},{"lineNumber":179,"author":{"gitID":"duyson98"},"content":"                model.updatePerson(person, untaggedPerson);"},{"lineNumber":180,"author":{"gitID":"duyson98"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":181,"author":{"gitID":"duyson98"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":182,"author":{"gitID":"duyson98"},"content":"            } catch (PersonNotFoundException e) {"},{"lineNumber":183,"author":{"gitID":"duyson98"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":184,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":188,"author":{"gitID":"duyson98"},"content":"    private void deleteUnusedTagsInTagList(List\u003cTag\u003e tags) {"},{"lineNumber":189,"author":{"gitID":"duyson98"},"content":"        for (Tag tag : tags) {"},{"lineNumber":190,"author":{"gitID":"duyson98"},"content":"            model.deleteUnusedTag(tag);"},{"lineNumber":191,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":194,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"duyson98"},"content":"     * Join person list elements by commas"},{"lineNumber":196,"author":{"gitID":"duyson98"},"content":"     * @param personList to be joined"},{"lineNumber":197,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"duyson98"},"content":"    private String joinPersonList(List\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":199,"author":{"gitID":"duyson98"},"content":"        StringJoiner joiner \u003d new StringJoiner(\", \");"},{"lineNumber":200,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : personList) {"},{"lineNumber":201,"author":{"gitID":"duyson98"},"content":"            joiner.add(person.getName().toString());"},{"lineNumber":202,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"duyson98"},"content":"        return joiner.toString();"},{"lineNumber":204,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":206,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"duyson98"},"content":"     * Join tag list elements by commas"},{"lineNumber":208,"author":{"gitID":"duyson98"},"content":"     * @param tagList to be joined"},{"lineNumber":209,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"duyson98"},"content":"    private String joinTagList(List\u003cTag\u003e tagList) {"},{"lineNumber":211,"author":{"gitID":"duyson98"},"content":"        StringJoiner joiner \u003d new StringJoiner(\", \");"},{"lineNumber":212,"author":{"gitID":"duyson98"},"content":"        for (Tag tag : tagList) {"},{"lineNumber":213,"author":{"gitID":"duyson98"},"content":"            joiner.add(tag.toString());"},{"lineNumber":214,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"duyson98"},"content":"        return joiner.toString();"},{"lineNumber":216,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":217}},{"path":"src/main/java/seedu/address/model/reminder/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":" * Represents a reminder\u0027s task name in the address book."},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTaskName(String)}"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"public class Task {"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_TASK_NAME_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"            \"Tasks should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    /*"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    public static final String TASK_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    public final String taskName;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"     * Validates given task."},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"     * @throws IllegalValueException if given task name string is invalid."},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    public Task(String name) throws IllegalValueException {"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        requireNonNull(name);"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        if (!isValidTaskName(trimmedName)) {"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"            throw new IllegalValueException(MESSAGE_TASK_NAME_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        this.taskName \u003d trimmedName;"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"     * Returns true if a given string is a valid reminder task name."},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    public static boolean isValidTaskName(String test) {"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        return test.matches(TASK_NAME_VALIDATION_REGEX);"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        return taskName;"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"                || (other instanceof Task // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.taskName.equals(((Task) other).taskName)); // state check"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"        return taskName.hashCode();"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":64}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"     * Removes a Tag from the list."},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"    public void remove(Tag toRemove) {"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"        requireNonNull(toRemove);"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"        internalList.remove(toRemove);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"duyson98":6,"-":146}},{"path":"src/main/java/seedu/address/model/account/exceptions/DuplicateAccountException.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model.account.exceptions;"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"public class DuplicateAccountException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"    public DuplicateAccountException() {"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"        super(\"Operation would result in duplicate Account\");"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"}"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""}],"authorContributionMap":{"cqhchan":12,"-":1}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"inGall"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"inGall"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"inGall"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":20,"author":{"gitID":"inGall"},"content":""},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.events.model.DatabaseChangedEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":25,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.AgeComparator;"},{"lineNumber":26,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.BirthdayComparator;"},{"lineNumber":27,"author":{"gitID":"inGall"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.PriorityComparator;"},{"lineNumber":32,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":33,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.Reminder;"},{"lineNumber":34,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":35,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":36,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":41,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":44,"author":{"gitID":"inGall"},"content":""},{"lineNumber":45,"author":{"gitID":"inGall"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d  \"Duplicate persons in AddressBook.\";"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_DUPLICATE_REMINDER \u003d  \"Duplicate reminders in AddressBook.\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"    private final Database database;"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"    private final FilteredList\u003cReadOnlyAccount\u003e filteredAccount;"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    private final FilteredList\u003cReadOnlyReminder\u003e filteredReminders;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyDatabase database, UserPrefs userPrefs) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"        this.database \u003d new Database(database);"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"        filteredAccount \u003d new FilteredList\u003cReadOnlyAccount\u003e(this.database.getAccountList());"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"        filteredReminders \u003d new FilteredList\u003c\u003e(this.addressBook.getReminderList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":"        this(new AddressBook(), new Database(), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":"    public void resetDatabase(ReadOnlyDatabase newData) {"},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"        database.resetData(newData);"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"        indicateDatabaseChanged();"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":"    public ReadOnlyDatabase getDatabase() {"},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":"        return database;"},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"    private void indicateDatabaseChanged() {"},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":"        raise(new DatabaseChangedEvent(database));"},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"    //// person-level operations"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":"    public void deletePersonTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException  {"},{"lineNumber":132,"author":{"gitID":"inGall"},"content":"        for (int i \u003d 0; i \u003c addressBook.getPersonList().size(); i++) {"},{"lineNumber":133,"author":{"gitID":"inGall"},"content":"            ReadOnlyPerson oldPerson \u003d addressBook.getPersonList().get(i);"},{"lineNumber":134,"author":{"gitID":"inGall"},"content":""},{"lineNumber":135,"author":{"gitID":"inGall"},"content":"            Person newPerson \u003d new Person(oldPerson);"},{"lineNumber":136,"author":{"gitID":"inGall"},"content":"            Set\u003cTag\u003e newTags \u003d newPerson.getTags();"},{"lineNumber":137,"author":{"gitID":"inGall"},"content":"            newTags.remove(tag);"},{"lineNumber":138,"author":{"gitID":"inGall"},"content":"            newPerson.setTags(newTags);"},{"lineNumber":139,"author":{"gitID":"inGall"},"content":""},{"lineNumber":140,"author":{"gitID":"inGall"},"content":"            addressBook.updatePerson(oldPerson, newPerson);"},{"lineNumber":141,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"inGall"},"content":""},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"    //// reminder-level operations"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":"    public synchronized void deleteReminder(ReadOnlyReminder target) throws ReminderNotFoundException {"},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":"        addressBook.removeReminder(target);"},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":"        indicateAddressBookChanged();"},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":153,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"duyson98"},"content":"    public synchronized void addReminder(ReadOnlyReminder reminder) throws DuplicateReminderException {"},{"lineNumber":155,"author":{"gitID":"duyson98"},"content":"        addressBook.addReminder(reminder);"},{"lineNumber":156,"author":{"gitID":"duyson98"},"content":"        updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"},{"lineNumber":157,"author":{"gitID":"duyson98"},"content":"        indicateAddressBookChanged();"},{"lineNumber":158,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":160,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"duyson98"},"content":"    public void updateReminder(ReadOnlyReminder target, ReadOnlyReminder editedReminder)"},{"lineNumber":162,"author":{"gitID":"duyson98"},"content":"            throws DuplicateReminderException, ReminderNotFoundException {"},{"lineNumber":163,"author":{"gitID":"duyson98"},"content":"        requireAllNonNull(target, editedReminder);"},{"lineNumber":164,"author":{"gitID":"duyson98"},"content":"        addressBook.updateReminder(target, editedReminder);"},{"lineNumber":165,"author":{"gitID":"duyson98"},"content":"        indicateAddressBookChanged();"},{"lineNumber":166,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":168,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"duyson98"},"content":"    public void deleteReminderTag(Tag tag) throws ReminderNotFoundException, DuplicateReminderException  {"},{"lineNumber":170,"author":{"gitID":"duyson98"},"content":"        for (int i \u003d 0; i \u003c addressBook.getReminderList().size(); i++) {"},{"lineNumber":171,"author":{"gitID":"duyson98"},"content":"            ReadOnlyReminder oldReminder \u003d addressBook.getReminderList().get(i);"},{"lineNumber":172,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":173,"author":{"gitID":"duyson98"},"content":"            Reminder newReminder \u003d new Reminder(oldReminder);"},{"lineNumber":174,"author":{"gitID":"duyson98"},"content":"            Set\u003cTag\u003e newTags \u003d newReminder.getTags();"},{"lineNumber":175,"author":{"gitID":"duyson98"},"content":"            newTags.remove(tag);"},{"lineNumber":176,"author":{"gitID":"duyson98"},"content":"            newReminder.setTags(newTags);"},{"lineNumber":177,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":178,"author":{"gitID":"duyson98"},"content":"            addressBook.updateReminder(oldReminder, newReminder);"},{"lineNumber":179,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":182,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":183,"author":{"gitID":"cqhchan"},"content":"    //@@author cqhchan"},{"lineNumber":184,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"cqhchan"},"content":"    public synchronized void deleteAccount(ReadOnlyAccount target) throws PersonNotFoundException {"},{"lineNumber":186,"author":{"gitID":"cqhchan"},"content":"        database.removeAccount(target);"},{"lineNumber":187,"author":{"gitID":"cqhchan"},"content":"        indicateAddressBookChanged();"},{"lineNumber":188,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":190,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"cqhchan"},"content":"    public synchronized void addAccount(ReadOnlyAccount account) throws DuplicateAccountException {"},{"lineNumber":192,"author":{"gitID":"cqhchan"},"content":"        database.addAccount(account);"},{"lineNumber":193,"author":{"gitID":"cqhchan"},"content":"        updateFilteredAccountList(PREDICATE_SHOW_ALL_ACCOUNTS);"},{"lineNumber":194,"author":{"gitID":"cqhchan"},"content":"        indicateDatabaseChanged();"},{"lineNumber":195,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":197,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":198,"author":{"gitID":"cqhchan"},"content":"    public synchronized boolean checkAccount(ReadOnlyAccount account) {"},{"lineNumber":199,"author":{"gitID":"cqhchan"},"content":"        for (ReadOnlyAccount tempAccount : database.getAccountList()) {"},{"lineNumber":200,"author":{"gitID":"cqhchan"},"content":"            if (tempAccount.getUsername().fullName.equals(account.getUsername().fullName)"},{"lineNumber":201,"author":{"gitID":"cqhchan"},"content":"                    \u0026\u0026 tempAccount.getPassword().value.equals(account.getPassword().value)) {"},{"lineNumber":202,"author":{"gitID":"cqhchan"},"content":"                return true;"},{"lineNumber":203,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":204,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":206,"author":{"gitID":"cqhchan"},"content":"        return false;"},{"lineNumber":207,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":209,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":210,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":211,"author":{"gitID":"duyson98"},"content":"    //// tag-level operations"},{"lineNumber":212,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":213,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":214,"author":{"gitID":"duyson98"},"content":"    public void deleteUnusedTag(Tag tag) {"},{"lineNumber":215,"author":{"gitID":"duyson98"},"content":"        if (addressBook.isUnusedTag(tag)) {"},{"lineNumber":216,"author":{"gitID":"duyson98"},"content":"            addressBook.removeTag(tag);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            indicateAddressBookChanged();"},{"lineNumber":218,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"cqhchan"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Account List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":245,"author":{"gitID":"cqhchan"},"content":"    public ObservableList\u003cReadOnlyAccount\u003e getFilteredAccountList() {"},{"lineNumber":246,"author":{"gitID":"cqhchan"},"content":"        return FXCollections.unmodifiableObservableList(filteredAccount);"},{"lineNumber":247,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":249,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"cqhchan"},"content":"    public void updateFilteredAccountList(Predicate\u003cReadOnlyAccount\u003e predicate) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":252,"author":{"gitID":"cqhchan"},"content":"        filteredAccount.setPredicate(predicate);"},{"lineNumber":253,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":255,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":256,"author":{"gitID":"duyson98"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Reminder List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":257,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":258,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"duyson98"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyReminder} backed by the internal list of"},{"lineNumber":260,"author":{"gitID":"duyson98"},"content":"     * {@code addressBook}"},{"lineNumber":261,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":263,"author":{"gitID":"duyson98"},"content":"    public ObservableList\u003cReadOnlyReminder\u003e getFilteredReminderList() {"},{"lineNumber":264,"author":{"gitID":"duyson98"},"content":"        logger.info(\"it came here\");"},{"lineNumber":265,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":266,"author":{"gitID":"duyson98"},"content":"        return FXCollections.unmodifiableObservableList(filteredReminders);"},{"lineNumber":267,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":269,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"duyson98"},"content":"    public void updateFilteredReminderList(Predicate\u003cReadOnlyReminder\u003e predicate) {"},{"lineNumber":271,"author":{"gitID":"duyson98"},"content":"        requireNonNull(predicate);"},{"lineNumber":272,"author":{"gitID":"duyson98"},"content":"        filteredReminders.setPredicate(predicate);"},{"lineNumber":273,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":275,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":276,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":277,"author":{"gitID":"duyson98"},"content":"        // short circuit if same object"},{"lineNumber":278,"author":{"gitID":"duyson98"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":279,"author":{"gitID":"duyson98"},"content":"            return true;"},{"lineNumber":280,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":282,"author":{"gitID":"duyson98"},"content":"        // instanceof handles nulls"},{"lineNumber":283,"author":{"gitID":"duyson98"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":284,"author":{"gitID":"duyson98"},"content":"            return false;"},{"lineNumber":285,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":287,"author":{"gitID":"duyson98"},"content":"        // state check"},{"lineNumber":288,"author":{"gitID":"duyson98"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":289,"author":{"gitID":"duyson98"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":290,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":291,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 filteredReminders.equals(other.filteredReminders);"},{"lineNumber":292,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"inGall"},"content":"    @Override"},{"lineNumber":296,"author":{"gitID":"duyson98"},"content":"    public Boolean checkIfPersonListEmpty(ArrayList\u003cReadOnlyPerson\u003e contactList) {"},{"lineNumber":297,"author":{"gitID":"inGall"},"content":"        if (filteredPersons.isEmpty()) {"},{"lineNumber":298,"author":{"gitID":"inGall"},"content":"            return true;"},{"lineNumber":299,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":300,"author":{"gitID":"inGall"},"content":"        return false;"},{"lineNumber":301,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"inGall"},"content":""},{"lineNumber":303,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":304,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"duyson98"},"content":"    public Boolean checkIfReminderListEmpty(ArrayList\u003cReadOnlyReminder\u003e contactList) {"},{"lineNumber":306,"author":{"gitID":"duyson98"},"content":"        if (filteredReminders.isEmpty()) {"},{"lineNumber":307,"author":{"gitID":"duyson98"},"content":"            return true;"},{"lineNumber":308,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":309,"author":{"gitID":"duyson98"},"content":"        return false;"},{"lineNumber":310,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":312,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":313,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":314,"author":{"gitID":"inGall"},"content":"     * @param contactList"},{"lineNumber":315,"author":{"gitID":"inGall"},"content":"     * @throws CommandException"},{"lineNumber":316,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"inGall"},"content":"    public void sortListByName(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":318,"author":{"gitID":"inGall"},"content":"        contactList.addAll(filteredPersons);"},{"lineNumber":319,"author":{"gitID":"inGall"},"content":"        Collections.sort(contactList, Comparator.comparing(p -\u003e p.toString().toLowerCase()));"},{"lineNumber":320,"author":{"gitID":"inGall"},"content":""},{"lineNumber":321,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":322,"author":{"gitID":"inGall"},"content":"            addressBook.setPersons(contactList);"},{"lineNumber":323,"author":{"gitID":"-"},"content":"            indicateAddressBookChanged();"},{"lineNumber":324,"author":{"gitID":"inGall"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":325,"author":{"gitID":"inGall"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":326,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":327,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"inGall"},"content":""},{"lineNumber":329,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":330,"author":{"gitID":"inGall"},"content":"     * @param contactList"},{"lineNumber":331,"author":{"gitID":"inGall"},"content":"     * @throws CommandException"},{"lineNumber":332,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":333,"author":{"gitID":"inGall"},"content":"    public void sortListByAge(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":334,"author":{"gitID":"inGall"},"content":"        contactList.addAll(filteredPersons);"},{"lineNumber":335,"author":{"gitID":"inGall"},"content":"        Collections.sort(contactList, new AgeComparator());"},{"lineNumber":336,"author":{"gitID":"inGall"},"content":""},{"lineNumber":337,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":338,"author":{"gitID":"inGall"},"content":"            addressBook.setPersons(contactList);"},{"lineNumber":339,"author":{"gitID":"-"},"content":"            indicateAddressBookChanged();"},{"lineNumber":340,"author":{"gitID":"inGall"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":341,"author":{"gitID":"inGall"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":342,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":343,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"inGall"},"content":""},{"lineNumber":345,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":346,"author":{"gitID":"inGall"},"content":"     * @param contactList"},{"lineNumber":347,"author":{"gitID":"inGall"},"content":"     * @throws CommandException"},{"lineNumber":348,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":349,"author":{"gitID":"inGall"},"content":"    public void sortListByBirthday(ArrayList\u003cReadOnlyPerson\u003e contactList) throws CommandException {"},{"lineNumber":350,"author":{"gitID":"inGall"},"content":"        contactList.addAll(filteredPersons);"},{"lineNumber":351,"author":{"gitID":"inGall"},"content":"        Collections.sort(contactList, new BirthdayComparator());"},{"lineNumber":352,"author":{"gitID":"inGall"},"content":""},{"lineNumber":353,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":354,"author":{"gitID":"inGall"},"content":"            addressBook.setPersons(contactList);"},{"lineNumber":355,"author":{"gitID":"-"},"content":"            indicateAddressBookChanged();"},{"lineNumber":356,"author":{"gitID":"inGall"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":357,"author":{"gitID":"inGall"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":358,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"inGall"},"content":""},{"lineNumber":361,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":362,"author":{"gitID":"inGall"},"content":"     * @param contactList"},{"lineNumber":363,"author":{"gitID":"inGall"},"content":"     * @throws CommandException"},{"lineNumber":364,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":365,"author":{"gitID":"inGall"},"content":"    public void sortListByPriority(ArrayList\u003cReadOnlyReminder\u003e contactList) throws CommandException {"},{"lineNumber":366,"author":{"gitID":"inGall"},"content":"        contactList.addAll(filteredReminders);"},{"lineNumber":367,"author":{"gitID":"inGall"},"content":"        Collections.sort(contactList, new PriorityComparator());"},{"lineNumber":368,"author":{"gitID":"inGall"},"content":""},{"lineNumber":369,"author":{"gitID":"inGall"},"content":"        try {"},{"lineNumber":370,"author":{"gitID":"inGall"},"content":"            addressBook.setReminders(contactList);"},{"lineNumber":371,"author":{"gitID":"-"},"content":"            indicateAddressBookChanged();"},{"lineNumber":372,"author":{"gitID":"inGall"},"content":"        } catch (DuplicateReminderException e) {"},{"lineNumber":373,"author":{"gitID":"inGall"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"},{"lineNumber":374,"author":{"gitID":"inGall"},"content":"        }"},{"lineNumber":375,"author":{"gitID":"inGall"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"inGall"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":97,"cqhchan":63,"duyson98":105,"-":112}},{"path":"src/main/java/seedu/address/model/reminder/Priority.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":" * Represents a reminder\u0027s priority in the address book."},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"public class Priority {"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"            \"Priority can only be Low / Medium / High\";"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    public static final String PRIORITY_VALIDATION_REGEX \u003d \"(?:Low|Medium|High)\";"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"     * Validates given priority word."},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"     * @throws IllegalValueException if given priority string is invalid."},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    public Priority(String priority) throws IllegalValueException {"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"        requireNonNull(priority);"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"        String trimmedPriority \u003d priority.trim();"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        if (!isValidPriority(trimmedPriority)) {"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"            throw new IllegalValueException(MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"        this.value \u003d trimmedPriority;"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"     * Returns true if a given string is a valid reminder priority word."},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    public static boolean isValidPriority(String test) {"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        return test.matches(PRIORITY_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"                || (other instanceof Priority // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.value.equals(((Priority) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":58}},{"path":"src/main/java/seedu/address/logic/commands/RetagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":" * Replaces a tag name in person list by a new tag name from the address book."},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"public class RetagCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_WORD \u003d \"retag\";"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    public static final String COMMAND_ALIAS \u003d \"rt\";"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        + \": Retags all person having the old tag name to the new tag name.\\n\""},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        + \"Parameters: OLDTAGNAME + NEWTAGNAME\\n\""},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        + \"Example: \" + COMMAND_WORD + \" friends enemies\";"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%s tag in person list successfully replaced by %s.\";"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"%s tag not found in person list.\";"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_INVALID_ARGS \u003d \"Target tag name is the same as new tag name. \\n%1$s\";"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_DUPLICATE_TAG \u003d \"One or more persons already have this tag.\";"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    private Tag targetTag;"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    private Tag newTag;"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    * @param targetTag of persons in the filtered person list to retag"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    * @param newTag of persons"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    */"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    public RetagCommand(Tag targetTag, Tag newTag) {"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        requireNonNull(targetTag);"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        requireNonNull(newTag);"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        this.targetTag \u003d targetTag;"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"        this.newTag \u003d newTag;"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"        List\u003cReadOnlyPerson\u003e lastShownListCopy \u003d new ArrayList\u003c\u003e(model.getFilteredPersonList());"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        if (!tagUsedInPersonList(lastShownListCopy, targetTag)) {"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, targetTag.toString()));"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : lastShownListCopy) {"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"            Person retaggedPerson \u003d new Person(person);"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"            UniqueTagList updatedTags \u003d new UniqueTagList(retaggedPerson.getTags());"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"            if (updatedTags.contains(targetTag)) {"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"                updatedTags.remove(targetTag);"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"            } else {"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"                continue;"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"            if (!updatedTags.contains(newTag)) {"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"                try {"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"                    updatedTags.add(newTag);"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"                } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"                    throw new CommandException(MESSAGE_DUPLICATE_TAG);"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"                }"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"            retaggedPerson.setTags(updatedTags.toSet());"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"            try {"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"                model.updatePerson(person, retaggedPerson);"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"        model.deleteUnusedTag(targetTag);"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetTag.toString(), newTag.toString()));"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"     * Checks whether a tag is used inside person list"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"    private boolean tagUsedInPersonList(List\u003cReadOnlyPerson\u003e personList, Tag tag) {"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"        assert personList !\u003d null \u0026\u0026 tag !\u003d null;"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"        for (ReadOnlyPerson person : personList) {"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"            if (person.getTags().contains(tag)) {"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"                return true;"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"        return false;"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"            || (other instanceof RetagCommand // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"            \u0026\u0026 this.targetTag.equals(((RetagCommand) other).targetTag)) // state check"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"            \u0026\u0026 this.newTag.equals(((RetagCommand) other).newTag); // state check"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":117}},{"path":"src/main/java/seedu/address/model/reminder/ReadOnlyReminder.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":" * A read-only immutable interface for a Reminder in the addressbook."},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"public interface ReadOnlyReminder {"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    ObjectProperty\u003cTask\u003e taskProperty();"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    Task getTask();"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"    ObjectProperty\u003cPriority\u003e priorityProperty();"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    Priority getPriority();"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    ObjectProperty\u003cDate\u003e dateProperty();"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    Date getDate();"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    ObjectProperty\u003cMessage\u003e messageProperty();"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    Message getMessage();"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    default boolean isSameStateAs(ReadOnlyReminder other) {"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 other.getTask().equals(this.getTask()) // state checks here onwards"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 other.getPriority().equals(this.getPriority())"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 other.getDate().equals(this.getDate())"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 other.getMessage().equals(this.getMessage()));"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"     * Formats the reminder as text, showing all reminder details."},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    default String getAsText() {"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"        builder.append(getTask())"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"                .append(\" Priority: \")"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"                .append(getPriority())"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"                .append(\" Date: \")"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"                .append(getDate())"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"                .append(\" Message: \")"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"                .append(getMessage())"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"                .append(\" Tags: \");"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        return builder.toString();"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":57}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"inGall"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"inGall"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"inGall"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.ReadOnlyReminder;"},{"lineNumber":16,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":17,"author":{"gitID":"inGall"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":18,"author":{"gitID":"inGall"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    Predicate\u003cReadOnlyReminder\u003e PREDICATE_SHOW_ALL_REMINDERS \u003d unused -\u003e true;"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    Predicate\u003cReadOnlyAccount\u003e PREDICATE_SHOW_ALL_ACCOUNTS \u003d unused -\u003e true;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"    void resetDatabase(ReadOnlyDatabase newData);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    /** Returns the DatabaseBook */"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    ReadOnlyDatabase getDatabase();"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    //// person-level operations"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    void deleteAccount(ReadOnlyAccount target) throws PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"    /** Adds the given person */"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    void addAccount(ReadOnlyAccount account) throws DuplicateAccountException;"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"    boolean checkAccount(ReadOnlyAccount account);"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"    void deletePersonTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":65,"author":{"gitID":"inGall"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"    ObservableList\u003cReadOnlyAccount\u003e getFilteredAccountList();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"    void updateFilteredAccountList(Predicate\u003cReadOnlyAccount\u003e predicate);"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":78,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"inGall"},"content":"     * Checks if list is empty"},{"lineNumber":80,"author":{"gitID":"inGall"},"content":"     * Returns true if is empty"},{"lineNumber":81,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"    Boolean checkIfPersonListEmpty(ArrayList\u003cReadOnlyPerson\u003e contactList);"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"    //@@author duyson98"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"    //// reminder-level operations"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"    /** Deletes the given reminder. */"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"    void deleteReminder(ReadOnlyReminder target) throws ReminderNotFoundException;"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"    /** Adds the given reminder */"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"    void addReminder(ReadOnlyReminder reminder) throws DuplicateReminderException;"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"     * Replaces the given reminder {@code target} with {@code editedReminder}."},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"     * @throws DuplicateReminderException if updating the reminder\u0027s details causes the reminder to be equivalent to"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"     *      another existing reminder in the list."},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"     * @throws ReminderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"    void updateReminder(ReadOnlyReminder target, ReadOnlyReminder editedReminder)"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"            throws DuplicateReminderException, ReminderNotFoundException;"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"    void deleteReminderTag(Tag tag) throws ReminderNotFoundException, DuplicateReminderException;"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"    //// tag-level operations"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"    /** Checks if the given tag is unused by any person and deletes it if necessary. */"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"    void deleteUnusedTag(Tag tag);"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"    /** Returns an unmodifiable view of the filtered reminder list */"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"    ObservableList\u003cReadOnlyReminder\u003e getFilteredReminderList();"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"     * Updates the filter of the filtered reminder list to filter by the given {@code predicate}."},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"    void updateFilteredReminderList(Predicate\u003cReadOnlyReminder\u003e predicate);"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"     * Checks if list is empty"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"     * Returns true if is empty"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"    Boolean checkIfReminderListEmpty(ArrayList\u003cReadOnlyReminder\u003e reminderList);"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"inGall"},"content":""},{"lineNumber":126,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"inGall"},"content":"     * Sort contact list in alphabetical order"},{"lineNumber":128,"author":{"gitID":"inGall"},"content":"     * @throws NullPointerException if {@code contactList} is null."},{"lineNumber":129,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"inGall"},"content":"    void sortListByName(ArrayList\u003cReadOnlyPerson\u003e contactList)  throws CommandException;"},{"lineNumber":131,"author":{"gitID":"inGall"},"content":""},{"lineNumber":132,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"inGall"},"content":"     * @param contactList"},{"lineNumber":134,"author":{"gitID":"inGall"},"content":"     * @throws CommandException"},{"lineNumber":135,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"inGall"},"content":"    void sortListByBirthday(ArrayList\u003cReadOnlyPerson\u003e contactList)  throws CommandException;"},{"lineNumber":137,"author":{"gitID":"inGall"},"content":""},{"lineNumber":138,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"inGall"},"content":"     * @param contactList"},{"lineNumber":140,"author":{"gitID":"inGall"},"content":"     * @throws CommandException"},{"lineNumber":141,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"inGall"},"content":"    void sortListByAge(ArrayList\u003cReadOnlyPerson\u003e contactList)  throws CommandException;"},{"lineNumber":143,"author":{"gitID":"inGall"},"content":""},{"lineNumber":144,"author":{"gitID":"inGall"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"inGall"},"content":"     * @param contactList"},{"lineNumber":146,"author":{"gitID":"inGall"},"content":"     * @throws CommandException"},{"lineNumber":147,"author":{"gitID":"inGall"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"inGall"},"content":"    void sortListByPriority(ArrayList\u003cReadOnlyReminder\u003e contactList)  throws CommandException;"},{"lineNumber":149,"author":{"gitID":"inGall"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"inGall":37,"cqhchan":17,"duyson98":47,"-":49}},{"path":"src/main/java/seedu/address/model/account/Username.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"public class Username {"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"            \"Username should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"    public final String fullName;"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"     * Validates given name."},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"     * @throws IllegalValueException if given name string is invalid."},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"    public Username(String name) throws IllegalValueException {"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(name);"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"        if (!isValidName(trimmedName)) {"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"        this.fullName \u003d trimmedName;"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        return fullName;"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"        return fullName.hashCode();"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":63}},{"path":"src/main/java/seedu/address/model/account/UsernamePasswordCheck.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"public class UsernamePasswordCheck  implements Predicate\u003cReadOnlyAccount\u003e {"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    public UsernamePasswordCheck(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"    public boolean test(ReadOnlyAccount account) {"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(account.getUsername().fullName, keyword));"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"                || (other instanceof UsernamePasswordCheck // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 this.keywords.equals(((UsernamePasswordCheck) other).keywords)); // state check"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":34}},{"path":"src/main/java/seedu/address/model/reminder/Reminder.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":" * Represents a Reminder in the address book."},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"public class Reminder implements ReadOnlyReminder {"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    private ObjectProperty\u003cTask\u003e task;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    private ObjectProperty\u003cPriority\u003e priority;"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    private ObjectProperty\u003cDate\u003e date;"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    private ObjectProperty\u003cMessage\u003e message;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    public Reminder(Task task, Priority priority, Date date, Message message, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        requireAllNonNull(task, priority, date, message, tags);"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        this.task \u003d new SimpleObjectProperty\u003c\u003e(task);"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        this.priority \u003d new SimpleObjectProperty\u003c\u003e(priority);"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        this.date \u003d new SimpleObjectProperty\u003c\u003e(date);"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        this.message \u003d new SimpleObjectProperty\u003c\u003e(message);"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"     * Creates a copy of the given ReadOnlyReminder."},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    public Reminder(ReadOnlyReminder source) {"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        this(source.getTask(), source.getPriority(), source.getDate(), source.getMessage(), source.getTags());"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    public void setTask(Task task) {"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        this.task.set(requireNonNull(task));"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"    public ObjectProperty\u003cTask\u003e taskProperty() {"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"        return task;"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    public Task getTask() {"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"        return task.get();"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"    public void setPriority(Priority priority) {"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        this.priority.set(requireNonNull(priority));"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"    public ObjectProperty\u003cPriority\u003e priorityProperty() {"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"        return priority;"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"    public Priority getPriority() {"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"        return priority.get();"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"    public void setDate(Date date) {"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"        this.date.set(requireNonNull(date));"},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"    public ObjectProperty\u003cDate\u003e dateProperty() {"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"        return date;"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"    public Date getDate() {"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":"        return date.get();"},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"    public void setMessage(Message message) {"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":"        this.message.set(requireNonNull(message));"},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"    public ObjectProperty\u003cMessage\u003e messageProperty() {"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"        return message;"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"    public Message getMessage() {"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"        return message.get();"},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"     * if modification is attempted."},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"        return tags;"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":"     * Replaces this reminder\u0027s tags with the tags in the argument tag set."},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"        tags.set(new UniqueTagList(replacement));"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":125,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":127,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":128,"author":{"gitID":"duyson98"},"content":"                || (other instanceof ReadOnlyReminder // instanceof handles nulls"},{"lineNumber":129,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyReminder) other));"},{"lineNumber":130,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":132,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"duyson98"},"content":"    public int hashCode() {"},{"lineNumber":134,"author":{"gitID":"duyson98"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":135,"author":{"gitID":"duyson98"},"content":"        return Objects.hash(task, priority, date, message, tags);"},{"lineNumber":136,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":138,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"duyson98"},"content":"    public String toString() {"},{"lineNumber":140,"author":{"gitID":"duyson98"},"content":"        return getAsText();"},{"lineNumber":141,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":143,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"duyson98"},"content":"     * @param replacement"},{"lineNumber":145,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"duyson98"},"content":"    public void resetData(ReadOnlyReminder replacement) {"},{"lineNumber":147,"author":{"gitID":"duyson98"},"content":"        requireNonNull(replacement);"},{"lineNumber":148,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":149,"author":{"gitID":"duyson98"},"content":"        this.setTask(replacement.getTask());"},{"lineNumber":150,"author":{"gitID":"duyson98"},"content":"        this.setPriority(replacement.getPriority());"},{"lineNumber":151,"author":{"gitID":"duyson98"},"content":"        this.setDate(replacement.getDate());"},{"lineNumber":152,"author":{"gitID":"duyson98"},"content":"        this.setMessage(replacement.getMessage());"},{"lineNumber":153,"author":{"gitID":"duyson98"},"content":"        this.setTags(replacement.getTags());"},{"lineNumber":154,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":155}},{"path":"src/main/java/seedu/address/model/clock/ClockDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.clock;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":" * Represents the clock display on the GUI of the address book application."},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"public class ClockDisplay {"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"    private ObjectProperty\u003cRunningTime\u003e time;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"    private ObjectProperty\u003cRunningDate\u003e date;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    public ClockDisplay() {"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"        this.time \u003d new SimpleObjectProperty\u003c\u003e(new RunningTime());"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"        this.date \u003d new SimpleObjectProperty\u003c\u003e(new RunningDate());"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    public void setTime(RunningTime time) {"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"        this.time.set(time);"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    public ObjectProperty\u003cRunningTime\u003e timeProperty() {"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"        return time;"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    public RunningTime getTime() {"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"        return time.get();"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    public void setDate(RunningDate date) {"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        this.date.set(date);"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    public ObjectProperty\u003cRunningDate\u003e dateProperty() {"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"        return date;"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"    public RunningDate getDate() {"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        return date.get();"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    public String getTimeAsText() {"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        return time.get().toString();"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"    public String getDateAsText() {"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"        return date.get().toString();"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"                || (other instanceof ClockDisplay // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.time.equals(((ClockDisplay) other).time) // state checks onwards"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.date.equals(((ClockDisplay) other).date));"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"        return Objects.hash(time, date);"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":68}},{"path":"src/main/java/seedu/address/model/tag/TagContainsKeywordPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.tag;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Tag} matches the keyword given."},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"public class TagContainsKeywordPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"    private final Tag tag;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"    public TagContainsKeywordPredicate(Tag tag) {"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"        this.tag \u003d tag;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        return person.getTags().contains(tag);"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"                || (other instanceof TagContainsKeywordPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.tag.equals(((TagContainsKeywordPredicate) other).tag)); // state check"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":32}},{"path":"src/main/java/seedu/address/model/clock/RunningTime.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.clock;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":" * Represents a running time inside the address book application."},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":"public class RunningTime {"},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"    private int hour;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"    private int minute;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"    private int second;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    public RunningTime() {"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"        setCurrentTime();"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"    public int getHour() {"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"        return hour;"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"    public int getMinute() {"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"        return minute;"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    public int getSecond() {"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"        return second;"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"    public void setCurrentTime() {"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"        this.hour \u003d LocalDateTime.now().getHour();"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"        this.minute \u003d LocalDateTime.now().getMinute();"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        this.second \u003d LocalDateTime.now().getSecond();"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        return ((hour \u003c 10) ? (\"0\" + hour) : hour) + \":\""},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"                + ((minute \u003c 10) ? (\"0\" + minute) : minute) + \":\""},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"                + ((second \u003c 10) ? (\"0\" + second) : second);"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"                || (other instanceof RunningTime // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.hour \u003d\u003d ((RunningTime) other).hour // state checks onwards"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.minute \u003d\u003d ((RunningTime) other).minute"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.second \u003d\u003d ((RunningTime) other).second);"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"        return Objects.hash(hour, minute, second);"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":60}},{"path":"src/main/java/seedu/address/model/account/Account.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"public class Account implements ReadOnlyAccount {"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    private ObjectProperty\u003cUsername\u003e username;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"    private ObjectProperty\u003cPassword\u003e password;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"     * Every field must be present and not null."},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    public Account(Username username, Password password) {"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"        requireAllNonNull(username, password);"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"        this.username \u003d new SimpleObjectProperty\u003c\u003e(username);"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"        this.password \u003d new SimpleObjectProperty\u003c\u003e(password);"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    public Account(ReadOnlyAccount source) {"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"        this(source.getUsername(), source.getPassword());"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"    public void setUsername(Username username) {"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        this.username.set(requireNonNull(username));"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"    public ObjectProperty\u003cUsername\u003e usernameProperty() {"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"        return username;"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"    public Username getUsername() {"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"        return username.get();"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    public void setPassword(Password password) {"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        this.password.set(requireNonNull(password));"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    public ObjectProperty\u003cPassword\u003e passwordProperty() {"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"        return password;"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"    public Password getPassword() {"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"        return password.get();"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"                || (other instanceof ReadOnlyAccount // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyAccount) other));"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        return getAsText();"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":70}},{"path":"src/main/java/seedu/address/model/account/ReadOnlyAccount.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"public interface ReadOnlyAccount {"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"    ObjectProperty\u003cUsername\u003e usernameProperty();"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"    Username getUsername();"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"    ObjectProperty\u003cPassword\u003e passwordProperty();"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"    Password getPassword();"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    default boolean isSameStateAs(ReadOnlyAccount other) {"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 other.getUsername().equals(this.getUsername()) // state checks here onwards"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 other.getPassword().equals(this.getPassword()));"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"    default String getAsText() {"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"        builder.append(getUsername())"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"                .append(\" Password: \")"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"                .append(getPassword());"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"        return builder.toString();"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"}"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":""}],"authorContributionMap":{"cqhchan":40}},{"path":"src/main/java/seedu/address/model/clock/RunningDate.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.clock;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":" * Represents a running date inside the address book application."},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"public class RunningDate {"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"    private DayOfWeek dayOfWeek;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"    private int dayOfMonth;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":"    private MonthOfYear month;"},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"    private int year;"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":"    public RunningDate() {"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":"        setCurrentDate();"},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":"    public DayOfWeek getDayOfWeek() {"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":"        return dayOfWeek;"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    public int getDayOfMonth() {"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"        return dayOfMonth;"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    public MonthOfYear getMonth() {"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"        return month;"},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"    public int getYear() {"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        return year;"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    public void setCurrentDate() {"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"        this.dayOfWeek \u003d DayOfWeek.valueOf(LocalDateTime.now().getDayOfWeek().getValue());"},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"        this.dayOfMonth \u003d LocalDateTime.now().getDayOfMonth();"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"        this.month \u003d MonthOfYear.valueOf(LocalDateTime.now().getMonth().getValue());"},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"        this.year \u003d LocalDateTime.now().getYear();"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        return dayOfWeek.toString() + \", \" + dayOfMonth + \" \" + month.toString() + \", \" + year;"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"                || (other instanceof RunningDate // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.dayOfWeek.equals(((RunningDate) other).dayOfWeek) // state checks onwards"},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.dayOfMonth \u003d\u003d ((RunningDate) other).dayOfMonth"},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.month.equals(((RunningDate) other).month)"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.year \u003d\u003d ((RunningDate) other).year);"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        return Objects.hash(dayOfWeek, dayOfMonth, month, year);"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":"}"},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":" * Represents days of a week."},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"enum DayOfWeek {"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":"    Monday(1), Tuesday(2), Wedsnesday(3), Thurday(4), Friday(5), Saturday(6), Sunday(7);"},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"    private static Map\u003cInteger, DayOfWeek\u003e map \u003d new HashMap\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"    private int index;"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"    DayOfWeek(int index) {"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"        this.index \u003d index;"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"    static {"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"        for (DayOfWeek item : DayOfWeek.values()) {"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"            map.put(item.index, item);"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"    public static DayOfWeek valueOf(int index) {"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"        return map.get(index);"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"}"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":" * Represents months of a year."},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"enum MonthOfYear {"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":"    January(1), February(2), March(3), April(4), May(5), June(6), July(7), August(8), September(9),"},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"    October(10), November(11), December(12);"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"    private static Map\u003cInteger, MonthOfYear\u003e map \u003d new HashMap\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"    private int index;"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"    MonthOfYear(int index) {"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":"        this.index \u003d index;"},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"    static {"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"        for (MonthOfYear item : MonthOfYear.values()) {"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":"            map.put(item.index, item);"},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"    public static MonthOfYear valueOf(int index) {"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"        return map.get(index);"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":120}},{"path":"src/main/java/seedu/address/model/reminder/UniqueReminderList.java","lines":[{"lineNumber":1,"author":{"gitID":"duyson98"},"content":"//@@author duyson98"},{"lineNumber":2,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":3,"author":{"gitID":"duyson98"},"content":"package seedu.address.model.reminder;"},{"lineNumber":4,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":5,"author":{"gitID":"duyson98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":7,"author":{"gitID":"duyson98"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"duyson98"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":10,"author":{"gitID":"duyson98"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":11,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":12,"author":{"gitID":"duyson98"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"duyson98"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"duyson98"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.exceptions.DuplicateReminderException;"},{"lineNumber":16,"author":{"gitID":"duyson98"},"content":"import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"},{"lineNumber":17,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":18,"author":{"gitID":"duyson98"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"duyson98"},"content":" * A list of reminders that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":20,"author":{"gitID":"duyson98"},"content":" *"},{"lineNumber":21,"author":{"gitID":"duyson98"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitID":"duyson98"},"content":" *"},{"lineNumber":23,"author":{"gitID":"duyson98"},"content":" * @see Reminder#equals(Object)"},{"lineNumber":24,"author":{"gitID":"duyson98"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":25,"author":{"gitID":"duyson98"},"content":" */"},{"lineNumber":26,"author":{"gitID":"duyson98"},"content":"public class UniqueReminderList implements Iterable\u003cReminder\u003e {"},{"lineNumber":27,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":28,"author":{"gitID":"duyson98"},"content":"    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"duyson98"},"content":"    // used by asObservableList()"},{"lineNumber":30,"author":{"gitID":"duyson98"},"content":"    private final ObservableList\u003cReadOnlyReminder\u003e mappedList \u003d EasyBind.map(internalList, (reminder) -\u003e reminder);"},{"lineNumber":31,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":32,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"duyson98"},"content":"     * Returns true if the list contains an equivalent reminder as the given argument."},{"lineNumber":34,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"duyson98"},"content":"    public boolean contains(ReadOnlyReminder toCheck) {"},{"lineNumber":36,"author":{"gitID":"duyson98"},"content":"        requireNonNull(toCheck);"},{"lineNumber":37,"author":{"gitID":"duyson98"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":38,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":40,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"duyson98"},"content":"     * Adds a reminder to the list."},{"lineNumber":42,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"duyson98"},"content":"     * @throws DuplicateReminderException if the reminder to add is a duplicate of an existing reminder in the list."},{"lineNumber":44,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"duyson98"},"content":"    public void add(ReadOnlyReminder toAdd) throws DuplicateReminderException {"},{"lineNumber":46,"author":{"gitID":"duyson98"},"content":"        requireNonNull(toAdd);"},{"lineNumber":47,"author":{"gitID":"duyson98"},"content":"        if (contains(toAdd)) {"},{"lineNumber":48,"author":{"gitID":"duyson98"},"content":"            throw new DuplicateReminderException();"},{"lineNumber":49,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"duyson98"},"content":"        internalList.add(new Reminder(toAdd));"},{"lineNumber":51,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":53,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"duyson98"},"content":"     * Replaces the reminder {@code target} in the list with {@code editedReminder}."},{"lineNumber":55,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"duyson98"},"content":"     * @throws DuplicateReminderException if the replacement is equivalent to another existing reminder in the list."},{"lineNumber":57,"author":{"gitID":"duyson98"},"content":"     * @throws ReminderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":58,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"duyson98"},"content":"    public void setReminder(ReadOnlyReminder target, ReadOnlyReminder editedReminder)"},{"lineNumber":60,"author":{"gitID":"duyson98"},"content":"            throws DuplicateReminderException, ReminderNotFoundException {"},{"lineNumber":61,"author":{"gitID":"duyson98"},"content":"        requireNonNull(editedReminder);"},{"lineNumber":62,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":63,"author":{"gitID":"duyson98"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":64,"author":{"gitID":"duyson98"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":65,"author":{"gitID":"duyson98"},"content":"            throw new ReminderNotFoundException();"},{"lineNumber":66,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":68,"author":{"gitID":"duyson98"},"content":"        if (!target.equals(editedReminder) \u0026\u0026 internalList.contains(editedReminder)) {"},{"lineNumber":69,"author":{"gitID":"duyson98"},"content":"            throw new DuplicateReminderException();"},{"lineNumber":70,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":72,"author":{"gitID":"duyson98"},"content":"        internalList.set(index, new Reminder(editedReminder));"},{"lineNumber":73,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":75,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"duyson98"},"content":"     * Removes the equivalent reminder from the list."},{"lineNumber":77,"author":{"gitID":"duyson98"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"duyson98"},"content":"     * @throws ReminderNotFoundException if no such reminder could be found in the list."},{"lineNumber":79,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"duyson98"},"content":"    public boolean remove(ReadOnlyReminder toRemove) throws ReminderNotFoundException {"},{"lineNumber":81,"author":{"gitID":"duyson98"},"content":"        requireNonNull(toRemove);"},{"lineNumber":82,"author":{"gitID":"duyson98"},"content":"        final boolean reminderFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":83,"author":{"gitID":"duyson98"},"content":"        if (!reminderFoundAndDeleted) {"},{"lineNumber":84,"author":{"gitID":"duyson98"},"content":"            throw new ReminderNotFoundException();"},{"lineNumber":85,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"duyson98"},"content":"        return reminderFoundAndDeleted;"},{"lineNumber":87,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":89,"author":{"gitID":"duyson98"},"content":"    public void setReminders(UniqueReminderList replacement) {"},{"lineNumber":90,"author":{"gitID":"duyson98"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":91,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":93,"author":{"gitID":"duyson98"},"content":"    public void setReminders(List\u003c? extends ReadOnlyReminder\u003e reminders) throws DuplicateReminderException {"},{"lineNumber":94,"author":{"gitID":"duyson98"},"content":"        final UniqueReminderList replacement \u003d new UniqueReminderList();"},{"lineNumber":95,"author":{"gitID":"duyson98"},"content":"        for (final ReadOnlyReminder reminder : reminders) {"},{"lineNumber":96,"author":{"gitID":"duyson98"},"content":"            replacement.add(new Reminder(reminder));"},{"lineNumber":97,"author":{"gitID":"duyson98"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"duyson98"},"content":"        setReminders(replacement);"},{"lineNumber":99,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":101,"author":{"gitID":"duyson98"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"duyson98"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"duyson98"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"duyson98"},"content":"    public ObservableList\u003cReadOnlyReminder\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"duyson98"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":106,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":108,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"duyson98"},"content":"    public Iterator\u003cReminder\u003e iterator() {"},{"lineNumber":110,"author":{"gitID":"duyson98"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":113,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"duyson98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"duyson98"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"duyson98"},"content":"                || (other instanceof UniqueReminderList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"duyson98"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueReminderList) other).internalList));"},{"lineNumber":118,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"duyson98"},"content":""},{"lineNumber":120,"author":{"gitID":"duyson98"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"duyson98"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitID":"duyson98"},"content":"        return internalList.hashCode();"},{"lineNumber":123,"author":{"gitID":"duyson98"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"duyson98"},"content":"}"}],"authorContributionMap":{"duyson98":124}},{"path":"src/main/java/seedu/address/model/account/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"public class Password {"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"        \"Password can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"     * The first character of the password must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"    public static final String ADDRESS_PASSWORD_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"     * Validates given password."},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"     * @throws IllegalValueException if given password string is invalid."},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    public Password(String password) throws IllegalValueException {"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(password);"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        if (!isValidPassword(password)) {"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"            throw new IllegalValueException(MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"        this.value \u003d password;"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    public static boolean isValidPassword(String test) {"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"        return test.matches(ADDRESS_PASSWORD_REGEX);"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"        return value;"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"                || (other instanceof Password // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 this.value.equals(((Password) other).value)); // state check"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"        return value.hashCode();"},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":61}},{"path":"src/main/java/seedu/address/model/Database.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.ReadOnlyAccount;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":"public class Database implements ReadOnlyDatabase {"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":"    private final UniqueAccountList accounts;"},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    /*"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":"    * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    *"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"    * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"    *   among constructors."},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"    */ {"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        accounts \u003d new UniqueAccountList();"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":"    public Database() {"},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"    public Database(ReadOnlyDatabase toBeCopied) {"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":"        this();"},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"        resetData(toBeCopied);"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    public void setAccounts(List\u003c? extends ReadOnlyAccount\u003e accounts) throws DuplicateAccountException {"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"        this.accounts.setAccounts(accounts);"},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"     * @param newData"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"    public void resetData(ReadOnlyDatabase newData) {"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(newData);"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"            setAccounts(newData.getAccountList());"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"        } catch (DuplicateAccountException dpe) {"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"            assert false : \"Database should not have duplicate persons\";"},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"     * @param p"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":"     * @throws DuplicateAccountException"},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"    public void addAccount(ReadOnlyAccount p) throws DuplicateAccountException {"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"        Account newAccount \u003d new Account(p);"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"        // in the person list."},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"        accounts.add(newAccount);"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":"     * @param target"},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":"     * @param editedReadOnlyAccount"},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":"     * @throws PersonNotFoundException"},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"    public void updateAccount(ReadOnlyAccount target, ReadOnlyAccount editedReadOnlyAccount)"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(editedReadOnlyAccount);"},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"        Account editedAccount \u003d new Account(editedReadOnlyAccount);"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":"        // in the person list."},{"lineNumber":89,"author":{"gitID":"cqhchan"},"content":"        accounts.setAccount(target, editedAccount);"},{"lineNumber":90,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":92,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":"     * @param key"},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":"     * @return"},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"     * @throws PersonNotFoundException"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"cqhchan"},"content":"    public boolean removeAccount(ReadOnlyAccount key) throws PersonNotFoundException {"},{"lineNumber":99,"author":{"gitID":"cqhchan"},"content":"        if (accounts.remove(key)) {"},{"lineNumber":100,"author":{"gitID":"cqhchan"},"content":"            return true;"},{"lineNumber":101,"author":{"gitID":"cqhchan"},"content":"        } else {"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":106,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"cqhchan"},"content":"    public ObservableList\u003cReadOnlyAccount\u003e getAccountList() {"},{"lineNumber":108,"author":{"gitID":"cqhchan"},"content":"        return accounts.asObservableList();"},{"lineNumber":109,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":111,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"cqhchan"},"content":"    public String toString() {"},{"lineNumber":113,"author":{"gitID":"cqhchan"},"content":"        return accounts.asObservableList().size() + \" persons\";"},{"lineNumber":114,"author":{"gitID":"cqhchan"},"content":"        // TODO: refine later"},{"lineNumber":115,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":117,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"cqhchan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"cqhchan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"cqhchan"},"content":"                || (other instanceof Database // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 this.accounts.equals(((Database) other).accounts));"},{"lineNumber":122,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":124,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"cqhchan"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"cqhchan"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":127,"author":{"gitID":"cqhchan"},"content":"        return Objects.hash(accounts);"},{"lineNumber":128,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":129,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":130}},{"path":"src/main/java/seedu/address/model/account/UniqueAccountList.java","lines":[{"lineNumber":1,"author":{"gitID":"cqhchan"},"content":"//@@author cqhchan"},{"lineNumber":2,"author":{"gitID":"cqhchan"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":4,"author":{"gitID":"cqhchan"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":6,"author":{"gitID":"cqhchan"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"cqhchan"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":9,"author":{"gitID":"cqhchan"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":10,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":11,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"cqhchan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":14,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":15,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"cqhchan"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":18,"author":{"gitID":"cqhchan"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"cqhchan"},"content":" *"},{"lineNumber":20,"author":{"gitID":"cqhchan"},"content":" */"},{"lineNumber":21,"author":{"gitID":"cqhchan"},"content":"public class UniqueAccountList implements Iterable\u003cAccount\u003e {"},{"lineNumber":22,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":23,"author":{"gitID":"cqhchan"},"content":"    private final ObservableList\u003cAccount\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":24,"author":{"gitID":"cqhchan"},"content":"    // used by asObservableList()"},{"lineNumber":25,"author":{"gitID":"cqhchan"},"content":"    private final ObservableList\u003cReadOnlyAccount\u003e mappedList \u003d EasyBind.map(internalList, (account) -\u003e account);"},{"lineNumber":26,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":27,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"cqhchan"},"content":"     * Returns true if the list contains an equivalent account as the given argument."},{"lineNumber":29,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"cqhchan"},"content":"    public boolean contains(ReadOnlyAccount toCheck) {"},{"lineNumber":31,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":33,"author":{"gitID":"cqhchan"},"content":"        for (Account account : internalList) {"},{"lineNumber":34,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":35,"author":{"gitID":"cqhchan"},"content":"            if (account.getUsername().fullName.equals(toCheck.getUsername().fullName)) {"},{"lineNumber":36,"author":{"gitID":"cqhchan"},"content":"                return true;"},{"lineNumber":37,"author":{"gitID":"cqhchan"},"content":"            }"},{"lineNumber":38,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":39,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"cqhchan"},"content":"        return false;"},{"lineNumber":41,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"cqhchan"},"content":"     * Adds a account to the list."},{"lineNumber":44,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"cqhchan"},"content":"     * @throws DuplicatePersonException if the account to add is a duplicate of an existing account in the list."},{"lineNumber":46,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"cqhchan"},"content":"    public void add(ReadOnlyAccount toAdd) throws DuplicateAccountException {"},{"lineNumber":48,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(toAdd);"},{"lineNumber":49,"author":{"gitID":"cqhchan"},"content":"        if (contains(toAdd)) {"},{"lineNumber":50,"author":{"gitID":"cqhchan"},"content":"            throw new DuplicateAccountException();"},{"lineNumber":51,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"cqhchan"},"content":"        internalList.add(new Account(toAdd));"},{"lineNumber":53,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":55,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"cqhchan"},"content":"     * Replaces the account {@code target} in the list with {@code editedAccount}."},{"lineNumber":57,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"cqhchan"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing account in the list."},{"lineNumber":59,"author":{"gitID":"cqhchan"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":60,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"cqhchan"},"content":"    public void setAccount(ReadOnlyAccount target, ReadOnlyAccount editedAccount)"},{"lineNumber":62,"author":{"gitID":"cqhchan"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":63,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(editedAccount);"},{"lineNumber":64,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":65,"author":{"gitID":"cqhchan"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":66,"author":{"gitID":"cqhchan"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":67,"author":{"gitID":"cqhchan"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":68,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":70,"author":{"gitID":"cqhchan"},"content":"        if (!target.equals(editedAccount) \u0026\u0026 internalList.contains(editedAccount)) {"},{"lineNumber":71,"author":{"gitID":"cqhchan"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":72,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":74,"author":{"gitID":"cqhchan"},"content":"        internalList.set(index, new Account(editedAccount));"},{"lineNumber":75,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":77,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"cqhchan"},"content":"     * Removes the equivalent account from the list."},{"lineNumber":79,"author":{"gitID":"cqhchan"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"cqhchan"},"content":"     * @throws PersonNotFoundException if no such account could be found in the list."},{"lineNumber":81,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"cqhchan"},"content":"    public boolean remove(ReadOnlyAccount toRemove) throws PersonNotFoundException {"},{"lineNumber":83,"author":{"gitID":"cqhchan"},"content":"        requireNonNull(toRemove);"},{"lineNumber":84,"author":{"gitID":"cqhchan"},"content":"        final boolean accountFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":85,"author":{"gitID":"cqhchan"},"content":"        if (!accountFoundAndDeleted) {"},{"lineNumber":86,"author":{"gitID":"cqhchan"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":87,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"cqhchan"},"content":"        return accountFoundAndDeleted;"},{"lineNumber":89,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":91,"author":{"gitID":"cqhchan"},"content":"    public void setAccounts(UniqueAccountList replacement) {"},{"lineNumber":92,"author":{"gitID":"cqhchan"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":93,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":95,"author":{"gitID":"cqhchan"},"content":"    public void setAccounts(List\u003c? extends ReadOnlyAccount\u003e accounts) throws DuplicateAccountException {"},{"lineNumber":96,"author":{"gitID":"cqhchan"},"content":"        final UniqueAccountList replacement \u003d new UniqueAccountList();"},{"lineNumber":97,"author":{"gitID":"cqhchan"},"content":"        for (final ReadOnlyAccount account : accounts) {"},{"lineNumber":98,"author":{"gitID":"cqhchan"},"content":"            replacement.add(new Account(account));"},{"lineNumber":99,"author":{"gitID":"cqhchan"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"cqhchan"},"content":"        setAccounts(replacement);"},{"lineNumber":101,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":103,"author":{"gitID":"cqhchan"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"cqhchan"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":105,"author":{"gitID":"cqhchan"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"cqhchan"},"content":"    public ObservableList\u003cReadOnlyAccount\u003e asObservableList() {"},{"lineNumber":107,"author":{"gitID":"cqhchan"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":108,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":110,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"cqhchan"},"content":"    public Iterator\u003cAccount\u003e iterator() {"},{"lineNumber":112,"author":{"gitID":"cqhchan"},"content":"        return internalList.iterator();"},{"lineNumber":113,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":115,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"cqhchan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"cqhchan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":118,"author":{"gitID":"cqhchan"},"content":"                || (other instanceof UniqueAccountList // instanceof handles nulls"},{"lineNumber":119,"author":{"gitID":"cqhchan"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueAccountList) other).internalList));"},{"lineNumber":120,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"cqhchan"},"content":""},{"lineNumber":122,"author":{"gitID":"cqhchan"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"cqhchan"},"content":"    public int hashCode() {"},{"lineNumber":124,"author":{"gitID":"cqhchan"},"content":"        return internalList.hashCode();"},{"lineNumber":125,"author":{"gitID":"cqhchan"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"cqhchan"},"content":"}"}],"authorContributionMap":{"cqhchan":126}}]
