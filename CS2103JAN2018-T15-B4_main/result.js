var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-T15-B4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"* *Email us* : You can also reach us at `cs2103jan2018.t15.b4 [at] gmail.com`"}],"authorContributionMap":{"x3tsunayh":2,"-":4}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"BizConnect Journal was developed by the https://se-edu.github.io/docs/Team.html[CS2103JAN2018-T15-B4] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d Project Mentor"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d\u003d Kelvin Lin"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"[https://github.com/Esilocke[github]]"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"\u0027\u0027\u0027"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d\u003d Tan Yong He"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"image::x3tsunayh.jpg[width\u003d\"100\", align\u003d\"left\"]"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"{empty}[https://github.com/x3tsunayh[github]] [\u003c\u003cx3tsunayh#, portfolio\u003e\u003e]"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"* Components in charge of: Storage"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"* Aspects/tools in charge of: Deliverables and Deadlines, Scheduling and Tracking"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"* Features implemented:"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"** Saving Addressbook Data"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"** Export Addressbook Data"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"** Calendar View"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"** Event Functionality (Add, Delete, Find, Edit, Sort and List All Events)"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"** Switch Tab Functionality between Events and Tasks Tabs"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"** Stack Overflow Page (changing to LinkedIn Page soon)"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"* Code written: [https://github.com/CS2103JAN2018-T15-B4/main/tree/master/collated/functional/x3tsunayh.md[functional code]][https://github.com/CS2103JAN2018-T15-B4/main/tree/master/collated/test/x3tsunayh.md[test code]]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d\u003d Lee De Zhang"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"image::dezhanglee.jpg[width\u003d\"100\", align\u003d\"left\"]"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"{empty}[https://github.com/dezhanglee[github]] [\u003c\u003cdezhanglee#, portfolio\u003e\u003e]"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"* Components in charge of: Logic"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"* Aspects/tools in charge of: Project Integration"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"* Features implemented:"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"** Shorthand Commands"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"** Delete Person by Name Enhancement"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"** Delete Tag Method"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"** Display Picture Feature"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"* Code written: [https://github.com/CS2103JAN2018-T15-B4/main/tree/master/collated/functional/dezhanglee.md[functional code]][https://github.com/CS2103JAN2018-T15-B4/main/tree/master/collated/test/dezhanglee.md[test code]]"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d\u003d Jillian Wee"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"image::nodp.jpg[width\u003d\"100\", align\u003d\"left\"]"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"{empty}[https://github.com/jill858[github]] [\u003c\u003cjill858#, portfolio\u003e\u003e]"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"* Components in charge of: Model"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"* Aspects/tools in charge of: Code Quality"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"* Features implemented:"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"** Find by Partial-Word Enhancement"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"** Currency Converter Feature"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"* Code written: [https://github.com/CS2103JAN2018-T15-B4/main/tree/master/collated/functional/jill858.md[functional code]][https://github.com/CS2103JAN2018-T15-B4/main/tree/master/collated/test/jill858.md[test code]]"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d\u003d Chan Yin Xin"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"image::nodp.jpg[width\u003d\"100\", align\u003d\"left\"]"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"{empty}[https://github.com/CYX28[github]] [\u003c\u003cCYX28#, portfolio\u003e\u003e]"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"* Components in charge of: UI"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"* Aspects/tools in charge of: Project Testing"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"* Features implemented:"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"** Sort by Name"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"** Task Functionality (Add, Delete, Find, Edit, Sort and List All Tasks)"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"* Code written: [https://github.com/CS2103JAN2018-T15-B4/main/tree/master/collated/functional/CYX28.md[functional code]][https://github.com/CS2103JAN2018-T15-B4/main/tree/master/collated/test/CYX28.md[test code]]"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"x3tsunayh":51,"-":23}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"\u003d BizConnect Journal"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"https://travis-ci.org/CS2103JAN2018-T15-B4/main[image:https://travis-ci.org/CS2103JAN2018-T15-B4/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"https://coveralls.io/github/CS2103JAN2018-T15-B4/main[image:https://coveralls.io/repos/github/CS2103JAN2018-T15-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"* This is a desktop Address Book application called BizConnect Journal. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"* BizConnect Journal is a powerful Address Book that allows for easy and efficient handling of business contacts."},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"* BizConnect Journal is catered towards businessmen users and travelers who spend most of their time on computers and prefer CLI."},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"* Some useful features include:"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"** Fast and easy searches in large contact lists."},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"** Export functionality enables easy portability of addressbook data in XML or CSV (Google contacts) format."},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"** Calendar and Event features for easier tracking of schedule."},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"** Task features to organize personal daily activities."},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"** Display Picture enhancement to allow visual recognition aid of contacts."},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"** Conversion between monetary currencies when traveling in foreign countries."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"* This application was built based on https://github.com/se-edu/addressbook-level4[Address Book (Level 4)], an initiative of the https://se-edu.github.io/[SE-EDU team]."},{"lineNumber":36,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":37,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":38,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"x3tsunayh":14,"-":26}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertTaskListMatching;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"    public void addressBook_personDataFileDoesNotExist_loadSampleData() {"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        Person[] expectedPersonList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        assertListMatching(getPersonListPanel(), expectedPersonList);"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    public void addressBook_taskDataFileDoesNotExist_loadSampleData() {"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        Task[] expectedTaskList \u003d SampleDataUtil.getSampleTasks();"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        assertTaskListMatching(getTaskListPanel(), expectedTaskList);"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":14,"-":46}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"\u003d BizConnect Journal - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":":repoURL: https://github.com/CS2103JAN2018-T15-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"By: `CS2103JAN2018 T15-B4`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"BizConnect Journal is catered towards businessmen and travelers who *prefer to use a desktop app for managing contacts*. More importantly, BCJ is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, BCJ can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":66,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":74,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person: `delete`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":79,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"****"},{"lineNumber":82,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":85,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":86,"author":{"gitID":"-"},"content":"****"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":91,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":94,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":95,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Deleting a person by name: `deletebyname` `[since v1.1]`"},{"lineNumber":98,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":99,"author":{"gitID":"dezhanglee"},"content":"Deletes the specified person from the address book by name. +"},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"Format: `deletebyname NAME`"},{"lineNumber":101,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":102,"author":{"gitID":"dezhanglee"},"content":"****"},{"lineNumber":103,"author":{"gitID":"dezhanglee"},"content":"* Deletes the person at the specified `NAME`."},{"lineNumber":104,"author":{"gitID":"dezhanglee"},"content":"* The index refers to the name of the contact shown in the most recent listing."},{"lineNumber":105,"author":{"gitID":"dezhanglee"},"content":"* NAME is not case sensitive."},{"lineNumber":106,"author":{"gitID":"dezhanglee"},"content":"* However, it must exatly match the name of the contact to be deleted."},{"lineNumber":107,"author":{"gitID":"dezhanglee"},"content":"* If there are more than one contacts with the same name, use delete command instead."},{"lineNumber":108,"author":{"gitID":"dezhanglee"},"content":"****"},{"lineNumber":109,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":110,"author":{"gitID":"dezhanglee"},"content":"Examples:"},{"lineNumber":111,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"* `deletebyname john doe` +"},{"lineNumber":113,"author":{"gitID":"dezhanglee"},"content":"Deletes the contact whose name matches john doe."},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":118,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"****"},{"lineNumber":121,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":126,"author":{"gitID":"-"},"content":"****"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":133,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Find persons by name: `find n/` `[since v1.4]`"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"Format: `find n/KEYWORD [MORE_KEYWORDS]...`"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"****"},{"lineNumber":141,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":142,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":143,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":144,"author":{"gitID":"-"},"content":"* Partial words will be matched e.g. `Han` will match `Hans`"},{"lineNumber":145,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":146,"author":{"gitID":"-"},"content":"****"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"* `find n/John` +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":"* `find n/Betsy Tim John` +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":154,"author":{"gitID":"CYX28"},"content":"* `find n/J +"},{"lineNumber":155,"author":{"gitID":"-"},"content":"Returns any person having names `John`, `Jack`, or `Joanna`"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Find persons by tag: `find t/` `[since v1.4]`"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"Finds persons whose tag contain any of the given keywords. +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"Format: `find t/KEYWORD [MORE_KEYWORDS]...`"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"****"},{"lineNumber":163,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `friends` will match `Friends`"},{"lineNumber":164,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":165,"author":{"gitID":"CYX28"},"content":"* Only the tag is searched."},{"lineNumber":166,"author":{"gitID":"-"},"content":"* Partial words will be matched e.g. `fri` will match `Friends`"},{"lineNumber":167,"author":{"gitID":"-"},"content":"* Tags matching at least one keyword will be returned (i.e. `OR` search). e.g. `Friends Classmates` will return person whose tag contains `Friends` or `Classmates`"},{"lineNumber":168,"author":{"gitID":"-"},"content":"****"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"* `find t/Friends` +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"Returns `friends` and `Friends`"},{"lineNumber":174,"author":{"gitID":"-"},"content":"* `find t/Friends Classmates` +"},{"lineNumber":175,"author":{"gitID":"-"},"content":"Returns any person having tag(s) `Friends`, or `Classmates`"},{"lineNumber":176,"author":{"gitID":"-"},"content":"* `find t/f` +"},{"lineNumber":177,"author":{"gitID":"-"},"content":"Returns any person having tag(s) `Friends`, or `Family`"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":182,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"****"},{"lineNumber":190,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":191,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":192,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":193,"author":{"gitID":"-"},"content":"****"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":198,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":200,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Sorting all persons by name : `sort` `[since v1.1]`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"CYX28"},"content":"Sorts all persons in the address book alphabetically by name in ascending order and list them. +"},{"lineNumber":207,"author":{"gitID":"CYX28"},"content":"Format: `sort`"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Exporting addressbook data: `export` `[since v1.1]`"},{"lineNumber":210,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":211,"author":{"gitID":"x3tsunayh"},"content":"Exports addressbook data into an XML file. +"},{"lineNumber":212,"author":{"gitID":"x3tsunayh"},"content":"Format: `export FILEPATH [MORE_KEYWORDS]`"},{"lineNumber":213,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":214,"author":{"gitID":"x3tsunayh"},"content":"****"},{"lineNumber":215,"author":{"gitID":"x3tsunayh"},"content":"* Addressbook creates XML file if valid filepath and filename is given."},{"lineNumber":216,"author":{"gitID":"x3tsunayh"},"content":"* If filename already exists, a warning message is displayed."},{"lineNumber":217,"author":{"gitID":"x3tsunayh"},"content":"* If file extension is not .xml, a warning message is displayed."},{"lineNumber":218,"author":{"gitID":"x3tsunayh"},"content":"* If filepath not given, XML file is auto-created under main folder."},{"lineNumber":219,"author":{"gitID":"x3tsunayh"},"content":"* If filepath is invalid, Addressbook creates folders to support the filepath defined by the user."},{"lineNumber":220,"author":{"gitID":"x3tsunayh"},"content":"****"},{"lineNumber":221,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":222,"author":{"gitID":"x3tsunayh"},"content":"Examples:"},{"lineNumber":223,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":224,"author":{"gitID":"x3tsunayh"},"content":"* `export C:\\Users\\John Doe\\Documents\\addressbook.xml` +"},{"lineNumber":225,"author":{"gitID":"x3tsunayh"},"content":"Creates XML file in the user-defined filepath"},{"lineNumber":226,"author":{"gitID":"CYX28"},"content":"* `export addressbook.xml` +"},{"lineNumber":227,"author":{"gitID":"x3tsunayh"},"content":"Creates XML file in the main folder of the Addressbook"},{"lineNumber":228,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":236,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":240,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":247,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":254,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":262,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":263,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":274,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":275,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":278,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":282,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":283,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":285,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":287,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":297,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"dezhanglee"},"content":"// tag::AddPicture[]"},{"lineNumber":305,"author":{"gitID":"dezhanglee"},"content":"\u003d\u003d\u003d Adding a profile picture to a person: `addpicture` `[since v1.3]`"},{"lineNumber":306,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":307,"author":{"gitID":"dezhanglee"},"content":"Adds a profile picture to a person +"},{"lineNumber":308,"author":{"gitID":"dezhanglee"},"content":"Format: `addpicture INDEX f/FILENAME`"},{"lineNumber":309,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":310,"author":{"gitID":"dezhanglee"},"content":"****"},{"lineNumber":311,"author":{"gitID":"dezhanglee"},"content":"* Adds a picture at location `FILENAME` to person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":312,"author":{"gitID":"dezhanglee"},"content":"* `FILENAME` must point to a valid image file."},{"lineNumber":313,"author":{"gitID":"dezhanglee"},"content":"****"},{"lineNumber":314,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":315,"author":{"gitID":"dezhanglee"},"content":"Examples:"},{"lineNumber":316,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":317,"author":{"gitID":"CYX28"},"content":"* `addpicture 1 f/C://pictures/janeDoe.jpg` +"},{"lineNumber":318,"author":{"gitID":"dezhanglee"},"content":"Edits the profile picture of the 1st person to be the picture at C://pictures/janeDoe.jpg"},{"lineNumber":319,"author":{"gitID":"dezhanglee"},"content":"// end::AddPicture[]"},{"lineNumber":320,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":321,"author":{"gitID":"dezhanglee"},"content":"// tag::AddTag[]"},{"lineNumber":322,"author":{"gitID":"dezhanglee"},"content":"\u003d\u003d\u003d Adding individual tags to a contact: `addtag` `[since v1.4]`"},{"lineNumber":323,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":324,"author":{"gitID":"dezhanglee"},"content":"Adds tag(s) to a person +"},{"lineNumber":325,"author":{"gitID":"dezhanglee"},"content":"Format: `addtag INDEX t/TAG t/TAG ...`"},{"lineNumber":326,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":327,"author":{"gitID":"dezhanglee"},"content":"****"},{"lineNumber":328,"author":{"gitID":"dezhanglee"},"content":"* Edits the tag of the contact at the specified `INDEX`."},{"lineNumber":329,"author":{"gitID":"CYX28"},"content":"The index refers to the index number shown in the last task listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":330,"author":{"gitID":"dezhanglee"},"content":"* At least one tag must be provided."},{"lineNumber":331,"author":{"gitID":"dezhanglee"},"content":"* All input tags must be new and unique to the contact. For example, if tag `friend` exists for contact"},{"lineNumber":332,"author":{"gitID":"dezhanglee"},"content":"at index 1, then both `addtag 1 t/friend` and `addtag 1 t/friend t/schoolmate` will not work as all tags must be new"},{"lineNumber":333,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":334,"author":{"gitID":"dezhanglee"},"content":"****"},{"lineNumber":335,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":336,"author":{"gitID":"dezhanglee"},"content":"Examples:"},{"lineNumber":337,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":338,"author":{"gitID":"dezhanglee"},"content":"* `addtag 12 t/newFriend` +"},{"lineNumber":339,"author":{"gitID":"dezhanglee"},"content":"Adds the tag `newFriend` to the contact at index 12 of the last contact listing"},{"lineNumber":340,"author":{"gitID":"dezhanglee"},"content":"* `addtag 7 t/buddy t/CS2103 t/NUS` +"},{"lineNumber":341,"author":{"gitID":"dezhanglee"},"content":"Adds the tags `buddy`, `CS2103` and `NUS` to contact at index 7 of the last contact listing"},{"lineNumber":342,"author":{"gitID":"dezhanglee"},"content":"// end::AddTag[]"},{"lineNumber":343,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":344,"author":{"gitID":"CYX28"},"content":"// tag::ConvertCurrency[]"},{"lineNumber":345,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Converting from one currency to another: `convert` `[since v1.3]`"},{"lineNumber":346,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":347,"author":{"gitID":"CYX28"},"content":"Convert any amount from SRC_CURRENCY_CODE to DST_CURRENCY_CODE +"},{"lineNumber":348,"author":{"gitID":"CYX28"},"content":"Format: `convert [VALUE] SRC_CURRENCY_CODE DST_CURRENCY_CODE`"},{"lineNumber":349,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":350,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":351,"author":{"gitID":"-"},"content":"* Rates are fixed"},{"lineNumber":352,"author":{"gitID":"-"},"content":"* Comma is use as a thousand separtor and to 2 decimal places, eg 1,000.00"},{"lineNumber":353,"author":{"gitID":"-"},"content":"* 17 currencies available to be converted from one to another"},{"lineNumber":354,"author":{"gitID":"-"},"content":"* List of currency codes available (according to ISO 4217):"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"  AUD - Australian dollar"},{"lineNumber":357,"author":{"gitID":"-"},"content":"  CAD - Canadian dollar"},{"lineNumber":358,"author":{"gitID":"-"},"content":"  CHF - Swiss franc"},{"lineNumber":359,"author":{"gitID":"-"},"content":"  CNY - Renminbi (Chinese) yuan"},{"lineNumber":360,"author":{"gitID":"-"},"content":"  GBP - Pound sterling"},{"lineNumber":361,"author":{"gitID":"-"},"content":"  HKD - Hong Kong dollar"},{"lineNumber":362,"author":{"gitID":"-"},"content":"  ILS - Israeli new shekel"},{"lineNumber":363,"author":{"gitID":"-"},"content":"  INR - Indian rupee"},{"lineNumber":364,"author":{"gitID":"-"},"content":"  JPY - Japanese yen"},{"lineNumber":365,"author":{"gitID":"-"},"content":"  MYR - Malaysian ringgit"},{"lineNumber":366,"author":{"gitID":"-"},"content":"  NZD - New Zealand dollar"},{"lineNumber":367,"author":{"gitID":"-"},"content":"  PHP - Philippine piso"},{"lineNumber":368,"author":{"gitID":"-"},"content":"  SEK - Swedish krona/kronor"},{"lineNumber":369,"author":{"gitID":"-"},"content":"  SGD - Singapore dollar"},{"lineNumber":370,"author":{"gitID":"-"},"content":"  THB - Thai baht"},{"lineNumber":371,"author":{"gitID":"-"},"content":"  TWD - New Taiwan dollar"},{"lineNumber":372,"author":{"gitID":"-"},"content":"  USD - United States dollar"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"****"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":377,"author":{"gitID":"-"},"content":"Value can be empty to get the standard rate of 1 unit of a particular currency to be convert to another"},{"lineNumber":378,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `convert 1 SGD MYR` +"},{"lineNumber":382,"author":{"gitID":"-"},"content":"Converts 1 SGD into MYR +"},{"lineNumber":383,"author":{"gitID":"-"},"content":"Returns `Converted 1 SGD to MYR 2.96` +"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"* `convert 10000 JPY USD` +"},{"lineNumber":386,"author":{"gitID":"-"},"content":"Converts 10,000 JPY to USD +"},{"lineNumber":387,"author":{"gitID":"-"},"content":"Returns `Converted 10,000 JPY to USD 94.50`"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"CYX28"},"content":"* `convert SGD MYR` +"},{"lineNumber":390,"author":{"gitID":"CYX28"},"content":"Get the rate of MYR given one unit of SGD +"},{"lineNumber":391,"author":{"gitID":"CYX28"},"content":"Returns `Converted 1 SGD to MYR 2.96`"},{"lineNumber":392,"author":{"gitID":"CYX28"},"content":"// end::ConvertCurrency[]"},{"lineNumber":393,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding an event: `addevent` `[since v1.3]`"},{"lineNumber":395,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":396,"author":{"gitID":"x3tsunayh"},"content":"Adds an event into event book. +"},{"lineNumber":397,"author":{"gitID":"CYX28"},"content":"Format: `addevent et/NAME ed/DESCRIPTION el/LOCATION edt/DATETIME`"},{"lineNumber":398,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":399,"author":{"gitID":"dezhanglee"},"content":"****"},{"lineNumber":400,"author":{"gitID":"x3tsunayh"},"content":"* Adds an event if all fields have correct inputs."},{"lineNumber":401,"author":{"gitID":"x3tsunayh"},"content":"* If there is an empty field, event is not added."},{"lineNumber":402,"author":{"gitID":"x3tsunayh"},"content":"* If datetime field is detected to be incorrect, no event is added."},{"lineNumber":403,"author":{"gitID":"x3tsunayh"},"content":"****"},{"lineNumber":404,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":405,"author":{"gitID":"x3tsunayh"},"content":"Examples:"},{"lineNumber":406,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":407,"author":{"gitID":"x3tsunayh"},"content":"* `addevent et/Christmas Party ed/Celebrating Christmas 2018 el/Samuel\u0027s House edt/25-12-2018 1830` +"},{"lineNumber":408,"author":{"gitID":"x3tsunayh"},"content":"Creates an event with the corresponding details and adds it into the event book; displays it on event list."},{"lineNumber":409,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an event: `deleteevent` `[since v1.3]`"},{"lineNumber":411,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":412,"author":{"gitID":"x3tsunayh"},"content":"Deletes an event in the event book. +"},{"lineNumber":413,"author":{"gitID":"x3tsunayh"},"content":"Format: `deleteevent INDEX`"},{"lineNumber":414,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":415,"author":{"gitID":"x3tsunayh"},"content":"****"},{"lineNumber":416,"author":{"gitID":"x3tsunayh"},"content":"* Deletes an event if given index is valid."},{"lineNumber":417,"author":{"gitID":"x3tsunayh"},"content":"* Does not delete event is given index is invalid."},{"lineNumber":418,"author":{"gitID":"dezhanglee"},"content":"****"},{"lineNumber":419,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":420,"author":{"gitID":"dezhanglee"},"content":"Examples:"},{"lineNumber":421,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":422,"author":{"gitID":"x3tsunayh"},"content":"* `deleteevent 2` +"},{"lineNumber":423,"author":{"gitID":"x3tsunayh"},"content":"Deletes the second event on the displayed event list."},{"lineNumber":424,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"// tag::FindEvent[]"},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding an event: `findevent` `[since v1.4]`"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"Shows a list of all events matching the given keywords. +"},{"lineNumber":429,"author":{"gitID":"-"},"content":"Format: `findevent et/KEYWORD [MORE_KEYWORDS]... for title OR ed/KEYWORD [MORE_KEYWORDS]... for description`"},{"lineNumber":430,"author":{"gitID":"-"},"content":"// end::FindEvent[]"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"// tag::ListAllEvents[]"},{"lineNumber":433,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Listing all events: `listallevents` `[since v1.4]`"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"Shows a list of all events in the address book. +"},{"lineNumber":436,"author":{"gitID":"-"},"content":"Format: `listallevents`"},{"lineNumber":437,"author":{"gitID":"-"},"content":"// end::ListAllEvents[]"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"// tag::SwitchTab[]"},{"lineNumber":440,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Switches between list tabs: `switchtab` `[since v1.4]`"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"Switches between the Events and Tasks list tabs. +"},{"lineNumber":443,"author":{"gitID":"-"},"content":"Format: `switchtab`"},{"lineNumber":444,"author":{"gitID":"-"},"content":"// end::SwitchTab[]"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"CYX28"},"content":"// tag::AddTask[]"},{"lineNumber":447,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Adding a task: `task-add` `[since v1.3]`"},{"lineNumber":448,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":449,"author":{"gitID":"CYX28"},"content":"Adds a task to the address book. +"},{"lineNumber":450,"author":{"gitID":"CYX28"},"content":"Format: `task-add n/NAME p/PRIORITY d/DESCRIPTION dd/DUE_DATE s/STATUS [c/CATEGORY]...`"},{"lineNumber":451,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":452,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":453,"author":{"gitID":"CYX28"},"content":"* Adds a task if all fields have valid inputs."},{"lineNumber":454,"author":{"gitID":"CYX28"},"content":"* The valid values of priority are : high, medium and low."},{"lineNumber":455,"author":{"gitID":"CYX28"},"content":"* The valid values of status are : undone and done."},{"lineNumber":456,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":457,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":458,"author":{"gitID":"CYX28"},"content":"[TIP]"},{"lineNumber":459,"author":{"gitID":"CYX28"},"content":"A task can have any number of categories (including 0)"},{"lineNumber":460,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":461,"author":{"gitID":"CYX28"},"content":"Examples:"},{"lineNumber":462,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":463,"author":{"gitID":"CYX28"},"content":"* `task-add n/Task 1 p/medium d/Description for task 1 dd/2018-05-10 s/undone`"},{"lineNumber":464,"author":{"gitID":"CYX28"},"content":"* `task-add n/Agenda for meeting p/high d/Discuss proposal details dd/2018-04-29 s/undone c/Meeting`"},{"lineNumber":465,"author":{"gitID":"CYX28"},"content":"// end::AddTask[]"},{"lineNumber":466,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":467,"author":{"gitID":"CYX28"},"content":"// tag::DeleteTask[]"},{"lineNumber":468,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Deleting a task: `task-delete` `[since v1.4]`"},{"lineNumber":469,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":470,"author":{"gitID":"CYX28"},"content":"Deletes the specified task from the address book. +"},{"lineNumber":471,"author":{"gitID":"CYX28"},"content":"Format: `task-delete INDEX`"},{"lineNumber":472,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":473,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":474,"author":{"gitID":"CYX28"},"content":"* Deletes the task at the specified `INDEX`."},{"lineNumber":475,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":476,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":477,"author":{"gitID":"-"},"content":"****"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"CYX28"},"content":"* `task-list` +"},{"lineNumber":482,"author":{"gitID":"CYX28"},"content":"`task-delete 2` +"},{"lineNumber":483,"author":{"gitID":"CYX28"},"content":"Deletes the 2nd task in the address book."},{"lineNumber":484,"author":{"gitID":"CYX28"},"content":"// end::DeleteTask[]"},{"lineNumber":485,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":486,"author":{"gitID":"CYX28"},"content":"// tag::EditTask[]"},{"lineNumber":487,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Editing a task: `task-edit` `[since v1.4]`"},{"lineNumber":488,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":489,"author":{"gitID":"CYX28"},"content":"Edits an existing task in the address book. +"},{"lineNumber":490,"author":{"gitID":"CYX28"},"content":"Format: `task-edit INDEX [n/NAME] [p/PRIORITY] [d/DESCRIPTION] [dd/DUE_DATE] [s/STATUS] [c/CATEGORY]...`"},{"lineNumber":491,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":492,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":493,"author":{"gitID":"CYX28"},"content":"* Edits the task at the specified `INDEX`."},{"lineNumber":494,"author":{"gitID":"CYX28"},"content":"The index refers to the index number shown in the last task listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":495,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":496,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":497,"author":{"gitID":"CYX28"},"content":"* When editing categories, the existing categories of the task will be removed i.e. adding of categories is not cumulative."},{"lineNumber":498,"author":{"gitID":"CYX28"},"content":"* You can remove all the task\u0027s categories by typing `c/` without specifying any category after it."},{"lineNumber":499,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":500,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":501,"author":{"gitID":"CYX28"},"content":"Examples:"},{"lineNumber":502,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":503,"author":{"gitID":"CYX28"},"content":"* `task-list` +"},{"lineNumber":504,"author":{"gitID":"CYX28"},"content":"`task-edit 1 p/medium dd/2018-05-10` +"},{"lineNumber":505,"author":{"gitID":"CYX28"},"content":"Edits the priority and due date of the 1st task to be `medium` and `2018-05-10` respectively."},{"lineNumber":506,"author":{"gitID":"CYX28"},"content":"* `task-edit 3 n/Project meeting c/` +"},{"lineNumber":507,"author":{"gitID":"CYX28"},"content":"Edits the name of the 3rd task to be `Project meeting` and clears all existing categories."},{"lineNumber":508,"author":{"gitID":"CYX28"},"content":"// end::EditTask[]"},{"lineNumber":509,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":510,"author":{"gitID":"CYX28"},"content":"// tag::FindTask[]"},{"lineNumber":511,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Finding tasks by name: `task-find` `[since v1.4]`"},{"lineNumber":512,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":513,"author":{"gitID":"CYX28"},"content":"Finds the tasks whose names contain any of the given keywords. +"},{"lineNumber":514,"author":{"gitID":"CYX28"},"content":"Format: `task-find KEYWORD [MORE_KEYWORDS]...`"},{"lineNumber":515,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":516,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":517,"author":{"gitID":"CYX28"},"content":"* The search is case-insensitive. e.g. `task` will match `Task`"},{"lineNumber":518,"author":{"gitID":"CYX28"},"content":"* The order of the keywords does not matter. e.g. `Buy Gift` will match `Gift buy`"},{"lineNumber":519,"author":{"gitID":"CYX28"},"content":"* Partial words will be matched. e.g. `ta` will match `task`"},{"lineNumber":520,"author":{"gitID":"CYX28"},"content":"* Tasks matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":521,"author":{"gitID":"CYX28"},"content":"e.g. `Agenda gift` will return `Agenda for meeting`, `Buy gift`"},{"lineNumber":522,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":523,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":524,"author":{"gitID":"CYX28"},"content":"Examples:"},{"lineNumber":525,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":526,"author":{"gitID":"CYX28"},"content":"* `task-find agenda`"},{"lineNumber":527,"author":{"gitID":"CYX28"},"content":"Returns `Agenda for meeting` and `Project agenda`"},{"lineNumber":528,"author":{"gitID":"CYX28"},"content":"* `task-find email agenda project`"},{"lineNumber":529,"author":{"gitID":"CYX28"},"content":"Returns any task having names `email`, `agenda` or `project`"},{"lineNumber":530,"author":{"gitID":"CYX28"},"content":"// end::FindTask[]"},{"lineNumber":531,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":532,"author":{"gitID":"CYX28"},"content":"// tag::ListTask[]"},{"lineNumber":533,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Listing all tasks: `task-list` `[since v1.3]`"},{"lineNumber":534,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":535,"author":{"gitID":"CYX28"},"content":"Shows a list of all tasks in the address book. +"},{"lineNumber":536,"author":{"gitID":"CYX28"},"content":"Format: `task-list`"},{"lineNumber":537,"author":{"gitID":"CYX28"},"content":"// end::ListTask[]"},{"lineNumber":538,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":539,"author":{"gitID":"CYX28"},"content":"// tag::SortTask[]"},{"lineNumber":540,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Sorting all tasks by priority: `task-sort` `[since v1.4]`"},{"lineNumber":541,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":542,"author":{"gitID":"CYX28"},"content":"Sorts all tasks in the address book by priority in decreasing order of importance (i.e. high \u003e medium \u003e low)"},{"lineNumber":543,"author":{"gitID":"CYX28"},"content":"and list them. +"},{"lineNumber":544,"author":{"gitID":"CYX28"},"content":"Format: `task-sort`"},{"lineNumber":545,"author":{"gitID":"CYX28"},"content":"// end::SortTask[]"},{"lineNumber":546,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"// tag::FindByAddress[]"},{"lineNumber":548,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Find persons by address: `find a/` `[coming in v1.5]`"},{"lineNumber":549,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"Finds persons whose address contain any of the given keywords. +"},{"lineNumber":551,"author":{"gitID":"-"},"content":"Format: `find a/KEYWORD [MORE_KEYWORDS]...`"},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"****"},{"lineNumber":554,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":555,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":556,"author":{"gitID":"CYX28"},"content":"* Only the tag is searched."},{"lineNumber":557,"author":{"gitID":"-"},"content":"* Partial words will be matched e.g. `Han` will match `Hans`"},{"lineNumber":558,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":559,"author":{"gitID":"-"},"content":"****"},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"* `find a/5TH` +"},{"lineNumber":564,"author":{"gitID":"-"},"content":"Returns `5th` and `5TH`"},{"lineNumber":565,"author":{"gitID":"-"},"content":"* `find a/` +"},{"lineNumber":566,"author":{"gitID":"CYX28"},"content":"Returns any person having tags `family` or `friends`"},{"lineNumber":567,"author":{"gitID":"-"},"content":"// end::FindByAddress[]"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"// tag::FindByPhone[]"},{"lineNumber":570,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Find persons by phone: `find p/` `[coming in v1.5]`"},{"lineNumber":571,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":572,"author":{"gitID":"CYX28"},"content":"Finds persons whose names contain any of the given value. +"},{"lineNumber":573,"author":{"gitID":"-"},"content":"Format: `find p/KEYWORD [MORE_KEYWORDS]...`"},{"lineNumber":574,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":575,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":576,"author":{"gitID":"CYX28"},"content":"* Only the phone is searched."},{"lineNumber":577,"author":{"gitID":"CYX28"},"content":"* Partial numbers will be matched e.g. `984` will match `98450293`"},{"lineNumber":578,"author":{"gitID":"CYX28"},"content":"* Persons matching at least one phone will be returned (i.e. `OR` search)."},{"lineNumber":579,"author":{"gitID":"CYX28"},"content":"****"},{"lineNumber":580,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":581,"author":{"gitID":"CYX28"},"content":"Examples:"},{"lineNumber":582,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"* `find p/982039` +"},{"lineNumber":584,"author":{"gitID":"CYX28"},"content":"Returns any person having phone `98203910` or `98203950`"},{"lineNumber":585,"author":{"gitID":"-"},"content":"// end::FindByPhone[]"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Autocomplete of command `[coming in v2.0]`"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given value. +"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"****"},{"lineNumber":592,"author":{"gitID":"-"},"content":"* Command will autocomplete if left one possible command remaining"},{"lineNumber":593,"author":{"gitID":"-"},"content":"****"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"* `fin` +"},{"lineNumber":598,"author":{"gitID":"-"},"content":"Returns any command `find` +"},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d List out possible command `[coming in v2.0]`"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"List out possible commands as one types on the command line +"},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"****"},{"lineNumber":605,"author":{"gitID":"-"},"content":"* Possible commands will be listed"},{"lineNumber":606,"author":{"gitID":"-"},"content":"****"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"* Empty command line +"},{"lineNumber":611,"author":{"gitID":"-"},"content":"Returns all of commands +"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"* `f` +"},{"lineNumber":614,"author":{"gitID":"-"},"content":"Returns commands started with `f` such as `findEvent`, `find\u0027 +"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"* `find` +"},{"lineNumber":617,"author":{"gitID":"-"},"content":"Returns commands started with `find` such as `find\u0027 +"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Hint out the possible command syntax `[coming in v2.0]`"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"Guide user on the command sytnax +"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"****"},{"lineNumber":624,"author":{"gitID":"-"},"content":"* Syntax will be shown to guide thru till the command is completely written"},{"lineNumber":625,"author":{"gitID":"-"},"content":"* Check for each parameter, the value conforming to"},{"lineNumber":626,"author":{"gitID":"-"},"content":"****"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"* `add n/` +"},{"lineNumber":631,"author":{"gitID":"-"},"content":"Return feedback to ask user to input name +"},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"* `convert 10 SGD` +"},{"lineNumber":634,"author":{"gitID":"-"},"content":"Returns feedback to input the currency code to be converted to +"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":638,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":641,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":646,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"CYX28"},"content":"* *Add a person* : `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":651,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":652,"author":{"gitID":"CYX28"},"content":"* *Delete a person* : `delete INDEX` +"},{"lineNumber":653,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":654,"author":{"gitID":"CYX28"},"content":"* *Delete a person by name* : `deletebyname NAME` +"},{"lineNumber":655,"author":{"gitID":"dezhanglee"},"content":"e.g. `delete John Appleseed`"},{"lineNumber":656,"author":{"gitID":"CYX28"},"content":"* *Edit a person* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":657,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":658,"author":{"gitID":"CYX28"},"content":"* *Find persons by name* : `find n/KEYWORD [MORE_KEYWORDS]...` +"},{"lineNumber":659,"author":{"gitID":"-"},"content":"e.g. `find n/James Jake`"},{"lineNumber":660,"author":{"gitID":"CYX28"},"content":"* *Find persons by tag* : `find t/KEYWORD [MORE_KEYWORDS]...` +"},{"lineNumber":661,"author":{"gitID":"-"},"content":"e.g. `find t/friends`"},{"lineNumber":662,"author":{"gitID":"CYX28"},"content":"* *List all persons* : `list`"},{"lineNumber":663,"author":{"gitID":"CYX28"},"content":"* *Select a person* : `select INDEX` +"},{"lineNumber":664,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":665,"author":{"gitID":"CYX28"},"content":"* *Sort all persons by name* : `sort`"},{"lineNumber":666,"author":{"gitID":"-"},"content":"* *Export contacts list into XML or CSV file* : `export FILEPATH` +"},{"lineNumber":667,"author":{"gitID":"-"},"content":"e.g. `export C:\\Users\\John Doe\\Documents\\addressbook.xml`"},{"lineNumber":668,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":669,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":670,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":671,"author":{"gitID":"-"},"content":"* *Clear contacts list* : `clear`"},{"lineNumber":672,"author":{"gitID":"CYX28"},"content":"* *Help* : `help`"},{"lineNumber":673,"author":{"gitID":"CYX28"},"content":"* *Exit program* : `exit`"},{"lineNumber":674,"author":{"gitID":"CYX28"},"content":"* *Add a profile picture to a person* : `addpicture INDEX f/FILENAME` +"},{"lineNumber":675,"author":{"gitID":"CYX28"},"content":"e.g. `addpicture 1 f/C://pictures/janeDoe.jpg`"},{"lineNumber":676,"author":{"gitID":"CYX28"},"content":"* *Add tag(s) to a person* : `addtag INDEX t/TAG [t/TAG]...` +"},{"lineNumber":677,"author":{"gitID":"CYX28"},"content":"e.g. `addtag 12 t/newFriend`"},{"lineNumber":678,"author":{"gitID":"CYX28"},"content":"* *Convert currency* : `convert [VALUE] SRC_CURRENCY_CODE DST_CURRENCY_CODE` +"},{"lineNumber":679,"author":{"gitID":"CYX28"},"content":"e.g. `convert 10000 JPY USD`"},{"lineNumber":680,"author":{"gitID":"x3tsunayh"},"content":"* *Add an event* : `addevent et/TITLE ed/DESCRIPTION el/LOCATION edt/DATETIME` +"},{"lineNumber":681,"author":{"gitID":"x3tsunayh"},"content":"e.g. `addevent et/Christmas Party ed/Celebrating Christmas 2018 el/Samuel\u0027s House edt/25-12-2018 1830`"},{"lineNumber":682,"author":{"gitID":"x3tsunayh"},"content":"* *Delete an event* : `deleteevent INDEX` +"},{"lineNumber":683,"author":{"gitID":"x3tsunayh"},"content":"e.g. `deleteevent 2`"},{"lineNumber":684,"author":{"gitID":"CYX28"},"content":"* *Find an event* : `findevent PREFIX/KEYWORD [MORE_KEYWORDS]...` +"},{"lineNumber":685,"author":{"gitID":"CYX28"},"content":"e.g. `findevent et/Christmas CNY Halloween`"},{"lineNumber":686,"author":{"gitID":"-"},"content":"* *List all events* : `listallevents`"},{"lineNumber":687,"author":{"gitID":"-"},"content":"* *Click-to-view Events* : `Click the shaded days on the Calendar`"},{"lineNumber":688,"author":{"gitID":"-"},"content":"* *Switch between events and tasks list* : `switchtab`"},{"lineNumber":689,"author":{"gitID":"CYX28"},"content":"* *Add a task* : `task-add n/NAME p/PRIORITY d/DESCRIPTION dd/DUE_DATE s/STATUS [c/CATEGORY]...` +"},{"lineNumber":690,"author":{"gitID":"CYX28"},"content":"e.g. `task-add n/Task 1 p/medium d/Description for task 1 dd/2018-05-10 s/undone`"},{"lineNumber":691,"author":{"gitID":"CYX28"},"content":"* *Delete a task* : `task-delete INDEX` +"},{"lineNumber":692,"author":{"gitID":"CYX28"},"content":"e.g. `task-delete 1`"},{"lineNumber":693,"author":{"gitID":"CYX28"},"content":"* *Edit a task* : `task-edit INDEX [n/NAME] [p/PRIORITY] [d/DESCRIPTION] [dd/DUE_DATE] [s/STATUS] [c/CATEGORY]...` +"},{"lineNumber":694,"author":{"gitID":"CYX28"},"content":"e.g. `task-edit 1 p/medium dd/2018-05-10`"},{"lineNumber":695,"author":{"gitID":"CYX28"},"content":"* *Find tasks by name* : `task-find KEYWORD [MORE_KEYWORDS]...` +"},{"lineNumber":696,"author":{"gitID":"CYX28"},"content":"e.g. `task-find project agenda`"},{"lineNumber":697,"author":{"gitID":"CYX28"},"content":"* *List all tasks* : `task-list`"},{"lineNumber":698,"author":{"gitID":"CYX28"},"content":"* *Sort all tasks* : `task-sort`"}],"authorContributionMap":{"CYX28":172,"x3tsunayh":44,"-":420,"dezhanglee":62}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        //getBrowserPanel().click();"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        //getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        //assertHelpWindowNotOpen();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":4,"-":89}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertTaskListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":47,"author":{"gitID":"-"},"content":" */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"        //waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"        return TypicalAddressBook.getTypicalAddressBook();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":"    /*"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"    */"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"    public TaskListPanelHandle getTaskListPanel() {"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":"        return mainWindowHandle.getTaskListPanel();"},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":137,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"x3tsunayh"},"content":"        //waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" n/\" + keyword);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":196,"author":{"gitID":"x3tsunayh"},"content":"        //getBrowserPanel().rememberUrl();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":208,"author":{"gitID":"x3tsunayh"},"content":"        //assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"x3tsunayh"},"content":"        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":237,"author":{"gitID":"x3tsunayh"},"content":"        //assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":267,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":284,"author":{"gitID":"CYX28"},"content":"            assertTaskListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"},{"lineNumber":285,"author":{"gitID":"x3tsunayh"},"content":"            //assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE),"},{"lineNumber":286,"author":{"gitID":"x3tsunayh"},"content":"            // getBrowserPanel().getLoadedUrl());"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":296,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":17,"x3tsunayh":10,"-":273}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"},{"lineNumber":23,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, Person... toDisplay) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"     * Updates {@code model}\u0027s task filtered list to display only {@code toDisplay}"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    public static void setTaskFilteredList(Model mode, List\u003cTask\u003e toDisplay) {"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d toDisplay.stream().map(ModelHelper::getTaskPredicateMatching)"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"                .reduce(Predicate::or);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"     * @see ModelHelper@setTaskFilteredList(Model, List)"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    public static void setTaskFilteredList(Model model, Task... toDisplay) {"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"        setTaskFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"     * Returns a predicate that evaluates to true if this {@code Task} equals to {@code other}."},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    private static Predicate\u003cTask\u003e getTaskPredicateMatching(Task other) {"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        return task -\u003e task.equals(other);"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":23,"-":39}},{"path":"src/test/java/seedu/address/ui/TaskListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"public class TaskListPanelTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d FXCollections.observableList(getTypicalTasks());"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    private TaskListPanelHandle taskListPanelHandle;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"        TaskListPanel taskListPanel \u003d new TaskListPanel(TYPICAL_TASKS);"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"        uiPartRule.setUiPart(taskListPanel);"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        taskListPanelHandle \u003d new TaskListPanelHandle(getChildNode(taskListPanel.getRoot(),"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"                TaskListPanelHandle.TASK_LIST_VIEW_ID));"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    public void display() {"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_TASKS.size(); i++) {"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"            Task expectedTask \u003d TYPICAL_TASKS.get(i);"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"            TaskCardHandle actualCard \u003d taskListPanelHandle.getTaskCardHandle(i);"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"            assertCardDisplaysTask(expectedTask, actualCard);"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getTaskId());"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":36,"-":5}},{"path":"src/test/java/seedu/address/ui/TaskCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"public class TaskCardTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    public void display() {"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"        // no task categories"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"        Task taskWithNoCategories \u003d new TaskBuilder().withTaskCategories(new String[0]).build();"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        TaskCard taskCard \u003d new TaskCard(taskWithNoCategories, 1);"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"        uiPartRule.setUiPart(taskCard);"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"        assertCardDisplay(taskCard, taskWithNoCategories, 1);"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"        // with task categories"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        Task taskWithCategories \u003d new TaskBuilder().build();"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        taskCard \u003d new TaskCard(taskWithCategories, 2);"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        uiPartRule.setUiPart(taskCard);"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        assertCardDisplay(taskCard, taskWithCategories, 2);"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        TaskCard taskCard \u003d new TaskCard(task, 0);"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        // same task, same index -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        TaskCard copy \u003d new TaskCard(task, 0);"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        assertTrue(taskCard.equals(copy));"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"        assertTrue(taskCard.equals(taskCard));"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskCard.equals(null));"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskCard.equals(0));"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        //different task, same index -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        Task differentTask \u003d new TaskBuilder().withTaskName(\"differentTaskName\").build();"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        // same task, different index -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskCard.equals(new TaskCard(task, 1)));"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"     * Asserts that {@code taskCard} displays the details of {@code expectedTask} correctly and matches"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"     * {@code expectedId}."},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"    private void assertCardDisplay(TaskCard taskCard, Task expectedTask, int expectedId) {"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        TaskCardHandle taskCardHandle \u003d new TaskCardHandle((taskCard.getRoot()));"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        // Verify id is displaed correctly"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", taskCardHandle.getTaskId());"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"        // Verify task details are displayed correctly"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        assertCardDisplaysTask(expectedTask, taskCardHandle);"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":69,"-":5}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    public static void assertCardDisplaysTask(Task expectedTask, TaskCardHandle actualCard) {"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedTask.getTaskName().value, actualCard.getTaskName());"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedTask.getTaskPriority().value, actualCard.getTaskPriority());"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedTask.getTaskDescription().value, actualCard.getTaskDescription());"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedTask.getTaskDueDate().value, actualCard.getTaskDueDate());"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedTask.getTaskStatus().value, actualCard.getTaskStatus());"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedTask.getTaskCategories().stream().map(category -\u003e category.taskCategoryName)"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"                .collect(Collectors.toList()), actualCard.getTaskCategories());"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"     * in the correct order."},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"    public static void assertTaskListMatching(TaskListPanelHandle taskListPanelHandle, Task... tasks) {"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"        for (int i \u003d 0; i \u003c tasks.length; i++) {"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"            assertCardDisplaysTask(tasks[i], taskListPanelHandle.getTaskCardHandle(i));"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"     * in the correct order."},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"    public static void assertTaskListMatching(TaskListPanelHandle taskListPanelHandle, List\u003cTask\u003e tasks) {"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        assertTaskListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":34,"-":73}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.storage.XmlEventBookStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    private UserPrefs userPrefs;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getFilePath(\"ab.xml\"));"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"        XmlEventBookStorage eventBookStorage \u003d new XmlEventBookStorage(getFilePath(\"eb.xml\"));"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getFilePath(\"prefs.json\"));"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        Storage storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        Logic logic \u003d new LogicManager(model, storage, userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"    private String getFilePath(String fileName) {"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":17,"-":160}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"\u003d BizConnect Journal - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":":repoURL: https://github.com/CS2103JAN2018-T15-B4/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"By: `CS2103JAN2018 T15-B4`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"CYX28"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"CYX28"},"content":"// tag::sort[]"},{"lineNumber":362,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Sort Persons feature"},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"CYX28"},"content":"The sort mechanism sorts the persons list alphabetically by name. It currently supports sorting in ascending order."},{"lineNumber":366,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":367,"author":{"gitID":"CYX28"},"content":"The internal details of the sort mechanism is handled by the `sort` method in `UniquePersonList` class."},{"lineNumber":368,"author":{"gitID":"CYX28"},"content":"The sort mechanism is implemented using a custom comparator in JavaFX ObservableList `sort` method."},{"lineNumber":369,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":370,"author":{"gitID":"CYX28"},"content":"The following sequence diagram shows how the sort persons operation works."},{"lineNumber":371,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":372,"author":{"gitID":"CYX28"},"content":"image::SortingSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":373,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":374,"author":{"gitID":"CYX28"},"content":". The user executes the `sort` command."},{"lineNumber":375,"author":{"gitID":"CYX28"},"content":". The `AddressBookParser` class parses the command and create a new `SortCommand` class."},{"lineNumber":376,"author":{"gitID":"CYX28"},"content":". The `sort` command is executed and handled by the `ModelManager` class."},{"lineNumber":377,"author":{"gitID":"CYX28"},"content":". The sorted list is returned and displayed to the user."},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `SortCommand`"},{"lineNumber":382,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":383,"author":{"gitID":"CYX28"},"content":"* **Alternative 1 (current choice):** Sort persons by name"},{"lineNumber":384,"author":{"gitID":"CYX28"},"content":"** Pros: Easy to implement and does not need to make changes for every newly added field"},{"lineNumber":385,"author":{"gitID":"CYX28"},"content":"** Cons: Lack flexibility in sorting by other fields"},{"lineNumber":386,"author":{"gitID":"CYX28"},"content":"* **Alternative 2:** Sort persons by other fields of a person\u0027s contact such as email"},{"lineNumber":387,"author":{"gitID":"CYX28"},"content":"** Pros: Allows flexibility in sorting"},{"lineNumber":388,"author":{"gitID":"CYX28"},"content":"** Cons: Might be more difficult to implement as changes need to be made for every newly added field"},{"lineNumber":389,"author":{"gitID":"CYX28"},"content":"// end::sort[]"},{"lineNumber":390,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Profile Picture feature"},{"lineNumber":392,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":394,"author":{"gitID":"dezhanglee"},"content":"Right now, a contact\u0027s Profile Picture can be viewed at the right side of the contact\u0027s profile card."},{"lineNumber":395,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":396,"author":{"gitID":"dezhanglee"},"content":"The following sequence diagram shows how the `addpicture` command works"},{"lineNumber":397,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":398,"author":{"gitID":"dezhanglee"},"content":"image::AddPictureSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":399,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":400,"author":{"gitID":"dezhanglee"},"content":". The user executes the `addpicture INDEX f/FILENAME` command, with parameters `INDEX` and `FILENAME`"},{"lineNumber":401,"author":{"gitID":"dezhanglee"},"content":". The `AddressBookParser` class parses the command and create a new `AddPictureCommand` class."},{"lineNumber":402,"author":{"gitID":"dezhanglee"},"content":". The `AddPicture` command is executed and handled by the `ModelManager` class."},{"lineNumber":403,"author":{"gitID":"dezhanglee"},"content":". A new `Picture` object is created, containing the image referenced by `FILENAME`."},{"lineNumber":404,"author":{"gitID":"dezhanglee"},"content":". The new `Picture` is attached to the `Person` at `INDEX`"},{"lineNumber":405,"author":{"gitID":"dezhanglee"},"content":". The new picture is displayed"},{"lineNumber":406,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"dezhanglee"},"content":"**Aspect:** Storage of images of profile pictures +"},{"lineNumber":410,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":411,"author":{"gitID":"dezhanglee"},"content":"**Chosen Implementation:** +"},{"lineNumber":412,"author":{"gitID":"dezhanglee"},"content":"Store the images in a local folder. For Windows, it will be in the AppData folder, for Mac/Linux, in the home folder. +"},{"lineNumber":413,"author":{"gitID":"dezhanglee"},"content":"**Pros:** +"},{"lineNumber":414,"author":{"gitID":"dezhanglee"},"content":"After a profile picture is set, it will continue showing even if the image source is deleted +"},{"lineNumber":415,"author":{"gitID":"dezhanglee"},"content":"**Cons:** +"},{"lineNumber":416,"author":{"gitID":"dezhanglee"},"content":"Extra space to store the pictures, some images may be too large and use a lot of memory. +"},{"lineNumber":417,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":418,"author":{"gitID":"dezhanglee"},"content":"**Alternative:** +"},{"lineNumber":419,"author":{"gitID":"dezhanglee"},"content":"Not store the images +"},{"lineNumber":420,"author":{"gitID":"dezhanglee"},"content":"**Pros:** +"},{"lineNumber":421,"author":{"gitID":"dezhanglee"},"content":"No space requirement to store the images locally +"},{"lineNumber":422,"author":{"gitID":"dezhanglee"},"content":"**Cons:** +"},{"lineNumber":423,"author":{"gitID":"dezhanglee"},"content":"Need to ensure that the image is not deleted, or it won\u0027t display. +"},{"lineNumber":424,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Find feature"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":428,"author":{"gitID":"-"},"content":"Right now, find feature is limited to finding by name."},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"It is modify such that able to find by name and tag by specifying the type to be search  after the command name `find`."},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Implementation - Search by Name"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":". The user executes the `find n/KEYWORD [MORE_KEYWORDS]...`, given the search type `n/` and with parameters `KEYWORD`"},{"lineNumber":435,"author":{"gitID":"-"},"content":". The `AddressBookParser` class parses the command and create a new `FindCommandParse` class."},{"lineNumber":436,"author":{"gitID":"-"},"content":". The `FindCommandParse` will compare the search type to check if search is by name and parse the keywords to `FindCommand`"},{"lineNumber":437,"author":{"gitID":"-"},"content":". The `FindCommand` object is created, and assisted by `NameContainsKeywordsPredicate` to obtain the result."},{"lineNumber":438,"author":{"gitID":"-"},"content":". The  result is then return and displayed to the user."},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Implementation - Search by Tag"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":". The user executes the `find t/KEYWORD [MORE_KEYWORDS]...`, given the search type `t/` and with parameters `KEYWORD`"},{"lineNumber":443,"author":{"gitID":"-"},"content":". The `AddressBookParser` class parses the command and create a new `FindCommandParse` class."},{"lineNumber":444,"author":{"gitID":"-"},"content":". The `FindCommandParse` will compare the search type to check if search is by tag and parse the keywords to `FindCommand`"},{"lineNumber":445,"author":{"gitID":"-"},"content":". The `FindCommand` object is created, and assisted by `TagContainsKeywordsPredicate` to obtain the result."},{"lineNumber":446,"author":{"gitID":"-"},"content":". The  result is then return and displayed to the user."},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"// tag::addtag[]"},{"lineNumber":449,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add Tag to Contact"},{"lineNumber":450,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":451,"author":{"gitID":"dezhanglee"},"content":"The add tag command inherits from `UndoableCommand`."},{"lineNumber":452,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":453,"author":{"gitID":"dezhanglee"},"content":"The `logic` component parses user inputs, while the `model` component updates the person in the Address Book."},{"lineNumber":454,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":455,"author":{"gitID":"dezhanglee"},"content":"The following sequence diagram illustrates how the Add Tag command works:"},{"lineNumber":456,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":457,"author":{"gitID":"dezhanglee"},"content":"image::AddTagSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":458,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":459,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":460,"author":{"gitID":"dezhanglee"},"content":". The user executes the `addtag INDEX t/TAG1 t/TAG2 ...` command, with parameters `INDEX` and TAG1, TAG2, ..."},{"lineNumber":461,"author":{"gitID":"dezhanglee"},"content":". The `AddressBookParser` class parses the command and create a new `AddTagCommand` class."},{"lineNumber":462,"author":{"gitID":"dezhanglee"},"content":". The `AddTag` command is executed and handled by the `ModelManager` class."},{"lineNumber":463,"author":{"gitID":"dezhanglee"},"content":". New `Tag` object(s) (depending on the number of input tags) is created."},{"lineNumber":464,"author":{"gitID":"dezhanglee"},"content":". The new `Tag` is attached to the `Person` at `INDEX`."},{"lineNumber":465,"author":{"gitID":"dezhanglee"},"content":". `updatePerson` in `ModelManager` updates the person at `INDEX` with a new person with the added tags."},{"lineNumber":466,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":467,"author":{"gitID":"dezhanglee"},"content":"// end::addtag[]"},{"lineNumber":468,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"// tag::export[]"},{"lineNumber":470,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Import/Export feature"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":473,"author":{"gitID":"x3tsunayh"},"content":"Right now, only Export functionality is implemented."},{"lineNumber":474,"author":{"gitID":"x3tsunayh"},"content":"It makes use of `ExportCommand` which extends `UndoableCommand`."},{"lineNumber":475,"author":{"gitID":"x3tsunayh"},"content":"When the Export functionality is called on the `AddressBookParser`, it parses the given input as a FILEPATH using `ExportCommandParser` which eventually creates the `ExportCommand` instance."},{"lineNumber":476,"author":{"gitID":"x3tsunayh"},"content":"The `ModelManager` then invokes methods involving `Storage` under the `Model` instance in order to store the data into a user-defined location. If such a location was not well-defined, then the XML file exported will be directly saved in your local repository\u0027s main folder."},{"lineNumber":477,"author":{"gitID":"x3tsunayh"},"content":"The \u0027StorageManager\u0027 will then call the `exportAddressBook` method under `XmlAddressBookStorage` to store the data as an XML file into a user-defined location."},{"lineNumber":478,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"image::ExportCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Usages of Exported Data"},{"lineNumber":484,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"* **Alternative 1(current choice):** Allows option of exporting data into either CSV or XML files."},{"lineNumber":486,"author":{"gitID":"x3tsunayh"},"content":"** Pros: Allows greater flexibility as CSV files can be catered to importing of contacts into Google Contacts."},{"lineNumber":487,"author":{"gitID":"x3tsunayh"},"content":"** Cons: Need to manually cater to popular file formats and this may require constant maintenance on the developers\u0027 end."},{"lineNumber":488,"author":{"gitID":"-"},"content":"* **Alternative 2:** Only allows exporting of data as XML files."},{"lineNumber":489,"author":{"gitID":"x3tsunayh"},"content":"** Pros: Simplified export into a file that is readable and understandable by humans, is completely compatible with Java and 100% portable."},{"lineNumber":490,"author":{"gitID":"x3tsunayh"},"content":"** Cons: Users may not know the benefits or uses of an XML file."},{"lineNumber":491,"author":{"gitID":"-"},"content":"// end::export[]"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"// tag::calendarview[]"},{"lineNumber":494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar View feature"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":497,"author":{"gitID":"x3tsunayh"},"content":"Right now, the Calendar can be viewed on the homepage of BizConnect Journal as a summarized list of events on different days of a specified month."},{"lineNumber":498,"author":{"gitID":"-"},"content":"// end::calendarview[]"},{"lineNumber":499,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":500,"author":{"gitID":"x3tsunayh"},"content":"// tag::addevent[]"},{"lineNumber":501,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d\u003d Add Event feature"},{"lineNumber":502,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"x3tsunayh"},"content":"The add event feature allows the user to add a new event into the Event Book."},{"lineNumber":505,"author":{"gitID":"x3tsunayh"},"content":"The event details required: Title, Description, Location, Datetime."},{"lineNumber":506,"author":{"gitID":"-"},"content":"All of the fields are compulsory, and the user can simply fill in a dummy value for irrelevant fields."},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the add event command works under LogicManager."},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"image::AddEventCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":". User executes `addevent` command with the required arguments."},{"lineNumber":513,"author":{"gitID":"-"},"content":". `AddressBookParser` class creates a new `AddEventCommandParser` object to parse the command arguments."},{"lineNumber":514,"author":{"gitID":"-"},"content":". This `AddEventCommandParser` object parses the arguments and create a new `AddEventCommand` object."},{"lineNumber":515,"author":{"gitID":"-"},"content":". The `addevent` command is then executed and handled by the `ModelManager` class."},{"lineNumber":516,"author":{"gitID":"-"},"content":". The event is finally added to the Event list in Address Book and the updated list is then displayed to the user."},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"The next sequence diagram illustrates how the event is added under ModelManager."},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"image::AddEventSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":521,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":522,"author":{"gitID":"x3tsunayh"},"content":"// end::addevent[]"},{"lineNumber":523,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":524,"author":{"gitID":"x3tsunayh"},"content":"// tag::deleteevent[]"},{"lineNumber":525,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d\u003d Delete Event feature"},{"lineNumber":526,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"x3tsunayh"},"content":"The delete event feature allows user to delete an event in the Event Book by specifying the index of the displayed Event List."},{"lineNumber":529,"author":{"gitID":"-"},"content":"Allows easy deletion of an event according to the event index listed in the Event list."},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"This sequence diagram shows how the delete event command works under LogicManager."},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"image::DeleteEventCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":". User executes `deleteevent` command with the required arguments."},{"lineNumber":536,"author":{"gitID":"-"},"content":". `AddressBookParser` class creates a new `DeleteEventCommandParser` object to parse the command arguments."},{"lineNumber":537,"author":{"gitID":"-"},"content":". This `DeleteEventCommandParser` object parses the arguments and create a new `DeleteEventCommand` object."},{"lineNumber":538,"author":{"gitID":"-"},"content":". The `deleteevent` command is then executed and handled by the `ModelManager` class."},{"lineNumber":539,"author":{"gitID":"-"},"content":". The specified event is removed from the Event list in Address Book and the updated list is then displayed to the user."},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"The following sequence diagram illustrates how the event is removed under ModelManager."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"image::DeleteEventSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"// end::deleteevent[]"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"CYX28"},"content":"// tag::task-add[]"},{"lineNumber":548,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Add Task feature"},{"lineNumber":549,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":550,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":551,"author":{"gitID":"CYX28"},"content":"The add task feature allows user to add a new task into the Address Book by specifying the required parameters."},{"lineNumber":552,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":553,"author":{"gitID":"CYX28"},"content":"It allows the adding of the following fields: name, priority, description, due date, status and category."},{"lineNumber":554,"author":{"gitID":"CYX28"},"content":"All of the fields are compulsory except category."},{"lineNumber":555,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":556,"author":{"gitID":"CYX28"},"content":"The following sequence diagram shows how the add task operation works."},{"lineNumber":557,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":558,"author":{"gitID":"CYX28"},"content":"image::TaskAddSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":559,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":560,"author":{"gitID":"CYX28"},"content":". The user executes the `task-add` command and specify the required arguments."},{"lineNumber":561,"author":{"gitID":"CYX28"},"content":". The `AddressBookParser` class creates a new `TaskAddCommandParser` class to parse the command arguments."},{"lineNumber":562,"author":{"gitID":"CYX28"},"content":". The `TaskAddCommandParser` class parses the arguments and create a new `TaskAddCommand` class."},{"lineNumber":563,"author":{"gitID":"CYX28"},"content":". The `task-add` command is executed and handled by the `ModelManager` class."},{"lineNumber":564,"author":{"gitID":"CYX28"},"content":". The task is added to the list of tasks in Address Book and displayed to the user."},{"lineNumber":565,"author":{"gitID":"CYX28"},"content":"// end::task-add[]"},{"lineNumber":566,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":567,"author":{"gitID":"CYX28"},"content":"// tag::task-delete[]"},{"lineNumber":568,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Delete Task feature"},{"lineNumber":569,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"CYX28"},"content":"The delete task feature allows user to delete any done, overdue or unwanted task from the Address Book by specifying"},{"lineNumber":572,"author":{"gitID":"CYX28"},"content":"the task\u0027s index in the displayed Task List."},{"lineNumber":573,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":574,"author":{"gitID":"CYX28"},"content":"The following sequence diagram shows how the delete task operation works."},{"lineNumber":575,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":576,"author":{"gitID":"CYX28"},"content":"image::TaskDeleteSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":577,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":578,"author":{"gitID":"CYX28"},"content":". The user executes the `task-delete` command and specify the required argument."},{"lineNumber":579,"author":{"gitID":"CYX28"},"content":". The `AddressBookParser` class creates a new `TaskDeleteCommandParser` class to parse the command argument."},{"lineNumber":580,"author":{"gitID":"CYX28"},"content":". The `TaskDeleteCommandParser` class parses the argument and create a new `TaskDeleteCommand` class."},{"lineNumber":581,"author":{"gitID":"CYX28"},"content":". The `task-delete` command is executed and handled by the `ModelManager` class."},{"lineNumber":582,"author":{"gitID":"CYX28"},"content":". The task is removed from the list of tasks in Address Book and the updated task list is displayed to the user."},{"lineNumber":583,"author":{"gitID":"CYX28"},"content":"// end::task-delete[]"},{"lineNumber":584,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":585,"author":{"gitID":"CYX28"},"content":"// tag::task-edit[]"},{"lineNumber":586,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Edit Task feature"},{"lineNumber":587,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"CYX28"},"content":"The edit task feature allows user to edit any fields of an existing task in the AddressBook by specifying"},{"lineNumber":590,"author":{"gitID":"CYX28"},"content":"the task\u0027s index in the displayed Task List followed by the parameters of the fields to be edited."},{"lineNumber":591,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":592,"author":{"gitID":"CYX28"},"content":"The following sequence diagram shows how the edit task operation works."},{"lineNumber":593,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":594,"author":{"gitID":"CYX28"},"content":"image::TaskEditSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":595,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":596,"author":{"gitID":"CYX28"},"content":". The user executes the `task-edit` command and specify the required arguments."},{"lineNumber":597,"author":{"gitID":"CYX28"},"content":". The `AddressBookParser` class creates a new `TaskEditCommandParser` class to parse the command arguments."},{"lineNumber":598,"author":{"gitID":"CYX28"},"content":". The `TaskEditCommandParser` class parses the arguments and create a new `TaskEditCommand` class."},{"lineNumber":599,"author":{"gitID":"CYX28"},"content":". The `task-edit` command is executed and handled by the `ModelManager` class."},{"lineNumber":600,"author":{"gitID":"CYX28"},"content":". The task is updated with the new values and the updated task list is displayed to the user."},{"lineNumber":601,"author":{"gitID":"CYX28"},"content":"// end::task-edit[]"},{"lineNumber":602,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":603,"author":{"gitID":"CYX28"},"content":"// tag::task-find[]"},{"lineNumber":604,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Find Tasks feature"},{"lineNumber":605,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":606,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":607,"author":{"gitID":"CYX28"},"content":"The find tasks feature allows user to search for any task whose names contains any of the specified keywords in the Address Book."},{"lineNumber":608,"author":{"gitID":"CYX28"},"content":"The search is case-insensitive and matches partial keyword."},{"lineNumber":609,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":610,"author":{"gitID":"CYX28"},"content":"The following sequence diagram shows how the find tasks operation works."},{"lineNumber":611,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":612,"author":{"gitID":"CYX28"},"content":"image::TaskFindSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":613,"author":{"gitID":"CYX28"},"content":". The user executes the `task-find` command and specify the required argument(s)."},{"lineNumber":614,"author":{"gitID":"CYX28"},"content":". The `AddressBookParser` class creates a new `TaskFindCommandParser` class to parse the command argument(s)."},{"lineNumber":615,"author":{"gitID":"CYX28"},"content":". The `TaskFindCommandParser` class parses the argument(s) and create a new `TaskFindCommand` class."},{"lineNumber":616,"author":{"gitID":"CYX28"},"content":". The `task-find` command is executed and handled by the `ModelManager` class."},{"lineNumber":617,"author":{"gitID":"CYX28"},"content":". The list of tasks in Address Book matching the keywords is returned and displayed to the user."},{"lineNumber":618,"author":{"gitID":"CYX28"},"content":"// end::task-find[]"},{"lineNumber":619,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":620,"author":{"gitID":"CYX28"},"content":"// tag::task-list[]"},{"lineNumber":621,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d List Tasks feature"},{"lineNumber":622,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"CYX28"},"content":"The list tasks feature allows user to display all the tasks in the Address Book."},{"lineNumber":625,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":626,"author":{"gitID":"CYX28"},"content":"The following sequence diagram shows how the list tasks operation works."},{"lineNumber":627,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":628,"author":{"gitID":"CYX28"},"content":"image::TaskListSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":629,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":630,"author":{"gitID":"CYX28"},"content":". The user executes the `task-list` command."},{"lineNumber":631,"author":{"gitID":"CYX28"},"content":". The `AddressBookParser` class parses the command and creates a new `TaskListCommand` class."},{"lineNumber":632,"author":{"gitID":"CYX28"},"content":". The `task-list` command is executed and handled by the `ModelManager` class."},{"lineNumber":633,"author":{"gitID":"CYX28"},"content":". The list is returned and displayed to the user."},{"lineNumber":634,"author":{"gitID":"CYX28"},"content":"// end::task-list[]"},{"lineNumber":635,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":636,"author":{"gitID":"CYX28"},"content":"// tag::task-sort[]"},{"lineNumber":637,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Sort Tasks feature"},{"lineNumber":638,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"CYX28"},"content":"The sort mechanism sorts the tasks list based on priority."},{"lineNumber":641,"author":{"gitID":"CYX28"},"content":"It currently supports sorting in descending order of importance (i.e. high \u003e medium \u003e low)."},{"lineNumber":642,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":643,"author":{"gitID":"CYX28"},"content":"The internal details of the sort mechanism is handled by the `sortByPriority` method in `UniqueTaskList` class."},{"lineNumber":644,"author":{"gitID":"CYX28"},"content":"The sort mechanism is implemented using a custom comparator in JavaFX ObservableList `sort` method."},{"lineNumber":645,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":646,"author":{"gitID":"CYX28"},"content":"The following sequence diagram shows how the sort tasks operation works."},{"lineNumber":647,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":648,"author":{"gitID":"CYX28"},"content":"image::TaskSortSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":649,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":650,"author":{"gitID":"CYX28"},"content":". The user executes the `task-sort` command."},{"lineNumber":651,"author":{"gitID":"CYX28"},"content":". The `AddressBookParser` class parses the command and create a new `TaskSortCommand` class."},{"lineNumber":652,"author":{"gitID":"CYX28"},"content":". The `task-sort` command is executed and handled by the `ModelManager` class."},{"lineNumber":653,"author":{"gitID":"CYX28"},"content":". The sorted list is returned and displayed to the user."},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `TaskSortCommand`"},{"lineNumber":658,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":659,"author":{"gitID":"CYX28"},"content":"* **Alternative 1 (current choice):** Sort tasks by priority"},{"lineNumber":660,"author":{"gitID":"CYX28"},"content":"** Pros: Easy to implement and does not need to make changes for every newly added field"},{"lineNumber":661,"author":{"gitID":"CYX28"},"content":"** Cons: Lack flexibility in sorting by other fields"},{"lineNumber":662,"author":{"gitID":"CYX28"},"content":"* **Alternative 2:** Sort tasks by other fields of a task such as name"},{"lineNumber":663,"author":{"gitID":"CYX28"},"content":"** Pros: Allows flexibility in sorting"},{"lineNumber":664,"author":{"gitID":"CYX28"},"content":"** Cons: Might be more difficult to implement as changes need to be made for every newly added field"},{"lineNumber":665,"author":{"gitID":"CYX28"},"content":"// end::task-sort[]"},{"lineNumber":666,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Convert currency feature"},{"lineNumber":668,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"The convert currency feature allows user to convert from one currency to another."},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the converting of currency feature operation works."},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"image::ConvertCurrencySequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":". The user executes the `convert` command."},{"lineNumber":677,"author":{"gitID":"-"},"content":". The `AddressBookParser` class parses the command creates a new `ConvertCommand` class."},{"lineNumber":678,"author":{"gitID":"-"},"content":". The `convert` command is executed and assisted by the `Currency` class."},{"lineNumber":679,"author":{"gitID":"-"},"content":". The converted value is returned and displayed to the user."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":693,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":694,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":699,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":700,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":701,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":704,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":713,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":718,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":731,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":732,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":733,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":736,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":739,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":746,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":751,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":758,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":771,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":772,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":773,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":774,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":775,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":776,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":777,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":778,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":779,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":783,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":786,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":803,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":810,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":811,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":812,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":817,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":818,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":821,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":822,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":831,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":836,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":841,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":844,"author":{"gitID":"-"},"content":"+"},{"lineNumber":845,"author":{"gitID":"-"},"content":"****"},{"lineNumber":846,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":847,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":848,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":849,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":850,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":851,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":852,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":853,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":854,"author":{"gitID":"-"},"content":"****"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":857,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":862,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":865,"author":{"gitID":"-"},"content":"+"},{"lineNumber":866,"author":{"gitID":"-"},"content":"****"},{"lineNumber":867,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":868,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":869,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":870,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":871,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":872,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":873,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":874,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":875,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":876,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":877,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":878,"author":{"gitID":"-"},"content":"****"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":881,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":886,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":889,"author":{"gitID":"-"},"content":"+"},{"lineNumber":890,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":891,"author":{"gitID":"-"},"content":"+"},{"lineNumber":892,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":893,"author":{"gitID":"-"},"content":"+"},{"lineNumber":894,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":895,"author":{"gitID":"-"},"content":"+"},{"lineNumber":896,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":897,"author":{"gitID":"-"},"content":"+"},{"lineNumber":898,"author":{"gitID":"-"},"content":"****"},{"lineNumber":899,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":900,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":901,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":902,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":903,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":904,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":905,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":906,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":907,"author":{"gitID":"-"},"content":"****"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":910,"author":{"gitID":"-"},"content":"+"},{"lineNumber":911,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":912,"author":{"gitID":"-"},"content":"+"},{"lineNumber":913,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":914,"author":{"gitID":"-"},"content":"+"},{"lineNumber":915,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":916,"author":{"gitID":"-"},"content":"+"},{"lineNumber":917,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":918,"author":{"gitID":"-"},"content":"+"},{"lineNumber":919,"author":{"gitID":"-"},"content":"****"},{"lineNumber":920,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":921,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":922,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":923,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":924,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":925,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":926,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":927,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":928,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":929,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":930,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":931,"author":{"gitID":"-"},"content":"****"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":934,"author":{"gitID":"-"},"content":"+"},{"lineNumber":935,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":936,"author":{"gitID":"-"},"content":"+"},{"lineNumber":937,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":938,"author":{"gitID":"-"},"content":"+"},{"lineNumber":939,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":940,"author":{"gitID":"-"},"content":"+"},{"lineNumber":941,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":942,"author":{"gitID":"-"},"content":"+"},{"lineNumber":943,"author":{"gitID":"-"},"content":"****"},{"lineNumber":944,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":945,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":946,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":947,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":948,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":949,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":950,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":951,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":952,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":953,"author":{"gitID":"-"},"content":"****"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":956,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":961,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":964,"author":{"gitID":"-"},"content":"+"},{"lineNumber":965,"author":{"gitID":"-"},"content":"****"},{"lineNumber":966,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":967,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":968,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":969,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":970,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":971,"author":{"gitID":"-"},"content":"****"},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":974,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":981,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":982,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":987,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":988,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":989,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":994,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":999,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1004,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1012,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1013,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1018,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1020,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1028,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1040,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1052,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1053,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1072,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"CYX28"},"content":"Our Address Book aims to target busy businessmen who have to travel frequently on business trips and meetings,"},{"lineNumber":1106,"author":{"gitID":"CYX28"},"content":"but also loves to travel. The Address Book will allow the businessmen to manage their large number of contacts and"},{"lineNumber":1107,"author":{"gitID":"CYX28"},"content":"note down the tasks to be done, as well as a calendar for them to record important events and check their schedule."},{"lineNumber":1108,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"CYX28"},"content":"*Value proposition*:"},{"lineNumber":1116,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1117,"author":{"gitID":"CYX28"},"content":"* manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":1118,"author":{"gitID":"CYX28"},"content":"* manage contacts, tasks and events from one place"},{"lineNumber":1119,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1120,"author":{"gitID":"CYX28"},"content":"*Feature contribution*:"},{"lineNumber":1121,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1122,"author":{"gitID":"CYX28"},"content":"* Chan Yin Xin"},{"lineNumber":1123,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1124,"author":{"gitID":"CYX28"},"content":"Major: Implement task/to-do list feature to facilitate task management"},{"lineNumber":1125,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1126,"author":{"gitID":"CYX28"},"content":"Every task will have a priority level and status, allowing the easy tracking of tasks."},{"lineNumber":1127,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1128,"author":{"gitID":"CYX28"},"content":"Minor: Sort contacts by name"},{"lineNumber":1129,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1130,"author":{"gitID":"CYX28"},"content":"This enables easy viewing of multiple contacts that span across different alphabets that are in sequential order. For example, looking for contacts starting with NTU, then NUS."},{"lineNumber":1131,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1132,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1133,"author":{"gitID":"CYX28"},"content":"* Lee De Zhang"},{"lineNumber":1134,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1135,"author":{"gitID":"CYX28"},"content":"Major: Profile picture feature"},{"lineNumber":1136,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1137,"author":{"gitID":"CYX28"},"content":"As the businessman meet a lot of people, the profile picture allows them to recognise a contact more easily."},{"lineNumber":1138,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1139,"author":{"gitID":"CYX28"},"content":"Minor: Delete contacts by name"},{"lineNumber":1140,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1141,"author":{"gitID":"CYX28"},"content":"It is more convenient to delete the contacts by name when there are a lot of contacts."},{"lineNumber":1142,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1143,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1144,"author":{"gitID":"CYX28"},"content":"* Tan Yong He"},{"lineNumber":1145,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1146,"author":{"gitID":"CYX28"},"content":"Major: Calendar view feature to check summarised schedule for the month."},{"lineNumber":1147,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1148,"author":{"gitID":"CYX28"},"content":"Minor: Export and Import features for address book portability to google contacts."},{"lineNumber":1149,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1150,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1151,"author":{"gitID":"CYX28"},"content":"* Jillian Wee"},{"lineNumber":1152,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1153,"author":{"gitID":"CYX28"},"content":"Major: Currency converter feature to convert from one currency to another easily."},{"lineNumber":1154,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1155,"author":{"gitID":"CYX28"},"content":"Minor: Search by name"},{"lineNumber":1156,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1157,"author":{"gitID":"CYX28"},"content":"This is not limited to full word but also partial word, so that the businessman can easily find and retrieve"},{"lineNumber":1158,"author":{"gitID":"CYX28"},"content":"a contact\u0027s details."},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1161,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1168,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":"|`* * *` |traveler |add a new person |keep all my important contacts in case of an emergency"},{"lineNumber":1171,"author":{"gitID":"-"},"content":""},{"lineNumber":1172,"author":{"gitID":"-"},"content":"|`* * *` |traveler |edit a person details| so that it is up-to-date"},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"|`* * *` |traveler |find a person by name | locate details of persons without having to go through the entire list"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"|`* * *` |traveler |find a person by tag |  locate details of tags without having to go through the entire list"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"|`* * *` |businessman |find a person by company |locate details of companies without having to go through the entire list"},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"CYX28"},"content":"|`* * *` |businessman with constantly changing networks |delete a person |remove entries that I no longer need"},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"CYX28"},"content":"|`* * *` |businessman with many contacts |sort persons by name |easily view the details of people in sequential order"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"CYX28"},"content":"|`* * *` |businessman with many contacts |sort persons by tag |easily view the details of persons with tag of interest"},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":"|`* * *` |traveler |add event to my calender|receive a reminder on those dates (eg. Birthdays, Meetings)"},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"|`* * *` |traveler |edit event |so that it is up-to-date"},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"|`* * *` |traveler |receive email notification |get reminded before the event is about to occur"},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"|`* * *` |traveler |receive in-app notification |get reminder before the event is about to occur"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"|`* * *` |traveler and businessman|can convert from one currency to another | calculate the amount needed to exchange"},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"|`* * *` |traveler |add a post |to record my journey and reference back to it in future"},{"lineNumber":1197,"author":{"gitID":"-"},"content":""},{"lineNumber":1198,"author":{"gitID":"-"},"content":"|`* * *` |traveler |edit a post |makes changes or add more information"},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"-"},"content":"|`* * *` |traveler |list all the post |to view all the post that are posted"},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"|`* * *` |traveler |find the post by title| locate details of tags without having to go through the entire list"},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"|`* * *` |traveler and businessman |suggest possible words to type in the input |aid with the search"},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"x3tsunayh"},"content":"|`* * *` |traveler and businessman |have my own user profile |for easy contact-sharing purposes"},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"x3tsunayh"},"content":"|`* * *` |traveler and businessman |edit my user profile |it is kept up-to-date"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"CYX28"},"content":"|`* * *` |traveler and businessman |add a new task |to keep track what I need to do"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"CYX28"},"content":"|`* * *` |traveler and businessman |list all tasks | to view my current tasks"},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"CYX28"},"content":"|`* * *` |traveler and businessman |delete a task | remove completed tasks"},{"lineNumber":1215,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1216,"author":{"gitID":"CYX28"},"content":"|`* * *` |traveler and businessman |sort all tasks by priority  | easily view all the tasks by importance."},{"lineNumber":1217,"author":{"gitID":"-"},"content":""},{"lineNumber":1218,"author":{"gitID":"CYX28"},"content":"|`* * *` |traveler and businessman |find a task by name  | easily locate tasks without having to go through the entire task list."},{"lineNumber":1219,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1220,"author":{"gitID":"CYX28"},"content":"|`* * *` |traveler and businessman |edit a task  | keep it updated."},{"lineNumber":1221,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"|`* * *` |traveler and businessman |convert a sentence or word from one language to another |understand both language at the same time"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"|`* *` |traveler and businessman |subscribe to event |get more information about the event"},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"CYX28"},"content":"|`* *` |traveler and businessman |subscribe to mailing list | receive the latest events of interest"},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":"|`* *` |businessman |convert from one timezone to another |know the working hours of a person in a different time zone to facilitate business communication"},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"-"},"content":"|`* *` |traveler |display a motivational code |keeps motivated and going"},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"|`* *` |traveler and businessman |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"x3tsunayh"},"content":"|`* *` |careful businessman|export data |to keep as emergency backup"},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"x3tsunayh"},"content":"|`* *` |impatient businessman |import data | to port over different devices easily"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1251,"author":{"gitID":"-"},"content":""},{"lineNumber":1252,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1254,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1255,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1256,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1257,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1258,"author":{"gitID":"-"},"content":""},{"lineNumber":1259,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1262,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1263,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1267,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1268,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1270,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"x3tsunayh"},"content":"[discrete]"},{"lineNumber":1274,"author":{"gitID":"x3tsunayh"},"content":"\u003d\u003d\u003d Use case: Export filepath\\filename"},{"lineNumber":1275,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":1276,"author":{"gitID":"x3tsunayh"},"content":"*MSS*"},{"lineNumber":1277,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":1278,"author":{"gitID":"x3tsunayh"},"content":"1.  User requests to export Addressbook data to user-defined filepath and filename"},{"lineNumber":1279,"author":{"gitID":"x3tsunayh"},"content":"2.  AddressBook exports XML file to provided location"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1286,"author":{"gitID":"x3tsunayh"},"content":"* 1a. The given filename is invalid."},{"lineNumber":1287,"author":{"gitID":"x3tsunayh"},"content":"+"},{"lineNumber":1288,"author":{"gitID":"x3tsunayh"},"content":"[none]"},{"lineNumber":1289,"author":{"gitID":"x3tsunayh"},"content":"** 1a1. AddressBook shows an error message."},{"lineNumber":1290,"author":{"gitID":"x3tsunayh"},"content":"+"},{"lineNumber":1291,"author":{"gitID":"x3tsunayh"},"content":"Use case ends."},{"lineNumber":1292,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":1293,"author":{"gitID":"x3tsunayh"},"content":"* 1b. Only filename is given."},{"lineNumber":1294,"author":{"gitID":"x3tsunayh"},"content":"+"},{"lineNumber":1295,"author":{"gitID":"x3tsunayh"},"content":"[none]"},{"lineNumber":1296,"author":{"gitID":"x3tsunayh"},"content":"** 1b1. XML file is exported to Addressbook\u0027s main folder."},{"lineNumber":1297,"author":{"gitID":"x3tsunayh"},"content":"+"},{"lineNumber":1298,"author":{"gitID":"x3tsunayh"},"content":"Use case ends."},{"lineNumber":1299,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":1300,"author":{"gitID":"x3tsunayh"},"content":"* 1c. Filepaths are not created yet."},{"lineNumber":1301,"author":{"gitID":"x3tsunayh"},"content":"+"},{"lineNumber":1302,"author":{"gitID":"x3tsunayh"},"content":"[none]"},{"lineNumber":1303,"author":{"gitID":"x3tsunayh"},"content":"** 1c1. Creates necessary folders and files as indicated in the export filepath."},{"lineNumber":1304,"author":{"gitID":"x3tsunayh"},"content":"+"},{"lineNumber":1305,"author":{"gitID":"x3tsunayh"},"content":"Use case ends."},{"lineNumber":1306,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":1307,"author":{"gitID":"x3tsunayh"},"content":"* 1d. A file with the same name exists."},{"lineNumber":1308,"author":{"gitID":"x3tsunayh"},"content":"+"},{"lineNumber":1309,"author":{"gitID":"x3tsunayh"},"content":"[none]"},{"lineNumber":1310,"author":{"gitID":"x3tsunayh"},"content":"** 1d1. AddressBook warns the user with an error message."},{"lineNumber":1311,"author":{"gitID":"x3tsunayh"},"content":"+"},{"lineNumber":1312,"author":{"gitID":"x3tsunayh"},"content":"Use case ends."},{"lineNumber":1313,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":1314,"author":{"gitID":"CYX28"},"content":"[discrete]"},{"lineNumber":1315,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Use case: Sort all persons by name"},{"lineNumber":1316,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1317,"author":{"gitID":"CYX28"},"content":"*MSS*"},{"lineNumber":1318,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1319,"author":{"gitID":"CYX28"},"content":"1.  User requests to sort all persons in AddressBook"},{"lineNumber":1320,"author":{"gitID":"CYX28"},"content":"2.  AddressBook sorts the list of persons alphabetically by name in ascending order"},{"lineNumber":1321,"author":{"gitID":"CYX28"},"content":"3.  AddressBook shows a list of sorted persons"},{"lineNumber":1322,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1328,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1329,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1330,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"CYX28"},"content":"[discrete]"},{"lineNumber":1333,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Use case: Add task"},{"lineNumber":1334,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1335,"author":{"gitID":"CYX28"},"content":"*MSS*"},{"lineNumber":1336,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1337,"author":{"gitID":"CYX28"},"content":"1.  User requests to add a new task"},{"lineNumber":1338,"author":{"gitID":"CYX28"},"content":"2.  User enters command with required parameters"},{"lineNumber":1339,"author":{"gitID":"CYX28"},"content":"3.  AddressBook adds the new task and updates the list of tasks"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1341,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1346,"author":{"gitID":"CYX28"},"content":"* 2a. The command is incorrectly entered."},{"lineNumber":1347,"author":{"gitID":"CYX28"},"content":"+"},{"lineNumber":1348,"author":{"gitID":"CYX28"},"content":"[none]"},{"lineNumber":1349,"author":{"gitID":"CYX28"},"content":"** 2a1. AddressBook shows an error message."},{"lineNumber":1350,"author":{"gitID":"CYX28"},"content":"+"},{"lineNumber":1351,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"CYX28"},"content":"[discrete]"},{"lineNumber":1354,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Use case: Delete task"},{"lineNumber":1355,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1356,"author":{"gitID":"CYX28"},"content":"*MSS*"},{"lineNumber":1357,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1358,"author":{"gitID":"CYX28"},"content":"1.  User requests to list tasks"},{"lineNumber":1359,"author":{"gitID":"CYX28"},"content":"2.  AddressBook shows a list of tasks"},{"lineNumber":1360,"author":{"gitID":"CYX28"},"content":"3.  User requests to delete a specific task in the list"},{"lineNumber":1361,"author":{"gitID":"CYX28"},"content":"4.  AddressBook deletes the task"},{"lineNumber":1362,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1363,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1366,"author":{"gitID":"-"},"content":""},{"lineNumber":1367,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1368,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1369,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1370,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1371,"author":{"gitID":"-"},"content":""},{"lineNumber":1372,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1373,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1374,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1376,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1377,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1378,"author":{"gitID":"-"},"content":""},{"lineNumber":1379,"author":{"gitID":"CYX28"},"content":"[discrete]"},{"lineNumber":1380,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Use case: Edit task"},{"lineNumber":1381,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1382,"author":{"gitID":"CYX28"},"content":"*MSS*"},{"lineNumber":1383,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1384,"author":{"gitID":"CYX28"},"content":"1.  User requests to list tasks"},{"lineNumber":1385,"author":{"gitID":"CYX28"},"content":"2.  AddressBook shows a list of tasks"},{"lineNumber":1386,"author":{"gitID":"CYX28"},"content":"3.  User requests to edit a specific task in the list by specifying the task\u0027s index and necessary parameters"},{"lineNumber":1387,"author":{"gitID":"CYX28"},"content":"4.  AddressBook updates the task"},{"lineNumber":1388,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1394,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1395,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1396,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1397,"author":{"gitID":"-"},"content":""},{"lineNumber":1398,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1399,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1400,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1401,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1402,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1403,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1404,"author":{"gitID":"-"},"content":""},{"lineNumber":1405,"author":{"gitID":"CYX28"},"content":"* 3b. The given parameters are invalid."},{"lineNumber":1406,"author":{"gitID":"CYX28"},"content":"+"},{"lineNumber":1407,"author":{"gitID":"CYX28"},"content":"[none]"},{"lineNumber":1408,"author":{"gitID":"CYX28"},"content":"** 3b1. AddressBook shows an error message."},{"lineNumber":1409,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1410,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1411,"author":{"gitID":"-"},"content":""},{"lineNumber":1412,"author":{"gitID":"CYX28"},"content":"[discrete]"},{"lineNumber":1413,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Use case: Find tasks"},{"lineNumber":1414,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1415,"author":{"gitID":"CYX28"},"content":"*MSS*"},{"lineNumber":1416,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1417,"author":{"gitID":"CYX28"},"content":"1.  User requests to find tasks containing specified keywords"},{"lineNumber":1418,"author":{"gitID":"CYX28"},"content":"2.  AddressBook shows a list of tasks matching the keywords"},{"lineNumber":1419,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1420,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1421,"author":{"gitID":"-"},"content":""},{"lineNumber":1422,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1423,"author":{"gitID":"-"},"content":""},{"lineNumber":1424,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1425,"author":{"gitID":"CYX28"},"content":"* 2a. The list is empty as no matching task."},{"lineNumber":1426,"author":{"gitID":"CYX28"},"content":"+"},{"lineNumber":1427,"author":{"gitID":"CYX28"},"content":"Use case ends."},{"lineNumber":1428,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1429,"author":{"gitID":"CYX28"},"content":"[discrete]"},{"lineNumber":1430,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Use case: List all tasks"},{"lineNumber":1431,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1432,"author":{"gitID":"CYX28"},"content":"*MSS*"},{"lineNumber":1433,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1434,"author":{"gitID":"CYX28"},"content":"1.  User requests to list tasks"},{"lineNumber":1435,"author":{"gitID":"CYX28"},"content":"2.  AddressBook shows a list of tasks"},{"lineNumber":1436,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1437,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1438,"author":{"gitID":"-"},"content":""},{"lineNumber":1439,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1440,"author":{"gitID":"-"},"content":""},{"lineNumber":1441,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1442,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1443,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1444,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1445,"author":{"gitID":"-"},"content":""},{"lineNumber":1446,"author":{"gitID":"CYX28"},"content":"[discrete]"},{"lineNumber":1447,"author":{"gitID":"CYX28"},"content":"\u003d\u003d\u003d Use case: Sort all tasks by priority"},{"lineNumber":1448,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1449,"author":{"gitID":"CYX28"},"content":"*MSS*"},{"lineNumber":1450,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":1451,"author":{"gitID":"CYX28"},"content":"1.  User requests to sort all tasks in AddressBook"},{"lineNumber":1452,"author":{"gitID":"CYX28"},"content":"2.  AddressBook sorts the list of tasks by priority in decreasing order of importance (i.e. high \u003e medium \u003e low)"},{"lineNumber":1453,"author":{"gitID":"CYX28"},"content":"3.  AddressBook shows a list of sorted tasks"},{"lineNumber":1454,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1455,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1456,"author":{"gitID":"-"},"content":""},{"lineNumber":1457,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1458,"author":{"gitID":"-"},"content":""},{"lineNumber":1459,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1460,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1461,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1462,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1463,"author":{"gitID":"-"},"content":""},{"lineNumber":1464,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1465,"author":{"gitID":"-"},"content":""},{"lineNumber":1466,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1467,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1468,"author":{"gitID":"-"},"content":""},{"lineNumber":1469,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1470,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1471,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1472,"author":{"gitID":"-"},"content":""},{"lineNumber":1473,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1474,"author":{"gitID":"-"},"content":""},{"lineNumber":1475,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1476,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1477,"author":{"gitID":"-"},"content":""},{"lineNumber":1478,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1479,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1480,"author":{"gitID":"-"},"content":""},{"lineNumber":1481,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1482,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1483,"author":{"gitID":"-"},"content":""},{"lineNumber":1484,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1485,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1488,"author":{"gitID":"-"},"content":""},{"lineNumber":1489,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1490,"author":{"gitID":"-"},"content":""},{"lineNumber":1491,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1492,"author":{"gitID":"-"},"content":""},{"lineNumber":1493,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1494,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1495,"author":{"gitID":"-"},"content":""},{"lineNumber":1496,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1497,"author":{"gitID":"-"},"content":""},{"lineNumber":1498,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1499,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1500,"author":{"gitID":"-"},"content":""},{"lineNumber":1501,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1502,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1503,"author":{"gitID":"-"},"content":""},{"lineNumber":1504,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1505,"author":{"gitID":"-"},"content":""},{"lineNumber":1506,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1507,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1508,"author":{"gitID":"-"},"content":""},{"lineNumber":1509,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1510,"author":{"gitID":"-"},"content":""},{"lineNumber":1511,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1512,"author":{"gitID":"-"},"content":""},{"lineNumber":1513,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1514,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1515,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1516,"author":{"gitID":"-"},"content":""},{"lineNumber":1517,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1518,"author":{"gitID":"-"},"content":""},{"lineNumber":1519,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1520,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1521,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1522,"author":{"gitID":"-"},"content":""},{"lineNumber":1523,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1524,"author":{"gitID":"-"},"content":""},{"lineNumber":1525,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1526,"author":{"gitID":"-"},"content":""},{"lineNumber":1527,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1528,"author":{"gitID":"-"},"content":""},{"lineNumber":1529,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1530,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1531,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1532,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1533,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1534,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1535,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1536,"author":{"gitID":"-"},"content":""},{"lineNumber":1537,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1538,"author":{"gitID":"-"},"content":""},{"lineNumber":1539,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1540,"author":{"gitID":"-"},"content":""},{"lineNumber":1541,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1542,"author":{"gitID":"-"},"content":""},{"lineNumber":1543,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1544,"author":{"gitID":"-"},"content":""},{"lineNumber":1545,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"CYX28":264,"x3tsunayh":65,"-":1167,"dezhanglee":49}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"    /*"},{"lineNumber":5,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":3,"-":31}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), (model.getEventBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":"        ModelHelper.setTaskFilteredList(copy, model.getFilteredTaskList());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":1,"-":122}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"import seedu.address.storage.XmlAdaptedTask;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"import seedu.address.storage.XmlAdaptedTaskCategory;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    private static final File MISSING_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingTaskField.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    private static final File INVALID_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskField.xml\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    private static final File VALID_TASK_FILE \u003d new File(TEST_DATA_FOLDER + \"validTask.xml\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    private static final String INVALID_TASK_DUE_DATE \u003d \"2018-02-31\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"    private static final String VALID_TASK_NAME \u003d \"Task 200\";"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    private static final String VALID_TASK_PRIORITY \u003d \"high\";"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    private static final String VALID_TASK_DESCRIPTION \u003d \"(1) Business Proposal (2) Implementation details\";"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    private static final String VALID_TASK_DUE_DATE \u003d \"2018-05-25\";"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    private static final String VALID_TASK_STATUS \u003d \"undone\";"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    private static final List\u003cXmlAdaptedTaskCategory\u003e VALID_TASK_CATEGORIES \u003d"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"            Collections.singletonList(new XmlAdaptedTaskCategory(\"Work\"));"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        assertEquals(2, dataFromFile.getTaskList().size());"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"        assertEquals(2, dataFromFile.getTaskCategoryList().size());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"    public void xmlAdaptedTaskFromFile_fileWithMissingTaskField_validResult() throws Exception {"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"                MISSING_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask(null, VALID_TASK_PRIORITY, VALID_TASK_DESCRIPTION,"},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":"                VALID_TASK_DUE_DATE, VALID_TASK_STATUS, VALID_TASK_CATEGORIES);"},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"    public void xmlAdaptedTaskFromFile_fileWithInvalidTaskField_validResult() throws Exception {"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"                INVALID_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask(VALID_TASK_NAME, VALID_TASK_PRIORITY, VALID_TASK_DESCRIPTION,"},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"                INVALID_TASK_DUE_DATE, VALID_TASK_STATUS, VALID_TASK_CATEGORIES);"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":137,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":139,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":144,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"CYX28"},"content":"    public void xmlAdaptedTaskFromFile_fileWithValidTask_validResult() throws Exception {"},{"lineNumber":146,"author":{"gitID":"CYX28"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":147,"author":{"gitID":"CYX28"},"content":"                VALID_TASK_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":148,"author":{"gitID":"CYX28"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask(VALID_TASK_NAME, VALID_TASK_PRIORITY, VALID_TASK_DESCRIPTION,"},{"lineNumber":149,"author":{"gitID":"CYX28"},"content":"                VALID_TASK_DUE_DATE, VALID_TASK_STATUS, VALID_TASK_CATEGORIES);"},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":153,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":182,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":195,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":196,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"CYX28"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedTask}"},{"lineNumber":198,"author":{"gitID":"CYX28"},"content":"     * objects."},{"lineNumber":199,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"CYX28"},"content":"    @XmlRootElement(name \u003d \"task\")"},{"lineNumber":201,"author":{"gitID":"CYX28"},"content":"    private static class XmlAdaptedTaskWithRootElement extends XmlAdaptedTask {}"},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":59,"-":143}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.storage.XmlEventBookStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    private XmlAddressBookStorage addressBookStorage;"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    private JsonUserPrefsStorage userPrefsStorage;"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    private Model model;"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    private Storage storage;"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    private Logic logic;"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    private UserPrefs userPrefs;"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    @Before"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"    public void setUp() {"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        addressBookStorage \u003d new XmlAddressBookStorage(getFilePath(\"ab.xml\"));"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        XmlEventBookStorage eventBookStorage \u003d new XmlEventBookStorage(getFilePath(\"eb.xml\"));"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        userPrefsStorage \u003d new JsonUserPrefsStorage(getFilePath(\"prefs.json\"));"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"        model \u003d new ModelManager();"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        logic \u003d new LogicManager(model, storage, userPrefs);"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"    private String getFilePath(String fileName) {"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":132,"author":{"gitID":"x3tsunayh"},"content":"        } catch (CommandException | IllegalValueException e) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":148,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":150,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IllegalValueException | CommandException e) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":32,"-":122}},{"path":"src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", e);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":5,"-":34}},{"path":"src/test/java/seedu/address/logic/parser/FindEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.FindEventCommand;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.TitleContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"public class FindEventCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    private FindEventCommandParser parser \u003d new FindEventCommandParser();"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"        // empty input not allowed"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"                FindEventCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"        FindEventCommand expectedFindCommand \u003d"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"                new FindEventCommand(new TitleContainsKeywordsPredicate(Arrays.asList(\"CNY\", \"Christmas\")));"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"        // multiple keywords allowed"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        assertParseSuccess(parser, \"et/CNY Christmas\", expectedFindCommand);"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        // multiple whitespaces allowed"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        assertParseSuccess(parser, \"et/ \\n CNY \\n \\t Christmas  \\t\", expectedFindCommand);"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":27,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATETIME_DESC_CHRISTMAS;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATETIME_DESC_CNY;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHRISTMAS;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CNY;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_CHRISTMAS;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_CNY;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CHRISTMAS;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CNY;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_CHRISTMAS;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_CNY;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHRISTMAS;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CNY;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_CHRISTMAS;"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_CNY;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CHRISTMAS;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CNY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Datetime;"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"public class AddEventCommandParserTest {"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    private AddEventCommandParser parser \u003d new AddEventCommandParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        Event expectedEvent \u003d new EventBuilder().withTitle(VALID_TITLE_CHRISTMAS)"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"                .withDescription(VALID_DESCRIPTION_CHRISTMAS)"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"                .withLocation(VALID_LOCATION_CHRISTMAS).withDatetime(VALID_DATETIME_CHRISTMAS).build();"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        // situation: multiple titles - latest title accepted"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"        assertParseSuccess(parser, TITLE_DESC_CNY + TITLE_DESC_CHRISTMAS + DESCRIPTION_DESC_CHRISTMAS"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"                + LOCATION_DESC_CHRISTMAS + DATETIME_DESC_CHRISTMAS, new AddEventCommand(expectedEvent));"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        // situation: multiple description - latest description accepted"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        assertParseSuccess(parser, TITLE_DESC_CHRISTMAS + DESCRIPTION_DESC_CNY + DESCRIPTION_DESC_CHRISTMAS"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"                + LOCATION_DESC_CHRISTMAS + DATETIME_DESC_CHRISTMAS, new AddEventCommand(expectedEvent));"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        // situation: multiple locations - latest location accepted"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"        assertParseSuccess(parser, TITLE_DESC_CHRISTMAS + DESCRIPTION_DESC_CHRISTMAS + LOCATION_DESC_CNY"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"                + LOCATION_DESC_CHRISTMAS + DATETIME_DESC_CHRISTMAS, new AddEventCommand(expectedEvent));"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        // situation: multiple datetime - latest datetime accepted"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"        assertParseSuccess(parser, TITLE_DESC_CHRISTMAS + DESCRIPTION_DESC_CHRISTMAS + LOCATION_DESC_CHRISTMAS"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"                + DATETIME_DESC_CNY + DATETIME_DESC_CHRISTMAS, new AddEventCommand(expectedEvent));"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        Event expectedEvent \u003d new EventBuilder().withTitle(VALID_TITLE_CNY)"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"                .withDescription(VALID_DESCRIPTION_CNY)"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"                .withLocation(VALID_LOCATION_CNY).withDatetime(VALID_DATETIME_CNY).build();"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"        assertParseSuccess(parser, TITLE_DESC_CNY + DESCRIPTION_DESC_CNY"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"                + LOCATION_DESC_CNY + DATETIME_DESC_CNY, new AddEventCommand(expectedEvent));"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"        // missing title prefix"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"        assertParseFailure(parser, VALID_TITLE_CHRISTMAS + DESCRIPTION_DESC_CHRISTMAS"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"                + LOCATION_DESC_CHRISTMAS + DATETIME_DESC_CHRISTMAS, expectedMessage);"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"        // missing description prefix"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"        assertParseFailure(parser, TITLE_DESC_CHRISTMAS + VALID_DESCRIPTION_CHRISTMAS"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"                + LOCATION_DESC_CHRISTMAS + DATETIME_DESC_CHRISTMAS, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"        // missing location prefix"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"        assertParseFailure(parser, TITLE_DESC_CHRISTMAS + DESCRIPTION_DESC_CHRISTMAS"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"                + VALID_LOCATION_CHRISTMAS + DATETIME_DESC_CHRISTMAS, expectedMessage);"},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"        // missing datetime prefix"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"        assertParseFailure(parser, TITLE_DESC_CHRISTMAS + DESCRIPTION_DESC_CHRISTMAS"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"                + LOCATION_DESC_CHRISTMAS + VALID_DATETIME_CHRISTMAS, expectedMessage);"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"        // invalid datetime"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"        assertParseFailure(parser, AddEventCommand.COMMAND_WORD + TITLE_DESC_CHRISTMAS"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"                + DESCRIPTION_DESC_CHRISTMAS + LOCATION_DESC_CHRISTMAS"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"                + INVALID_DATETIME_DESC, Datetime.MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":80,"-":19}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ConvertCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskAddCommand;"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskDeleteCommand;"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand;"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand.EditTaskDescriptor;"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskFindCommand;"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskListCommand;"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskSortCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskNameContainsKeywordsPredicate;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TaskUtil;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":76,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":85,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parseCommand_findByName() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseCommand_findByTag() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":107,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" t/\" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new TagContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parseCommand_convert() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        ConvertCommand command \u003d (ConvertCommand) parser.parseCommand("},{"lineNumber":139,"author":{"gitID":"-"},"content":"                ConvertCommand.COMMAND_WORD + \" 1 SGD USD\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(new ConvertCommand(\"SGD\", \"USD\", 1.0), command);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":146,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":"    public void parseCommand_sort() throws Exception {"},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"},{"lineNumber":153,"author":{"gitID":"CYX28"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" 3\") instanceof SortCommand);"},{"lineNumber":154,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":182,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":183,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"CYX28"},"content":"    public void parseCommand_taskAdd() throws Exception {"},{"lineNumber":185,"author":{"gitID":"CYX28"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":186,"author":{"gitID":"CYX28"},"content":"        TaskAddCommand command \u003d (TaskAddCommand) parser.parseCommand(TaskUtil.getTaskAddCommand(task));"},{"lineNumber":187,"author":{"gitID":"CYX28"},"content":"        assertEquals(new TaskAddCommand(task), command);"},{"lineNumber":188,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":190,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"CYX28"},"content":"    public void parseCommand_taskDelete() throws Exception {"},{"lineNumber":192,"author":{"gitID":"CYX28"},"content":"        TaskDeleteCommand command \u003d (TaskDeleteCommand) parser.parseCommand("},{"lineNumber":193,"author":{"gitID":"CYX28"},"content":"                TaskDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":194,"author":{"gitID":"CYX28"},"content":"        assertEquals(new TaskDeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":195,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":197,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"CYX28"},"content":"    public void parseCommand_taskEdit() throws Exception {"},{"lineNumber":199,"author":{"gitID":"CYX28"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":200,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"},{"lineNumber":201,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand command \u003d (TaskEditCommand) parser.parseCommand(TaskEditCommand.COMMAND_WORD + \" \""},{"lineNumber":202,"author":{"gitID":"CYX28"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getTaskDetails(task));"},{"lineNumber":203,"author":{"gitID":"CYX28"},"content":"        assertEquals(new TaskEditCommand(INDEX_FIRST_TASK, descriptor), command);"},{"lineNumber":204,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":206,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"CYX28"},"content":"    public void parseCommand_taskFind() throws Exception {"},{"lineNumber":208,"author":{"gitID":"CYX28"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"agenda\", \"day\", \"meet\");"},{"lineNumber":209,"author":{"gitID":"CYX28"},"content":"        TaskFindCommand command \u003d (TaskFindCommand) parser.parseCommand(TaskFindCommand.COMMAND_WORD + \" \""},{"lineNumber":210,"author":{"gitID":"CYX28"},"content":"                + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":211,"author":{"gitID":"CYX28"},"content":"        assertEquals(new TaskFindCommand(new TaskNameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":212,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":214,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"CYX28"},"content":"    public void parseCommand_taskList() throws Exception {"},{"lineNumber":216,"author":{"gitID":"CYX28"},"content":"        assertTrue(parser.parseCommand(TaskListCommand.COMMAND_WORD) instanceof TaskListCommand);"},{"lineNumber":217,"author":{"gitID":"CYX28"},"content":"        assertTrue(parser.parseCommand(TaskListCommand.COMMAND_WORD + \" 5\") instanceof TaskListCommand);"},{"lineNumber":218,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":220,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"CYX28"},"content":"    public void parseCommand_taskSort() throws Exception {"},{"lineNumber":222,"author":{"gitID":"CYX28"},"content":"        assertTrue(parser.parseCommand(TaskSortCommand.COMMAND_WORD) instanceof TaskSortCommand);"},{"lineNumber":223,"author":{"gitID":"CYX28"},"content":"        assertTrue(parser.parseCommand(TaskSortCommand.COMMAND_WORD + \" 5\") instanceof TaskSortCommand);"},{"lineNumber":224,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":65,"-":160}},{"path":"src/test/java/seedu/address/logic/parser/ConvertCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ConvertCommand;"},{"lineNumber":10,"author":{"gitID":"jill858"},"content":"//@@author jill858"},{"lineNumber":11,"author":{"gitID":"jill858"},"content":"public class ConvertCommandParserTest {"},{"lineNumber":12,"author":{"gitID":"jill858"},"content":""},{"lineNumber":13,"author":{"gitID":"jill858"},"content":"    private ConvertCommandParser parser \u003d new ConvertCommandParser();"},{"lineNumber":14,"author":{"gitID":"jill858"},"content":""},{"lineNumber":15,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"jill858"},"content":"    public void parse_validArgs_returnsConvertCommand() {"},{"lineNumber":17,"author":{"gitID":"jill858"},"content":"        //standard arguement"},{"lineNumber":18,"author":{"gitID":"jill858"},"content":"        assertParseSuccess(parser, \"1 SGD USD\", new ConvertCommand(\"SGD\", \"USD\", 1));"},{"lineNumber":19,"author":{"gitID":"jill858"},"content":""},{"lineNumber":20,"author":{"gitID":"jill858"},"content":"        //retrieving base rate"},{"lineNumber":21,"author":{"gitID":"jill858"},"content":"        assertParseSuccess(parser, \"SGD USD\", new ConvertCommand(\"SGD\", \"USD\", 1));"},{"lineNumber":22,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jill858"},"content":""},{"lineNumber":24,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jill858"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":26,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"  \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jill858"},"content":""},{"lineNumber":29,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"jill858"},"content":"    public void parse_invalidCurrencyCode_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"jill858"},"content":"        //invalid currency code"},{"lineNumber":32,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"SGD US\","},{"lineNumber":33,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"SG USD\","},{"lineNumber":35,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"SG US\","},{"lineNumber":37,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"jill858"},"content":""},{"lineNumber":39,"author":{"gitID":"jill858"},"content":"        //invalid number of parameter"},{"lineNumber":40,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"SGD\","},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"5\","},{"lineNumber":43,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"5 SGD\","},{"lineNumber":45,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"jill858"},"content":""},{"lineNumber":47,"author":{"gitID":"jill858"},"content":"        //invalid value"},{"lineNumber":48,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"SGD SGD USD\","},{"lineNumber":49,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"SGD 5 USD\","},{"lineNumber":51,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"SGD SGD 5\","},{"lineNumber":53,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"jill858"},"content":"        assertParseFailure(parser, \"5 5 5\","},{"lineNumber":55,"author":{"gitID":"jill858"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":48,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":24,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jill858"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":26,"author":{"gitID":"jill858"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"jill858"},"content":"        FindCommand expectedFindNameCommand \u003d"},{"lineNumber":28,"author":{"gitID":"jill858"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":29,"author":{"gitID":"jill858"},"content":"        assertParseSuccess(parser, \"n/Alice Bob\", expectedFindNameCommand);"},{"lineNumber":30,"author":{"gitID":"jill858"},"content":""},{"lineNumber":31,"author":{"gitID":"jill858"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"jill858"},"content":"        assertParseSuccess(parser, \"n/Alice \\n \\t Bob  \\t\", expectedFindNameCommand);"},{"lineNumber":33,"author":{"gitID":"jill858"},"content":""},{"lineNumber":34,"author":{"gitID":"jill858"},"content":"        FindCommand expectedFindTagCommand \u003d"},{"lineNumber":35,"author":{"gitID":"jill858"},"content":"                new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"owesMoney\", \"friends\")));"},{"lineNumber":36,"author":{"gitID":"jill858"},"content":""},{"lineNumber":37,"author":{"gitID":"jill858"},"content":"        assertParseSuccess(parser, \"t/owesMoney friends\", expectedFindTagCommand);"},{"lineNumber":38,"author":{"gitID":"jill858"},"content":""},{"lineNumber":39,"author":{"gitID":"jill858"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":40,"author":{"gitID":"jill858"},"content":"        assertParseSuccess(parser, \"t/owesMoney\\t friends  \\t\", expectedFindTagCommand);"},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":""},{"lineNumber":43,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":21,"-":22}},{"path":"src/test/java/seedu/address/logic/parser/TaskAddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_CATEGORY_DESC;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_DESCRIPTION_DESC;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_DUE_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_PRIORITY_DESC;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_STATUS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_CATEGORY_DESC_PERSONAL;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_CATEGORY_DESC_WORK;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_TASKFIRST;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_TASKSECOND;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DUE_DATE_DESC_TASKFIRST;"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DUE_DATE_DESC_TASKSECOND;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_TASKFIRST;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_TASKSECOND;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_PRIORITY_DESC_TASKFIRST;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_PRIORITY_DESC_TASKSECOND;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_STATUS_DESC_TASKFIRST;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_STATUS_DESC_TASKSECOND;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_CATEGORY_PERSONAL;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_CATEGORY_WORK;"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_TASKFIRST;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_TASKSECOND;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DUE_DATE_TASKFIRST;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DUE_DATE_TASKSECOND;"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_TASKFIRST;"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_TASKSECOND;"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_TASKFIRST;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_TASKSECOND;"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TASKFIRST;"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TASKSECOND;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskAddCommand;"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDueDate;"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskStatus;"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"public class TaskAddCommandParserTest {"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    private TaskAddCommandParser parser \u003d new TaskAddCommandParser();"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        Task expectedTask \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_TASKFIRST)"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKFIRST).withTaskDescription(VALID_TASK_DESCRIPTION_TASKFIRST)"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"                .withTaskDueDate(VALID_TASK_DUE_DATE_TASKFIRST).withTaskStatus(VALID_TASK_STATUS_TASKFIRST)"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"                .withTaskCategories(VALID_TASK_CATEGORY_WORK).build();"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        // whitespace only preamble"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKFIRST"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_PERSONAL, new TaskAddCommand(expectedTask));"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"        // multiple taskNames - last taskName accepted"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, TASK_NAME_DESC_TASKSECOND + TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKFIRST"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_PERSONAL, new TaskAddCommand(expectedTask));"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        // multiple taskPriorities - last taskPriority accepted"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKSECOND"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"                + TASK_PRIORITY_DESC_TASKFIRST + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"                + TASK_STATUS_DESC_TASKFIRST + TASK_CATEGORY_DESC_PERSONAL, new TaskAddCommand(expectedTask));"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"        // multiple taskDescriptions - last taskDescription accepted"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"                + TASK_STATUS_DESC_TASKFIRST + TASK_CATEGORY_DESC_PERSONAL, new TaskAddCommand(expectedTask));"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"        // multiple taskDueDates - last taskDueDate accepted"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKSECOND + TASK_DUE_DATE_DESC_TASKFIRST"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"                + TASK_STATUS_DESC_TASKFIRST + TASK_CATEGORY_DESC_PERSONAL, new TaskAddCommand(expectedTask));"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"        // multiple taskStatuses - last taskStatus accepted"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKSECOND"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"                + TASK_STATUS_DESC_TASKFIRST + TASK_CATEGORY_DESC_PERSONAL, new TaskAddCommand(expectedTask));"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"        // multiple taskCategories - all accepted"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"        Task expectedTaskMultipleCategories \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_TASKFIRST)"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKFIRST).withTaskDescription(VALID_TASK_DESCRIPTION_TASKFIRST)"},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"                .withTaskDueDate(VALID_TASK_DUE_DATE_TASKFIRST).withTaskStatus(VALID_TASK_STATUS_TASKFIRST)"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"                .withTaskCategories(VALID_TASK_CATEGORY_PERSONAL, VALID_TASK_CATEGORY_WORK).build();"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKFIRST"},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_PERSONAL + TASK_CATEGORY_DESC_WORK, new TaskAddCommand(expectedTask));"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"        // zero taskCategories"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        Task expectedTask \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_TASKSECOND)"},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKSECOND).withTaskDescription(VALID_TASK_DESCRIPTION_TASKSECOND)"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":"                .withTaskDueDate(VALID_TASK_DUE_DATE_TASKSECOND).withTaskStatus(VALID_TASK_STATUS_TASKSECOND)"},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":"                .withTaskCategories().build();"},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, TASK_NAME_DESC_TASKSECOND + TASK_PRIORITY_DESC_TASKSECOND"},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + TASK_DUE_DATE_DESC_TASKSECOND + TASK_STATUS_DESC_TASKSECOND,"},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"                new TaskAddCommand(expectedTask));"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":115,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskAddCommand.MESSAGE_USAGE);"},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":"        // missing taskName prefix"},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, VALID_TASK_NAME_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKSECOND,"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":"                expectedMessage);"},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"        // missing taskPriority prefix"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, TASK_NAME_DESC_TASKFIRST + VALID_TASK_PRIORITY_TASKFIRST"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKSECOND,"},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"                expectedMessage);"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"        // missing taskDescription prefix"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":"                + VALID_TASK_DESCRIPTION_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKSECOND,"},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":"                expectedMessage);"},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":134,"author":{"gitID":"CYX28"},"content":"        // missing taskDueDate prefix"},{"lineNumber":135,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":136,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + VALID_TASK_DUE_DATE_TASKFIRST + TASK_STATUS_DESC_TASKSECOND,"},{"lineNumber":137,"author":{"gitID":"CYX28"},"content":"                expectedMessage);"},{"lineNumber":138,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":139,"author":{"gitID":"CYX28"},"content":"        // missing taskStatus prefix"},{"lineNumber":140,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":141,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + TASK_DUE_DATE_DESC_TASKFIRST + VALID_TASK_STATUS_TASKFIRST,"},{"lineNumber":142,"author":{"gitID":"CYX28"},"content":"                expectedMessage);"},{"lineNumber":143,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":144,"author":{"gitID":"CYX28"},"content":"        // all prefixes missing"},{"lineNumber":145,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, VALID_TASK_NAME_TASKFIRST + VALID_TASK_PRIORITY_TASKFIRST"},{"lineNumber":146,"author":{"gitID":"CYX28"},"content":"                + VALID_TASK_DESCRIPTION_TASKFIRST + VALID_TASK_DUE_DATE_TASKFIRST + VALID_TASK_STATUS_TASKFIRST,"},{"lineNumber":147,"author":{"gitID":"CYX28"},"content":"                expectedMessage);"},{"lineNumber":148,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":"        // invalid taskName"},{"lineNumber":153,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, INVALID_TASK_NAME_DESC + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":154,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKFIRST"},{"lineNumber":155,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_PERSONAL + TASK_CATEGORY_DESC_WORK, TaskName.MESSAGE_TASK_NAME_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":157,"author":{"gitID":"CYX28"},"content":"        // invalid taskPriority"},{"lineNumber":158,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, TASK_NAME_DESC_TASKFIRST + INVALID_TASK_PRIORITY_DESC"},{"lineNumber":159,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKFIRST"},{"lineNumber":160,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_PERSONAL + TASK_CATEGORY_DESC_WORK,"},{"lineNumber":161,"author":{"gitID":"CYX28"},"content":"                TaskPriority.MESSAGE_TASK_PRIORITY_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":163,"author":{"gitID":"CYX28"},"content":"        // invalid taskDescription"},{"lineNumber":164,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":165,"author":{"gitID":"CYX28"},"content":"                + INVALID_TASK_DESCRIPTION_DESC + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKFIRST"},{"lineNumber":166,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_PERSONAL + TASK_CATEGORY_DESC_WORK,"},{"lineNumber":167,"author":{"gitID":"CYX28"},"content":"                TaskDescription.MESSAGE_TASK_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":169,"author":{"gitID":"CYX28"},"content":"        // invalid taskDueDate"},{"lineNumber":170,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":171,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + INVALID_TASK_DUE_DATE_DESC + TASK_STATUS_DESC_TASKFIRST"},{"lineNumber":172,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_PERSONAL + TASK_CATEGORY_DESC_WORK, TaskDueDate.MESSAGE_TASK_DUE_DATE_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":174,"author":{"gitID":"CYX28"},"content":"        // invalid taskStatus"},{"lineNumber":175,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":176,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + TASK_DUE_DATE_DESC_TASKFIRST + INVALID_TASK_STATUS_DESC"},{"lineNumber":177,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_PERSONAL + TASK_CATEGORY_DESC_WORK, TaskStatus.MESSAGE_TASK_STATUS_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":179,"author":{"gitID":"CYX28"},"content":"        // invalid taskCategory"},{"lineNumber":180,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":181,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKSECOND + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKFIRST"},{"lineNumber":182,"author":{"gitID":"CYX28"},"content":"                + INVALID_TASK_CATEGORY_DESC + VALID_TASK_CATEGORY_PERSONAL,"},{"lineNumber":183,"author":{"gitID":"CYX28"},"content":"                TaskCategory.MESSAGE_TASK_CATEGORY_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":185,"author":{"gitID":"CYX28"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":186,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, INVALID_TASK_NAME_DESC + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":187,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKFIRST + INVALID_TASK_DUE_DATE_DESC + TASK_STATUS_DESC_TASKFIRST,"},{"lineNumber":188,"author":{"gitID":"CYX28"},"content":"                TaskName.MESSAGE_TASK_NAME_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":190,"author":{"gitID":"CYX28"},"content":"        // non-empty preamble"},{"lineNumber":191,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TASK_NAME_DESC_TASKFIRST + TASK_PRIORITY_DESC_TASKFIRST"},{"lineNumber":192,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKFIRST"},{"lineNumber":193,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_PERSONAL + TASK_CATEGORY_DESC_WORK,"},{"lineNumber":194,"author":{"gitID":"CYX28"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskAddCommand.MESSAGE_USAGE));"},{"lineNumber":195,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":197,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":187,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/AddPictureCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PIC_DESC_IMAGE_GREATER_THAN_5MB;"},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PIC_DESC_NONIMAGE;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PIC_DESC_NONIMAGE_WITH_IMAGE_FILETYPE;"},{"lineNumber":7,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PICTURE_DESC_LOCAL_IMAGE;"},{"lineNumber":8,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PICTURE_DESC_LOCAL_IMAGE_5MB;"},{"lineNumber":9,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCAL_IMAGE_JPG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.AddPictureCommand;"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"public class AddPictureCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPictureCommand.MESSAGE_USAGE);"},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":"    private AddPictureCommandParser parser \u003d new AddPictureCommandParser();"},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"        //no index specified"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, VALID_LOCAL_IMAGE_JPG, MESSAGE_INVALID_FORMAT);"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"        //no picture specified"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":"        //no index or picture specified"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":"        // negative index"},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"-5\" + VALID_LOCAL_IMAGE_JPG, MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":"        // zero index"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"0\" + VALID_LOCAL_IMAGE_JPG, MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":"        //non-image file without image prefix"},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PIC_DESC_NONIMAGE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"        //non-image file with image prefix"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PIC_DESC_NONIMAGE_WITH_IMAGE_FILETYPE,"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"        //image file but bigger than 5MB"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PIC_DESC_IMAGE_GREATER_THAN_5MB, MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"    public void parse_validLocalImage_success() {"},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"        String userInput \u003d \"1\" + PICTURE_DESC_LOCAL_IMAGE;"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand expectedCommand \u003d new AddPictureCommand(targetIndex, VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() throws Exception {"},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":"        String userInput;"},{"lineNumber":80,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand expectedCommand;"},{"lineNumber":81,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":82,"author":{"gitID":"dezhanglee"},"content":"        //images for both fields valid"},{"lineNumber":83,"author":{"gitID":"dezhanglee"},"content":"        userInput \u003d targetIndex.getOneBased() + PICTURE_DESC_LOCAL_IMAGE_5MB + PICTURE_DESC_LOCAL_IMAGE;"},{"lineNumber":84,"author":{"gitID":"dezhanglee"},"content":"        expectedCommand \u003d new AddPictureCommand(targetIndex, VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":85,"author":{"gitID":"dezhanglee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":86,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":"        //image for first field invalid, second field valid"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PIC_DESC_NONIMAGE_WITH_IMAGE_FILETYPE"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":"                + PICTURE_DESC_LOCAL_IMAGE;"},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":"        expectedCommand \u003d new AddPictureCommand(targetIndex, VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":92,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":93,"author":{"gitID":"dezhanglee"},"content":"        //image for first field valid, second field invalid"},{"lineNumber":94,"author":{"gitID":"dezhanglee"},"content":"        userInput \u003d targetIndex.getOneBased() + PICTURE_DESC_LOCAL_IMAGE"},{"lineNumber":95,"author":{"gitID":"dezhanglee"},"content":"                + INVALID_PIC_DESC_NONIMAGE_WITH_IMAGE_FILETYPE;"},{"lineNumber":96,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"},{"lineNumber":97,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":99,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"-":9,"dezhanglee":90}},{"path":"src/test/java/seedu/address/logic/parser/DeleteByNameCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.DeleteByNameCommand;"},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":"public class DeleteByNameCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":"    private DeleteByNameCommandParser parser \u003d new DeleteByNameCommandParser();"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"    public void parse_validArgs_returnsDeleteByNameCommand() throws IllegalValueException {"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"        Name amy \u003d new Name(VALID_NAME_AMY);"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"        DeleteByNameCommand expected \u003d new DeleteByNameCommand(amy);"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"        assertParseSuccess(parser, VALID_NAME_AMY, expected);"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":"        //leading whitespaces"},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"        assertParseSuccess(parser, \" \" + VALID_NAME_AMY, expected);"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"        //leading and trailing whitespaces"},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"        assertParseSuccess(parser, \" \" + VALID_NAME_AMY + \"  \", expected);"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"        //trailing whitespaces"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":"        assertParseSuccess(parser, VALID_NAME_AMY + \"  \", expected);"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"        //non alphabatical input"},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":"        Name nonAlphabatical \u003d new Name(\"123\");"},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"        assertParseSuccess(parser, \"123\", new DeleteByNameCommand(nonAlphabatical));"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":"        //blank input"},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"\","},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByNameCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":"        //whitespaces as input"},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"              \","},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByNameCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":"        //single special character"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"@\","},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByNameCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"        //multiple special characters"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"@$%^\u0026*(\","},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByNameCommand.MESSAGE_USAGE));"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"        //special character between valid characters"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"M@ry J@ne\","},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByNameCommand.MESSAGE_USAGE));"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"        //Other ascii characters"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"ε\","},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByNameCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"-":10,"dezhanglee":60}},{"path":"src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_XML_FILEPATH;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"public class ExportCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    private ExportCommandParser parser \u003d new ExportCommandParser();"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    public void parse_correctInput_check() {"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"        Command expected \u003d new ExportCommand(VALID_XML_FILEPATH);"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"        assertParseSuccess(parser, VALID_XML_FILEPATH, expected);"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    public void parse_emptyInput_expectException() {"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        assertParseFailure(parser, \"\","},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":20,"-":8}},{"path":"src/test/java/seedu/address/logic/parser/AddTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.AddTagCommand;"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"public class AddTagCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"    private static final String VALID_TAG_1 \u003d \"NUS\";"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"    private static final String VALID_TAG_2 \u003d \"CS2103\";"},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"    private static final ArrayList\u003cString\u003e toAdd \u003d new ArrayList\u003cString\u003e(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"    public static final String TAG_DESC_CS2103 \u003d \" \" + PREFIX_TAG + VALID_TAG_1;"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"    public static final String TAG_DESC_NUS \u003d \" \" + PREFIX_TAG + VALID_TAG_2;"},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE);"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"    private AddTagCommandParser parser \u003d new AddTagCommandParser();"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"        // no index specified"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, VALID_TAG_1, MESSAGE_INVALID_FORMAT);"},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"        // no field specified"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"        // no index and no field specified"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"        // negative index"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"-5\" + VALID_TAG_1, MESSAGE_INVALID_FORMAT);"},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":"        // zero index"},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"0\" + VALID_TAG_2, MESSAGE_INVALID_FORMAT);"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); //invalid tag"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC + VALID_TAG_1, Tag.MESSAGE_TAG_CONSTRAINTS); //invalid tag"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"    public void parse_validValue_success() throws Exception {"},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(toAdd);"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":"        AddTagCommand expectedCommand \u003d new AddTagCommand(INDEX_FIRST_PERSON, tags);"},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"        assertParseSuccess(parser, \"1 \" + TAG_DESC_NUS + \" \" + TAG_DESC_CS2103, expectedCommand);"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"CYX28":1,"-":10,"dezhanglee":56}},{"path":"src/test/java/seedu/address/logic/parser/TaskDeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskDeleteCommand;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"public class TaskDeleteCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    private TaskDeleteCommandParser parser \u003d new TaskDeleteCommandParser();"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    public void parse_validArgs_returnsTaskDeleteCommand() {"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, \"1\", new TaskDeleteCommand(INDEX_FIRST_TASK));"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"                TaskDeleteCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":23,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/DeleteEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"public class DeleteEventCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    private DeleteEventCommandParser parser \u003d new DeleteEventCommandParser();"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    public void parse_validArgs_returnsDeleteEventCommand() {"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"        assertParseSuccess(parser, \"1\", new DeleteEventCommand(Index.fromOneBased(1)));"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        assertParseFailure(parser, \"one\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"                DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":20,"-":8}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"public class SortCommandTest {"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    private Model model;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    private Model expectedModel;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    private SortCommand sortCommand;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    public void setUp() throws Exception {"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        sortCommand \u003d new SortCommand();"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    public void execute_nonEmptyListIsSorted_success() {"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        model.sortPersons();"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        expectedModel.sortPersons();"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(sortCommand, model, sortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":30,"x3tsunayh":1,"-":7}},{"path":"src/test/java/seedu/address/logic/parser/TaskFindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskFindCommand;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskNameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"public class TaskFindCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    private TaskFindCommandParser parser \u003d new TaskFindCommandParser();"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    public void parse_emptyArgs_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"   \","},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskFindCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    public void parse_validArgs_returnsTaskFindCommand() {"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        TaskFindCommand expectedTaskFindCommand \u003d"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"                new TaskFindCommand(new TaskNameContainsKeywordsPredicate(Arrays.asList(\"discuss\", \"meeting\")));"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, \"discuss meeting\", expectedTaskFindCommand);"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, \"\\n discuss \\n \\t meeting  \\t\", expectedTaskFindCommand);"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":26,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":95,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":136,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":6,"-":188,"dezhanglee":1}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"public class AddEventCommandTest {"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        new AddEventCommand(null);"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_addEventSuccessful() throws Exception {"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        CommandResult commandResult \u003d getAddEventCommandForEvent(validEvent, modelStub).execute();"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        Event test1 \u003d new EventBuilder().withTitle(\"Test 1\").build();"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"        Event test2 \u003d new EventBuilder().withTitle(\"Test 2\").build();"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"        AddEventCommand addCommandTest1 \u003d new AddEventCommand(test1);"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"        AddEventCommand addCommandTest2 \u003d new AddEventCommand(test2);"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"        assertTrue(addCommandTest1.equals(addCommandTest1));"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"        assertTrue(addCommandTest2.equals(addCommandTest2));"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"        // different types -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(addCommandTest1.equals(1));"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"        // null -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(addCommandTest1.equals(null));"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"        // different event -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(addCommandTest1.equals(addCommandTest2));"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"     * Generates a new AddEventCommand with the details of the given event."},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"    private AddEventCommand getAddEventCommandForEvent(Event event, Model model) {"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"        AddEventCommand command \u003d new AddEventCommand(event);"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"    private class ModelStub implements Model {"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"        public void addPerson(Person person) {"},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"        public ReadOnlyEventBook getEventBook() {"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"        public void updatePerson(Person target, Person editedPerson) {"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":119,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"x3tsunayh"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":121,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":123,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":125,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"x3tsunayh"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":127,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":"        public void sortPersons() {"},{"lineNumber":132,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":135,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"x3tsunayh"},"content":"        public void addTask(Task task) {"},{"lineNumber":137,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":140,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"x3tsunayh"},"content":"        public void deleteTask(Task target) {"},{"lineNumber":142,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":145,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"x3tsunayh"},"content":"        public void updateTask(Task target, Task editedTask) {"},{"lineNumber":147,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":150,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"x3tsunayh"},"content":"        public void sortTasksByPriority() {"},{"lineNumber":152,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":155,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"x3tsunayh"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":157,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":159,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":161,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"x3tsunayh"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":163,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":166,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"x3tsunayh"},"content":"        public void addEvent(ReadOnlyEvent toAdd) {"},{"lineNumber":168,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":171,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"x3tsunayh"},"content":"        public void deleteEvent(ReadOnlyEvent eventToDelete) {"},{"lineNumber":173,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":176,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"x3tsunayh"},"content":"        public ObservableList\u003cReadOnlyEvent\u003e getFilteredEventList() {"},{"lineNumber":178,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":179,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":181,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"x3tsunayh"},"content":"        public void updateFilteredEventList(Predicate\u003cReadOnlyEvent\u003e predicate) {"},{"lineNumber":183,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":187,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"x3tsunayh"},"content":"     * A Model stub that always accept the event being added."},{"lineNumber":189,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"x3tsunayh"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {"},{"lineNumber":191,"author":{"gitID":"x3tsunayh"},"content":"        final ArrayList\u003cReadOnlyEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":192,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":193,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"x3tsunayh"},"content":"        public void addEvent(ReadOnlyEvent toAdd) {"},{"lineNumber":195,"author":{"gitID":"x3tsunayh"},"content":"            requireNonNull(toAdd);"},{"lineNumber":196,"author":{"gitID":"x3tsunayh"},"content":"            eventsAdded.add(toAdd);"},{"lineNumber":197,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":199,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"x3tsunayh"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":201,"author":{"gitID":"x3tsunayh"},"content":"            return new AddressBook();"},{"lineNumber":202,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":205,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":186,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/DeleteByNameCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":11,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"public class DeleteByNameCommandTest {"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"    public void execute_validNameUnfilteredList_success() throws Exception {"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"        Person personToDelete \u003d ALICE;"},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"        DeleteByNameCommand deleteByNameCommand \u003d prepareCommand(ALICE.getName());"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"        String expectedMessage \u003d String.format(DeleteByNameCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"        assertCommandSuccess(deleteByNameCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":"    public void execute_invalidNameUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"        Name randomName \u003d new Name(\"Random Random Random 242neklw\");"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":"        DeleteByNameCommand deleteByNameCommand \u003d prepareCommand(randomName);"},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"        assertCommandFailure(deleteByNameCommand, model, DeleteByNameCommand.MESSAGE_NAME_NOT_FOUND);"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":"    public void execute_invalidPartialName_throwsCommandException() {"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"        String aliceFirstName \u003d \"pauline\";"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"        DeleteByNameCommand deleteByNameCommand \u003d prepareCommand(new Name(aliceFirstName));"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"        assertCommandFailure(deleteByNameCommand, model, DeleteByNameCommand.MESSAGE_NAME_NOT_FOUND);"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"    public void execute_multiplePersonsWithSameName_throwsCommandException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":"        Person alice1 \u003d new PersonBuilder().withName(ALICE.getName().toString())"},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":"                .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"                .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":"                .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":"        model.addPerson(alice1);"},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":"        DeleteByNameCommand deleteByNameCommand \u003d prepareCommand(alice1.getName());"},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"        assertCommandFailure(deleteByNameCommand, model, DeleteByNameCommand.MESSAGE_MULTIPLE_SAME_NAME);"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":80,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"dezhanglee"},"content":"    public void equals() {"},{"lineNumber":82,"author":{"gitID":"dezhanglee"},"content":"        DeleteByNameCommand deleteFirstCommand \u003d new DeleteByNameCommand(ALICE.getName());"},{"lineNumber":83,"author":{"gitID":"dezhanglee"},"content":"        DeleteByNameCommand deleteSecondCommand \u003d new DeleteByNameCommand(BENSON.getName());"},{"lineNumber":84,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":85,"author":{"gitID":"dezhanglee"},"content":"        // same object -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"dezhanglee"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"        // same values -\u003e returns true"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":"        DeleteByNameCommand deleteFirstCommandCopy \u003d new DeleteByNameCommand(ALICE.getName());"},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":92,"author":{"gitID":"dezhanglee"},"content":"        // different types -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":94,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":95,"author":{"gitID":"dezhanglee"},"content":"        // null -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":97,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":98,"author":{"gitID":"dezhanglee"},"content":"        // different person -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":100,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":102,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"dezhanglee"},"content":"     * Returns a {@code DeleteByNameCommand} with the parameter {@code index}."},{"lineNumber":104,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"dezhanglee"},"content":"    private DeleteByNameCommand prepareCommand(Name name) {"},{"lineNumber":106,"author":{"gitID":"dezhanglee"},"content":"        DeleteByNameCommand deleteByNameCommand \u003d new DeleteByNameCommand(name);"},{"lineNumber":107,"author":{"gitID":"dezhanglee"},"content":"        deleteByNameCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":108,"author":{"gitID":"dezhanglee"},"content":"        return deleteByNameCommand;"},{"lineNumber":109,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":111,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"dezhanglee"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":113,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"dezhanglee"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":115,"author":{"gitID":"dezhanglee"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":116,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":117,"author":{"gitID":"dezhanglee"},"content":"        assert model.getFilteredPersonList().isEmpty();"},{"lineNumber":118,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"dezhanglee"},"content":"}"},{"lineNumber":120,"author":{"gitID":"dezhanglee"},"content":""}],"authorContributionMap":{"CYX28":1,"x3tsunayh":1,"dezhanglee":118}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":168,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":169,"author":{"gitID":"x3tsunayh"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":215,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":216,"author":{"gitID":"x3tsunayh"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":15,"-":254}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":3,"-":42}},{"path":"src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TASKFIRST;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TASKSECOND;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_CATEGORY_MEETING;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_TASKSECOND;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DUE_DATE_TASKSECOND;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_TASKSECOND;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_TASKSECOND;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TASKSECOND;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand.EditTaskDescriptor;"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"public class EditTaskDescriptorTest {"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    public void equals() {"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"        // same values -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_TASKFIRST);"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        assertTrue(DESC_TASKFIRST.equals(descriptorWithSameValues));"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        assertTrue(DESC_TASKFIRST.equals(DESC_TASKFIRST));"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        assertFalse(DESC_TASKFIRST.equals(null));"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        assertFalse(DESC_TASKFIRST.equals(1));"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        // different values -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        assertFalse(DESC_TASKFIRST.equals(DESC_TASKSECOND));"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        // different task name -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor editedTaskFirst \u003d new EditTaskDescriptorBuilder(DESC_TASKFIRST)"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"                .withTaskName(VALID_TASK_NAME_TASKSECOND).build();"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        assertFalse(DESC_TASKFIRST.equals(editedTaskFirst));"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"        // different task priority -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"        editedTaskFirst \u003d new EditTaskDescriptorBuilder(DESC_TASKFIRST)"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKSECOND).build();"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        assertFalse(DESC_TASKFIRST.equals(editedTaskFirst));"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        // different task description -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        editedTaskFirst \u003d new EditTaskDescriptorBuilder(DESC_TASKFIRST)"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"                .withTaskDescription(VALID_TASK_DESCRIPTION_TASKSECOND).build();"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"        assertFalse(DESC_TASKFIRST.equals(editedTaskFirst));"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        // different task due date -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        editedTaskFirst \u003d new EditTaskDescriptorBuilder(DESC_TASKFIRST)"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"                .withTaskDueDate(VALID_TASK_DUE_DATE_TASKSECOND).build();"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        assertFalse(DESC_TASKFIRST.equals(editedTaskFirst));"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        // different task status -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        editedTaskFirst \u003d new EditTaskDescriptorBuilder(DESC_TASKFIRST)"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"                .withTaskStatus(VALID_TASK_STATUS_TASKSECOND).build();"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        assertFalse(DESC_TASKFIRST.equals(editedTaskFirst));"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        // different task categories -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        editedTaskFirst \u003d new EditTaskDescriptorBuilder(DESC_TASKFIRST)"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"                .withTaskCategories(VALID_TASK_CATEGORY_MEETING).build();"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"        assertFalse(DESC_TASKFIRST.equals(editedTaskFirst));"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":67,"-":4}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DATETIME;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TITLE;"},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CATEGORY;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DUE_DATE;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PRIORITY;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskNameContainsKeywordsPredicate;"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_LOCAL_IMAGE_JPG \u003d \"src/test/resources/PictureTest/dezhanglee.jpg\";"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"    public static final String VALID_LOCAL_IMAGE_5MB \u003d \"src/test/resources/PictureTest/5mbTestJpg.jpg\";"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"    public static final String VALID_LOCAL_IMAGE_PNG \u003d \"src/main/resources/images/help_icon.png\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":"    public static final String PICTURE_DESC_LOCAL_IMAGE \u003d \" \" + PREFIX_FILEPATH + VALID_LOCAL_IMAGE_JPG;"},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"    public static final String PICTURE_DESC_LOCAL_IMAGE_5MB \u003d \" \" + PREFIX_FILEPATH + VALID_LOCAL_IMAGE_5MB;"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":"    public static final String INVALID_LOCAL_FILE_NONIMAGE \u003d"},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"            \"src/test/resources/PictureTest/nonImageFile.txt\";"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"    public static final String INVALID_LOCAL_FILE_NONIMAGE_WITH_IMAGE_FILETYPE \u003d"},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":"            \"src/test/resources/PictureTest/nonImageFileWithJpgPrefix.jpg\";"},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":"    public static final String VALID_LOCAL_IMAGE_BIGGER_THAN_5MB \u003d"},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":"            \"src/test/resources/PictureTest/5.6mbTestJpg.jpg\";"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":"    public static final String INVALID_PIC_DESC_NONIMAGE \u003d \" \" + PREFIX_FILEPATH + INVALID_LOCAL_FILE_NONIMAGE;"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"    public static final String INVALID_PIC_DESC_NONIMAGE_WITH_IMAGE_FILETYPE \u003d \" \" + PREFIX_FILEPATH"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":"            + INVALID_LOCAL_FILE_NONIMAGE_WITH_IMAGE_FILETYPE;"},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":"    public static final String INVALID_PIC_DESC_IMAGE_GREATER_THAN_5MB \u003d \" \" + PREFIX_FILEPATH"},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":"            + VALID_LOCAL_IMAGE_BIGGER_THAN_5MB;"},{"lineNumber":92,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"    //@@author x3tsunayh"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_XML_FILEPATH \u003d \"validXmlFile.xml\";"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_CSV_FILEPATH \u003d \"validCsvFile.csv\";"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"    public static final String INVALID_XML_FILEPATH \u003d \"invalidXmlFile.xmll\";"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"    public static final String INVALID_CSV_FILEPATH \u003d \"invalidCsvFile.csvv\";"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"    public static final String EXISTING_XML_FILEPATH \u003d \"existingXmlFile.xml\";"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"    public static final String EXISTING_CSV_FILEPATH \u003d \"existingCsvFile.csv\";"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_TITLE_CNY \u003d \"CNY Celebration 2018\";"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_TITLE_CHRISTMAS \u003d \"Christmas Celebration 2018\";"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_DESCRIPTION_CNY \u003d \"CNY Celebration at FOS\";"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_DESCRIPTION_CHRISTMAS \u003d \"Christmas Party at SOC\";"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_LOCATION_CNY \u003d \"NUS S16 Level 3\";"},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_LOCATION_CHRISTMAS \u003d \"NUS COM1\";"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_DATETIME_CNY \u003d \"15-02-2018 1000\";"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":"    public static final String VALID_DATETIME_CHRISTMAS \u003d \"24-12-2018 1830\";"},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"    public static final String TITLE_DESC_CNY \u003d \" \" + PREFIX_EVENT_TITLE + VALID_TITLE_CNY;"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":"    public static final String TITLE_DESC_CHRISTMAS \u003d \" \" + PREFIX_EVENT_TITLE + VALID_TITLE_CHRISTMAS;"},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":"    public static final String DESCRIPTION_DESC_CNY \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION_CNY;"},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":"    public static final String DESCRIPTION_DESC_CHRISTMAS \u003d \" \""},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION_CHRISTMAS;"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"    public static final String LOCATION_DESC_CNY \u003d \" \" + PREFIX_EVENT_LOCATION + VALID_LOCATION_CNY;"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"    public static final String LOCATION_DESC_CHRISTMAS \u003d \" \" + PREFIX_EVENT_LOCATION + VALID_LOCATION_CHRISTMAS;"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"    public static final String DATETIME_DESC_CNY \u003d \" \" + PREFIX_EVENT_DATETIME + VALID_DATETIME_CNY;"},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":"    public static final String DATETIME_DESC_CHRISTMAS \u003d \" \" + PREFIX_EVENT_DATETIME + VALID_DATETIME_CHRISTMAS;"},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":119,"author":{"gitID":"x3tsunayh"},"content":"    // \u0027~\u0027 not allowed at the start of field input"},{"lineNumber":120,"author":{"gitID":"x3tsunayh"},"content":"    public static final String INVALID_DATETIME_DESC \u003d \" \""},{"lineNumber":121,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_DATETIME + \"32-12-2018 2359\"; //There is no 32 in the date"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_NAME_TASKFIRST \u003d \"First task\";"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_NAME_TASKSECOND \u003d \"Second task\";"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_PRIORITY_TASKFIRST \u003d \"high\";"},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_PRIORITY_TASKSECOND \u003d \"low\";"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_DESCRIPTION_TASKFIRST \u003d \"Create a new app\";"},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_DESCRIPTION_TASKSECOND \u003d \"Discuss outing details\";"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_DUE_DATE_TASKFIRST \u003d \"2018-04-02\";"},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_DUE_DATE_TASKSECOND \u003d \"2018-05-10\";"},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_STATUS_TASKFIRST \u003d \"undone\";"},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_STATUS_TASKSECOND \u003d \"done\";"},{"lineNumber":134,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_CATEGORY_PERSONAL \u003d \"personal\";"},{"lineNumber":135,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_CATEGORY_WORK \u003d \"work\";"},{"lineNumber":136,"author":{"gitID":"CYX28"},"content":"    public static final String VALID_TASK_CATEGORY_MEETING \u003d \"meeting\";"},{"lineNumber":137,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":138,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_NAME_DESC_TASKFIRST \u003d"},{"lineNumber":139,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_NAME + VALID_TASK_NAME_TASKFIRST;"},{"lineNumber":140,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_NAME_DESC_TASKSECOND \u003d"},{"lineNumber":141,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_NAME + VALID_TASK_NAME_TASKSECOND;"},{"lineNumber":142,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_PRIORITY_DESC_TASKFIRST \u003d"},{"lineNumber":143,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_PRIORITY + VALID_TASK_PRIORITY_TASKFIRST;"},{"lineNumber":144,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_PRIORITY_DESC_TASKSECOND \u003d"},{"lineNumber":145,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_PRIORITY + VALID_TASK_PRIORITY_TASKSECOND;"},{"lineNumber":146,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_DESCRIPTION_DESC_TASKFIRST \u003d"},{"lineNumber":147,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_DESCRIPTION + VALID_TASK_DESCRIPTION_TASKFIRST;"},{"lineNumber":148,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_DESCRIPTION_DESC_TASKSECOND \u003d"},{"lineNumber":149,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_DESCRIPTION + VALID_TASK_DESCRIPTION_TASKSECOND;"},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_DUE_DATE_DESC_TASKFIRST \u003d"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_DUE_DATE + VALID_TASK_DUE_DATE_TASKFIRST;"},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_DUE_DATE_DESC_TASKSECOND \u003d"},{"lineNumber":153,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_DUE_DATE + VALID_TASK_DUE_DATE_TASKSECOND;"},{"lineNumber":154,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_STATUS_DESC_TASKFIRST \u003d"},{"lineNumber":155,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_STATUS + VALID_TASK_STATUS_TASKFIRST;"},{"lineNumber":156,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_STATUS_DESC_TASKSECOND \u003d"},{"lineNumber":157,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_STATUS + VALID_TASK_STATUS_TASKSECOND;"},{"lineNumber":158,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_CATEGORY_DESC_PERSONAL \u003d"},{"lineNumber":159,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_CATEGORY + VALID_TASK_CATEGORY_PERSONAL;"},{"lineNumber":160,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_CATEGORY_DESC_WORK \u003d"},{"lineNumber":161,"author":{"gitID":"CYX28"},"content":"            \" \" + PREFIX_TASK_CATEGORY + VALID_TASK_CATEGORY_WORK;"},{"lineNumber":162,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":163,"author":{"gitID":"CYX28"},"content":"    public static final String INVALID_TASK_NAME_DESC \u003d \" \""},{"lineNumber":164,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_NAME + \"Task*\"; // \u0027*\u0027 not allowed in taskNames"},{"lineNumber":165,"author":{"gitID":"CYX28"},"content":"    public static final String INVALID_TASK_PRIORITY_DESC \u003d \" \""},{"lineNumber":166,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_PRIORITY + \"random\"; // only \u0027high\u0027, \u0027medium\u0027, \u0027low\u0027 allowed in taskPriority"},{"lineNumber":167,"author":{"gitID":"CYX28"},"content":"    public static final String INVALID_TASK_DESCRIPTION_DESC \u003d \" \""},{"lineNumber":168,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_DESCRIPTION + \"\"; // empty string not allowed in taskDescription"},{"lineNumber":169,"author":{"gitID":"CYX28"},"content":"    public static final String INVALID_TASK_DUE_DATE_DESC \u003d \" \""},{"lineNumber":170,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_DUE_DATE + \"2018 05 10\"; // date without formatter not allowed in taskDueDate"},{"lineNumber":171,"author":{"gitID":"CYX28"},"content":"    public static final String INVALID_TASK_STATUS_DESC \u003d \" \""},{"lineNumber":172,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_STATUS + \"random\"; // only \u0027done\u0027, \u0027undone\u0027 allowed in taskStatus"},{"lineNumber":173,"author":{"gitID":"CYX28"},"content":"    public static final String INVALID_TASK_CATEGORY_DESC \u003d \" \""},{"lineNumber":174,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_CATEGORY + \"meeting \u0026 work\"; // \u0027\u0026\u0027 not allowed in taskCategory"},{"lineNumber":175,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":176,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"CYX28"},"content":"    public static final TaskEditCommand.EditTaskDescriptor DESC_TASKFIRST;"},{"lineNumber":184,"author":{"gitID":"CYX28"},"content":"    public static final TaskEditCommand.EditTaskDescriptor DESC_TASKSECOND;"},{"lineNumber":185,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":193,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":194,"author":{"gitID":"CYX28"},"content":"        DESC_TASKFIRST \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_TASKFIRST)"},{"lineNumber":195,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKFIRST).withTaskDescription(VALID_TASK_DESCRIPTION_TASKFIRST)"},{"lineNumber":196,"author":{"gitID":"CYX28"},"content":"                .withTaskDueDate(VALID_TASK_DUE_DATE_TASKFIRST).withTaskStatus(VALID_TASK_STATUS_TASKFIRST)"},{"lineNumber":197,"author":{"gitID":"CYX28"},"content":"                .withTaskCategories(VALID_TASK_CATEGORY_PERSONAL).build();"},{"lineNumber":198,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":199,"author":{"gitID":"CYX28"},"content":"        DESC_TASKSECOND \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_TASKSECOND)"},{"lineNumber":200,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKSECOND).withTaskDescription(VALID_TASK_DESCRIPTION_TASKSECOND)"},{"lineNumber":201,"author":{"gitID":"CYX28"},"content":"                .withTaskDueDate(VALID_TASK_DUE_DATE_TASKSECOND).withTaskStatus(VALID_TASK_STATUS_TASKSECOND)"},{"lineNumber":202,"author":{"gitID":"CYX28"},"content":"                .withTaskCategories(VALID_TASK_CATEGORY_WORK).build();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":230,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":232,"author":{"gitID":"CYX28"},"content":"        List\u003cTask\u003e expectedFilteredTaskList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":241,"author":{"gitID":"CYX28"},"content":"            assertEquals(expectedFilteredTaskList, actualModel.getFilteredTaskList());"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":272,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"CYX28"},"content":"     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"},{"lineNumber":274,"author":{"gitID":"CYX28"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":275,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"CYX28"},"content":"    public static void showTaskAtIndex(Model model, Index targetIndex) {"},{"lineNumber":277,"author":{"gitID":"CYX28"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"},{"lineNumber":278,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":279,"author":{"gitID":"CYX28"},"content":"        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"},{"lineNumber":280,"author":{"gitID":"CYX28"},"content":"        final String[] splitTaskName \u003d task.getTaskName().value.split(\"\\\\s+\");"},{"lineNumber":281,"author":{"gitID":"CYX28"},"content":"        model.updateFilteredTaskList(new TaskNameContainsKeywordsPredicate(Arrays.asList(splitTaskName[0])));"},{"lineNumber":282,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":283,"author":{"gitID":"CYX28"},"content":"        assertEquals(1, model.getFilteredTaskList().size());"},{"lineNumber":284,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":286,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"CYX28"},"content":"     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":288,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"CYX28"},"content":"    public static void deleteFirstTask(Model model) {"},{"lineNumber":290,"author":{"gitID":"CYX28"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":291,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":292,"author":{"gitID":"CYX28"},"content":"            model.deleteTask(firstTask);"},{"lineNumber":293,"author":{"gitID":"CYX28"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":294,"author":{"gitID":"CYX28"},"content":"            throw new AssertionError(\"Task in filtered list must exist in model.\", tnfe);"},{"lineNumber":295,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":298,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":310,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":101,"x3tsunayh":46,"-":151,"dezhanglee":18}},{"path":"src/test/java/seedu/address/logic/commands/TaskFindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalTasks.TASKONE;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalTasks.TASKTHREE;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalTasks.TASKTWO;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskNameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":" * Contains integration tests (interaction with the Model) for {@code TaskFindCommand}."},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"public class TaskFindCommandTest {"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        TaskNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"                new TaskNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        TaskNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"                new TaskNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        TaskFindCommand taskFindFirstCommand \u003d new TaskFindCommand(firstPredicate);"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        TaskFindCommand taskFindSecondCommand \u003d new TaskFindCommand(secondPredicate);"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        assertTrue(taskFindFirstCommand.equals(taskFindFirstCommand));"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        TaskFindCommand taskFindFirstCommandCopy \u003d new TaskFindCommand(firstPredicate);"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        assertTrue(taskFindFirstCommand.equals(taskFindFirstCommandCopy));"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskFindFirstCommand.equals(5));"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskFindFirstCommand.equals(null));"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        // different task -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskFindFirstCommand.equals(taskFindSecondCommand));"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"    public void execute_zeroKeywords_noTaskFound() {"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        TaskFindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"    public void execute_multipleKeywords_multipleTasksFound() {"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        TaskFindCommand command \u003d prepareCommand(\"one two three\");"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(TASKONE, TASKTWO, TASKTHREE));"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"     * Parses {@code userInput} into a {@code TaskFindCommand}."},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"    private TaskFindCommand prepareCommand(String userInput) {"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"        TaskFindCommand command \u003d new TaskFindCommand("},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"                new TaskNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"        return command;"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"     *     - the {@code FilteredList\u003cTask\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"    private void assertCommandSuccess(TaskFindCommand command, String expectedMessage, List\u003cTask\u003e expectedList) {"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedList, model.getFilteredTaskList());"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":83,"x3tsunayh":1,"-":18}},{"path":"src/test/java/seedu/address/logic/commands/AddPictureCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCAL_IMAGE_JPG;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCAL_IMAGE_PNG;"},{"lineNumber":7,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":10,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"public class AddPictureCommandTest {"},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"    private ModelManager model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"    private Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":"    public void execute_validFilepathUnfilteredList_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"        Person toUpdatePerson \u003d model.getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"        Person updatedPerson \u003d new Person(toUpdatePerson);"},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"        updatedPerson.setPicture(VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand addPictureCommand \u003d prepareCommand(index, VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":"        String expectedMessage \u003d String.format(AddPictureCommand.MESSAGE_EDIT_PERSON_SUCCESS, index.getOneBased());"},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), updatedPerson);"},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"        assertCommandSuccess(addPictureCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"    public void execute_validFilepathFilteredList_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"        showPersonAtIndex(model, index);"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":"        Person toUpdatePerson \u003d model.getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"        Person updatedPerson \u003d new Person(toUpdatePerson);"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"        updatedPerson.setPicture(VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand addPictureCommand \u003d prepareCommand(index, VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"        String expectedMessage \u003d String.format(AddPictureCommand.MESSAGE_EDIT_PERSON_SUCCESS, index.getOneBased());"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), updatedPerson);"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"        assertCommandSuccess(addPictureCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":"    public void execute_filteredListInvalidIndex_failure() throws Exception {"},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand addPictureCommand \u003d prepareCommand(outOfBoundIndex, VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"        assertCommandFailure(addPictureCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"    public void equals() throws Exception {"},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand addPicCommandFirst \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand addPicCommandSecond \u003d prepareCommand(INDEX_SECOND_PERSON, VALID_LOCAL_IMAGE_PNG);"},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":80,"author":{"gitID":"dezhanglee"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"dezhanglee"},"content":"        assertTrue(addPicCommandFirst.equals(addPicCommandFirst));"},{"lineNumber":82,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":83,"author":{"gitID":"dezhanglee"},"content":"        // same values -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand addPicCommandFirstCopy \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":85,"author":{"gitID":"dezhanglee"},"content":"        assertTrue(addPicCommandFirstCopy.equals(addPicCommandFirst));"},{"lineNumber":86,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(addPicCommandFirst.equals(1));"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":"        // null -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(addPicCommandFirst.equals(null));"},{"lineNumber":92,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":93,"author":{"gitID":"dezhanglee"},"content":"        // different indexes -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand apc \u003d prepareCommand(INDEX_SECOND_PERSON, VALID_LOCAL_IMAGE_JPG);"},{"lineNumber":95,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(apc.equals(addPicCommandFirst));"},{"lineNumber":96,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":97,"author":{"gitID":"dezhanglee"},"content":"        // same indexes, different files -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(apc.equals(addPicCommandSecond));"},{"lineNumber":99,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":100,"author":{"gitID":"dezhanglee"},"content":"        // both index and files different -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(addPicCommandSecond.equals(addPicCommandFirst));"},{"lineNumber":102,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":103,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":105,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":106,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"dezhanglee"},"content":"     * Returns an {@code AddPictureCommand} with parameters {@code index} and {@code path}"},{"lineNumber":108,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"dezhanglee"},"content":"    private AddPictureCommand prepareCommand(Index index, String path) {"},{"lineNumber":110,"author":{"gitID":"dezhanglee"},"content":"        AddPictureCommand addPictureCommand \u003d new AddPictureCommand(index, path);"},{"lineNumber":111,"author":{"gitID":"dezhanglee"},"content":"        addPictureCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":112,"author":{"gitID":"dezhanglee"},"content":"        return addPictureCommand;"},{"lineNumber":113,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"dezhanglee":109,"-":5}},{"path":"src/test/java/seedu/address/logic/commands/ListAllEventsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.Command.getMessageForEventListShownSummary;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.TitleContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListAllEventsCommand."},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"public class ListAllEventsCommandTest {"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    private Model expectedModel;"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    private ListAllEventsCommand listEventCommand;"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"        listEventCommand \u003d new ListAllEventsCommand();"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        listEventCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_listNotFiltered_showsSameList() {"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(\"All \""},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"                + getMessageForEventListShownSummary(expectedModel.getFilteredEventList().size()));"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandSuccess(listEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEvent event \u003d model.getEventBook().getEventList().get(0);"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        model.updateFilteredEventList(new TitleContainsKeywordsPredicate(Arrays.asList(event.getTitle())));"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(\"All \""},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"                + getMessageForEventListShownSummary(expectedModel.getFilteredEventList().size()));"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        // ensures only one event in the filtered event list"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        assert model.getFilteredEventList().size() \u003d\u003d 1;"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandSuccess(listEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"CYX28":3,"x3tsunayh":48,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/TaskAddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":" * {@code TaskAddCommand}."},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"public class TaskAddCommandTest {"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    public void execute_newTask_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        expectedModel.addTask(validTask);"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(prepareCommand(validTask, model), model,"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"                String.format(TaskAddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    public void execute_duplicateTask_throwsCommandException() {"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        Task taskInList \u003d model.getAddressBook().getTaskList().get(0);"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(prepareCommand(taskInList, model), model, TaskAddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    public void equals() {"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        Task taskone \u003d new TaskBuilder().withTaskName(\"Taskone\").build();"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        Task tasktwo \u003d new TaskBuilder().withTaskName(\"Tasktwo\").build();"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        TaskAddCommand addTaskOneCommand \u003d new TaskAddCommand(taskone);"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        TaskAddCommand addTaskTwoCommand \u003d new TaskAddCommand(tasktwo);"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        // same object -\u003e returns true"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        assertTrue(addTaskOneCommand.equals(addTaskOneCommand));"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"        // same values -\u003e returns true"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        TaskAddCommand addTaskOneCommandCopy \u003d new TaskAddCommand(taskone);"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        assertTrue(addTaskOneCommand.equals(addTaskOneCommandCopy));"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        // different types -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        assertFalse(addTaskOneCommand.equals(5));"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        // null -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"        assertFalse(addTaskOneCommand.equals(null));"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        // different task -\u003e returns false"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        assertFalse(addTaskOneCommand.equals(addTaskTwoCommand));"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"     * Generates a new {@code TaskAddCommand} which upon execution, adds {@code task} into the {@code model}."},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"    private TaskAddCommand prepareCommand(Task task, Model model) {"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"        TaskAddCommand command \u003d new TaskAddCommand(task);"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":69,"x3tsunayh":1,"dezhanglee":6,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":4,"-":53}},{"path":"src/test/java/seedu/address/logic/parser/TaskEditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_CATEGORY_DESC;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_DESCRIPTION_DESC;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_DUE_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_PRIORITY_DESC;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TASK_STATUS_DESC;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_CATEGORY_DESC_PERSONAL;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_CATEGORY_DESC_WORK;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_TASKFIRST;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_TASKSECOND;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DUE_DATE_DESC_TASKFIRST;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_DUE_DATE_DESC_TASKSECOND;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_NAME_DESC_TASKFIRST;"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_PRIORITY_DESC_TASKFIRST;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_PRIORITY_DESC_TASKSECOND;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TASK_STATUS_DESC_TASKFIRST;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_CATEGORY_PERSONAL;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_CATEGORY_WORK;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_TASKFIRST;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_TASKSECOND;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DUE_DATE_TASKFIRST;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DUE_DATE_TASKSECOND;"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_TASKFIRST;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_TASKFIRST;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_TASKSECOND;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TASKFIRST;"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CATEGORY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand;"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand.EditTaskDescriptor;"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDueDate;"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskStatus;"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"public class TaskEditCommandParserTest {"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    private static final String TASK_CATEGORY_EMPTY \u003d \" \" + PREFIX_TASK_CATEGORY;"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskEditCommand.MESSAGE_USAGE);"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    private TaskEditCommandParser parser \u003d new TaskEditCommandParser();"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        // no index specified"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, VALID_TASK_NAME_TASKFIRST, MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        // no field specified"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"5\", TaskEditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        // no index and no field specified"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        // negative index"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"-5\" + TASK_NAME_DESC_TASKFIRST, MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"        // zero index"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"0\" + TASK_NAME_DESC_TASKFIRST, MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"5 random task\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"5 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"                + INVALID_TASK_NAME_DESC, TaskName.MESSAGE_TASK_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"                + INVALID_TASK_PRIORITY_DESC, TaskPriority.MESSAGE_TASK_PRIORITY_CONSTRAINTS); // invalid priority"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"                + INVALID_TASK_DESCRIPTION_DESC,"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"                TaskDescription.MESSAGE_TASK_DESCRIPTION_CONSTRAINTS); // invalid description"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"                + INVALID_TASK_DUE_DATE_DESC, TaskDueDate.MESSAGE_TASK_DUE_DATE_CONSTRAINTS); // invalid due date"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"                + INVALID_TASK_STATUS_DESC, TaskStatus.MESSAGE_TASK_STATUS_CONSTRAINTS); // invalid status"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"                + INVALID_TASK_CATEGORY_DESC, TaskCategory.MESSAGE_TASK_CATEGORY_CONSTRAINTS); // invalid category"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"        // invalid task priority followed by valid task description"},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TASK_PRIORITY_DESC + TASK_DESCRIPTION_DESC_TASKFIRST,"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"                TaskPriority.MESSAGE_TASK_PRIORITY_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        // valid task priority followed by invalid task priority."},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"        // The test case for invalid task priority followed by valid task priority is tested at"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":"        // {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\" + TASK_PRIORITY_DESC_TASKSECOND + INVALID_TASK_PRIORITY_DESC,"},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":"                TaskPriority.MESSAGE_TASK_PRIORITY_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"        // while parsing {@code PREFIX_TASK_CATEGORY} alone will reset the task categories of the"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"        // {@code Task} being edited, parsing it together with a valid task category results in error"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\" + TASK_CATEGORY_DESC_PERSONAL + TASK_CATEGORY_DESC_WORK"},{"lineNumber":115,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_EMPTY, TaskCategory.MESSAGE_TASK_CATEGORY_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\" + TASK_CATEGORY_DESC_PERSONAL + TASK_CATEGORY_EMPTY"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_WORK, TaskCategory.MESSAGE_TASK_CATEGORY_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\" + TASK_CATEGORY_EMPTY + TASK_CATEGORY_DESC_PERSONAL"},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":"                + TASK_CATEGORY_DESC_WORK, TaskCategory.MESSAGE_TASK_CATEGORY_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TASK_NAME_DESC + INVALID_TASK_PRIORITY_DESC"},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"                + INVALID_TASK_DESCRIPTION_DESC + VALID_TASK_DUE_DATE_TASKFIRST + VALID_TASK_STATUS_TASKFIRST,"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"                TaskName.MESSAGE_TASK_NAME_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"        Index targetIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":"        String userInput \u003d targetIndex.getOneBased() + TASK_PRIORITY_DESC_TASKSECOND + TASK_CATEGORY_DESC_PERSONAL"},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":"                + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST + TASK_NAME_DESC_TASKFIRST"},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":"                + TASK_STATUS_DESC_TASKFIRST + TASK_CATEGORY_DESC_WORK;"},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":134,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_TASKFIRST)"},{"lineNumber":135,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKSECOND).withTaskDescription(VALID_TASK_DESCRIPTION_TASKFIRST)"},{"lineNumber":136,"author":{"gitID":"CYX28"},"content":"                .withTaskDueDate(VALID_TASK_DUE_DATE_TASKFIRST).withTaskStatus(VALID_TASK_STATUS_TASKFIRST)"},{"lineNumber":137,"author":{"gitID":"CYX28"},"content":"                .withTaskCategories(VALID_TASK_CATEGORY_PERSONAL, VALID_TASK_CATEGORY_WORK).build();"},{"lineNumber":138,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":139,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":140,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":141,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":143,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"CYX28"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":145,"author":{"gitID":"CYX28"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":146,"author":{"gitID":"CYX28"},"content":"        String userInput \u003d targetIndex.getOneBased() + TASK_PRIORITY_DESC_TASKSECOND + TASK_STATUS_DESC_TASKFIRST;"},{"lineNumber":147,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":148,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTaskPriority(VALID_TASK_PRIORITY_TASKSECOND)"},{"lineNumber":149,"author":{"gitID":"CYX28"},"content":"                .withTaskStatus(VALID_TASK_STATUS_TASKFIRST).build();"},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":153,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":155,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"CYX28"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":157,"author":{"gitID":"CYX28"},"content":"        // task name"},{"lineNumber":158,"author":{"gitID":"CYX28"},"content":"        Index targetIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":159,"author":{"gitID":"CYX28"},"content":"        String userInput \u003d targetIndex.getOneBased() + TASK_NAME_DESC_TASKFIRST;"},{"lineNumber":160,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_TASKFIRST).build();"},{"lineNumber":161,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":162,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":163,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":164,"author":{"gitID":"CYX28"},"content":"        // task priority"},{"lineNumber":165,"author":{"gitID":"CYX28"},"content":"        userInput \u003d targetIndex.getOneBased() + TASK_PRIORITY_DESC_TASKFIRST;"},{"lineNumber":166,"author":{"gitID":"CYX28"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTaskPriority(VALID_TASK_PRIORITY_TASKFIRST).build();"},{"lineNumber":167,"author":{"gitID":"CYX28"},"content":"        expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":168,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":169,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":170,"author":{"gitID":"CYX28"},"content":"        // task description"},{"lineNumber":171,"author":{"gitID":"CYX28"},"content":"        userInput \u003d targetIndex.getOneBased() + TASK_DESCRIPTION_DESC_TASKFIRST;"},{"lineNumber":172,"author":{"gitID":"CYX28"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTaskDescription(VALID_TASK_DESCRIPTION_TASKFIRST).build();"},{"lineNumber":173,"author":{"gitID":"CYX28"},"content":"        expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":174,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":175,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":176,"author":{"gitID":"CYX28"},"content":"        // task due date"},{"lineNumber":177,"author":{"gitID":"CYX28"},"content":"        userInput \u003d targetIndex.getOneBased() + TASK_DUE_DATE_DESC_TASKFIRST;"},{"lineNumber":178,"author":{"gitID":"CYX28"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTaskDueDate(VALID_TASK_DUE_DATE_TASKFIRST).build();"},{"lineNumber":179,"author":{"gitID":"CYX28"},"content":"        expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":180,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":182,"author":{"gitID":"CYX28"},"content":"        // task status"},{"lineNumber":183,"author":{"gitID":"CYX28"},"content":"        userInput \u003d targetIndex.getOneBased() + TASK_STATUS_DESC_TASKFIRST;"},{"lineNumber":184,"author":{"gitID":"CYX28"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTaskStatus(VALID_TASK_STATUS_TASKFIRST).build();"},{"lineNumber":185,"author":{"gitID":"CYX28"},"content":"        expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":186,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":187,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":188,"author":{"gitID":"CYX28"},"content":"        // task categories"},{"lineNumber":189,"author":{"gitID":"CYX28"},"content":"        userInput \u003d targetIndex.getOneBased() + TASK_CATEGORY_DESC_WORK;"},{"lineNumber":190,"author":{"gitID":"CYX28"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTaskCategories(VALID_TASK_CATEGORY_WORK).build();"},{"lineNumber":191,"author":{"gitID":"CYX28"},"content":"        expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":192,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":193,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":195,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"CYX28"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":197,"author":{"gitID":"CYX28"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":198,"author":{"gitID":"CYX28"},"content":"        String userInput \u003d targetIndex.getOneBased() + TASK_PRIORITY_DESC_TASKFIRST + TASK_DESCRIPTION_DESC_TASKFIRST"},{"lineNumber":199,"author":{"gitID":"CYX28"},"content":"                + TASK_DUE_DATE_DESC_TASKFIRST + TASK_STATUS_DESC_TASKFIRST + TASK_CATEGORY_DESC_WORK"},{"lineNumber":200,"author":{"gitID":"CYX28"},"content":"                + TASK_PRIORITY_DESC_TASKFIRST + TASK_DESCRIPTION_DESC_TASKFIRST + TASK_DUE_DATE_DESC_TASKFIRST"},{"lineNumber":201,"author":{"gitID":"CYX28"},"content":"                + TASK_STATUS_DESC_TASKFIRST + TASK_CATEGORY_DESC_WORK + TASK_CATEGORY_DESC_PERSONAL;"},{"lineNumber":202,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":203,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTaskPriority(VALID_TASK_PRIORITY_TASKFIRST)"},{"lineNumber":204,"author":{"gitID":"CYX28"},"content":"                .withTaskDescription(VALID_TASK_DESCRIPTION_TASKFIRST).withTaskDueDate(VALID_TASK_DUE_DATE_TASKFIRST)"},{"lineNumber":205,"author":{"gitID":"CYX28"},"content":"                .withTaskStatus(VALID_TASK_STATUS_TASKFIRST).withTaskCategories(VALID_TASK_CATEGORY_PERSONAL,"},{"lineNumber":206,"author":{"gitID":"CYX28"},"content":"                        VALID_TASK_CATEGORY_WORK).build();"},{"lineNumber":207,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":208,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":209,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":210,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":212,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"CYX28"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":214,"author":{"gitID":"CYX28"},"content":"        // no other valid values specified"},{"lineNumber":215,"author":{"gitID":"CYX28"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":216,"author":{"gitID":"CYX28"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_TASK_PRIORITY_DESC + TASK_PRIORITY_DESC_TASKSECOND;"},{"lineNumber":217,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":218,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKSECOND).build();"},{"lineNumber":219,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":220,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":221,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":222,"author":{"gitID":"CYX28"},"content":"        // other valid values specified"},{"lineNumber":223,"author":{"gitID":"CYX28"},"content":"        userInput \u003d targetIndex.getOneBased() + TASK_PRIORITY_DESC_TASKSECOND + INVALID_TASK_DESCRIPTION_DESC"},{"lineNumber":224,"author":{"gitID":"CYX28"},"content":"                + TASK_DUE_DATE_DESC_TASKSECOND + TASK_DESCRIPTION_DESC_TASKSECOND;"},{"lineNumber":225,"author":{"gitID":"CYX28"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTaskPriority(VALID_TASK_PRIORITY_TASKSECOND)"},{"lineNumber":226,"author":{"gitID":"CYX28"},"content":"                .withTaskDescription(VALID_TASK_DESCRIPTION_TASKSECOND)"},{"lineNumber":227,"author":{"gitID":"CYX28"},"content":"                .withTaskDueDate(VALID_TASK_DUE_DATE_TASKSECOND).build();"},{"lineNumber":228,"author":{"gitID":"CYX28"},"content":"        expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":229,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":230,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":232,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"CYX28"},"content":"    public void parse_resetTaskCategories_success() {"},{"lineNumber":234,"author":{"gitID":"CYX28"},"content":"        Index targetIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":235,"author":{"gitID":"CYX28"},"content":"        String userInput \u003d targetIndex.getOneBased() + TASK_CATEGORY_EMPTY;"},{"lineNumber":236,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":237,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTaskCategories().build();"},{"lineNumber":238,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand expectedCommand \u003d new TaskEditCommand(targetIndex, descriptor);"},{"lineNumber":239,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":240,"author":{"gitID":"CYX28"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":241,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":243,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":244,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":239,"-":5}},{"path":"src/test/java/seedu/address/logic/commands/FindEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_EVENTS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.CHRISTMAS;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.CNY;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.MOVIE;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.TitleContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":" * Contains integration tests (interaction with the Model) for {@code FindEventCommand}."},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"public class FindEventCommandTest {"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    public void equals() {"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"        TitleContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"                new TitleContainsKeywordsPredicate(Collections.singletonList(\"Event One\"));"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"        TitleContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"                new TitleContainsKeywordsPredicate(Collections.singletonList(\"Event Two\"));"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        FindEventCommand findFirstCommand \u003d new FindEventCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        FindEventCommand findSecondCommand \u003d new FindEventCommand(secondPredicate);"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        // same object -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        // same values -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        FindEventCommand findFirstCommandCopy \u003d new FindEventCommand(firstPredicate);"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        // different person -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_zeroKeywords_noEventFound() {"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EVENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"        FindEventCommand command \u003d prepareCommand(\" \");"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EVENTS_LISTED_OVERVIEW, 3);"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"        FindEventCommand command \u003d prepareCommand(\"CNY Christmas Movie\");"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CNY, CHRISTMAS, MOVIE));"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"     * Parses {@code userInput} into a {@code FindEventCommand}."},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"    private FindEventCommand prepareCommand(String userInput) {"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"        FindEventCommand command \u003d"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"                new FindEventCommand(new TitleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"        return command;"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"     *     - the {@code FilteredList\u003cEvent\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"     *     - the {@code EventBook} in model remains the same after executing the {@code command}"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"    private void assertCommandSuccess(FindEventCommand command, String expectedMessage,"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"                                      List\u003cReadOnlyEvent\u003e expectedList) {"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"        EventBook expectedEventBook \u003d new EventBook(model.getEventBook());"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"        assertEquals(expectedList, model.getFilteredEventList());"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"        assertEquals(expectedEventBook.toString(), model.getEventBook().toString());"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":90,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":3,"-":52}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":2,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":4,"-":64}},{"path":"src/test/java/seedu/address/logic/commands/TaskSortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"public class TaskSortCommandTest {"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    private Model model;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    private Model expectedModel;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    private TaskSortCommand taskSortCommand;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    public void setUp() throws Exception {"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        taskSortCommand \u003d new TaskSortCommand();"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        taskSortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    public void execute_nonEmptyListIsSorted_success() {"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        model.sortTasksByPriority();"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        expectedModel.sortTasksByPriority();"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(taskSortCommand, model, taskSortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":28,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":43,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":3,"-":55}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":2,"-":139}},{"path":"src/test/java/seedu/address/logic/commands/TaskDeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":" * {@code TaskDeleteCommand}."},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"public class TaskDeleteCommandTest {"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        TaskDeleteCommand taskDeleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        String expectedMessage \u003d String.format(TaskDeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(taskDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        TaskDeleteCommand taskDeleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(taskDeleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        TaskDeleteCommand taskDeleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        String expectedMessage \u003d String.format(TaskDeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        showNoTask(expectedModel);"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(taskDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTaskList().size());"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"        TaskDeleteCommand taskDeleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(taskDeleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"    public void equals() throws Exception {"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"        TaskDeleteCommand taskDeleteFirstCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"        TaskDeleteCommand taskDeleteSecondCommand \u003d prepareCommand(INDEX_SECOND_TASK);"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"        // same object -\u003e returns true"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"        assertTrue(taskDeleteFirstCommand.equals(taskDeleteFirstCommand));"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"        // same values -\u003e returns true"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"        TaskDeleteCommand taskDeleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"        assertTrue(taskDeleteFirstCommand.equals(taskDeleteFirstCommandCopy));"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"        taskDeleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskDeleteFirstCommand.equals(taskDeleteFirstCommandCopy));"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":"        // different types -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskDeleteFirstCommand.equals(1));"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"        // null -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskDeleteFirstCommand.equals(null));"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"        // different task -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        assertFalse(taskDeleteFirstCommand.equals(taskDeleteSecondCommand));"},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":"     * Returns a {@code TaskDeleteCommand} with the parameter {@code index}."},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"    private TaskDeleteCommand prepareCommand(Index index) {"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"        TaskDeleteCommand taskDeleteCommand \u003d new TaskDeleteCommand(index);"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"        taskDeleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":115,"author":{"gitID":"CYX28"},"content":"        return taskDeleteCommand;"},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":"     * Updates {@code model}\u0027s filtered list to show no task."},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"    private void showNoTask(Model model) {"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":"        model.updateFilteredTaskList(t -\u003e false);"},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"        assertTrue(model.getFilteredTaskList().isEmpty());"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":110,"x3tsunayh":4,"dezhanglee":6,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HARRY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IAN;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEITH;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jill858"},"content":"    public void equals() {"},{"lineNumber":44,"author":{"gitID":"jill858"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":45,"author":{"gitID":"jill858"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":46,"author":{"gitID":"jill858"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":47,"author":{"gitID":"jill858"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":48,"author":{"gitID":"jill858"},"content":""},{"lineNumber":49,"author":{"gitID":"jill858"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":50,"author":{"gitID":"jill858"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":51,"author":{"gitID":"jill858"},"content":""},{"lineNumber":52,"author":{"gitID":"jill858"},"content":"        // same object -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"jill858"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":54,"author":{"gitID":"jill858"},"content":""},{"lineNumber":55,"author":{"gitID":"jill858"},"content":"        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitID":"jill858"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":57,"author":{"gitID":"jill858"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":58,"author":{"gitID":"jill858"},"content":""},{"lineNumber":59,"author":{"gitID":"jill858"},"content":"        // different types -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"jill858"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":61,"author":{"gitID":"jill858"},"content":""},{"lineNumber":62,"author":{"gitID":"jill858"},"content":"        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"jill858"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":64,"author":{"gitID":"jill858"},"content":""},{"lineNumber":65,"author":{"gitID":"jill858"},"content":"        // different person -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"jill858"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":67,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":69,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"jill858"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":71,"author":{"gitID":"jill858"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":72,"author":{"gitID":"jill858"},"content":"        FindCommand command \u003d prepareNameCommand(\" \");"},{"lineNumber":73,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":74,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":76,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"jill858"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":78,"author":{"gitID":"jill858"},"content":"        // multiple name keywords"},{"lineNumber":79,"author":{"gitID":"jill858"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"},{"lineNumber":80,"author":{"gitID":"jill858"},"content":"        FindCommand command \u003d prepareNameCommand(\"Kurz Elle Kunz\");"},{"lineNumber":81,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA, IAN));"},{"lineNumber":82,"author":{"gitID":"jill858"},"content":""},{"lineNumber":83,"author":{"gitID":"jill858"},"content":"        // multiple partial name keywords"},{"lineNumber":84,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 5);"},{"lineNumber":85,"author":{"gitID":"jill858"},"content":"        command \u003d prepareNameCommand(\"Ku El\");"},{"lineNumber":86,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE, FIONA, IAN));"},{"lineNumber":87,"author":{"gitID":"jill858"},"content":""},{"lineNumber":88,"author":{"gitID":"jill858"},"content":"        // multiple mixed-case name keywords"},{"lineNumber":89,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"},{"lineNumber":90,"author":{"gitID":"jill858"},"content":"        command \u003d prepareNameCommand(\"KuRz ElLe KuNz\");"},{"lineNumber":91,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA, IAN));"},{"lineNumber":92,"author":{"gitID":"jill858"},"content":""},{"lineNumber":93,"author":{"gitID":"jill858"},"content":"        // multiple mixed-case partial name keywords"},{"lineNumber":94,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":95,"author":{"gitID":"jill858"},"content":"        command \u003d prepareNameCommand(\"KuN ElL\");"},{"lineNumber":96,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ELLE, FIONA));"},{"lineNumber":97,"author":{"gitID":"jill858"},"content":""},{"lineNumber":98,"author":{"gitID":"jill858"},"content":"        // multiple tag keywords"},{"lineNumber":99,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":100,"author":{"gitID":"jill858"},"content":"        command \u003d prepareTagCommand(\"colleagues classmates\");"},{"lineNumber":101,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(HARRY, IAN, KEITH));"},{"lineNumber":102,"author":{"gitID":"jill858"},"content":""},{"lineNumber":103,"author":{"gitID":"jill858"},"content":"        // multiple partial tag keywords"},{"lineNumber":104,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"},{"lineNumber":105,"author":{"gitID":"jill858"},"content":"        command \u003d prepareTagCommand(\"c owesM\");"},{"lineNumber":106,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, HARRY, IAN, KEITH));"},{"lineNumber":107,"author":{"gitID":"jill858"},"content":""},{"lineNumber":108,"author":{"gitID":"jill858"},"content":"        // multiple mixed-case tag keywords"},{"lineNumber":109,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":110,"author":{"gitID":"jill858"},"content":"        command \u003d prepareTagCommand(\"colLeagUes clasSMates\");"},{"lineNumber":111,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(HARRY, IAN, KEITH));"},{"lineNumber":112,"author":{"gitID":"jill858"},"content":""},{"lineNumber":113,"author":{"gitID":"jill858"},"content":"        // multiple mixed-case partial tag keywords"},{"lineNumber":114,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":115,"author":{"gitID":"jill858"},"content":"        command \u003d prepareTagCommand(\"colL owESM\");"},{"lineNumber":116,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, HARRY, IAN));"},{"lineNumber":117,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":119,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"jill858"},"content":"    public void execute_singleKeywords_multiplePersonsFound() {"},{"lineNumber":121,"author":{"gitID":"jill858"},"content":"        // name keywords"},{"lineNumber":122,"author":{"gitID":"jill858"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":123,"author":{"gitID":"jill858"},"content":"        FindCommand command \u003d prepareNameCommand(\"Kurz\");"},{"lineNumber":124,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, IAN));"},{"lineNumber":125,"author":{"gitID":"jill858"},"content":""},{"lineNumber":126,"author":{"gitID":"jill858"},"content":"        //  partial name keywords"},{"lineNumber":127,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":128,"author":{"gitID":"jill858"},"content":"        command \u003d prepareNameCommand(\"Ku\");"},{"lineNumber":129,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, FIONA, IAN));"},{"lineNumber":130,"author":{"gitID":"jill858"},"content":""},{"lineNumber":131,"author":{"gitID":"jill858"},"content":"        // mixed-case name keywords"},{"lineNumber":132,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":133,"author":{"gitID":"jill858"},"content":"        command \u003d prepareNameCommand(\"KuRz\");"},{"lineNumber":134,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, IAN));"},{"lineNumber":135,"author":{"gitID":"jill858"},"content":""},{"lineNumber":136,"author":{"gitID":"jill858"},"content":"        //  mixed-case partial name keywords"},{"lineNumber":137,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":138,"author":{"gitID":"jill858"},"content":"        command \u003d prepareNameCommand(\"kU\");"},{"lineNumber":139,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, FIONA, IAN));"},{"lineNumber":140,"author":{"gitID":"jill858"},"content":""},{"lineNumber":141,"author":{"gitID":"jill858"},"content":"        // tag keywords"},{"lineNumber":142,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"},{"lineNumber":143,"author":{"gitID":"jill858"},"content":"        command \u003d prepareTagCommand(\"friends\");"},{"lineNumber":144,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage,"},{"lineNumber":145,"author":{"gitID":"jill858"},"content":"                Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":146,"author":{"gitID":"jill858"},"content":""},{"lineNumber":147,"author":{"gitID":"jill858"},"content":"        //  partial tag keywords"},{"lineNumber":148,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":149,"author":{"gitID":"jill858"},"content":"        command \u003d prepareTagCommand(\"class\");"},{"lineNumber":150,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IAN, KEITH));"},{"lineNumber":151,"author":{"gitID":"jill858"},"content":""},{"lineNumber":152,"author":{"gitID":"jill858"},"content":"        //  mixed-case tag keywords"},{"lineNumber":153,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":154,"author":{"gitID":"jill858"},"content":"        command \u003d prepareTagCommand(\"oweSMoney\");"},{"lineNumber":155,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, IAN));"},{"lineNumber":156,"author":{"gitID":"jill858"},"content":""},{"lineNumber":157,"author":{"gitID":"jill858"},"content":"        //  mixed-case partial tag keywords"},{"lineNumber":158,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":159,"author":{"gitID":"jill858"},"content":"        command \u003d prepareTagCommand(\"owesM\");"},{"lineNumber":160,"author":{"gitID":"jill858"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, IAN));"},{"lineNumber":161,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":163,"author":{"gitID":"jill858"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"jill858"},"content":"     * Parses {@code userInput} into a {@code FindCommand} for a name search."},{"lineNumber":165,"author":{"gitID":"jill858"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"jill858"},"content":"    private FindCommand prepareNameCommand(String userInput) {"},{"lineNumber":167,"author":{"gitID":"jill858"},"content":"        FindCommand command \u003d"},{"lineNumber":168,"author":{"gitID":"jill858"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":169,"author":{"gitID":"jill858"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":170,"author":{"gitID":"jill858"},"content":"        return command;"},{"lineNumber":171,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":173,"author":{"gitID":"jill858"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"jill858"},"content":"     * Parses {@code userInput} into a {@code FindCommand} for a tag search."},{"lineNumber":175,"author":{"gitID":"jill858"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"jill858"},"content":"    private FindCommand prepareTagCommand(String userInput) {"},{"lineNumber":177,"author":{"gitID":"jill858"},"content":"        FindCommand command \u003d"},{"lineNumber":178,"author":{"gitID":"jill858"},"content":"                new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":179,"author":{"gitID":"jill858"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":180,"author":{"gitID":"jill858"},"content":"        return command;"},{"lineNumber":181,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"jill858"},"content":""},{"lineNumber":183,"author":{"gitID":"jill858"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"jill858"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"jill858"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"jill858"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"jill858"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":188,"author":{"gitID":"jill858"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"jill858"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":190,"author":{"gitID":"jill858"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":191,"author":{"gitID":"jill858"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":192,"author":{"gitID":"jill858"},"content":""},{"lineNumber":193,"author":{"gitID":"jill858"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":194,"author":{"gitID":"jill858"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":195,"author":{"gitID":"jill858"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":196,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":2,"jill858":157,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.TitleContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteEventCommand}."},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"public class DeleteEventCommandTest {"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEvent eventToDelete \u003d model.getFilteredEventList().get(Index.fromOneBased(1).getZeroBased());"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(Index.fromOneBased(1));"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEvent expectedEventToDelete \u003d expectedModel.getFilteredEventList()"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"                .get(Index.fromOneBased(1).getZeroBased());"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        expectedModel.deleteEvent(expectedEventToDelete);"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEvent event \u003d model.getEventBook().getEventList().get(0);"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"        model.updateFilteredEventList(new TitleContainsKeywordsPredicate(Arrays.asList(event.getTitle())));"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        // checks if filtered event list only has one event here"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"        assert model.getFilteredEventList().size() \u003d\u003d 1;"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEvent eventToDelete \u003d model.getFilteredEventList().get(Index.fromOneBased(1).getZeroBased());"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(Index.fromOneBased(1));"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEvent expectedEventToDelete \u003d expectedModel.getFilteredEventList()"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"                .get(Index.fromOneBased(1).getZeroBased());"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"        expectedModel.deleteEvent(expectedEventToDelete);"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"        showNoEvent(expectedModel);"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEvent event \u003d model.getEventBook().getEventList().get(0);"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"        model.updateFilteredEventList(new TitleContainsKeywordsPredicate(Arrays.asList(event.getTitle())));"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"        // checks if filtered event list only has one event here"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"        assert model.getFilteredEventList().size() \u003d\u003d 1;"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(2);"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"        // ensures outOfBoundIndex is still within size of Event Book"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEventBook().getEventList().size());"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"    public void equals() {"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"        DeleteEventCommand deleteFirstEventCommand \u003d new DeleteEventCommand(Index.fromOneBased(1));"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"        DeleteEventCommand deleteSecondEventCommand \u003d new DeleteEventCommand(Index.fromOneBased(2));"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"        // same object -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"        assertTrue(deleteFirstEventCommand.equals(deleteFirstEventCommand));"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"        // same values -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"        DeleteEventCommand deleteFirstEventCommandCopy \u003d new DeleteEventCommand(Index.fromOneBased(1));"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"        assertTrue(deleteFirstEventCommand.equals(deleteFirstEventCommandCopy));"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"        // different types -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(deleteFirstEventCommand.equals(1));"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"        // null -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(deleteFirstEventCommand.equals(null));"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":"        // different person -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(deleteFirstEventCommand.equals(deleteSecondEventCommand));"},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":"    private DeleteEventCommand prepareCommand(Index index) {"},{"lineNumber":119,"author":{"gitID":"x3tsunayh"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(index);"},{"lineNumber":120,"author":{"gitID":"x3tsunayh"},"content":"        deleteEventCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":121,"author":{"gitID":"x3tsunayh"},"content":"        return deleteEventCommand;"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":124,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"x3tsunayh"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":126,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"x3tsunayh"},"content":"    private void showNoEvent(Model model) {"},{"lineNumber":128,"author":{"gitID":"x3tsunayh"},"content":"        model.updateFilteredEventList(p -\u003e false);"},{"lineNumber":129,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"        assert model.getFilteredEventList().isEmpty();"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"CYX28":2,"x3tsunayh":117,"dezhanglee":6,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"x3tsunayh"},"content":"        public ReadOnlyEventBook getEventBook() {"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":123,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":147,"author":{"gitID":"CYX28"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"CYX28"},"content":"        public void sortPersons() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"CYX28"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":157,"author":{"gitID":"CYX28"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"CYX28"},"content":"        public void deleteTask(Task target) throws TaskNotFoundException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"CYX28"},"content":"        public void updateTask(Task target, Task editedTask) throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"CYX28"},"content":"        public void sortTasksByPriority() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"CYX28"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"CYX28"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":183,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"x3tsunayh"},"content":"        public void addEvent(ReadOnlyEvent toAdd) throws CommandException {"},{"lineNumber":185,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":186,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":188,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"x3tsunayh"},"content":"        public void deleteEvent(ReadOnlyEvent eventToDelete) throws CommandException {"},{"lineNumber":190,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":191,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":193,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"x3tsunayh"},"content":"        public ObservableList\u003cReadOnlyEvent\u003e getFilteredEventList() {"},{"lineNumber":195,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":196,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":198,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"x3tsunayh"},"content":"        public void updateFilteredEventList(Predicate\u003cReadOnlyEvent\u003e predicate) {"},{"lineNumber":200,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":201,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":18,"x3tsunayh":27,"-":192}},{"path":"src/test/java/seedu/address/logic/commands/TaskListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":" * Contains integration tests (interaction with the Model) and unit tests for TaskListCommand."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"public class TaskListCommandTest {"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    private TaskListCommand taskListCommand;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getEventBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        taskListCommand \u003d new TaskListCommand();"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        taskListCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(taskListCommand, model, TaskListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":29,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/ExportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXISTING_CSV_FILEPATH;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXISTING_XML_FILEPATH;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CSV_FILEPATH;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_XML_FILEPATH;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CSV_FILEPATH;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_XML_FILEPATH;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"import java.io.File;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.ExistingFileException;"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.InvalidFileException;"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.storage.XmlEventBookStorage;"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"public class ExportCommandTest {"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"    private Storage storage;"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"    private Model model;"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"    @Before"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"    public void setUp() {"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getFilePath(\"addressbook.xml\"));"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        XmlEventBookStorage eventBookStorage \u003d new XmlEventBookStorage(getFilePath(\"eb.xml\"));"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getFilePath(\"preferences.json\"));"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"        storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_validXmlFilePath_success() {"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"        String filePath \u003d getFilePath(VALID_XML_FILEPATH);"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"        ExportCommand command \u003d prepareCommand(filePath);"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_SUCCESS, filePath);"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandSuccess(command, expectedMessage, filePath);"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_validCsvFilePath_success() {"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"        String filePath \u003d getFilePath(VALID_CSV_FILEPATH);"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"        ExportCommand command \u003d prepareCommand(filePath);"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_SUCCESS, filePath);"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandSuccess(command, expectedMessage, filePath);"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_invalidXmlFileExtension_throwsCommandException() {"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"        String filePath \u003d getFilePath(INVALID_XML_FILEPATH);"},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"        ExportCommand command \u003d prepareCommand(filePath);"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_NOT_XML_CSV_FILE);"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandFailure(command, expectedMessage, filePath);"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_invalidCsvFileExtension_throwsCommandException() {"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"        String filePath \u003d getFilePath(INVALID_CSV_FILEPATH);"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"        ExportCommand command \u003d prepareCommand(filePath);"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_NOT_XML_CSV_FILE);"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"        assertCommandFailure(command, expectedMessage, filePath);"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_existingXmlName_throwsCommandException() {"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"        String filePath \u003d getFilePath(EXISTING_XML_FILEPATH);"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"        ExportCommand command \u003d prepareCommand(filePath);"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"            storage.exportAddressBook(model.getAddressBook(), EXISTING_XML_FILEPATH);"},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"        } catch (ExistingFileException e) {"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"            //do nothing if correct exception is thrown"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IOException | InvalidFileException e) {"},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"The expected CommandException was not thrown.\", e);"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"    public void execute_existingCsvName_throwsCommandException() {"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"        String filePath \u003d getFilePath(EXISTING_CSV_FILEPATH);"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"        ExportCommand command \u003d prepareCommand(filePath);"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":"            storage.exportAddressBook(model.getAddressBook(), EXISTING_CSV_FILEPATH);"},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":"        } catch (ExistingFileException e) {"},{"lineNumber":119,"author":{"gitID":"x3tsunayh"},"content":"            //do nothing if correct exception is thrown"},{"lineNumber":120,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IOException | InvalidFileException e) {"},{"lineNumber":121,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"The expected CommandException was not thrown.\", e);"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":124,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":126,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":127,"author":{"gitID":"x3tsunayh"},"content":"    private String getFilePath(String fileName) {"},{"lineNumber":128,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":129,"author":{"gitID":"x3tsunayh"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":132,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"x3tsunayh"},"content":"     * Returns an {@code ExportCommand} with parameter {@String filePath}"},{"lineNumber":134,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"x3tsunayh"},"content":"    private ExportCommand prepareCommand(String filePath) {"},{"lineNumber":136,"author":{"gitID":"x3tsunayh"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(filePath);"},{"lineNumber":137,"author":{"gitID":"x3tsunayh"},"content":"        exportCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":138,"author":{"gitID":"x3tsunayh"},"content":"        exportCommand.setStorage(storage);"},{"lineNumber":139,"author":{"gitID":"x3tsunayh"},"content":"        return exportCommand;"},{"lineNumber":140,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":142,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"x3tsunayh"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"x3tsunayh"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"x3tsunayh"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"x3tsunayh"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":147,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"x3tsunayh"},"content":"    private void assertCommandSuccess(ExportCommand command, String expectedMessage, String filePath) {"},{"lineNumber":149,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":150,"author":{"gitID":"x3tsunayh"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":151,"author":{"gitID":"x3tsunayh"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":152,"author":{"gitID":"x3tsunayh"},"content":"            // Storage does not support CSV readability for addressbook data."},{"lineNumber":153,"author":{"gitID":"x3tsunayh"},"content":"            if (!FileUtil.isValidCsvFile(filePath)) {"},{"lineNumber":154,"author":{"gitID":"x3tsunayh"},"content":"                assertEquals(model.getAddressBook(), new AddressBook(storage.readAddressBook(filePath).get()));"},{"lineNumber":155,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"x3tsunayh"},"content":"        } catch (CommandException | DataConversionException | IOException | JAXBException e) {"},{"lineNumber":157,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"Export Command is not working as expected.\", e);"},{"lineNumber":158,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":161,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"x3tsunayh"},"content":"     * Asserts that {@code command} is executed, but\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"x3tsunayh"},"content":"     *     - the correct CommandException is thrown\u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"x3tsunayh"},"content":"    public void assertCommandFailure(ExportCommand command, String expectedMessage, String filePath) {"},{"lineNumber":166,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":167,"author":{"gitID":"x3tsunayh"},"content":"            command.execute();"},{"lineNumber":168,"author":{"gitID":"x3tsunayh"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":169,"author":{"gitID":"x3tsunayh"},"content":"        } catch (CommandException e) {"},{"lineNumber":170,"author":{"gitID":"x3tsunayh"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":171,"author":{"gitID":"x3tsunayh"},"content":"            assertFalse((new File(filePath)).exists());"},{"lineNumber":172,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":175,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":157,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/ConvertCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"jill858"},"content":"//@@author jill858"},{"lineNumber":9,"author":{"gitID":"jill858"},"content":"public class ConvertCommandTest {"},{"lineNumber":10,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"jill858"},"content":"    public void equals() {"},{"lineNumber":12,"author":{"gitID":"jill858"},"content":"        ConvertCommand convertFirstCommand \u003d new ConvertCommand(\"SGD\", \"USD\", 0.76);"},{"lineNumber":13,"author":{"gitID":"jill858"},"content":"        ConvertCommand convertSecondCommand \u003d new ConvertCommand(\"USD\", \"SGD\", 1.31);"},{"lineNumber":14,"author":{"gitID":"jill858"},"content":""},{"lineNumber":15,"author":{"gitID":"jill858"},"content":"        // same object -\u003e returns true"},{"lineNumber":16,"author":{"gitID":"jill858"},"content":"        assertTrue(convertFirstCommand.equals(convertFirstCommand));"},{"lineNumber":17,"author":{"gitID":"jill858"},"content":""},{"lineNumber":18,"author":{"gitID":"jill858"},"content":"        // same values -\u003e returns true"},{"lineNumber":19,"author":{"gitID":"jill858"},"content":"        ConvertCommand convertFirstCommandCopy \u003d new ConvertCommand(\"SGD\", \"USD\", 0.76);"},{"lineNumber":20,"author":{"gitID":"jill858"},"content":"        assertTrue(convertFirstCommand.equals(convertFirstCommandCopy));"},{"lineNumber":21,"author":{"gitID":"jill858"},"content":""},{"lineNumber":22,"author":{"gitID":"jill858"},"content":"        // different types -\u003e returns false"},{"lineNumber":23,"author":{"gitID":"jill858"},"content":"        assertFalse(convertFirstCommand.equals(1));"},{"lineNumber":24,"author":{"gitID":"jill858"},"content":""},{"lineNumber":25,"author":{"gitID":"jill858"},"content":"        // null -\u003e returns false"},{"lineNumber":26,"author":{"gitID":"jill858"},"content":"        assertFalse(convertFirstCommand.equals(null));"},{"lineNumber":27,"author":{"gitID":"jill858"},"content":""},{"lineNumber":28,"author":{"gitID":"jill858"},"content":"        // different value -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"jill858"},"content":"        assertFalse(convertFirstCommand.equals(convertSecondCommand));"},{"lineNumber":30,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jill858"},"content":""},{"lineNumber":32,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"jill858"},"content":"    public void execute_convertCurrency_validOutput() {"},{"lineNumber":34,"author":{"gitID":"jill858"},"content":"        double baseRate \u003d 1.00;"},{"lineNumber":35,"author":{"gitID":"jill858"},"content":""},{"lineNumber":36,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to USD"},{"lineNumber":37,"author":{"gitID":"jill858"},"content":"        String expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"USD\", 0.76);"},{"lineNumber":38,"author":{"gitID":"jill858"},"content":"        ConvertCommand command \u003d new ConvertCommand(\"SGD\", \"USD\", 1.00);"},{"lineNumber":39,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":40,"author":{"gitID":"jill858"},"content":""},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to AUD"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"AUD\", 0.991);"},{"lineNumber":43,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"AUD\", 1.00);"},{"lineNumber":44,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":45,"author":{"gitID":"jill858"},"content":""},{"lineNumber":46,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to CAD"},{"lineNumber":47,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"CAD\", 0.981);"},{"lineNumber":48,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"CAD\", 1.00);"},{"lineNumber":49,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":50,"author":{"gitID":"jill858"},"content":""},{"lineNumber":51,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to CHF"},{"lineNumber":52,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"CHF\", 0.724);"},{"lineNumber":53,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"CHF\", 1.00);"},{"lineNumber":54,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":55,"author":{"gitID":"jill858"},"content":""},{"lineNumber":56,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to CNY"},{"lineNumber":57,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"CNY\", 4.801);"},{"lineNumber":58,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"CNY\", 1.00);"},{"lineNumber":59,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":60,"author":{"gitID":"jill858"},"content":""},{"lineNumber":61,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to GBP"},{"lineNumber":62,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"GBP\", 0.539);"},{"lineNumber":63,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"GBP\", 1.00);"},{"lineNumber":64,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":65,"author":{"gitID":"jill858"},"content":""},{"lineNumber":66,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to HKG"},{"lineNumber":67,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"HKD\", 5.998);"},{"lineNumber":68,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"HKD\", 1.00);"},{"lineNumber":69,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"jill858"},"content":""},{"lineNumber":71,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to ILS"},{"lineNumber":72,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"ILS\", 2.662);"},{"lineNumber":73,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"ILS\", 1.00);"},{"lineNumber":74,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":75,"author":{"gitID":"jill858"},"content":""},{"lineNumber":76,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to INR"},{"lineNumber":77,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"INR\", 49.587);"},{"lineNumber":78,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"INR\", 1.00);"},{"lineNumber":79,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"jill858"},"content":""},{"lineNumber":81,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to JPY"},{"lineNumber":82,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"JPY\", 80.847);"},{"lineNumber":83,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"JPY\", 1.00);"},{"lineNumber":84,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":85,"author":{"gitID":"jill858"},"content":""},{"lineNumber":86,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to MYR"},{"lineNumber":87,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"MYR\", 2.962);"},{"lineNumber":88,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"MYR\", 1.00);"},{"lineNumber":89,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":90,"author":{"gitID":"jill858"},"content":""},{"lineNumber":91,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to NZD"},{"lineNumber":92,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"NZD\", 1.049);"},{"lineNumber":93,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"NZD\", 1.00);"},{"lineNumber":94,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":95,"author":{"gitID":"jill858"},"content":""},{"lineNumber":96,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to PHP"},{"lineNumber":97,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"PHP\", 40.063);"},{"lineNumber":98,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"PHP\", 1.00);"},{"lineNumber":99,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":100,"author":{"gitID":"jill858"},"content":""},{"lineNumber":101,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to SEK"},{"lineNumber":102,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"SEK\", 6.279);"},{"lineNumber":103,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"SEK\", 1.00);"},{"lineNumber":104,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":105,"author":{"gitID":"jill858"},"content":""},{"lineNumber":106,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to THB"},{"lineNumber":107,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"THB\", 23.840);"},{"lineNumber":108,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"THB\", 1.00);"},{"lineNumber":109,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":110,"author":{"gitID":"jill858"},"content":""},{"lineNumber":111,"author":{"gitID":"jill858"},"content":"        //convert 1 SGD to TWD"},{"lineNumber":112,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"SGD\", baseRate, \"TWD\", 22.285);"},{"lineNumber":113,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"SGD\", \"TWD\", 1.00);"},{"lineNumber":114,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":115,"author":{"gitID":"jill858"},"content":""},{"lineNumber":116,"author":{"gitID":"jill858"},"content":"        //convert 10,000 JPY to USD"},{"lineNumber":117,"author":{"gitID":"jill858"},"content":"        expectedMessage \u003d String.format(ConvertCommand.MESSAGE_COMPLETE, \"JPY\", 10000.00, \"USD\", 94.5);"},{"lineNumber":118,"author":{"gitID":"jill858"},"content":"        command \u003d new ConvertCommand(\"JPY\", \"USD\", 10000.00);"},{"lineNumber":119,"author":{"gitID":"jill858"},"content":"        assertCommandResult(command, expectedMessage);"},{"lineNumber":120,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"jill858"},"content":""},{"lineNumber":122,"author":{"gitID":"jill858"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"jill858"},"content":"     * Asserts that the result message from the execution of {@code ConvertCommand} equals to {@code expectedMessage}"},{"lineNumber":124,"author":{"gitID":"jill858"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"jill858"},"content":"    private void assertCommandResult(ConvertCommand convertCommand, String expectedMessage) {"},{"lineNumber":126,"author":{"gitID":"jill858"},"content":"        assertEquals(expectedMessage, convertCommand.execute().feedbackToUser);"},{"lineNumber":127,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":121,"-":7}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.InvalidFileException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getFilePath(\"ab\"));"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        XmlEventBookStorage eventBookStorage \u003d new XmlEventBookStorage(getFilePath(\"eb.xml\"));"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getFilePath(\"prefs\"));"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    private String getFilePath(String fileName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":49,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":66,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() throws InvalidFileException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"                new XmlEventBookStorageExceptionThrowingStub(\"dummy\"), new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"    class XmlEventBookStorageExceptionThrowingStub extends XmlEventBookStorage {"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"        public XmlEventBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"        public void saveEventBook(ReadOnlyEventBook eventBook, String filePath) throws IOException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"x3tsunayh":13,"-":105}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalTasks.TASKFOUR;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalTasks.TASKONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.InvalidFileException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"    public void readAddressBook_invalidTaskAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"        readAddressBook(\"invalidTaskAddressBook.xml\");"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"    public void readAddressBook_invalidAndValidTaskAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        readAddressBook(\"invalidAndValidTaskAddressBook.xml\");"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"        //Modify person data, overwrite exiting file, and read back"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"        //Modify tast data, overwrite exiting file, and read back"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"        original.addTask(TASKFOUR);"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"        original.removeTask(TASKONE);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"x3tsunayh"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() throws InvalidFileException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"        saveAddressBook(null,"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":"                \"SomeFile.xml\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"x3tsunayh"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws InvalidFileException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"x3tsunayh"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException, InvalidFileException {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":23,"x3tsunayh":6,"-":123}},{"path":"src/test/java/seedu/address/model/category/TaskCategoryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.category;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskCategoryTest {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskCategory(null));"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    public void constructor_invalidTaskCategoryName_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"        String invalidCategoryName \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskCategory(invalidCategoryName));"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    public void isValidTaskCategoryName() {"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        // null task category name"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TaskCategory.isValidTaskCategoryName(null));"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        // invalid task category name"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskCategory.isValidTaskCategoryName(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskCategory.isValidTaskCategoryName(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskCategory.isValidTaskCategoryName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskCategory.isValidTaskCategoryName(\"meet\u0026ing\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskCategory.isValidTaskCategoryName(\"project meeting\")); // contains spaces"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        // valid task category name"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskCategory.isValidTaskCategoryName(\"firstcategory\")); // alphabets only without whitespaces"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskCategory.isValidTaskCategoryName(\"12345\")); // numbers only"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskCategory.isValidTaskCategoryName(\"firstcategory5\")); // alphanumeric characters"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":36,"-":6}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"            FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    private static final File TYPICAL_ADDRESS_BOOK_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    private static final File INVALID_TASK_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskAddressBook.xml\");"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    private static final File INVALID_TASK_CATEGORY_FILE \u003d"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"            new File(TEST_DATA_FOLDER + \"invalidTaskCategoryAddressBook.xml\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    public void toModelType_typicalAddressBookFile_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ADDRESS_BOOK_FILE,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        AddressBook typicalAddressBook \u003d TypicalAddressBook.getTypicalAddressBook();"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        assertEquals(addressBookFromFile, typicalAddressBook);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASK_FILE,"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"        dataFromFile.toModelType();"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"    public void toModelType_invalidTaskCategoryFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASK_CATEGORY_FILE,"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"        dataFromFile.toModelType();"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":29,"-":43}},{"path":"src/test/java/seedu/address/model/UniqueTaskListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"CYX28"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.UniqueTaskList;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TypicalTasks;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"public class UniqueTaskListTest {"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        uniqueTaskList.asObservableList().remove(0);"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    public void sortByPriority_decreasingOrder_success() {"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        // Setup actual result"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        AddressBook addressBook \u003d TypicalAddressBook.getTypicalAddressBook();"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        addressBook.sortTasksByPriority();"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        ObservableList\u003cTask\u003e actualTaskList \u003d addressBook.getTaskList();"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        // Setup expected result"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        List\u003cTask\u003e taskList \u003d TypicalTasks.getTypicalTasks();"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        // Custom comparator to sort based on high to low priority"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        taskList.sort(Comparator.comparing(Task::getTaskPriority, (t1, t2) -\u003e {"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"            return TaskPriority.PRIORITY_ORDER.indexOf(t1.value.toLowerCase())"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"                    - TaskPriority.PRIORITY_ORDER.indexOf(t2.value.toLowerCase());"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        }));"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        ObservableList\u003cTask\u003e expectedTaskList \u003d FXCollections.observableList(taskList);"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        assertEquals(actualTaskList, expectedTaskList);"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    public void sortByPriority_ascendingOrder_fail() {"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        // Setup actual result"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        AddressBook addressBook \u003d TypicalAddressBook.getTypicalAddressBook();"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        addressBook.sortTasksByPriority();"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        ObservableList\u003cTask\u003e actualTaskList \u003d addressBook.getTaskList();"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        // Setup expected result"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"        List\u003cTask\u003e taskList \u003d TypicalTasks.getTypicalTasks();"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        // Custom comparator to sort based on low to high priority"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        taskList.sort(Comparator.comparing(Task::getTaskPriority, (t1, t2) -\u003e {"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"            return TaskPriority.PRIORITY_ORDER.indexOf(t1.value.toLowerCase())"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"                    - TaskPriority.PRIORITY_ORDER.indexOf(t2.value.toLowerCase());"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"        }).reversed());"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"        ObservableList\u003cTask\u003e expectedTaskList \u003d FXCollections.observableList(taskList);"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        assertNotEquals(actualTaskList, expectedTaskList);"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":69,"-":5}},{"path":"src/test/java/seedu/address/model/person/PictureTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCAL_FILE_NONIMAGE;"},{"lineNumber":7,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCAL_FILE_NONIMAGE_WITH_IMAGE_FILETYPE;"},{"lineNumber":8,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCAL_IMAGE_BIGGER_THAN_5MB;"},{"lineNumber":9,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCAL_IMAGE_JPG;"},{"lineNumber":10,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCAL_IMAGE_PNG;"},{"lineNumber":11,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":"public class PictureTest {"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Picture(null));"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":"    public void constructorForXml_invalidPath_setPathToDefaultPath() {"},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"        String invalidName \u003d"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"                \"RandomRandomThisIsTooLongToBeValidButToBeSureLetsMakeThisLonger_MakePicturesGreatAgain!?\u003e\u003e:?\""},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":"                        + \"SurelyThisCantBeValidRight?WellLifeIsUnpredictableSoToBeSafeIWillMakeThisEvenLonger\";"},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"        // if input file invalid, then we will set path to be Picture.DEFAULT_PATH. In this case, both constructors"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"        // are the same"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"        assertEquals(new Picture(invalidName), new Picture());"},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":"    public void constructor_invalidPath_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"        String invalidName \u003d"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"                \"RandomRandomThisIsTooLongToBeValidButToBeSureLetsMakeThisLonger_MakePicturesGreatAgain!?\u003e\u003e:?\""},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":"                        + \"SurelyThisCantBeValidRight?WellLifeIsUnpredictableSoToBeSafeIWillMakeThisEvenLonger\";"},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Picture(invalidName, \"randomNameDoesntMatter\"));"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"    public void isValidPath() {"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":"        // null name"},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Picture.isValidPath(null));"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":"        // invalid name"},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(Picture.isValidPath(\"\")); // empty string"},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(Picture.isValidPath(\" \")); // spaces only"},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"        // points to non image file with image filetype (jpg)"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(Picture.isValidPath(INVALID_LOCAL_FILE_NONIMAGE_WITH_IMAGE_FILETYPE));"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(Picture.isValidPath(INVALID_LOCAL_FILE_NONIMAGE)); // points to non image file"},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(Picture.isValidPath(VALID_LOCAL_IMAGE_BIGGER_THAN_5MB)); // points to image file bigger than 5mb"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"        // valid name"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"        assertTrue(Picture.isValidPath(VALID_LOCAL_IMAGE_PNG)); // valid png file"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"        assertTrue(Picture.isValidPath(VALID_LOCAL_IMAGE_JPG)); // valid png file"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"dezhanglee":56,"-":6}},{"path":"src/test/java/seedu/address/model/UniquePersonListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"CYX28"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    public void sort_ascendingOrder_success() {"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        // Setup actual result"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        AddressBook addressBook \u003d TypicalAddressBook.getTypicalAddressBook();"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        addressBook.sortPersons();"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        ObservableList\u003cPerson\u003e actualPersonList \u003d addressBook.getPersonList();"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        // Setup expected result"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        List\u003cPerson\u003e personList \u003d TypicalPersons.getTypicalPersons();"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        personList.sort((person1, person2) -\u003e person1.getName().toString()"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"                .compareToIgnoreCase(person2.getName().toString()));"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"        ObservableList\u003cPerson\u003e expectedPersonList \u003d FXCollections.observableList(personList);"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        assertEquals(actualPersonList, expectedPersonList);"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    public void sort_descendingOrder_fail() {"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        // Setup actual result"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        AddressBook addressBook \u003d TypicalAddressBook.getTypicalAddressBook();"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        addressBook.sortPersons();"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"        ObservableList\u003cPerson\u003e actualPersonList \u003d addressBook.getPersonList();"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        // Setup expected result"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        List\u003cPerson\u003e personList \u003d TypicalPersons.getTypicalPersons();"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        personList.sort((person1, person2) -\u003e person2.getName().toString()"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"                .compareToIgnoreCase(person1.getName().toString()));"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        ObservableList\u003cPerson\u003e expectedPersonList \u003d FXCollections.observableList(personList);"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        assertNotEquals(actualPersonList, expectedPersonList);"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":44,"-":18}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalTasks.TASKONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTaskList());"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTaskCategoryList());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        List\u003cTask\u003e newTasks \u003d Arrays.asList();"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        List\u003cTaskCategory\u003e newTaskCategories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newTasks, newTaskCategories);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"    public void resetData_withDuplicateTasks_throwsAssertionError() {"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList();"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        // Repeat TASKONE twice"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        List\u003cTask\u003e newTasks \u003d Arrays.asList(TASKONE, TASKONE);"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        List\u003cTaskCategory\u003e newTaskCategories \u003d new ArrayList\u003c\u003e(TASKONE.getTaskCategories());"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newTasks, newTaskCategories);"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"        addressBook.resetData(newData);"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":"    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"        addressBook.getTaskList().remove(0);"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":"    public void getTaskCategoryList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"        addressBook.getTaskCategoryList().remove(0);"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":"     * A stub ReadOnlyAddressBook whose persons, tags, tasks and categories lists can violate interface constraints."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"        private final ObservableList\u003cTaskCategory\u003e taskCategories \u003d FXCollections.observableArrayList();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags, Collection\u003cTask\u003e tasks,"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":"                        Collection\u003c? extends TaskCategory\u003e taskCategories) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":"            this.tasks.setAll(tasks);"},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"            this.taskCategories.setAll(taskCategories);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"CYX28"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"CYX28"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":136,"author":{"gitID":"CYX28"},"content":"            return tasks;"},{"lineNumber":137,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":139,"author":{"gitID":"CYX28"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"CYX28"},"content":"        public ObservableList\u003cTaskCategory\u003e getTaskCategoryList() {"},{"lineNumber":141,"author":{"gitID":"CYX28"},"content":"            return taskCategories;"},{"lineNumber":142,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":54,"-":91}},{"path":"src/test/java/seedu/address/model/UniqueTaskCategoryListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.UniqueTaskCategoryList;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"public class UniqueTaskCategoryListTest {"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"        UniqueTaskCategoryList uniqueTaskCategoryList \u003d new UniqueTaskCategoryList();"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"        uniqueTaskCategoryList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":14,"-":6}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.CHRISTMAS;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.CNY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalTasks.TASKONE;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalTasks.TASKTWO;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.testutil.EventBookBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        modelManager.getFilteredTaskList().remove(0);"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).withTask(TASKONE)"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"                .withTask(TASKTWO).build();"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        EventBook eventBook \u003d new EventBookBuilder().withEvent("},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"                CNY).withEvent(CHRISTMAS).build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        EventBook differentEventBook \u003d new EventBook();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, eventBook, userPrefs);"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, eventBook, userPrefs);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentEventBook, userPrefs)));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, eventBook, userPrefs)));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, eventBook, differentUserPrefs)));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":15,"x3tsunayh":11,"-":59}},{"path":"src/test/java/seedu/address/model/task/TaskDescriptionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskDescriptionTest {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskDescription(null));"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    public void constructor_invalidTaskDescription_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"        String invalidDescription \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskDescription(invalidDescription));"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    public void isValidTaskDescription() {"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        // null task description"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TaskDescription.isValidTaskDescription(null));"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        // invalid task description"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDescription.isValidTaskDescription(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDescription.isValidTaskDescription(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        // valid task description"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDescription.isValidTaskDescription(\"random xyz\")); // random string"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDescription.isValidTaskDescription(\"12345\")); // numbers"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDescription.isValidTaskDescription(\"random 123\")); // alphanumeric"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDescription.isValidTaskDescription(\"Agenda for meeting\")); // with capital letters"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDescription.isValidTaskDescription(\"Super long tasks to be done this week\")); // long string"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDescription.isValidTaskDescription(\"Hello World!\")); // non-alphanumeric characters"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDescription.isValidTaskDescription(\"Attend proposal discussion @ LT100 at 2:00pm\"));"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":35,"-":8}},{"path":"src/test/java/seedu/address/model/task/TaskStatusTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskStatusTest {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskStatus(null));"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    public void constructor_invalidTaskStatus_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"        String invalidStatus \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskStatus(invalidStatus));"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    public void isValidTaskStatus() {"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        // null task status"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TaskStatus.isValidTaskStatus(null));"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        // invalid task status"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskStatus.isValidTaskStatus(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskStatus.isValidTaskStatus(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskStatus.isValidTaskStatus(\"random xyz\")); // random string"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskStatus.isValidTaskStatus(\"12345\")); // numbers"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskStatus.isValidTaskStatus(\"random 123\")); // alphanumeric"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        // valid task status (done or undone)"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskStatus.isValidTaskStatus(\"done\"));"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskStatus.isValidTaskStatus(\"undone\"));"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"}"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""}],"authorContributionMap":{"CYX28":34,"-":8}},{"path":"src/test/java/seedu/address/logic/commands/AddTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"dezhanglee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for AddTagCommand."},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":" */"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"public class AddTagCommandTest {"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":"    private static final String VALID_TAG_1 \u003d \"NUS\";"},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"    private static final String VALID_TAG_2 \u003d \"CS2103\";"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"    private static final ArrayList\u003cString\u003e toAdd \u003d new ArrayList\u003cString\u003e(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"    private Model model \u003d new ModelManager(TypicalAddressBook.getTypicalAddressBook(), getTypicalEventBook(),"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":"            new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"        Person editedPerson \u003d new Person(lastPerson);"},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(toAdd);"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":"        editedPerson.addTags(tags);"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(indexLastPerson, tags);"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_PERSON_SUCCESS, editedPerson);"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"        Person editedPerson \u003d new Person(personInFilteredList);"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(toAdd);"},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(INDEX_FIRST_PERSON, tags);"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"        editedPerson.addTags(tags);"},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":"        String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_TAG_PERSON_SUCCESS, editedPerson);"},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":80,"author":{"gitID":"dezhanglee"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":81,"author":{"gitID":"dezhanglee"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":82,"author":{"gitID":"dezhanglee"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":83,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":84,"author":{"gitID":"dezhanglee"},"content":"        assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"    public void execute_duplicateTagUnfilteredList_failure() throws Exception {"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":"        Person firstPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":92,"author":{"gitID":"dezhanglee"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(INDEX_FIRST_PERSON, firstPerson.getTags());"},{"lineNumber":93,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":94,"author":{"gitID":"dezhanglee"},"content":"        assertCommandFailure(addTagCommand, model, AddTagCommand.MESSAGE_TAGS_MUST_NOT_EXIST);"},{"lineNumber":95,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":97,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"dezhanglee"},"content":"    public void execute_duplicateTagFilteredList_failure() throws Exception {"},{"lineNumber":99,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":100,"author":{"gitID":"dezhanglee"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":101,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":102,"author":{"gitID":"dezhanglee"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":104,"author":{"gitID":"dezhanglee"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(INDEX_FIRST_PERSON, personInList.getTags());"},{"lineNumber":105,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":106,"author":{"gitID":"dezhanglee"},"content":"        assertCommandFailure(addTagCommand, model, AddTagCommand.MESSAGE_TAGS_MUST_NOT_EXIST);"},{"lineNumber":107,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":109,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"dezhanglee"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":111,"author":{"gitID":"dezhanglee"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":112,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":113,"author":{"gitID":"dezhanglee"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(toAdd);"},{"lineNumber":114,"author":{"gitID":"dezhanglee"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(outOfBoundIndex, tags);"},{"lineNumber":115,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":116,"author":{"gitID":"dezhanglee"},"content":"        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":117,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":119,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"dezhanglee"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":121,"author":{"gitID":"dezhanglee"},"content":"     * but smaller than size of address book"},{"lineNumber":122,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"dezhanglee"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"},{"lineNumber":125,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":126,"author":{"gitID":"dezhanglee"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":127,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":128,"author":{"gitID":"dezhanglee"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":129,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":130,"author":{"gitID":"dezhanglee"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":131,"author":{"gitID":"dezhanglee"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":132,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":133,"author":{"gitID":"dezhanglee"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(toAdd);"},{"lineNumber":134,"author":{"gitID":"dezhanglee"},"content":"        AddTagCommand addTagCommand \u003d prepareCommand(outOfBoundIndex, tags);"},{"lineNumber":135,"author":{"gitID":"dezhanglee"},"content":"        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":136,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":138,"author":{"gitID":"dezhanglee"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"dezhanglee"},"content":"    public void equals() throws Exception {"},{"lineNumber":140,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":141,"author":{"gitID":"dezhanglee"},"content":"        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(toAdd);"},{"lineNumber":142,"author":{"gitID":"dezhanglee"},"content":"        Set\u003cTag\u003e moreTags \u003d ParserUtil.parseTags(Arrays.asList(\"qwerty\", \"uiop\"));"},{"lineNumber":143,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":144,"author":{"gitID":"dezhanglee"},"content":"        final AddTagCommand standardCommand \u003d new AddTagCommand(INDEX_FIRST_PERSON, tags);"},{"lineNumber":145,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":146,"author":{"gitID":"dezhanglee"},"content":"        // same values -\u003e returns true"},{"lineNumber":147,"author":{"gitID":"dezhanglee"},"content":"        Set\u003cTag\u003e copyTags \u003d tags;"},{"lineNumber":148,"author":{"gitID":"dezhanglee"},"content":"        AddTagCommand commandWithSameValues \u003d new AddTagCommand(INDEX_FIRST_PERSON, copyTags);"},{"lineNumber":149,"author":{"gitID":"dezhanglee"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":150,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":151,"author":{"gitID":"dezhanglee"},"content":"        // same object -\u003e returns true"},{"lineNumber":152,"author":{"gitID":"dezhanglee"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":153,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":154,"author":{"gitID":"dezhanglee"},"content":"        // null -\u003e returns false"},{"lineNumber":155,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":156,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":157,"author":{"gitID":"dezhanglee"},"content":"        // different types -\u003e returns false"},{"lineNumber":158,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":159,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":160,"author":{"gitID":"dezhanglee"},"content":"        // different index -\u003e returns false"},{"lineNumber":161,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(standardCommand.equals(new AddTagCommand(INDEX_SECOND_PERSON, tags)));"},{"lineNumber":162,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":163,"author":{"gitID":"dezhanglee"},"content":"        // different tags -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"dezhanglee"},"content":"        assertFalse(standardCommand.equals(new AddTagCommand(INDEX_FIRST_PERSON, moreTags)));"},{"lineNumber":165,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":167,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"dezhanglee"},"content":"     * Returns an {@code AddTagCommand} with parameters {@code index} and {@code tags}"},{"lineNumber":169,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"dezhanglee"},"content":"    private AddTagCommand prepareCommand(Index index, Set\u003cTag\u003e tags) {"},{"lineNumber":171,"author":{"gitID":"dezhanglee"},"content":"        AddTagCommand addTagCommand \u003d new AddTagCommand(index, tags);"},{"lineNumber":172,"author":{"gitID":"dezhanglee"},"content":"        addTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":173,"author":{"gitID":"dezhanglee"},"content":"        return addTagCommand;"},{"lineNumber":174,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":176,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"CYX28":2,"x3tsunayh":1,"dezhanglee":159,"-":14}},{"path":"src/test/java/seedu/address/model/task/TaskDueDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskDueDateTest {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskDueDate(null));"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    public void constructor_invalidTaskDueDate_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"        String invalidDueDate \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskDueDate(invalidDueDate));"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    public void isValidTaskDueDate() {"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        // null task due date"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TaskDueDate.isValidTaskDueDate(null));"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        // invalid task due date"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDueDate.isValidTaskDueDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDueDate.isValidTaskDueDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDueDate.isValidTaskDueDate(\"random xyz\")); // random string"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDueDate.isValidTaskDueDate(\"12345\")); // numbers"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDueDate.isValidTaskDueDate(\"random 123\")); // alphanumeric"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        // invalid task due date format"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDueDate.isValidTaskDueDate(\"2018 05 05\")); // without formatter"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDueDate.isValidTaskDueDate(\"2018-02-29\")); // date existing in leap year only"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDueDate.isValidTaskDueDate(\"2018-12-32\")); // non-existing date"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskDueDate.isValidTaskDueDate(\"1898-12-31\")); // valid year starts from 1900"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"        // valid task due date"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDueDate.isValidTaskDueDate(\"2018-05-05\")); // correct format"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDueDate.isValidTaskDueDate(\"2018-12-31\")); // existing date"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskDueDate.isValidTaskDueDate(\"2020-02-29\")); // date in leap year"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":40,"-":8}},{"path":"src/test/java/seedu/address/model/task/TaskPriorityTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskPriorityTest {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskPriority(null));"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    public void constructor_inValidTaskPriority_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"        String invalidPriority \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskPriority(invalidPriority));"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    public void isValidTaskPriority() {"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        // null task priority"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TaskPriority.isValidTaskPriority(null));"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        // invalid task priority"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskPriority.isValidTaskPriority(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskPriority.isValidTaskPriority(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskPriority.isValidTaskPriority(\"random xyz\")); // random string"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskPriority.isValidTaskPriority(\"12345\")); // numbers"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskPriority.isValidTaskPriority(\"random 123\")); // alphanumeric"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        // valid task priority (high, medium, low)"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskPriority.isValidTaskPriority(\"high\"));"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskPriority.isValidTaskPriority(\"medium\"));"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskPriority.isValidTaskPriority(\"low\"));"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":34,"-":8}},{"path":"src/test/java/seedu/address/model/task/TaskNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskNameTest {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskName(null));"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    public void constructor_invalidTaskName_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskName(invalidName));"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    public void isValidTaskName() {"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        // null task name"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TaskName.isValidTaskName(null));"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        // invalid task name"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskName.isValidTaskName(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskName.isValidTaskName(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskName.isValidTaskName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        assertFalse(TaskName.isValidTaskName(\"task*one\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        // valid task name"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskName.isValidTaskName(\"task random\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskName.isValidTaskName(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskName.isValidTaskName(\"task random 5\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskName.isValidTaskName(\"Task Fabulous\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        assertTrue(TaskName.isValidTaskName(\"Super Tough Task With More Than 100 hours Spent\")); // long names"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":35,"-":8}},{"path":"src/test/java/seedu/address/model/event/UniqueEventListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"public class UniqueEventListTest {"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"        uniqueEventList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":15,"-":4}},{"path":"src/test/java/seedu/address/model/task/TaskNameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"public class TaskNameContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"firstTask\");"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"firstTask\", \"secondTask\");"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"        TaskNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"                new TaskNameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"        TaskNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"                new TaskNameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        TaskNameContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"                new TaskNameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        assertFalse(firstPredicate.equals(5));"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        // different task -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    public void test_taskNameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        TaskNameContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"                new TaskNameContainsKeywordsPredicate(Collections.singletonList(\"TaskRandom\"));"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        assertTrue(predicate.test((new TaskBuilder().withTaskName(\"TaskRandom xyz\").build())));"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"        predicate \u003d new TaskNameContainsKeywordsPredicate(Arrays.asList(\"TaskRandom\", \"Project\"));"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"TaskRandom Project\").build()));"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        predicate \u003d new TaskNameContainsKeywordsPredicate(Arrays.asList(\"Project\", \"nothing\"));"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"Nothing to do\").build()));"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        predicate \u003d new TaskNameContainsKeywordsPredicate(Arrays.asList(\"tAskRanDom\", \"pRojEct\"));"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"TaskRandom Project\").build()));"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        // Uppercase keywords"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        predicate \u003d new TaskNameContainsKeywordsPredicate(Arrays.asList(\"TASKRANDOM\", \"PROJECT\"));"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"TaskRandom Project\").build()));"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        // Different keywords order"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"        predicate \u003d new TaskNameContainsKeywordsPredicate(Arrays.asList(\"Project\", \"TaskRandom\"));"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"TaskRandom Project\").build()));"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        // Partial keywords"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        predicate \u003d new TaskNameContainsKeywordsPredicate(Arrays.asList(\"ject\", \"rand\"));"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTaskName(\"TaskRandom Project\").build()));"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"    public void test_taskNameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"        // Zero keywords"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"        TaskNameContainsKeywordsPredicate predicate \u003d new TaskNameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"TaskRandom\").build()));"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"        // Non-matching keyword"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"        predicate \u003d new TaskNameContainsKeywordsPredicate(Arrays.asList(\"unrelated\"));"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"TaskRandom Project\").build()));"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"        // Keywords match due date and status, but does not match name"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"        predicate \u003d new TaskNameContainsKeywordsPredicate(Arrays.asList(\"2018-04-20\", \"undone\"));"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTaskName(\"TaskRandom Project\").withTaskDueDate(\"2018-04-20\")"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"                .withTaskStatus(\"undone\").build()));"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":82,"-":10}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Datetime;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":" * A utility class to help with building Event objects."},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"public class EventBuilder {"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    public static final String DEFAULT_TITLE \u003d \"Halloween Horror Night\";"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Terrifying Night\";"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    public static final String DEFAULT_LOCATION \u003d \"Univsersal Studio\";"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    public static final String DEFAULT_DATETIME \u003d \"13-10-2017 2359\";"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    private Event event;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    public EventBuilder() {"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"            String defaultTitle \u003d new String(DEFAULT_TITLE);"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"            String defaultDescription \u003d new String(DEFAULT_DESCRIPTION);"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"            String defaultLocation \u003d new String(DEFAULT_LOCATION);"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"            Datetime defaultDatetime \u003d new Datetime(DEFAULT_DATETIME);"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"            this.event \u003d new Event(defaultTitle, defaultDescription, defaultLocation, defaultDatetime);"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"Incorrect input given!\");"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}."},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    public EventBuilder(ReadOnlyEvent eventToCopy) {"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        this.event \u003d new Event(eventToCopy);"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"     * Sets the {@code title} of the {@code Event} that we are building."},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    public EventBuilder withTitle(String title) {"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        this.event.setTitle(new String(title));"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        return this;"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"     * Sets the {@code description} of the {@code Event} that we are building."},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"    public EventBuilder withDescription(String description) {"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        this.event.setDescription(new String(description));"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"     * Sets the {@code location} of the {@code Event} that we are building."},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"    public EventBuilder withLocation(String location) {"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"        this.event.setLocation(new String(location));"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"     * Sets the {@code datetime} of the {@code Event} that we are building."},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"    public EventBuilder withDatetime(String datetime) {"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"            this.event.setDatetime(new Datetime(datetime));"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"Incorrect input given!\");"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"    public Event build() {"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"        return this.event;"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":78}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDueDate;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskStatus;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":" * A utility class to help with building Task objects."},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"public class TaskBuilder {"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    public static final String DEFAULT_TASK_NAME \u003d \"TASK ONE\";"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    public static final String DEFAULT_TASK_PRIORITY \u003d \"medium\";"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    public static final String DEFAULT_TASK_DESCRIPTION \u003d \"Sample task description\";"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    public static final String DEFAULT_TASK_DUE_DATE \u003d \"2018-10-10\";"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    public static final String DEFAULT_TASK_STATUS \u003d \"undone\";"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    public static final String DEFAULT_TASK_CATEGORIES \u003d \"Work\";"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    private TaskName taskName;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    private TaskPriority taskPriority;"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    private TaskDescription taskDescription;"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    private TaskDueDate taskDueDate;"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    private TaskStatus taskStatus;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    private Set\u003cTaskCategory\u003e taskCategories;"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    public TaskBuilder() {"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        taskName \u003d new TaskName(DEFAULT_TASK_NAME);"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        taskPriority \u003d new TaskPriority(DEFAULT_TASK_PRIORITY);"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        taskDescription \u003d new TaskDescription(DEFAULT_TASK_DESCRIPTION);"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        taskDueDate \u003d new TaskDueDate(DEFAULT_TASK_DUE_DATE);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        taskStatus \u003d new TaskStatus(DEFAULT_TASK_STATUS);"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        taskCategories \u003d SampleDataUtil.getTaskCategorySet(DEFAULT_TASK_CATEGORIES);"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"     * Initializes the TaskBuilder with the data of {@code taskToCopy}."},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    public TaskBuilder(Task taskToCopy) {"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        taskName \u003d taskToCopy.getTaskName();"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        taskPriority \u003d taskToCopy.getTaskPriority();"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        taskDescription \u003d taskToCopy.getTaskDescription();"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        taskDueDate \u003d taskToCopy.getTaskDueDate();"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"        taskStatus \u003d taskToCopy.getTaskStatus();"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"        taskCategories \u003d new HashSet\u003c\u003e(taskToCopy.getTaskCategories());"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskName} of the {@code Task} that we are building."},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    public TaskBuilder withTaskName(String taskName) {"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        this.taskName \u003d new TaskName(taskName);"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskPriority} of the {@code Task} that we are building."},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"    public TaskBuilder withTaskPriority(String taskPriority) {"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"        this.taskPriority \u003d new TaskPriority(taskPriority);"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskDescription} of the {@code Task} that we are building."},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"    public TaskBuilder withTaskDescription(String taskDescription) {"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"        this.taskDescription \u003d new TaskDescription(taskDescription);"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskDueDate} of the {@code Task} that we are building."},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"    public TaskBuilder withTaskDueDate(String taskDueDate) {"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"        this.taskDueDate \u003d new TaskDueDate(taskDueDate);"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskStatus} of the {@code Task} that we are building."},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"    public TaskBuilder withTaskStatus(String taskStatus) {"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"        this.taskStatus \u003d new TaskStatus(taskStatus);"},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"     * Parses the {@code taskCategories} into a {@code Set\u003cTaskCategory\u003e} and"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"     * set it to the {@code Task} that we are building."},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"    public TaskBuilder withTaskCategories(String ... taskCategories) {"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":"        this.taskCategories \u003d SampleDataUtil.getTaskCategorySet(taskCategories);"},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"    public Task build() {"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        return new Task(taskName, taskPriority, taskDescription, taskDueDate, taskStatus, taskCategories);"},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":103,"-":6}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":15,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"     * Adds a new {@code Task} to the {@code AddressBook} that we are building."},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    public AddressBookBuilder withTask(Task task) {"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"            addressBook.addTask(task);"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"            throw new IllegalArgumentException(\"task is expected to be unique.\");"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"     * Parses {@code taskCategoryName} into a {@code TaskCategory} and adds it to the {@code AddressBook}"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"     * that we are building."},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"     * @param taskCategory"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"     * @return"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"    public AddressBookBuilder withTaskCategory(String taskCategory) {"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"            addressBook.addTaskCategory(new TaskCategory(taskCategory));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"            throw new IllegalArgumentException(\"taskCategoryName is expected to be valid.\");"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":30,"-":54}},{"path":"src/test/java/seedu/address/testutil/TaskUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CATEGORY;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DUE_DATE;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskAddCommand;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":" * A utility class for Task."},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"public class TaskUtil {"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"     * Returns a taskAdd command string for adding the {@code task}."},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    public static String getTaskAddCommand(Task task) {"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"        return TaskAddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"     * Returns the part of command string for the given {@code task}\u0027s details."},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    public static String getTaskDetails(Task task) {"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        sb.append(PREFIX_TASK_NAME + task.getTaskName().value + \" \");"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        sb.append(PREFIX_TASK_PRIORITY + task.getTaskPriority().value + \" \");"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        sb.append(PREFIX_TASK_DESCRIPTION + task.getTaskDescription().value + \" \");"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        sb.append(PREFIX_TASK_DUE_DATE + task.getTaskDueDate().value + \" \");"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        sb.append(PREFIX_TASK_STATUS + task.getTaskStatus().value + \" \");"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        task.getTaskCategories().stream().forEach(s -\u003e sb.append(PREFIX_TASK_CATEGORY + s.taskCategoryName + \" \"));"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        return sb.toString();"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":40}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":3,"-":12}},{"path":"src/test/java/seedu/address/testutil/EventBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":" * A utility class to help with building Eventbook objects."},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":" * {@code EventBook ab \u003d new EventBookBuilder().withEvent(Sentosa).build();}"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"public class EventBookBuilder {"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"    private EventBook eventBook;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    public EventBookBuilder() {"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"        eventBook \u003d new EventBook();"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    public EventBookBuilder(EventBook eventBook) {"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"        this.eventBook \u003d eventBook;"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"     * Adds a new {@code Event} to the {@code EventBook} that we are building."},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    public EventBookBuilder withEvent(ReadOnlyEvent event) {"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"            eventBook.addEvent(event);"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"        } catch (CommandException e) {"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"            throw new IllegalArgumentException(\"event is expected to be unique.\");"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"        return this;"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    public EventBook build() {"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        return eventBook;"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":38,"-":2}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":43,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":44,"author":{"gitID":"jill858"},"content":"    public static final Person HARRY \u003d new PersonBuilder().withName(\"Harry Styles\").withPhone(\"84821222\")"},{"lineNumber":45,"author":{"gitID":"jill858"},"content":"            .withEmail(\"harry@example.com\").withAddress(\"chinatown street\").withTags(\"colleagues\", \"family\").build();"},{"lineNumber":46,"author":{"gitID":"jill858"},"content":"    public static final Person IAN \u003d new PersonBuilder().withName(\"Ian Kurz\").withPhone(\"94839221\")"},{"lineNumber":47,"author":{"gitID":"jill858"},"content":"            .withEmail(\"ian@example.com\").withAddress(\"cross road 10\").withTags(\"classmates\", \"owesMoney\").build();"},{"lineNumber":48,"author":{"gitID":"jill858"},"content":"    public static final Person KEITH \u003d new PersonBuilder().withName(\"Keith Loh\").withPhone(\"84123922\")"},{"lineNumber":49,"author":{"gitID":"jill858"},"content":"            .withEmail(\"keith@example.com\").withAddress(\"5th avenue\").withTags(\"classmates\").build();"},{"lineNumber":50,"author":{"gitID":"jill858"},"content":""},{"lineNumber":51,"author":{"gitID":"jill858"},"content":"    // Manually added"},{"lineNumber":52,"author":{"gitID":"jill858"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":53,"author":{"gitID":"jill858"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":54,"author":{"gitID":"jill858"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":55,"author":{"gitID":"jill858"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":56,"author":{"gitID":"jill858"},"content":""},{"lineNumber":57,"author":{"gitID":"jill858"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":58,"author":{"gitID":"jill858"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":59,"author":{"gitID":"jill858"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":60,"author":{"gitID":"jill858"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":61,"author":{"gitID":"jill858"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":62,"author":{"gitID":"jill858"},"content":"            .build();"},{"lineNumber":63,"author":{"gitID":"jill858"},"content":""},{"lineNumber":64,"author":{"gitID":"jill858"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":65,"author":{"gitID":"jill858"},"content":""},{"lineNumber":66,"author":{"gitID":"jill858"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":67,"author":{"gitID":"jill858"},"content":""},{"lineNumber":68,"author":{"gitID":"jill858"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":69,"author":{"gitID":"jill858"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, HARRY, IAN, KEITH));"},{"lineNumber":70,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":29,"-":42}},{"path":"src/test/java/seedu/address/model/EventBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.CNY;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"public class EventBookTest {"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    private final EventBook eventBook \u003d new EventBook();"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    public void constructor() {"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        assertEquals(Collections.emptyList(), eventBook.getEventList());"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        eventBook.resetData(null);"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"    public void resetData_withValidReadOnlyEventBook_replacesData() {"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        EventBook newData \u003d getTypicalEventBook();"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        eventBook.resetData(newData);"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        assertEquals(newData, eventBook);"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"    public void resetData_withDuplicateEvents_throwsAssertionError() {"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        // Repeated events should throw AssertionError"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"        List\u003cEvent\u003e newEvents \u003d Arrays.asList(new Event(CNY), new Event(CNY));"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"        EventBookStub newData \u003d new EventBookStub(newEvents);"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"        eventBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"    public void getEventList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"        // Event List should not be altered unknowingly by unsupported operations"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"        eventBook.getEventList().remove(0);"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"     * A stub ReadOnlyEventBook whose events lists can violate interface constraints."},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"    private static class EventBookStub implements ReadOnlyEventBook {"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"        private final ObservableList\u003cReadOnlyEvent\u003e events \u003d FXCollections.observableArrayList();"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"        EventBookStub(Collection\u003c? extends ReadOnlyEvent\u003e events) {"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"            this.events.setAll(events);"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"        public ObjectProperty\u003cString\u003e titleProperty() {"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"        public String getTitle() {"},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"        public ObjectProperty\u003cString\u003e descriptionProperty() {"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"        public String getDescription() {"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"        public ObjectProperty\u003cString\u003e locationProperty() {"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"        public String getLocation() {"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"        public ObjectProperty\u003cString\u003e datetimeProperty() {"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"        public String getDatetime() {"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"            return null;"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":"        public ObservableList\u003cReadOnlyEvent\u003e getEventList() {"},{"lineNumber":119,"author":{"gitID":"x3tsunayh"},"content":"            return events;"},{"lineNumber":120,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":112,"-":10}},{"path":"src/test/java/seedu/address/testutil/TypicalTasks.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_CATEGORY_PERSONAL;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_CATEGORY_WORK;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_TASKFIRST;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_TASKSECOND;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DUE_DATE_TASKFIRST;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DUE_DATE_TASKSECOND;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_TASKFIRST;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_TASKSECOND;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_TASKFIRST;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_TASKSECOND;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TASKFIRST;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TASKSECOND;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":" * A utility class containing a list of {@code Task} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"public class TypicalTasks {"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    public static final Task TASKONE \u003d new TaskBuilder().withTaskName(\"TaskOne\")"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"            .withTaskPriority(\"medium\")"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"            .withTaskDescription(\"Tasks to be done for task 1\")"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"            .withTaskDueDate(\"2018-06-15\")"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"            .withTaskStatus(\"undone\")"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"            .withTaskCategories(\"Work\").build();"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    public static final Task TASKTWO \u003d new TaskBuilder().withTaskName(\"TaskTwo\")"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"            .withTaskPriority(\"high\")"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"            .withTaskDescription(\"Agenda for task 2\")"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"            .withTaskDueDate(\"2018-03-28\")"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"            .withTaskStatus(\"undone\")"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"            .withTaskCategories(\"Personal\").build();"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    public static final Task TASKTHREE \u003d new TaskBuilder().withTaskName(\"TaskThree\")"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"            .withTaskPriority(\"low\")"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"            .withTaskDescription(\"Purchase office supplies\")"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"            .withTaskDueDate(\"2018-04-10\")"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"            .withTaskStatus(\"undone\")"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"            .withTaskCategories(\"Work\").build();"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    // Manuall added - Task\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    public static final Task TASKFIRST \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_TASKFIRST)"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"            .withTaskPriority(VALID_TASK_PRIORITY_TASKFIRST).withTaskDescription(VALID_TASK_DESCRIPTION_TASKFIRST)"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"            .withTaskDueDate(VALID_TASK_DUE_DATE_TASKFIRST).withTaskStatus(VALID_TASK_STATUS_TASKFIRST)"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"            .withTaskCategories(VALID_TASK_CATEGORY_WORK).build();"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    public static final Task TASKSECOND \u003d new TaskBuilder().withTaskName(VALID_TASK_NAME_TASKSECOND)"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"            .withTaskPriority(VALID_TASK_PRIORITY_TASKSECOND).withTaskDescription(VALID_TASK_DESCRIPTION_TASKSECOND)"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"            .withTaskDueDate(VALID_TASK_DUE_DATE_TASKSECOND).withTaskStatus(VALID_TASK_STATUS_TASKSECOND)"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"            .withTaskCategories(VALID_TASK_CATEGORY_PERSONAL).build();"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    // Manually added"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"    public static final Task TASKFOUR \u003d new TaskBuilder().withTaskName(\"Task 4\")"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"            .withTaskPriority(\"medium\")"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"            .withTaskDescription(\"Work in progress: Development and documentation\")"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"            .withTaskDueDate(\"2018-05-10\")"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"            .withTaskStatus(\"undone\").build();"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"    private TypicalTasks() {} // prevents instantiation"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TASKONE, TASKTWO, TASKTHREE));"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":66,"-":4}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests."},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"public class TypicalEvents {"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    public static final ReadOnlyEvent CNY \u003d new EventBuilder().withTitle(\"CNY\")"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"            .withDescription(\"CNY Celebration at FOS\").withLocation(\"NUS S16 Level 3\")"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"            .withDatetime(\"15-02-2018 1000\").build();"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    public static final ReadOnlyEvent CHRISTMAS \u003d new EventBuilder().withTitle(\"Christmas\")"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"            .withDescription(\"Christmas Party at SOC\").withLocation(\"NUS COM1\")"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"            .withDatetime(\"24-12-2018 1830\").build();"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    public static final ReadOnlyEvent MOVIE \u003d new EventBuilder().withTitle(\"Movie Outing\")"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"            .withDescription(\"Black Panther Movie\").withLocation(\"Suntec GV\")"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"            .withDatetime(\"21-04-2018 1500\").build();"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    public static final ReadOnlyEvent REUNION \u003d new EventBuilder().withTitle(\"Class Reunion\")"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"            .withDescription(\"With Secondary School Classmates\").withLocation(\"Samantha\u0027s House\")"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"            .withDatetime(\"06-05-2018 1730\").build();"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    private TypicalEvents() {"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        // prevents instantiation"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"     * Returns an {@code EventBook} with all the typical events."},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    public static EventBook getTypicalEventBook() {"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"        EventBook eb \u003d new EventBook();"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        for (ReadOnlyEvent event : getTypicalEvents()) {"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"            try {"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"                eb.addEvent(event);"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"            } catch (CommandException e) {"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"                assert false : \"Invalid Command\";"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        return eb;"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"    public static List\u003cReadOnlyEvent\u003e getTypicalEvents() {"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CNY, CHRISTMAS, MOVIE, REUNION));"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"CYX28":2,"x3tsunayh":46,"-":5}},{"path":"src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand.EditTaskDescriptor;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDueDate;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskStatus;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":" * A utility class to help with building EditTaskDescriptor objects."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"public class EditTaskDescriptorBuilder {"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    private EditTaskDescriptor descriptor;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        this.descriptor \u003d new EditTaskDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details."},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptorBuilder(Task task) {"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskName((task.getTaskName()));"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskPriority(task.getTaskPriority());"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskDescription(task.getTaskDescription());"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskDueDate(task.getTaskDueDate());"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskStatus(task.getTaskStatus());"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskCategories(task.getTaskCategories());"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskName} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptorBuilder withTaskName(String taskName) {"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskName(new TaskName(taskName));"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskPriority} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptorBuilder withTaskPriority(String taskPriority) {"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskPriority(new TaskPriority(taskPriority));"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskDescription} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptorBuilder withTaskDescription(String taskDescription) {"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskDescription(new TaskDescription(taskDescription));"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskDueDate} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptorBuilder withTaskDueDate(String taskDueDate) {"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskDueDate(new TaskDueDate(taskDueDate));"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"     * Sets the {@code TaskStatus} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptorBuilder withTaskStatus(String taskStatus) {"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskStatus(new TaskStatus(taskStatus));"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"     * Parses the {@code taskCategories} into a {@code Set\u003cTaskCategory\u003e} and set it to the {@code EditTaskDescriptor}"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"     * that we are building."},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptorBuilder withTaskCategories(String... taskCategories) {"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        Set\u003cTaskCategory\u003e taskCategorySet \u003d"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"                Stream.of(taskCategories).map(TaskCategory::new).collect(Collectors.toSet());"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"        descriptor.setTaskCategories(taskCategorySet);"},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"    public EditTaskDescriptor build() {"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"        return descriptor;"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":94,"-":6}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    //private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    private final TaskListPanelHandle taskListPanel;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    //private final BrowserPanelHandle browserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        taskListPanel \u003d new TaskListPanelHandle(getChildNode(TaskListPanelHandle.TASK_LIST_VIEW_ID));"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    /*"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    */"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"    public TaskListPanelHandle getTaskListPanel() {"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        return taskListPanel;"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":8,"x3tsunayh":5,"-":49}},{"path":"src/test/java/seedu/address/testutil/TypicalAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":" * A utility class containing a list of {@code AddressBook} objects to be used in tests."},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"public class TypicalAddressBook {"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    private TypicalAddressBook() {} // prevents instantiation"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"     * Returns an {@code AddressBook} with all the typical persons and typical tasks."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"        for (Person person : TypicalPersons.getTypicalPersons()) {"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"            try {"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"                ab.addPerson(person);"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"            }"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        for (Task task : TypicalTasks.getTypicalTasks()) {"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"            try {"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"                ab.addTask(task);"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"            } catch (DuplicateTaskException e) {"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"            }"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        return ab;"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":36,"-":3}},{"path":"src/test/java/seedu/address/model/tag/TagContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"jill858"},"content":"//@@author jill858"},{"lineNumber":14,"author":{"gitID":"jill858"},"content":"public class TagContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"jill858"},"content":""},{"lineNumber":16,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"jill858"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"jill858"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"jill858"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"jill858"},"content":""},{"lineNumber":21,"author":{"gitID":"jill858"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"jill858"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"jill858"},"content":""},{"lineNumber":24,"author":{"gitID":"jill858"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"jill858"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"jill858"},"content":""},{"lineNumber":27,"author":{"gitID":"jill858"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"jill858"},"content":"        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"jill858"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"jill858"},"content":""},{"lineNumber":31,"author":{"gitID":"jill858"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"jill858"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"jill858"},"content":""},{"lineNumber":34,"author":{"gitID":"jill858"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"jill858"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"jill858"},"content":""},{"lineNumber":37,"author":{"gitID":"jill858"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"jill858"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jill858"},"content":""},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"jill858"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"jill858"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"friends\"));"},{"lineNumber":45,"author":{"gitID":"jill858"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\", \"colleagues\").build()));"},{"lineNumber":46,"author":{"gitID":"jill858"},"content":""},{"lineNumber":47,"author":{"gitID":"jill858"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"jill858"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"colleagues\"));"},{"lineNumber":49,"author":{"gitID":"jill858"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\", \"colleagues\").build()));"},{"lineNumber":50,"author":{"gitID":"jill858"},"content":""},{"lineNumber":51,"author":{"gitID":"jill858"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"jill858"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"classmates\"));"},{"lineNumber":53,"author":{"gitID":"jill858"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\", \"neighbours\").build()));"},{"lineNumber":54,"author":{"gitID":"jill858"},"content":""},{"lineNumber":55,"author":{"gitID":"jill858"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"jill858"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"fFiEndS\", \"coLLeagues\"));"},{"lineNumber":57,"author":{"gitID":"jill858"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\", \"colleagues\").build()));"},{"lineNumber":58,"author":{"gitID":"jill858"},"content":""},{"lineNumber":59,"author":{"gitID":"jill858"},"content":"        // One partial keyword with multiple tags return"},{"lineNumber":60,"author":{"gitID":"jill858"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"fri\"));"},{"lineNumber":61,"author":{"gitID":"jill858"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\", \"colleagues\").build()));"},{"lineNumber":62,"author":{"gitID":"jill858"},"content":""},{"lineNumber":63,"author":{"gitID":"jill858"},"content":"        // Partial keywords"},{"lineNumber":64,"author":{"gitID":"jill858"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"fri\", \"col\"));"},{"lineNumber":65,"author":{"gitID":"jill858"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\", \"colleagues\").build()));"},{"lineNumber":66,"author":{"gitID":"jill858"},"content":""},{"lineNumber":67,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jill858"},"content":""},{"lineNumber":69,"author":{"gitID":"jill858"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"jill858"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":71,"author":{"gitID":"jill858"},"content":"        // Zero keywords"},{"lineNumber":72,"author":{"gitID":"jill858"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":73,"author":{"gitID":"jill858"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":74,"author":{"gitID":"jill858"},"content":""},{"lineNumber":75,"author":{"gitID":"jill858"},"content":"        // Non-matching keyword"},{"lineNumber":76,"author":{"gitID":"jill858"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friends\"));"},{"lineNumber":77,"author":{"gitID":"jill858"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"colleagues\", \"family\").build()));"},{"lineNumber":78,"author":{"gitID":"jill858"},"content":""},{"lineNumber":79,"author":{"gitID":"jill858"},"content":"        // tag not found"},{"lineNumber":80,"author":{"gitID":"jill858"},"content":"        predicate \u003d new TagContainsKeywordsPredicate("},{"lineNumber":81,"author":{"gitID":"jill858"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Alice\", \"Main\", \"Street\"));"},{"lineNumber":82,"author":{"gitID":"jill858"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":83,"author":{"gitID":"jill858"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withTags(\"friends\").build()));"},{"lineNumber":84,"author":{"gitID":"jill858"},"content":""},{"lineNumber":85,"author":{"gitID":"jill858"},"content":"        // tag not match"},{"lineNumber":86,"author":{"gitID":"jill858"},"content":"        predicate \u003d new TagContainsKeywordsPredicate("},{"lineNumber":87,"author":{"gitID":"jill858"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Alice\", \"Main\", \"Street\", \"classmates\"));"},{"lineNumber":88,"author":{"gitID":"jill858"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":89,"author":{"gitID":"jill858"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withTags(\"friends\").build()));"},{"lineNumber":90,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":79,"-":12}},{"path":"src/test/java/guitests/guihandles/TaskListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import seedu.address.ui.TaskCard;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":" * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTaskCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_LIST_VIEW_ID \u003d \"#taskListView\";"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    public TaskListPanelHandle(ListView\u003cTaskCard\u003e taskListPanelNode) {"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"        super(taskListPanelNode);"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"     * Returns the task card handle of a task associated with the {@code index} in the list."},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    public TaskCardHandle getTaskCardHandle(int index) {"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"        return getTaskCardHandle(getRootNode().getItems().get(index).task);"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"     * Returns the {@code TaskCardHandle} of the specified {@code task} in the list."},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    public TaskCardHandle getTaskCardHandle(Task task) {"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        Optional\u003cTaskCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"                .filter(card -\u003e card.task.equals(task))"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"                .map(card -\u003e new TaskCardHandle(card.getRoot()))"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"                .findFirst();"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Task does not exist.\"));"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":34,"-":3}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":"        } catch (CommandException | IllegalValueException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":1,"-":150}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"            \"https://www.google.com.sg/search?q\u003d\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":1,"-":71}},{"path":"src/test/java/guitests/guihandles/TaskCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":" * Provides a handle to a task card in the task list panel."},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    private static final String TASK_ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    private static final String TASK_NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    private static final String TASK_PRIORITY_FIELD_ID \u003d \"#priority\";"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    private static final String TASK_DESCRIPTION_FIELD_ID \u003d \"#description\";"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    private static final String TASK_DUE_DATE_FIELD_ID \u003d \"#dueDate\";"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    private static final String TASK_STATUS_FIELD_ID \u003d \"#status\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    private static final String TASK_CATEGORIES_FIELD_ID \u003d \"#categories\";"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    private final Label idLabel;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    private final Label nameLabel;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    private final Label priorityLabel;"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    private final Label descriptionLabel;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    private final Label dueDateLabel;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    private final Label statusLabel;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    private final List\u003cLabel\u003e categoriesLabels;"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    public TaskCardHandle(Node cardNode) {"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        super(cardNode);"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        this.idLabel \u003d getChildNode(TASK_ID_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        this.nameLabel \u003d getChildNode(TASK_NAME_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        this.priorityLabel \u003d getChildNode(TASK_PRIORITY_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        this.descriptionLabel \u003d getChildNode(TASK_DESCRIPTION_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        this.dueDateLabel \u003d getChildNode(TASK_DUE_DATE_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        this.statusLabel \u003d getChildNode(TASK_STATUS_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        Region taskCategoriesContainer \u003d getChildNode(TASK_CATEGORIES_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"        this.categoriesLabels \u003d taskCategoriesContainer"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"                .stream()"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"                .map(Label.class::cast)"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"                .collect(Collectors.toList());"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"    public String getTaskId() {"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        return idLabel.getText();"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    public String getTaskName() {"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        return nameLabel.getText();"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    public String getTaskPriority() {"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        return priorityLabel.getText();"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    public String getTaskDescription() {"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"        return descriptionLabel.getText();"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"    public String getTaskDueDate() {"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        return dueDateLabel.getText();"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"    public String getTaskStatus() {"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"        return statusLabel.getText();"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"    public List\u003cString\u003e getTaskCategories() {"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        return categoriesLabels"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"                .stream()"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"                .map(Label::getText)"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"                .collect(Collectors.toList());"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":70,"-":9}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/v1.3_icon.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":1,"-":119}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":" * An UI Component that displays information of a {@code Task}."},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    public final Task task;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    private Label name;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    private Label id;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    private Label priority;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    private Label description;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    private Label dueDate;"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    private Label status;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    private FlowPane categories;"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        this.task \u003d task;"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        name.setText(task.getTaskName().value);"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        priority.setText(task.getTaskPriority().value);"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"        description.setText(task.getTaskDescription().value);"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        dueDate.setText(task.getTaskDueDate().value);"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        status.setText(task.getTaskStatus().value);"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"        task.getTaskCategories().forEach(category -\u003e categories.getChildren()"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"                .add(new Label(category.taskCategoryName)));"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"        // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        // state check"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        return id.getText().equals(card.id.getText()) \u0026\u0026 task.equals(card.task);"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":58,"-":7}},{"path":"src/main/java/seedu/address/ui/CalendarViewPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import java.time.YearMonth;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.layout.Pane;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":" * Panel containing the calendar."},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"public class CalendarViewPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    private static final String FXML \u003d \"CalendarView.fxml\";"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    private Pane calendarPanel;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    private CalendarView calendarView;"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    private Logic logic;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    public CalendarViewPanel(Logic logic) {"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        super(FXML);"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"        this.logic \u003d logic;"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"        setConnections();"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    private void setConnections() {"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"        calendarView \u003d new CalendarView(logic, logic.getFilteredEventList(), YearMonth.now());"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        calendarPanel.getChildren().add(calendarView.getView());"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    public CalendarView getCalendarPane() {"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        return calendarView;"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":38}},{"path":"src/main/java/seedu/address/ui/AnchorPaneNode.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":" * I DO NOT KNOW YET"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"public class AnchorPaneNode extends AnchorPane {"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"    // Date associated with this pane"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    private LocalDate date;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"     * Create a anchor pane node. Date is not assigned in the constructor."},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"     * @param children children of the anchor pane"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    public AnchorPaneNode(Node... children) {"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"        super(children);"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"        // Add action handler for mouse clicked"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"        //this.setOnMouseClicked(e -\u003e System.out.println(\"This pane\u0027s date is: \" + date));"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    public LocalDate getDate() {"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"        return date;"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    public void setDate(LocalDate date) {"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"        this.date \u003d date;"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":32}},{"path":"src/main/java/seedu/address/ui/StackOverflowWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":" * Controller for a stackoverflow page"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"public class StackOverflowWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    public static final String STACKOVERFLOW_URL \u003d \"https://www.youtube.com/watch?v\u003ddQw4w9WgXcQ\";"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StackOverflowWindow.class);"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    private static final String FXML \u003d \"StackOverflowWindow.fxml\";"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    private WebView browser;"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"     * Creates a new StackOverflowWindow."},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"     * @param root Stage to use as the root of the StackOverflowWindow."},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    public StackOverflowWindow(Stage root) {"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"        super(FXML, root);"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        browser.getEngine().load(STACKOVERFLOW_URL);"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"     * Creates a new StackOverflowWindow."},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    public StackOverflowWindow() {"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"        this(new Stage());"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"     * Shows the stackoverflow window."},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"     * @throws IllegalStateException"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"     * \u003cul\u003e"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"     *     \u003cli\u003e"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"     *     \u003c/li\u003e"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"     *     \u003cli\u003e"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"     *     \u003c/li\u003e"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"     *     \u003cli\u003e"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"     *     \u003c/li\u003e"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"     *     \u003cli\u003e"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"     *     \u003c/li\u003e"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"     * \u003c/ul\u003e"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"    public void show() {"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"        logger.fine(\"Showing the stackoverflow page.\");"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"        getRoot().show();"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":64}},{"path":"src/main/java/seedu/address/ui/CalendarViewUpdate.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import java.time.YearMonth;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":" * Methods to update Calendar View"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"public class CalendarViewUpdate {"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"     * Updates view state of Calendar UI"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"     * for methods like add, delete, edit, etc."},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"     * @param calendarView"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    public static void updateViewState(CalendarView calendarView) {"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"        calendarView.setCurrentYearMonth(YearMonth.now());"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        calendarView.populateCalendar(calendarView.getCurrentYearMonth(), null);"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"     * Updates view state of Calendar UI"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"     * for the Find Event Command."},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"     * @param calendarView"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"     * @param model"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    public static void updateFindState(CalendarView calendarView, Model model) {"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        List\u003cReadOnlyEvent\u003e events \u003d model.getFilteredEventList();"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"        if (events.size() !\u003d 0) {"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"            String findYearMonth \u003d events.get(0).getDatetime().value.substring(3, 10);"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"            // If every event in the filtered list is on the same day, Calendar View jumps to that day."},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"            boolean changeSelectedYearMonth \u003d events.stream()"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"                    .allMatch(e -\u003e e.getDatetime().value.substring(3, 10).equals(findYearMonth));"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"            if (changeSelectedYearMonth) {"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"                calendarView.setCurrentYearMonth(YearMonth.parse(findYearMonth,"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"                        DateTimeFormatter.ofPattern(\"MM-yyyy\")));"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"                calendarView.populateCalendar(calendarView.getCurrentYearMonth(), null);"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":50}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":" * Panel containing the list of tasks."},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        setConnections(taskList);"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    private void setConnections(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"                taskList, (task) -\u003e new TaskCard(task, taskList.indexOf(task) + 1));"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"     * Scrolls to the {@code TaskCard} at the {@code index} and selects it."},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"    private void scrollTo(int index) {"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"            taskListView.scrollTo(index);"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"            taskListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        });"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    @Subscribe"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}."},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        @Override"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        protected void updateItem(TaskCard task, boolean empty) {"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"            super.updateItem(task, empty);"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"                setGraphic(null);"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"                setText(null);"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"            } else {"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"                setGraphic(task.getRoot());"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":60,"-":16}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    private EventListPanel eventListPanel;"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"    private TaskListPanel taskListPanel;"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"    private CalendarViewPanel calendarviewPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"    private MenuItem stackOverflowItem;"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"    private StackPane calendarViewPanelPlaceholder;"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"    private StackPane eventListPanelPlaceholder;"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"    private StackPane taskListPanelPlaceholder;"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"    private TabPane tabPane;"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"        this.logic.setTabPane(tabPane);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"        setAccelerator(stackOverflowItem, KeyCombination.valueOf(\"F2\"));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":118,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":124,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":126,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":128,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":141,"author":{"gitID":"x3tsunayh"},"content":"        //browserPanel \u003d new BrowserPanel();"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"x3tsunayh"},"content":"        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"},{"lineNumber":147,"author":{"gitID":"x3tsunayh"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"},{"lineNumber":148,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":149,"author":{"gitID":"CYX28"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"x3tsunayh"},"content":"        calendarviewPanel \u003d new CalendarViewPanel(logic);"},{"lineNumber":156,"author":{"gitID":"x3tsunayh"},"content":"        logic.setCalendarView(calendarviewPanel.getCalendarPane());"},{"lineNumber":157,"author":{"gitID":"x3tsunayh"},"content":"        calendarViewPanelPlaceholder.getChildren().add(calendarviewPanel.getRoot());"},{"lineNumber":158,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":207,"author":{"gitID":"x3tsunayh"},"content":"    public void handleStackOverflow() {"},{"lineNumber":208,"author":{"gitID":"x3tsunayh"},"content":"        StackOverflowWindow stackOverflowWindow \u003d new StackOverflowWindow();"},{"lineNumber":209,"author":{"gitID":"x3tsunayh"},"content":"        stackOverflowWindow.show();"},{"lineNumber":210,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"CYX28"},"content":"    public TaskListPanel getTaskListPanel() {"},{"lineNumber":229,"author":{"gitID":"CYX28"},"content":"        return this.taskListPanel;"},{"lineNumber":230,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":13,"x3tsunayh":30,"-":199}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitID":"dezhanglee"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"    private static final String BROKEN_IMAGE_URL \u003d \"images/imageFail.png\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":"    private ImageView imageView;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"    //TODO: Handle long names (Wrapping around long names waste space)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":"        name.setWrapText(true); //to wrap around long names"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"        initProfilePic(person);"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"    //@@author dezhanglee"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"     * initialize javafx imageview to profile pic of (@code person)"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":"     * @param person"},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"    public void initProfilePic(Person person) {"},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":"            String url \u003d person.getPicture().getPath();"},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":"            imageView.setImage(new Image(url, 128, 128, true, false));"},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"        } catch (Exception e) {"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":"            e.printStackTrace();"},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":"            imageView.setImage(new Image(BROKEN_IMAGE_URL, 128, 128, true, false));"},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":"    //@@author"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"},{"lineNumber":98,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":99,"author":{"gitID":"dezhanglee"},"content":""}],"authorContributionMap":{"CYX28":1,"-":69,"dezhanglee":29}},{"path":"src/main/java/seedu/address/ui/EventCard.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":" * An UI component that displays information of a {@code Event}."},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    public final ReadOnlyEvent event;"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    private Label title;"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    private Label description;"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    private Label eventLocation;"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    private Label datetime;"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    public EventCard(ReadOnlyEvent event, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        this.event \u003d event;"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        bindListeners(event);"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"     * Binds the individual UI elements to observe their respective {@code Event} properties"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"     * so that they will be notified of any changes."},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"    private void bindListeners(ReadOnlyEvent event) {"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"        title.textProperty().bind(Bindings.convert(event.titleProperty()));"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        description.textProperty().bind(Bindings.convert(event.descriptionProperty()));"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        eventLocation.textProperty().bind(Bindings.convert(event.locationProperty()));"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"        datetime.textProperty().bind(Bindings.convert(event.datetimeProperty()));"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"        // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"            return true;"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"        // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"        if (!(other instanceof EventCard)) {"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"        // state check"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"        EventCard card \u003d (EventCard) other;"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 event.equals(card.event);"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":73,"-":4}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d events listed!\";"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":3,"x3tsunayh":3,"-":13}},{"path":"src/main/java/seedu/address/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Writes and reads files"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    private static final String REGEX_XML_FILE \u003d \".*\\\\.xml$\";"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    private static final String REGEX_CSV_FILE \u003d \".*\\\\.csv$\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    //@@author x3tsunayh"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"     * Checks if a String in {@code filePath} is a valid XML file"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    public static boolean isValidXmlFile(String filePath) {"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        return filePath.toLowerCase().matches(REGEX_XML_FILE);"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"     * Checks if a String in {@code filePath} is a valid CSV file"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"    public static boolean isValidCsvFile(String filePath) {"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        return filePath.toLowerCase().matches(REGEX_CSV_FILE);"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (file.exists()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return file.createNewFile();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            createDirs(parentDir);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Assumes file exists"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Writes given string to a file."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":20,"-":93}},{"path":"src/main/java/seedu/address/commons/exceptions/InvalidFileException.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":" * Signals that some given data does not fulfill some constraints."},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"public class InvalidFileException extends Exception {"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"     * Returns InvalidFileException if {@code filePath} is not a valid XML file"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"    public InvalidFileException() {"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"        super();"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    public InvalidFileException(String message) {"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":17}},{"path":"src/main/java/seedu/address/commons/exceptions/ExistingFileException.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":" * Signals that some given data does not fulfill some constraints."},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"public class ExistingFileException extends Exception {"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"     * Returns ExistingFileException if {@code filePath} XML file name already exists to avoid accidental overwrites"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"    public ExistingFileException() {"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"        super();"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    public ExistingFileException(String message) {"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":17}},{"path":"src/main/java/seedu/address/ui/CalendarView.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DATETIME;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import java.time.YearMonth;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import javafx.geometry.Insets;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import javafx.geometry.Pos;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.control.Button;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.text.Font;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.text.Text;"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.FindEventCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":" * WORK IN PROGRESS FOR EVENTS AND LOGGING"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"public class CalendarView {"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    private ArrayList\u003cAnchorPaneNode\u003e calendarMonth \u003d new ArrayList\u003c\u003e(35);"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    private VBox view;"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    private Text calendarTitle;"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    private YearMonth defaultYearMonth;"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    private YearMonth currentYearMonth;"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    private ObservableList\u003cReadOnlyEvent\u003e eventList;"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    private Logic logic;"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"     * Provides layout for the calendar month with anchor panes."},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    public CalendarView(Logic logic, ObservableList\u003cReadOnlyEvent\u003e eventList, YearMonth yearMonth) {"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        this.logic \u003d logic;"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        this.eventList \u003d eventList;"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        defaultYearMonth \u003d yearMonth;"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"        currentYearMonth \u003d yearMonth;"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        // Creates the calendar grid pane"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        GridPane calendar \u003d new GridPane();"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"        calendar.setPrefSize(450, 300);"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"        // Create rows and columns of anchor panes for calendar"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        calendarMonthSetup(calendar);"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"        // Days of the Week"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"        Text[] days \u003d new Text[]{new Text(\"SUNDAY\"), new Text(\"MONDAY\"), new Text(\"TUESDAY\"),"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"            new Text(\"WEDNESDAY\"), new Text(\"THURSDAY\"), new Text(\"FRIDAY\"), new Text(\"SATURDAY\")};"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"        GridPane dayLabels \u003d new GridPane();"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"        dayLabels.setPrefWidth(450);"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"        Integer col \u003d 0;"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"        for (Text day : days) {"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"            day.setFill(Color.WHITE);"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"            day.setFont(new Font(\"Serif\", 13));"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"            AnchorPane ap \u003d new AnchorPane();"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"            ap.setPrefSize(200, 10);"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"            AnchorPane.setBottomAnchor(day, 5.0);"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"            ap.getChildren().add(day);"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"            dayLabels.add(ap, col++, 0);"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"        // Creates a title for the calendar"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"        calendarTitle \u003d new Text();"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"        calendarTitle.setFill(Color.WHITE);"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"        calendarTitle.setFont(new Font(\"Serif\", 16));"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"        // Buttons to navigate through months"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"        Button previousMonth \u003d new Button(\"\u003c Previous\");"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"        previousMonth.setOnAction(e -\u003e previousMonth());"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"        Button nextMonth \u003d new Button(\"Next \u003e\");"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"        nextMonth.setOnAction(e -\u003e nextMonth());"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"        HBox titleBar \u003d new HBox(previousMonth, calendarTitle, nextMonth);"},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"        HBox.setMargin(calendarTitle, new Insets(0, 10, 0, 10));"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"        titleBar.setAlignment(Pos.BASELINE_CENTER);"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"        // Populate calendar with the appropriate day numbers"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"        populateCalendar(yearMonth, null);"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"        // Displaying the current date and time"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy\");"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"        Button calendarDateTime \u003d new Button(\"Today\u0027s date is \" + dateTimeFormat.format(LocalDate.now()));"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"        calendarDateTime.setStyle(\"-fx-border-color: transparent; \""},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"                + \"-fx-background-color: transparent; -fx-font-size: 18\");"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"        calendarDateTime.setOnAction(e -\u003e originalYearMonth());"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"        HBox calendarDtBar \u003d new HBox(calendarDateTime);"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"        calendarDtBar.setAlignment(Pos.BASELINE_CENTER);"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"        // Displaying a welcome message"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"        Text welcomeMessage \u003d new Text(\"Welcome to BizConnect Journal!\");"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":"        welcomeMessage.setFill(Color.WHITE);"},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"        welcomeMessage.setFont(new Font(\"Impact\", 24));"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"        HBox welcomeMessageBar \u003d new HBox(welcomeMessage);"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":"        welcomeMessageBar.setAlignment(Pos.BASELINE_CENTER);"},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":"        // Creates the calendar view"},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"        view \u003d new VBox(calendarDtBar, titleBar, dayLabels, calendar);"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"        VBox.setMargin(calendarDtBar, new Insets(0, 0, 5, 0));"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"        VBox.setMargin(titleBar, new Insets(0, 0, 5, 0));"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"x3tsunayh"},"content":"     * WORK IN PROGRESS FOR EVENTS"},{"lineNumber":120,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"x3tsunayh"},"content":"    public void populateCalendar(YearMonth yearMonth, Index targetIndex) {"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"        // Gets the current date as reference"},{"lineNumber":123,"author":{"gitID":"x3tsunayh"},"content":"        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"},{"lineNumber":124,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":125,"author":{"gitID":"x3tsunayh"},"content":"        // Sets first day to be a Sunday"},{"lineNumber":126,"author":{"gitID":"x3tsunayh"},"content":"        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) {"},{"lineNumber":127,"author":{"gitID":"x3tsunayh"},"content":"            calendarDate \u003d calendarDate.minusDays(1);"},{"lineNumber":128,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"        // Fills up calendar with day numbers"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":"        for (AnchorPaneNode ap : calendarMonth) {"},{"lineNumber":132,"author":{"gitID":"x3tsunayh"},"content":"            if (ap.getChildren().size() !\u003d 0) {"},{"lineNumber":133,"author":{"gitID":"x3tsunayh"},"content":"                ap.getChildren().remove(0);"},{"lineNumber":134,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":136,"author":{"gitID":"x3tsunayh"},"content":"            String dayValue \u003d String.valueOf(calendarDate.getDayOfMonth());"},{"lineNumber":137,"author":{"gitID":"x3tsunayh"},"content":"            String monthValue \u003d String.valueOf(calendarDate.getMonthValue());"},{"lineNumber":138,"author":{"gitID":"x3tsunayh"},"content":"            String yearValue \u003d String.valueOf(calendarDate.getYear());"},{"lineNumber":139,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":140,"author":{"gitID":"x3tsunayh"},"content":"            boolean eventExist \u003d false;"},{"lineNumber":141,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":142,"author":{"gitID":"x3tsunayh"},"content":"            if (targetIndex \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitID":"x3tsunayh"},"content":"                eventExist \u003d eventList.stream()"},{"lineNumber":144,"author":{"gitID":"x3tsunayh"},"content":"                        .anyMatch(e -\u003e checkEventDay(e, dayValue)"},{"lineNumber":145,"author":{"gitID":"x3tsunayh"},"content":"                                \u0026\u0026 checkEventMonth(e, monthValue)"},{"lineNumber":146,"author":{"gitID":"x3tsunayh"},"content":"                                \u0026\u0026 checkEventYear(e, yearValue));"},{"lineNumber":147,"author":{"gitID":"x3tsunayh"},"content":"            } else {"},{"lineNumber":148,"author":{"gitID":"x3tsunayh"},"content":"                ReadOnlyEvent e \u003d eventList.get(targetIndex.getZeroBased());"},{"lineNumber":149,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":150,"author":{"gitID":"x3tsunayh"},"content":"                if (checkEventDay(e, dayValue)"},{"lineNumber":151,"author":{"gitID":"x3tsunayh"},"content":"                        \u0026\u0026 checkEventMonth(e, monthValue)"},{"lineNumber":152,"author":{"gitID":"x3tsunayh"},"content":"                        \u0026\u0026 checkEventYear(e, yearValue)) {"},{"lineNumber":153,"author":{"gitID":"x3tsunayh"},"content":"                    eventExist \u003d true;"},{"lineNumber":154,"author":{"gitID":"x3tsunayh"},"content":"                }"},{"lineNumber":155,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":157,"author":{"gitID":"x3tsunayh"},"content":"            Text dateNumber \u003d new Text(String.valueOf(calendarDate.getDayOfMonth()));"},{"lineNumber":158,"author":{"gitID":"x3tsunayh"},"content":"            // Days from a different month shows up as a different colour"},{"lineNumber":159,"author":{"gitID":"x3tsunayh"},"content":"            if (calendarDate.getMonthValue() !\u003d yearMonth.getMonthValue()) {"},{"lineNumber":160,"author":{"gitID":"x3tsunayh"},"content":"                dateNumber.setFill(Color.DARKGREY);"},{"lineNumber":161,"author":{"gitID":"x3tsunayh"},"content":"            } else {"},{"lineNumber":162,"author":{"gitID":"x3tsunayh"},"content":"                dateNumber.setFill(Color.WHITE);"},{"lineNumber":163,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"x3tsunayh"},"content":"            ap.setDate(calendarDate);"},{"lineNumber":165,"author":{"gitID":"x3tsunayh"},"content":"            ap.setTopAnchor(dateNumber, 5.0);"},{"lineNumber":166,"author":{"gitID":"x3tsunayh"},"content":"            ap.setLeftAnchor(dateNumber, 5.0);"},{"lineNumber":167,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":168,"author":{"gitID":"x3tsunayh"},"content":"            if (eventExist) {"},{"lineNumber":169,"author":{"gitID":"x3tsunayh"},"content":"                ap.setOnMouseClicked(ev -\u003e {"},{"lineNumber":170,"author":{"gitID":"x3tsunayh"},"content":"                    String commandText \u003d FindEventCommand.getCommandWord()"},{"lineNumber":171,"author":{"gitID":"x3tsunayh"},"content":"                            + \" \" + PREFIX_EVENT_DATETIME + getFormatDate(dayValue, monthValue, yearValue);"},{"lineNumber":172,"author":{"gitID":"x3tsunayh"},"content":"                    try {"},{"lineNumber":173,"author":{"gitID":"x3tsunayh"},"content":"                        CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":174,"author":{"gitID":"x3tsunayh"},"content":"                        logger.info(\"Command Result: \" + commandResult.feedbackToUser);"},{"lineNumber":175,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":176,"author":{"gitID":"x3tsunayh"},"content":"                    } catch (CommandException | IllegalValueException e) {"},{"lineNumber":177,"author":{"gitID":"x3tsunayh"},"content":"                        logger.info(\"Invalid Command: \" + commandText);"},{"lineNumber":178,"author":{"gitID":"x3tsunayh"},"content":"                    }"},{"lineNumber":179,"author":{"gitID":"x3tsunayh"},"content":"                });"},{"lineNumber":180,"author":{"gitID":"x3tsunayh"},"content":"                ap.setStyle(\"-fx-background-color: #2e5577;\");"},{"lineNumber":181,"author":{"gitID":"x3tsunayh"},"content":"            } else {"},{"lineNumber":182,"author":{"gitID":"x3tsunayh"},"content":"                ap.setStyle(\"-fx-background-color: #3d719d;\");"},{"lineNumber":183,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":184,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":185,"author":{"gitID":"x3tsunayh"},"content":"            ap.getChildren().add(dateNumber);"},{"lineNumber":186,"author":{"gitID":"x3tsunayh"},"content":"            calendarDate \u003d calendarDate.plusDays(1);"},{"lineNumber":187,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":189,"author":{"gitID":"x3tsunayh"},"content":"        // Change the title of the calendar"},{"lineNumber":190,"author":{"gitID":"x3tsunayh"},"content":"        calendarTitle.setText(yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear()));"},{"lineNumber":191,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":193,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"x3tsunayh"},"content":"     * Provides layout for the calendar month with anchor panes."},{"lineNumber":195,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"x3tsunayh"},"content":"    private void calendarMonthSetup(GridPane calendar) {"},{"lineNumber":197,"author":{"gitID":"x3tsunayh"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {"},{"lineNumber":198,"author":{"gitID":"x3tsunayh"},"content":"            for (int j \u003d 0; j \u003c 7; j++) {"},{"lineNumber":199,"author":{"gitID":"x3tsunayh"},"content":"                AnchorPaneNode ap \u003d new AnchorPaneNode();"},{"lineNumber":200,"author":{"gitID":"x3tsunayh"},"content":"                ap.getStyleClass().add(\"anchor\");"},{"lineNumber":201,"author":{"gitID":"x3tsunayh"},"content":"                ap.setPrefSize(100, 100);"},{"lineNumber":202,"author":{"gitID":"x3tsunayh"},"content":"                calendar.add(ap, j, i);"},{"lineNumber":203,"author":{"gitID":"x3tsunayh"},"content":"                calendarMonth.add(ap);"},{"lineNumber":204,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":205,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":208,"author":{"gitID":"x3tsunayh"},"content":"    private void previousMonth() {"},{"lineNumber":209,"author":{"gitID":"x3tsunayh"},"content":"        currentYearMonth \u003d currentYearMonth.minusMonths(1);"},{"lineNumber":210,"author":{"gitID":"x3tsunayh"},"content":"        populateCalendar(currentYearMonth, null);"},{"lineNumber":211,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":213,"author":{"gitID":"x3tsunayh"},"content":"    private void nextMonth() {"},{"lineNumber":214,"author":{"gitID":"x3tsunayh"},"content":"        currentYearMonth \u003d currentYearMonth.plusMonths(1);"},{"lineNumber":215,"author":{"gitID":"x3tsunayh"},"content":"        populateCalendar(currentYearMonth, null);"},{"lineNumber":216,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":218,"author":{"gitID":"x3tsunayh"},"content":"    private void originalYearMonth() {"},{"lineNumber":219,"author":{"gitID":"x3tsunayh"},"content":"        currentYearMonth \u003d defaultYearMonth;"},{"lineNumber":220,"author":{"gitID":"x3tsunayh"},"content":"        populateCalendar(currentYearMonth, null);"},{"lineNumber":221,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":223,"author":{"gitID":"x3tsunayh"},"content":"    public YearMonth getCurrentYearMonth() {"},{"lineNumber":224,"author":{"gitID":"x3tsunayh"},"content":"        return currentYearMonth;"},{"lineNumber":225,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":227,"author":{"gitID":"x3tsunayh"},"content":"    public void setCurrentYearMonth(YearMonth currentYearMonth) {"},{"lineNumber":228,"author":{"gitID":"x3tsunayh"},"content":"        this.currentYearMonth \u003d currentYearMonth;"},{"lineNumber":229,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":231,"author":{"gitID":"x3tsunayh"},"content":"    public VBox getView() {"},{"lineNumber":232,"author":{"gitID":"x3tsunayh"},"content":"        return view;"},{"lineNumber":233,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":235,"author":{"gitID":"x3tsunayh"},"content":"    public ArrayList\u003cAnchorPaneNode\u003e getAllCalendarDays() {"},{"lineNumber":236,"author":{"gitID":"x3tsunayh"},"content":"        return calendarMonth;"},{"lineNumber":237,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":239,"author":{"gitID":"x3tsunayh"},"content":"    public void setAllCalendarDays(ArrayList\u003cAnchorPaneNode\u003e allCalendarDays) {"},{"lineNumber":240,"author":{"gitID":"x3tsunayh"},"content":"        this.calendarMonth \u003d allCalendarDays;"},{"lineNumber":241,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":243,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"x3tsunayh"},"content":"     * Check whether the event Day matches the input dayValue"},{"lineNumber":245,"author":{"gitID":"x3tsunayh"},"content":"     * @param event"},{"lineNumber":246,"author":{"gitID":"x3tsunayh"},"content":"     * @param dayValue"},{"lineNumber":247,"author":{"gitID":"x3tsunayh"},"content":"     * @return"},{"lineNumber":248,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"x3tsunayh"},"content":"    private boolean checkEventDay(ReadOnlyEvent event, String dayValue) {"},{"lineNumber":250,"author":{"gitID":"x3tsunayh"},"content":"        if (dayValue.length() \u003d\u003d 1) {"},{"lineNumber":251,"author":{"gitID":"x3tsunayh"},"content":"            return event.getDatetime().value.substring(0, 2).equals(\"0\" + dayValue);"},{"lineNumber":252,"author":{"gitID":"x3tsunayh"},"content":"        } else {"},{"lineNumber":253,"author":{"gitID":"x3tsunayh"},"content":"            return event.getDatetime().value.substring(0, 2).equals(dayValue);"},{"lineNumber":254,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":257,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"x3tsunayh"},"content":"     * Check whether the event Day matches the input monthValue"},{"lineNumber":259,"author":{"gitID":"x3tsunayh"},"content":"     * @param event"},{"lineNumber":260,"author":{"gitID":"x3tsunayh"},"content":"     * @param monthValue"},{"lineNumber":261,"author":{"gitID":"x3tsunayh"},"content":"     * @return"},{"lineNumber":262,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"x3tsunayh"},"content":"    private boolean checkEventMonth(ReadOnlyEvent event, String monthValue) {"},{"lineNumber":264,"author":{"gitID":"x3tsunayh"},"content":"        if (monthValue.length() \u003d\u003d 1) {"},{"lineNumber":265,"author":{"gitID":"x3tsunayh"},"content":"            return event.getDatetime().value.substring(3, 5).equals(\"0\" + monthValue);"},{"lineNumber":266,"author":{"gitID":"x3tsunayh"},"content":"        } else {"},{"lineNumber":267,"author":{"gitID":"x3tsunayh"},"content":"            return event.getDatetime().value.substring(3, 5).equals(monthValue);"},{"lineNumber":268,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":271,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"x3tsunayh"},"content":"     * Check whether the event Day matches the input yearValue"},{"lineNumber":273,"author":{"gitID":"x3tsunayh"},"content":"     * @param event"},{"lineNumber":274,"author":{"gitID":"x3tsunayh"},"content":"     * @param yearValue"},{"lineNumber":275,"author":{"gitID":"x3tsunayh"},"content":"     * @return"},{"lineNumber":276,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"x3tsunayh"},"content":"    private boolean checkEventYear(ReadOnlyEvent event, String yearValue) {"},{"lineNumber":278,"author":{"gitID":"x3tsunayh"},"content":"        return event.getDatetime().value.substring(6, 10).equals(yearValue);"},{"lineNumber":279,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":281,"author":{"gitID":"x3tsunayh"},"content":"    private String getFormatDate(String day, String month, String year) {"},{"lineNumber":282,"author":{"gitID":"x3tsunayh"},"content":"        if (day.length() \u003d\u003d 1) {"},{"lineNumber":283,"author":{"gitID":"x3tsunayh"},"content":"            day \u003d \"0\" + day;"},{"lineNumber":284,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"x3tsunayh"},"content":"        if (month.length() \u003d\u003d 1) {"},{"lineNumber":286,"author":{"gitID":"x3tsunayh"},"content":"            month \u003d \"0\" + month;"},{"lineNumber":287,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"x3tsunayh"},"content":"        return day + \"-\" + month + \"-\" + year;"},{"lineNumber":289,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":291,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":288,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/EventPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.ui.EventCard;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":" * Represents a selection change in the Event List Panel"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"public class EventPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    private final EventCard newSelection;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    public EventPanelSelectionChangedEvent(EventCard newSelection) {"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    public EventCard getNewSelection() {"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        return newSelection;"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":25,"-":3}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.ui.CalendarView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    CommandResult execute(String commandText) throws CommandException, IllegalValueException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    void setCalendarView(CalendarView calendarView);"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    ObservableList\u003cReadOnlyEvent\u003e getFilteredEventList();"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"     * For passing in the UI Object TabPane"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    void setTabPane(TabPane tabPane);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":4,"x3tsunayh":13,"-":27}},{"path":"src/main/java/seedu/address/ui/EventListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.events.ui.EventPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":" * Panel containing the list of events."},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    private ListView\u003cEventCard\u003e eventListView;"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    public EventListPanel(ObservableList\u003cReadOnlyEvent\u003e eventList) {"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        setConnections(eventList);"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    private void setConnections(ObservableList\u003cReadOnlyEvent\u003e eventList) {"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"        ObservableList\u003cEventCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"                eventList, (event) -\u003e new EventCard(event, eventList.indexOf(event) + 1));"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"        eventListView.setItems(mappedList);"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        eventListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"                        raise(new EventPanelSelectionChangedEvent(newValue));"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"                    }"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"                });"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"    private void scrollTo(int index) {"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"            eventListView.scrollTo(index);"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"            eventListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"        });"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"    @Subscribe"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code EventCard}."},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"    class EventListViewCell extends ListCell\u003cEventCard\u003e {"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"        @Override"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"        protected void updateItem(EventCard event, boolean empty) {"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"            super.updateItem(event, empty);"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"            if (empty || event \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"                setGraphic(null);"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"                setText(null);"},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"            } else {"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"                setGraphic(event.getRoot());"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":73,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":"            Picture pic \u003d new Picture();"},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"            Person person \u003d new Person(name, phone, email, address, pic, tagList);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":63,"dezhanglee":3}},{"path":"src/main/java/seedu/address/commons/events/model/EventBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":" * Indicates the EventBook in the model has changed"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"public class EventBookChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    public final ReadOnlyEventBook data;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    public EventBookChangedEvent(ReadOnlyEventBook data) {"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"        this.data \u003d data;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"        return \"number of events \" + data.getEventList().size();"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":19,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/Parser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    T parse(String userInput) throws IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":1,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/DeleteByNameCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.DeleteByNameCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":10,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":11,"author":{"gitID":"dezhanglee"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":" */"},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"public class DeleteByNameCommandParser implements Parser\u003cDeleteByNameCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":"    private Name inputName;"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteByNameCommand"},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":"     * and returns an DeleteByNameCommand object for execution."},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"    public DeleteByNameCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":"            inputName \u003d ParserUtil.parseName(args);"},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"            return new DeleteByNameCommand(inputName);"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteByNameCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"dezhanglee":31,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/CalendarViewStateParser.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.FindEventCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.ui.CalendarView;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.ui.CalendarViewUpdate;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"* Parses user input to update calendar UI state."},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"*/"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"public class CalendarViewStateParser {"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    private static UserPrefs userPrefs;"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    private final Model model;"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    private CalendarView calendarView;"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    public CalendarViewStateParser(UserPrefs userPrefs, Model model, CalendarView calendarView) {"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        this.userPrefs \u003d userPrefs;"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"        this.calendarView \u003d calendarView;"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"     * update the state of the calendar UI object with reference to the user input"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"     * @param userInput"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"     * @throws ParseException"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    public void updateViewState(String userInput) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        //Checks whether CalendarView is null"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(calendarView);"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        if (!matcher.matches()) {"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"        if (commandWord.equals(AddEventCommand.COMMAND_WORD)"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"                || commandWord.equals(DeleteEventCommand.COMMAND_WORD)"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"                //|| commandWord.equals(EditEventCommand.COMMAND_WORD)"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"                //|| commandWord.equals(ListEventCommand.COMMAND_WORD)"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"                //|| commandWord.equals(OrderEventCommand.COMMAND_WORD)"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"                || commandWord.equals(ClearCommand.COMMAND_WORD)"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"                || commandWord.equals(ClearCommand.COMMAND_ALIAS)"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"                || commandWord.equals(UndoCommand.COMMAND_WORD)"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"                || commandWord.equals(UndoCommand.COMMAND_ALIAS)"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"                || commandWord.equals(RedoCommand.COMMAND_WORD)"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"                || commandWord.equals(RedoCommand.COMMAND_ALIAS)) {"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"            CalendarViewUpdate.updateViewState(calendarView);"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"        } else if (commandWord.equals(FindEventCommand.COMMAND_WORD)) {"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"            CalendarViewUpdate.updateFindState(calendarView, model);"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":62,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/ExportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"//author @x3tsunayh"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":" * Parses input arguments and creates a new ExportCommand object"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportCommand"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"     * and returns an ExportCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    public ExportCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"            String filePath \u003d ParserUtil.parseFilePath(args);"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"            return new ExportCommand(filePath);"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"}"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""}],"authorContributionMap":{"x3tsunayh":26,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        List\u003cPrefix\u003e prefixLists \u003d Arrays.asList(PREFIX_NAME, PREFIX_TAG);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"jill858"},"content":"        //@@author jill858"},{"lineNumber":35,"author":{"gitID":"jill858"},"content":"        String targetPrefix \u003d getPrefix(trimmedArgs);"},{"lineNumber":36,"author":{"gitID":"jill858"},"content":"        String[] keywords \u003d getKeywords(trimmedArgs);"},{"lineNumber":37,"author":{"gitID":"jill858"},"content":""},{"lineNumber":38,"author":{"gitID":"jill858"},"content":"        if (targetPrefix.equals(PREFIX_NAME.getPrefix())) {"},{"lineNumber":39,"author":{"gitID":"jill858"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":40,"author":{"gitID":"jill858"},"content":"        } else if (targetPrefix.equals(PREFIX_TAG.getPrefix())) {"},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"            return new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":"        } else {"},{"lineNumber":43,"author":{"gitID":"jill858"},"content":"            throw new ParseException("},{"lineNumber":44,"author":{"gitID":"jill858"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"jill858"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jill858"},"content":""},{"lineNumber":48,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":49,"author":{"gitID":"jill858"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"jill858"},"content":"     * Extract the search type"},{"lineNumber":51,"author":{"gitID":"jill858"},"content":"     * @param args command line input"},{"lineNumber":52,"author":{"gitID":"jill858"},"content":"     * @return"},{"lineNumber":53,"author":{"gitID":"jill858"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"jill858"},"content":"    private static String getPrefix(String args) {"},{"lineNumber":55,"author":{"gitID":"jill858"},"content":"        return args.substring(0, 2);"},{"lineNumber":56,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jill858"},"content":""},{"lineNumber":58,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":59,"author":{"gitID":"jill858"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"jill858"},"content":"     * Extract keywords out from the command"},{"lineNumber":61,"author":{"gitID":"jill858"},"content":"     * @param args command line input"},{"lineNumber":62,"author":{"gitID":"jill858"},"content":"     * @return"},{"lineNumber":63,"author":{"gitID":"jill858"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"jill858"},"content":"    private static String[] getKeywords(String args) {"},{"lineNumber":65,"author":{"gitID":"jill858"},"content":"        String[] keywords;"},{"lineNumber":66,"author":{"gitID":"jill858"},"content":""},{"lineNumber":67,"author":{"gitID":"jill858"},"content":"        String removePrefixKeywords \u003d args.substring(2);"},{"lineNumber":68,"author":{"gitID":"jill858"},"content":""},{"lineNumber":69,"author":{"gitID":"jill858"},"content":"        return keywords \u003d removePrefixKeywords.split(\"\\\\s+\");"},{"lineNumber":70,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jill858"},"content":""},{"lineNumber":72,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":39,"-":33}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.AddPictureCommand;"},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.AddTagCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ConvertCommand;"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.DeleteByNameCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.FindEventCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.ListAllEventsCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.SwitchTabCommand;"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskAddCommand;"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskDeleteCommand;"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand;"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskFindCommand;"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskListCommand;"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskSortCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":46,"author":{"gitID":"-"},"content":" */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"    private TabPane tabPane;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"    public Command parseCommand(String userInput) throws IllegalValueException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"        case ExportCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"        case ExportCommand.COMMAND_ALIAS:"},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":"            return new ExportCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"            return new SortCommand();"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":127,"author":{"gitID":"dezhanglee"},"content":"        case DeleteByNameCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitID":"dezhanglee"},"content":"            return new DeleteByNameCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        case ConvertCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        case ConvertCommand.COMMAND_ALIAS:"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return new ConvertCommandParser().parse(arguments);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"x3tsunayh"},"content":"        case AddEventCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"x3tsunayh"},"content":"            return new AddEventCommandParser().parse(arguments);"},{"lineNumber":136,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":137,"author":{"gitID":"x3tsunayh"},"content":"        case DeleteEventCommand.COMMAND_WORD:"},{"lineNumber":138,"author":{"gitID":"x3tsunayh"},"content":"            return new DeleteEventCommandParser().parse(arguments);"},{"lineNumber":139,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":140,"author":{"gitID":"x3tsunayh"},"content":"        case FindEventCommand.COMMAND_WORD:"},{"lineNumber":141,"author":{"gitID":"x3tsunayh"},"content":"            return new FindEventCommandParser().parse(arguments);"},{"lineNumber":142,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":143,"author":{"gitID":"x3tsunayh"},"content":"        case ListAllEventsCommand.COMMAND_WORD:"},{"lineNumber":144,"author":{"gitID":"x3tsunayh"},"content":"        case ListAllEventsCommand.COMMAND_WORD_TWO:"},{"lineNumber":145,"author":{"gitID":"x3tsunayh"},"content":"        case ListAllEventsCommand.COMMAND_WORD_THREE:"},{"lineNumber":146,"author":{"gitID":"x3tsunayh"},"content":"            return new ListAllEventsCommand();"},{"lineNumber":147,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":148,"author":{"gitID":"x3tsunayh"},"content":"        case SwitchTabCommand.COMMAND_WORD:"},{"lineNumber":149,"author":{"gitID":"x3tsunayh"},"content":"        case SwitchTabCommand.COMMAND_WORD_TWO:"},{"lineNumber":150,"author":{"gitID":"x3tsunayh"},"content":"            return new SwitchTabCommand(tabPane);"},{"lineNumber":151,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":152,"author":{"gitID":"dezhanglee"},"content":"        case AddPictureCommand.COMMAND_WORD:"},{"lineNumber":153,"author":{"gitID":"dezhanglee"},"content":"            return new AddPictureCommandParser().parse(arguments);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"CYX28"},"content":"        case TaskAddCommand.COMMAND_WORD:"},{"lineNumber":156,"author":{"gitID":"CYX28"},"content":"        case TaskAddCommand.COMMAND_ALIAS:"},{"lineNumber":157,"author":{"gitID":"CYX28"},"content":"            return new TaskAddCommandParser().parse(arguments);"},{"lineNumber":158,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":159,"author":{"gitID":"CYX28"},"content":"        case TaskDeleteCommand.COMMAND_WORD:"},{"lineNumber":160,"author":{"gitID":"CYX28"},"content":"        case TaskDeleteCommand.COMMAND_ALIAS:"},{"lineNumber":161,"author":{"gitID":"CYX28"},"content":"            return new TaskDeleteCommandParser().parse(arguments);"},{"lineNumber":162,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":163,"author":{"gitID":"CYX28"},"content":"        case TaskEditCommand.COMMAND_WORD:"},{"lineNumber":164,"author":{"gitID":"CYX28"},"content":"        case TaskEditCommand.COMMAND_ALIAS:"},{"lineNumber":165,"author":{"gitID":"CYX28"},"content":"            return new TaskEditCommandParser().parse(arguments);"},{"lineNumber":166,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":167,"author":{"gitID":"CYX28"},"content":"        case TaskFindCommand.COMMAND_WORD:"},{"lineNumber":168,"author":{"gitID":"CYX28"},"content":"        case TaskFindCommand.COMMAND_ALIAS:"},{"lineNumber":169,"author":{"gitID":"CYX28"},"content":"            return new TaskFindCommandParser().parse(arguments);"},{"lineNumber":170,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":171,"author":{"gitID":"CYX28"},"content":"        case TaskListCommand.COMMAND_WORD:"},{"lineNumber":172,"author":{"gitID":"CYX28"},"content":"        case TaskListCommand.COMMAND_ALIAS:"},{"lineNumber":173,"author":{"gitID":"CYX28"},"content":"            return new TaskListCommand();"},{"lineNumber":174,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":175,"author":{"gitID":"CYX28"},"content":"        case TaskSortCommand.COMMAND_WORD:"},{"lineNumber":176,"author":{"gitID":"CYX28"},"content":"        case TaskSortCommand.COMMAND_ALIAS:"},{"lineNumber":177,"author":{"gitID":"CYX28"},"content":"            return new TaskSortCommand();"},{"lineNumber":178,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":179,"author":{"gitID":"dezhanglee"},"content":"        case AddTagCommand.COMMAND_WORD:"},{"lineNumber":180,"author":{"gitID":"dezhanglee"},"content":"            return new AddTagCommandParser().parse(arguments);"},{"lineNumber":181,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":187,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"x3tsunayh"},"content":"     * Used for passing in the UI TabPane"},{"lineNumber":189,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"x3tsunayh"},"content":"    public void setTabPane(TabPane tabPane) {"},{"lineNumber":191,"author":{"gitID":"x3tsunayh"},"content":"        this.tabPane \u003d tabPane;"},{"lineNumber":192,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":35,"x3tsunayh":38,"-":108,"dezhanglee":12}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.AddPictureCommand;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Datetime;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDueDate;"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskStatus;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":180,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"x3tsunayh"},"content":"     * Checks if {@code String args} is empty or valid."},{"lineNumber":182,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"x3tsunayh"},"content":"    public static String parseFilePath(String args) throws IllegalValueException {"},{"lineNumber":184,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(args);"},{"lineNumber":185,"author":{"gitID":"x3tsunayh"},"content":"        String filePath \u003d args.trim();"},{"lineNumber":186,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":187,"author":{"gitID":"x3tsunayh"},"content":"        if (filePath.isEmpty()) {"},{"lineNumber":188,"author":{"gitID":"x3tsunayh"},"content":"            throw new IllegalValueException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":189,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"x3tsunayh"},"content":"        return filePath;"},{"lineNumber":191,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":193,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"dezhanglee"},"content":"     * Checks if (@code String args) is a valid image filename or directory leading to a image file"},{"lineNumber":195,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":197,"author":{"gitID":"dezhanglee"},"content":"    public static String parseImageFilename(String args) throws IllegalValueException {"},{"lineNumber":198,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(args);"},{"lineNumber":199,"author":{"gitID":"dezhanglee"},"content":"        String file \u003d args.trim();"},{"lineNumber":200,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":201,"author":{"gitID":"dezhanglee"},"content":"        if (file.isEmpty() || !Picture.isValidPath(file)) {"},{"lineNumber":202,"author":{"gitID":"dezhanglee"},"content":"            throw new IllegalValueException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":203,"author":{"gitID":"dezhanglee"},"content":"                    AddPictureCommand.MESSAGE_USAGE));"},{"lineNumber":204,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":206,"author":{"gitID":"dezhanglee"},"content":"        return file;"},{"lineNumber":207,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":209,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":210,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code String taskName} into a {@code TaskName}."},{"lineNumber":212,"author":{"gitID":"CYX28"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":213,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":214,"author":{"gitID":"CYX28"},"content":"     * @throws IllegalValueException if the given {@code taskName} is invalid."},{"lineNumber":215,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"CYX28"},"content":"    public static TaskName parseTaskName(String taskName) throws IllegalValueException {"},{"lineNumber":217,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskName);"},{"lineNumber":218,"author":{"gitID":"CYX28"},"content":"        String trimmedTaskName \u003d taskName.trim();"},{"lineNumber":219,"author":{"gitID":"CYX28"},"content":"        if (!TaskName.isValidTaskName(trimmedTaskName)) {"},{"lineNumber":220,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskName.MESSAGE_TASK_NAME_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"CYX28"},"content":"        return new TaskName(trimmedTaskName);"},{"lineNumber":223,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":225,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code Optional\u003cString\u003e taskName} into an {@code Optional\u003cTaskName\u003e} if {@code taskName} is present."},{"lineNumber":227,"author":{"gitID":"CYX28"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":228,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"CYX28"},"content":"    public static Optional\u003cTaskName\u003e parseTaskName(Optional\u003cString\u003e taskName) throws IllegalValueException {"},{"lineNumber":230,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskName);"},{"lineNumber":231,"author":{"gitID":"CYX28"},"content":"        return taskName.isPresent() ? Optional.of(parseTaskName(taskName.get())) : Optional.empty();"},{"lineNumber":232,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":234,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code String taskPriority} into a {@code TaskPriority}."},{"lineNumber":236,"author":{"gitID":"CYX28"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":237,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":238,"author":{"gitID":"CYX28"},"content":"     * @throws IllegalValueException if the given {@code taskPriority} is invalid."},{"lineNumber":239,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"CYX28"},"content":"    public static TaskPriority parseTaskPriority(String taskPriority) throws IllegalValueException {"},{"lineNumber":241,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskPriority);"},{"lineNumber":242,"author":{"gitID":"CYX28"},"content":"        String trimmedTaskPriority \u003d taskPriority.trim();"},{"lineNumber":243,"author":{"gitID":"CYX28"},"content":"        if (!TaskPriority.isValidTaskPriority(trimmedTaskPriority)) {"},{"lineNumber":244,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskPriority.MESSAGE_TASK_PRIORITY_CONSTRAINTS);"},{"lineNumber":245,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"CYX28"},"content":"        return new TaskPriority(trimmedTaskPriority);"},{"lineNumber":247,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":249,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code Optional\u003cString\u003e taskPriority} into an {@code Optional\u003cTaskPriority\u003e}"},{"lineNumber":251,"author":{"gitID":"CYX28"},"content":"     * if {@code taskPriority} is present."},{"lineNumber":252,"author":{"gitID":"CYX28"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":253,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"CYX28"},"content":"    public static Optional\u003cTaskPriority\u003e parseTaskPriority(Optional\u003cString\u003e taskPriority) throws IllegalValueException {"},{"lineNumber":255,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskPriority);"},{"lineNumber":256,"author":{"gitID":"CYX28"},"content":"        return taskPriority.isPresent() ? Optional.of(parseTaskPriority(taskPriority.get())) : Optional.empty();"},{"lineNumber":257,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":259,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code String taskDescription} into a {@code TaskDescription}."},{"lineNumber":261,"author":{"gitID":"CYX28"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":262,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":263,"author":{"gitID":"CYX28"},"content":"     * @throws IllegalValueException if the given {@code taskDescription} is invalid."},{"lineNumber":264,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"CYX28"},"content":"    public static TaskDescription parseTaskDescription(String taskDescription) throws IllegalValueException {"},{"lineNumber":266,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskDescription);"},{"lineNumber":267,"author":{"gitID":"CYX28"},"content":"        String trimmedTaskDescription \u003d taskDescription.trim();"},{"lineNumber":268,"author":{"gitID":"CYX28"},"content":"        if (!TaskDescription.isValidTaskDescription(trimmedTaskDescription)) {"},{"lineNumber":269,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskDescription.MESSAGE_TASK_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":270,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"CYX28"},"content":"        return new TaskDescription(trimmedTaskDescription);"},{"lineNumber":272,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":274,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code Optional\u003cString\u003e taskDescription} into an {@code Optional\u003cTaskDescription\u003e}"},{"lineNumber":276,"author":{"gitID":"CYX28"},"content":"     * if {@code taskDescription} is present."},{"lineNumber":277,"author":{"gitID":"CYX28"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":278,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"CYX28"},"content":"    public static Optional\u003cTaskDescription\u003e parseTaskDescription(Optional\u003cString\u003e taskDescription)"},{"lineNumber":280,"author":{"gitID":"CYX28"},"content":"            throws IllegalValueException {"},{"lineNumber":281,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskDescription);"},{"lineNumber":282,"author":{"gitID":"CYX28"},"content":"        return taskDescription.isPresent()"},{"lineNumber":283,"author":{"gitID":"CYX28"},"content":"                ? Optional.of(parseTaskDescription(taskDescription.get())) : Optional.empty();"},{"lineNumber":284,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":286,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code String taskDueDate} into a {@code TaskDueDate}."},{"lineNumber":288,"author":{"gitID":"CYX28"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":289,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":290,"author":{"gitID":"CYX28"},"content":"     * @throws IllegalValueException if the given {@code taskDueDate} is invalid."},{"lineNumber":291,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"CYX28"},"content":"    public static TaskDueDate parseTaskDueDate(String taskDueDate) throws IllegalValueException {"},{"lineNumber":293,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskDueDate);"},{"lineNumber":294,"author":{"gitID":"CYX28"},"content":"        String trimmedTaskDueDate \u003d taskDueDate.trim();"},{"lineNumber":295,"author":{"gitID":"CYX28"},"content":"        if (!TaskDueDate.isValidTaskDueDate(trimmedTaskDueDate)) {"},{"lineNumber":296,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskDueDate.MESSAGE_TASK_DUE_DATE_CONSTRAINTS);"},{"lineNumber":297,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"CYX28"},"content":"        return new TaskDueDate(trimmedTaskDueDate);"},{"lineNumber":299,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":301,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":302,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code Optional\u003cString\u003e taskDueDate} into an {@code Optional\u003cTaskDueDate\u003e}"},{"lineNumber":303,"author":{"gitID":"CYX28"},"content":"     * if {@code taskDueDate} is present."},{"lineNumber":304,"author":{"gitID":"CYX28"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":305,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":306,"author":{"gitID":"CYX28"},"content":"    public static Optional\u003cTaskDueDate\u003e parseTaskDueDate(Optional\u003cString\u003e taskDueDate) throws IllegalValueException {"},{"lineNumber":307,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskDueDate);"},{"lineNumber":308,"author":{"gitID":"CYX28"},"content":"        return taskDueDate.isPresent() ? Optional.of(parseTaskDueDate(taskDueDate.get())) : Optional.empty();"},{"lineNumber":309,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":311,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code String taskStatus} into a {@code TaskStatus}."},{"lineNumber":313,"author":{"gitID":"CYX28"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":314,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":315,"author":{"gitID":"CYX28"},"content":"     * @throws IllegalValueException if the given {@code taskStatus} is invalid."},{"lineNumber":316,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"CYX28"},"content":"    public static TaskStatus parseTaskStatus(String taskStatus) throws IllegalValueException {"},{"lineNumber":318,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskStatus);"},{"lineNumber":319,"author":{"gitID":"CYX28"},"content":"        String trimmedTaskStatus \u003d taskStatus.trim();"},{"lineNumber":320,"author":{"gitID":"CYX28"},"content":"        if (!TaskStatus.isValidTaskStatus(trimmedTaskStatus)) {"},{"lineNumber":321,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskStatus.MESSAGE_TASK_STATUS_CONSTRAINTS);"},{"lineNumber":322,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":323,"author":{"gitID":"CYX28"},"content":"        return new TaskStatus(trimmedTaskStatus);"},{"lineNumber":324,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":326,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":327,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code Optional\u003cString\u003e taskStatus} into an {@code Optional\u003cTaskStatus\u003e}"},{"lineNumber":328,"author":{"gitID":"CYX28"},"content":"     * if {@code taskStatus} is present."},{"lineNumber":329,"author":{"gitID":"CYX28"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":330,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":331,"author":{"gitID":"CYX28"},"content":"    public static Optional\u003cTaskStatus\u003e parseTaskStatus(Optional\u003cString\u003e taskStatus) throws IllegalValueException {"},{"lineNumber":332,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskStatus);"},{"lineNumber":333,"author":{"gitID":"CYX28"},"content":"        return taskStatus.isPresent() ? Optional.of(parseTaskStatus(taskStatus.get())) : Optional.empty();"},{"lineNumber":334,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":336,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":337,"author":{"gitID":"CYX28"},"content":"     * Parses a {@code String taskCategory} into a {@code TaskCategory}."},{"lineNumber":338,"author":{"gitID":"CYX28"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":339,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":340,"author":{"gitID":"CYX28"},"content":"     * @throws IllegalValueException if the given {@code taskCategory} is invalid."},{"lineNumber":341,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":342,"author":{"gitID":"CYX28"},"content":"    public static TaskCategory parseTaskCategory(String taskCategory) throws IllegalValueException {"},{"lineNumber":343,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskCategory);"},{"lineNumber":344,"author":{"gitID":"CYX28"},"content":"        String trimmedTaskCategory \u003d taskCategory.trim();"},{"lineNumber":345,"author":{"gitID":"CYX28"},"content":"        if (!TaskCategory.isValidTaskCategoryName(trimmedTaskCategory)) {"},{"lineNumber":346,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskCategory.MESSAGE_TASK_CATEGORY_CONSTRAINTS);"},{"lineNumber":347,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":348,"author":{"gitID":"CYX28"},"content":"        return new TaskCategory(trimmedTaskCategory);"},{"lineNumber":349,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":351,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":352,"author":{"gitID":"CYX28"},"content":"     * Parses {@code Collection\u003cString\u003e taskCategories} into a {@code Set\u003cTaskCategory\u003e}."},{"lineNumber":353,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"CYX28"},"content":"    public static Set\u003cTaskCategory\u003e parseTaskCategories(Collection\u003cString\u003e taskCategories)"},{"lineNumber":355,"author":{"gitID":"CYX28"},"content":"            throws IllegalValueException {"},{"lineNumber":356,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskCategories);"},{"lineNumber":357,"author":{"gitID":"CYX28"},"content":"        final Set\u003cTaskCategory\u003e taskCategorySet \u003d new HashSet\u003c\u003e();"},{"lineNumber":358,"author":{"gitID":"CYX28"},"content":"        for (String taskCategoryName : taskCategories) {"},{"lineNumber":359,"author":{"gitID":"CYX28"},"content":"            taskCategorySet.add(parseTaskCategory(taskCategoryName));"},{"lineNumber":360,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":361,"author":{"gitID":"CYX28"},"content":"        return taskCategorySet;"},{"lineNumber":362,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":364,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":365,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":366,"author":{"gitID":"x3tsunayh"},"content":"     * Parses a {@code Optional\u003cString\u003e datetime} into an {@code Optional\u003cDatetime\u003e} if {@code datetime} is present."},{"lineNumber":367,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":368,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":369,"author":{"gitID":"x3tsunayh"},"content":"    public static Optional\u003cDatetime\u003e parseDatetime(Optional\u003cString\u003e datetime) throws IllegalValueException {"},{"lineNumber":370,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(datetime);"},{"lineNumber":371,"author":{"gitID":"x3tsunayh"},"content":"        return datetime.isPresent() ? Optional.of(new Datetime(datetime.get())) : Optional.empty();"},{"lineNumber":372,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":163,"x3tsunayh":21,"-":171,"dezhanglee":18}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"f/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    //@@author x3tsunayh"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    public static final Prefix PREFIX_EVENT_TITLE \u003d new Prefix(\"et/\");"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    public static final Prefix PREFIX_EVENT_DESCRIPTION \u003d new Prefix(\"ed/\");"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    public static final Prefix PREFIX_EVENT_LOCATION \u003d new Prefix(\"el/\");"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    public static final Prefix PREFIX_EVENT_DATETIME \u003d new Prefix(\"edt/\");"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    public static final Prefix PREFIX_TASK_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    public static final Prefix PREFIX_TASK_PRIORITY \u003d new Prefix(\"p/\");"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    public static final Prefix PREFIX_TASK_DESCRIPTION \u003d new Prefix(\"d/\");"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    public static final Prefix PREFIX_TASK_DUE_DATE \u003d new Prefix(\"dd/\");"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    public static final Prefix PREFIX_TASK_STATUS \u003d new Prefix(\"s/\");"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    public static final Prefix PREFIX_TASK_CATEGORY \u003d new Prefix(\"c/\");"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":9,"x3tsunayh":6,"-":14,"dezhanglee":1}},{"path":"src/main/java/seedu/address/logic/parser/FindEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.FindEventCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.TitleContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" * Parses input arguments and creates a new FindEventCommand object"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"public class FindEventCommandParser implements Parser\u003cFindEventCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"     * Parses the given {@code String} of arguments in the context of the FindEventCommand"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    public FindEventCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"        if (trimmedArgs.substring(0, 2).equals(\"et\")) {"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"            TitleContainsKeywordsPredicate.setPredicateType(\"et\");"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        } else if (trimmedArgs.substring(0, 3).equals(\"edt\")) {"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"            TitleContainsKeywordsPredicate.setPredicateType(\"edt\");"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        } else if (trimmedArgs.substring(0, 2).equals(\"ed\")) {"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"            TitleContainsKeywordsPredicate.setPredicateType(\"ed\");"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        } else if (trimmedArgs.substring(0, 2).equals(\"em\")) {"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"            TitleContainsKeywordsPredicate.setPredicateType(\"em\");"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        } else {"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"            throw new ParseException("},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        if (trimmedArgs.substring(0, 3).equals(\"edt\")) {"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"            trimmedArgs \u003d trimmedArgs.substring(4).trim();"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"            trimmedArgs \u003d trimmedArgs.substring(3).trim();"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"        String[] titleKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        return new FindEventCommand(new TitleContainsKeywordsPredicate(Arrays.asList(titleKeywords)));"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":46,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/AddPictureCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":7,"author":{"gitID":"dezhanglee"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":9,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.AddPictureCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":" * Parses input arguments and creates a new AddPictureCommand object"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":" */"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":"public class AddPictureCommandParser implements Parser\u003cAddPictureCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"    private String path;"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":"    private Index index;"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteByNameCommand"},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"     * and returns an DeleteByNameCommand object for execution."},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"    public AddPictureCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_FILEPATH);"},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_FILEPATH)"},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"                || argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPictureCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":"            throw new ParseException(Picture.MESSAGE_PICTURE_CONSTRAINTS);"},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"            path \u003d ParserUtil.parseImageFilename(argMultimap.getValue(PREFIX_FILEPATH).get());"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":"        } catch (Exception e) {"},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPictureCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":"        return new AddPictureCommand(index, path);"},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"dezhanglee":56,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DATETIME;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TITLE;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Datetime;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":" * Parses input arguments and creates a new AddEventCommand object"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"     * and returns an AddEventCommand object for execution."},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    public AddEventCommand parse(String args) throws IllegalValueException {"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"                ArgumentTokenizer.tokenize(args,"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"                        PREFIX_EVENT_TITLE, PREFIX_EVENT_DESCRIPTION, PREFIX_EVENT_LOCATION, PREFIX_EVENT_DATETIME);"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        if (!arePrefixesPresent(argMultimap,"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"                PREFIX_EVENT_TITLE, PREFIX_EVENT_DESCRIPTION, PREFIX_EVENT_LOCATION, PREFIX_EVENT_DATETIME)) {"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        String title \u003d argMultimap.getValue(PREFIX_EVENT_TITLE).get();"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        String description \u003d argMultimap.getValue(PREFIX_EVENT_DESCRIPTION).get();"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        String location \u003d argMultimap.getValue(PREFIX_EVENT_LOCATION).get();"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"        Datetime datetime \u003d ParserUtil.parseDatetime(argMultimap.getValue(PREFIX_EVENT_DATETIME)).get();"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEvent event \u003d new Event(title, description, location, datetime);"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"        return new AddEventCommand(event);"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":54,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/TaskFindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskFindCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskNameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":" * Parses input arguments and creates a new TaskFindCommand object"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"public class TaskFindCommandParser implements Parser\u003cTaskFindCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"     * Parses the given {@code String} of arguments in the context of the TaskFindCommand"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"     * and returns a TaskFindCommand object for execution."},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    public TaskFindCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskFindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        String[] taskNameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        return new TaskFindCommand(new TaskNameContainsKeywordsPredicate(Arrays.asList(taskNameKeywords)));"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":26,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":" * Parses input arguments and creates a new DeleteEventCommand object"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"     * and returns an DeleteEventCommand object for execution."},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"     * @throws ParseException if the user input is not of acceptable format"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    public DeleteEventCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"            return new DeleteEventCommand(index);"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":25,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/ConvertCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ConvertCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Currency;"},{"lineNumber":8,"author":{"gitID":"jill858"},"content":"//@@author jill858"},{"lineNumber":9,"author":{"gitID":"jill858"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jill858"},"content":" * Parses input arguments and creates a new ConvertCommand object"},{"lineNumber":11,"author":{"gitID":"jill858"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jill858"},"content":"public class ConvertCommandParser implements Parser\u003cConvertCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"jill858"},"content":""},{"lineNumber":14,"author":{"gitID":"jill858"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"jill858"},"content":"     * Parses the given {@code String} of arguments in the context of the ConvertCommand"},{"lineNumber":16,"author":{"gitID":"jill858"},"content":"     * and returns an ConvertCommand object for execution."},{"lineNumber":17,"author":{"gitID":"jill858"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"jill858"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"jill858"},"content":"    public ConvertCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"jill858"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":21,"author":{"gitID":"jill858"},"content":"        double value;"},{"lineNumber":22,"author":{"gitID":"jill858"},"content":"        String fromCurrencyCode;"},{"lineNumber":23,"author":{"gitID":"jill858"},"content":"        String toCurrencyCode;"},{"lineNumber":24,"author":{"gitID":"jill858"},"content":""},{"lineNumber":25,"author":{"gitID":"jill858"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"jill858"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"jill858"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"jill858"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"jill858"},"content":""},{"lineNumber":30,"author":{"gitID":"jill858"},"content":"        String[] currencyKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitID":"jill858"},"content":""},{"lineNumber":32,"author":{"gitID":"jill858"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"jill858"},"content":"            if (currencyKeywords.length \u003d\u003d 2) {"},{"lineNumber":34,"author":{"gitID":"jill858"},"content":"                //converting base rate"},{"lineNumber":35,"author":{"gitID":"jill858"},"content":"                value \u003d 1;"},{"lineNumber":36,"author":{"gitID":"jill858"},"content":"                fromCurrencyCode \u003d currencyKeywords[0].toUpperCase();"},{"lineNumber":37,"author":{"gitID":"jill858"},"content":"                toCurrencyCode \u003d currencyKeywords[1].toUpperCase();"},{"lineNumber":38,"author":{"gitID":"jill858"},"content":"            } else {"},{"lineNumber":39,"author":{"gitID":"jill858"},"content":"                //converting some value"},{"lineNumber":40,"author":{"gitID":"jill858"},"content":"                value \u003d Double.parseDouble(currencyKeywords[0]);"},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"                fromCurrencyCode \u003d currencyKeywords[1].toUpperCase();"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":"                toCurrencyCode \u003d currencyKeywords[2].toUpperCase();"},{"lineNumber":43,"author":{"gitID":"jill858"},"content":"            }"},{"lineNumber":44,"author":{"gitID":"jill858"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":45,"author":{"gitID":"jill858"},"content":"            throw new ParseException("},{"lineNumber":46,"author":{"gitID":"jill858"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"jill858"},"content":"        } catch (ArrayIndexOutOfBoundsException aie) {"},{"lineNumber":48,"author":{"gitID":"jill858"},"content":"            throw new ParseException("},{"lineNumber":49,"author":{"gitID":"jill858"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"jill858"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"jill858"},"content":""},{"lineNumber":52,"author":{"gitID":"jill858"},"content":"        boolean isValidFromCurrencyCode \u003d new Currency().containsCurrencyCode(fromCurrencyCode);"},{"lineNumber":53,"author":{"gitID":"jill858"},"content":"        boolean isValidToCurrencyCode \u003d new Currency().containsCurrencyCode(toCurrencyCode);"},{"lineNumber":54,"author":{"gitID":"jill858"},"content":""},{"lineNumber":55,"author":{"gitID":"jill858"},"content":"        if (isValidFromCurrencyCode \u0026\u0026 isValidToCurrencyCode) {"},{"lineNumber":56,"author":{"gitID":"jill858"},"content":"            return new ConvertCommand(fromCurrencyCode, toCurrencyCode, value);"},{"lineNumber":57,"author":{"gitID":"jill858"},"content":"        } else {"},{"lineNumber":58,"author":{"gitID":"jill858"},"content":"            throw new ParseException("},{"lineNumber":59,"author":{"gitID":"jill858"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":60,"author":{"gitID":"jill858"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"jill858"},"content":""},{"lineNumber":62,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":56,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/TaskEditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TASKFIRST;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TASKSECOND;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_CATEGORY_WORK;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_TASKFIRST;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_TASKFIRST;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalEventBook;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand.EditTaskDescriptor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":" * and unit tests for TaskEditCommand."},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"public class TaskEditCommandTest {"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalEventBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"        String expectedMessage \u003d String.format(TaskEditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(taskEditCommand, model, expectedMessage, expectedModel);"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        Task editedTask \u003d taskInList.withTaskName(VALID_TASK_NAME_TASKFIRST)"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKFIRST).withTaskCategories(VALID_TASK_CATEGORY_WORK).build();"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_TASKFIRST)"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"                .withTaskPriority(VALID_TASK_PRIORITY_TASKFIRST).withTaskCategories(VALID_TASK_CATEGORY_WORK).build();"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(indexLastTask, descriptor);"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        String expectedMessage \u003d String.format(TaskEditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"        expectedModel.updateTask(lastTask, editedTask);"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(taskEditCommand, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"        String expectedMessage \u003d String.format(TaskEditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(taskEditCommand, model, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":"        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withTaskName(VALID_TASK_NAME_TASKFIRST).build();"},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(INDEX_FIRST_TASK, new EditTaskDescriptorBuilder()"},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"                .withTaskName(VALID_TASK_NAME_TASKFIRST).build());"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"        String expectedMessage \u003d String.format(TaskEditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":"        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(taskEditCommand, model, expectedMessage, expectedModel);"},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"CYX28"},"content":"    public void execute_duplicateTaskUnfilteredList_failure() {"},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(INDEX_SECOND_TASK, descriptor);"},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(taskEditCommand, model, taskEditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"    public void execute_duplicateTaskFilteredList_failure() {"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"        // edit task in filtered list into a duplicate in address book"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":"        Task taskInList \u003d model.getAddressBook().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":"                new EditTaskDescriptorBuilder(taskInList).build());"},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(taskEditCommand, model, TaskEditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":135,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"CYX28"},"content":"    public void execute_invalidTaskIndexUnfilteredList_failure() {"},{"lineNumber":137,"author":{"gitID":"CYX28"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":138,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_TASKFIRST).build();"},{"lineNumber":139,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":140,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":141,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(taskEditCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":142,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":144,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"CYX28"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":146,"author":{"gitID":"CYX28"},"content":"     * but smaller than size of address book"},{"lineNumber":147,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"CYX28"},"content":"    public void execute_invalidTaskIndexFilteredList_failure() {"},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":153,"author":{"gitID":"CYX28"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTaskList().size());"},{"lineNumber":154,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":155,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(outOfBoundIndex, new EditTaskDescriptorBuilder()"},{"lineNumber":156,"author":{"gitID":"CYX28"},"content":"                .withTaskName(VALID_TASK_NAME_TASKFIRST).build());"},{"lineNumber":157,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":158,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(taskEditCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":159,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":161,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"CYX28"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":163,"author":{"gitID":"CYX28"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":164,"author":{"gitID":"CYX28"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":165,"author":{"gitID":"CYX28"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":166,"author":{"gitID":"CYX28"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":167,"author":{"gitID":"CYX28"},"content":"        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":168,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":169,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":170,"author":{"gitID":"CYX28"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":171,"author":{"gitID":"CYX28"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":172,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":173,"author":{"gitID":"CYX28"},"content":"        // edit -\u003e first task edited"},{"lineNumber":174,"author":{"gitID":"CYX28"},"content":"        taskEditCommand.execute();"},{"lineNumber":175,"author":{"gitID":"CYX28"},"content":"        undoRedoStack.push(taskEditCommand);"},{"lineNumber":176,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":177,"author":{"gitID":"CYX28"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all tasks"},{"lineNumber":178,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":179,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":180,"author":{"gitID":"CYX28"},"content":"        // redo -\u003e same first task edited again"},{"lineNumber":181,"author":{"gitID":"CYX28"},"content":"        expectedModel.updateTask(taskToEdit, editedTask);"},{"lineNumber":182,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":183,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":185,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"CYX28"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":187,"author":{"gitID":"CYX28"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":188,"author":{"gitID":"CYX28"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":189,"author":{"gitID":"CYX28"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":190,"author":{"gitID":"CYX28"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":191,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTaskName(VALID_TASK_NAME_TASKFIRST).build();"},{"lineNumber":192,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":194,"author":{"gitID":"CYX28"},"content":"        // execution failed -\u003e taskEditCommand not pushed into undoRedoStack"},{"lineNumber":195,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(taskEditCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":196,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":197,"author":{"gitID":"CYX28"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":198,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":199,"author":{"gitID":"CYX28"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":200,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":202,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"CYX28"},"content":"     * 1. Edits a {@code Task} from a filtered list."},{"lineNumber":204,"author":{"gitID":"CYX28"},"content":"     * 2. Undo the edit."},{"lineNumber":205,"author":{"gitID":"CYX28"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited task in the"},{"lineNumber":206,"author":{"gitID":"CYX28"},"content":"     *    unfiltered list is different from the index at the filtered list."},{"lineNumber":207,"author":{"gitID":"CYX28"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the task object regardless of indexing."},{"lineNumber":208,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"CYX28"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameTaskEdited() throws Exception {"},{"lineNumber":211,"author":{"gitID":"CYX28"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":212,"author":{"gitID":"CYX28"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":213,"author":{"gitID":"CYX28"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":214,"author":{"gitID":"CYX28"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":215,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":216,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":217,"author":{"gitID":"CYX28"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":218,"author":{"gitID":"CYX28"},"content":"                new EventBook(model.getEventBook()), new UserPrefs());"},{"lineNumber":219,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":220,"author":{"gitID":"CYX28"},"content":"        showTaskAtIndex(model, INDEX_SECOND_TASK);"},{"lineNumber":221,"author":{"gitID":"CYX28"},"content":"        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":222,"author":{"gitID":"CYX28"},"content":"        // edit -\u003e edits second task in unfiltered task list / first task in filtered task list"},{"lineNumber":223,"author":{"gitID":"CYX28"},"content":"        taskEditCommand.execute();"},{"lineNumber":224,"author":{"gitID":"CYX28"},"content":"        undoRedoStack.push(taskEditCommand);"},{"lineNumber":225,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":226,"author":{"gitID":"CYX28"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all tasks"},{"lineNumber":227,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":228,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":229,"author":{"gitID":"CYX28"},"content":"        expectedModel.updateTask(taskToEdit, editedTask);"},{"lineNumber":230,"author":{"gitID":"CYX28"},"content":"        assertNotEquals(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), taskToEdit);"},{"lineNumber":231,"author":{"gitID":"CYX28"},"content":"        // redo -\u003e edits same second task in unfiltered task list"},{"lineNumber":232,"author":{"gitID":"CYX28"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":233,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":235,"author":{"gitID":"CYX28"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"CYX28"},"content":"    public void equals() throws Exception {"},{"lineNumber":237,"author":{"gitID":"CYX28"},"content":"        final TaskEditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_TASK, DESC_TASKFIRST);"},{"lineNumber":238,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":239,"author":{"gitID":"CYX28"},"content":"        // same values -\u003e returns true"},{"lineNumber":240,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_TASKFIRST);"},{"lineNumber":241,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_TASK, copyDescriptor);"},{"lineNumber":242,"author":{"gitID":"CYX28"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":243,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":244,"author":{"gitID":"CYX28"},"content":"        // same object -\u003e returns true"},{"lineNumber":245,"author":{"gitID":"CYX28"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":246,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":247,"author":{"gitID":"CYX28"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"CYX28"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":249,"author":{"gitID":"CYX28"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":250,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":251,"author":{"gitID":"CYX28"},"content":"        // null -\u003e returns false"},{"lineNumber":252,"author":{"gitID":"CYX28"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":253,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":254,"author":{"gitID":"CYX28"},"content":"        // different types -\u003e returns false"},{"lineNumber":255,"author":{"gitID":"CYX28"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":256,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":257,"author":{"gitID":"CYX28"},"content":"        // different index -\u003e returns false"},{"lineNumber":258,"author":{"gitID":"CYX28"},"content":"        assertFalse(standardCommand.equals(new TaskEditCommand(INDEX_SECOND_TASK, DESC_TASKFIRST)));"},{"lineNumber":259,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":260,"author":{"gitID":"CYX28"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":261,"author":{"gitID":"CYX28"},"content":"        assertFalse(standardCommand.equals(new TaskEditCommand(INDEX_FIRST_TASK, DESC_TASKSECOND)));"},{"lineNumber":262,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":264,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"CYX28"},"content":"     * Returns an {@code TaskEditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":266,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"CYX28"},"content":"    private TaskEditCommand prepareCommand(Index index, EditTaskDescriptor descriptor) {"},{"lineNumber":268,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand taskEditCommand \u003d new TaskEditCommand(index, descriptor);"},{"lineNumber":269,"author":{"gitID":"CYX28"},"content":"        taskEditCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":270,"author":{"gitID":"CYX28"},"content":"        return taskEditCommand;"},{"lineNumber":271,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":273,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":251,"x3tsunayh":2,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/TaskDeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskDeleteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":" * Parses input arguments and creates a new TaskDeleteCommand object."},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"public class TaskDeleteCommandParser implements Parser\u003cTaskDeleteCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"     * Parses the given {@code String} of arguments in the context of the TaskDeleteCommand"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"     * and returns a TaskDeleteCommand object for execution."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    public TaskDeleteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"            return new TaskDeleteCommand(index);"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskDeleteCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":23,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all persons in Address Book.\\n\""},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":20,"dezhanglee":3}},{"path":"src/main/java/seedu/address/logic/parser/TaskAddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DUE_DATE;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PRIORITY;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskAddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDueDate;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskStatus;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":" * Parses input arguments and creates a new TaskAddCommand object"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"public class TaskAddCommandParser implements Parser\u003cTaskAddCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"     * Parses the given {@code String} of arguments in the context of the TaskAddCommand"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"     * and returns an TaskAddCommand object for execution."},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    public TaskAddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK_NAME, PREFIX_TASK_PRIORITY,"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"                PREFIX_TASK_DESCRIPTION, PREFIX_TASK_DUE_DATE, PREFIX_TASK_STATUS, PREFIX_TASK_CATEGORY);"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_NAME, PREFIX_TASK_PRIORITY, PREFIX_TASK_DESCRIPTION,"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"                PREFIX_TASK_DUE_DATE, PREFIX_TASK_STATUS)"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskAddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"            TaskName taskName \u003d"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"                    ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_TASK_NAME)).get();"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"            TaskPriority taskPriority \u003d"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"                    ParserUtil.parseTaskPriority(argMultimap.getValue(PREFIX_TASK_PRIORITY)).get();"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"            TaskDescription taskDescription \u003d"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"                    ParserUtil.parseTaskDescription(argMultimap.getValue(PREFIX_TASK_DESCRIPTION)).get();"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"            TaskDueDate taskDueDate \u003d"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"                    ParserUtil.parseTaskDueDate(argMultimap.getValue(PREFIX_TASK_DUE_DATE)).get();"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"            TaskStatus taskStatus \u003d"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"                    ParserUtil.parseTaskStatus(argMultimap.getValue(PREFIX_TASK_STATUS)).get();"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"            Set\u003cTaskCategory\u003e taskCategoryList \u003d"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"                    ParserUtil.parseTaskCategories(argMultimap.getAllValues(PREFIX_TASK_CATEGORY));"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"            Task task \u003d new Task(taskName, taskPriority, taskDescription, taskDueDate, taskStatus, taskCategoryList);"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"            return new TaskAddCommand(task);"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"     * Returns true if none of the prefixes contain empty {@code Optional} values in the given {@code ArgumentMultimap}."},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":64,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.ExistingFileException;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.InvalidFileException;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" * Exports the address book to a user-defined location {@code filePath}"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"public class ExportCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_ALIAS \u003d \"exp\";"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports current data into defined file path. \""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"            + \"Parameters: FILEPATH (must end with an extension of .xml or .csv)\\n\""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"            + \" C:\\\\Users\\\\John Doe\\\\Documents\\\\addressbook.xml\\n\";"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"Addressbook data exported to: %1$s\";"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_NOT_XML_CSV_FILE \u003d \"Filepath does not lead to an XML/CSV file.\";"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_ERROR \u003d \"Addressbook data not exported successfully.\";"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_EXISTING_XML \u003d \"XML/CSV file name already exists. Choose a different name.\";"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    private Storage storage;"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    private final String filePath;"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"     * Creates an ExportCommand to add the specified {@code String}"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    public ExportCommand(String filePath) {"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"     * @param storage"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"    public void setStorage(Storage storage) {"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        this.storage \u003d storage;"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        if (FileUtil.isValidCsvFile(filePath)) {"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"            try {"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"                storage.exportAddressBookCsv(model.getAddressBook(), filePath);"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"            } catch (IOException e) {"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"                throw new CommandException(MESSAGE_ERROR);"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"            } catch (InvalidFileException e) {"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"                throw new CommandException(MESSAGE_NOT_XML_CSV_FILE);"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"            } catch (ExistingFileException e) {"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"                throw new CommandException(MESSAGE_EXISTING_XML);"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"            return new CommandResult(String.format(MESSAGE_EXPORT_SUCCESS, filePath));"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"            storage.exportAddressBook(model.getAddressBook(), filePath);"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IOException e) {"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(MESSAGE_ERROR);"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"        } catch (InvalidFileException e) {"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(MESSAGE_NOT_XML_CSV_FILE);"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"        } catch (ExistingFileException e) {"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(MESSAGE_EXISTING_XML);"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"        return new CommandResult(String.format(MESSAGE_EXPORT_SUCCESS, filePath));"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"                || (other instanceof ExportCommand // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 filePath.equals(((ExportCommand) other).filePath));"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"}"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":""}],"authorContributionMap":{"x3tsunayh":82,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/AddPictureCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FILEPATH;"},{"lineNumber":5,"author":{"gitID":"dezhanglee"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":7,"author":{"gitID":"dezhanglee"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":" * Adds a profile picture to a person in the address book"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":" */"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"public class AddPictureCommand extends Command {"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"    public static final String COMMAND_WORD \u003d \"addpicture\";"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Picture for Person: %1$s\";"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"A valid file must be provided.\";"},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"            + \": Edits the picture of the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"            + \"Parameters: INDEX (must be a positive integer) \" + PREFIX_FILEPATH"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"            + \"FILEPATH (path to a valid image file)\\n\""},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":"            + PREFIX_FILEPATH + \"C://Pictures/johnPicture.jpg\";"},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"    private final Index index;"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"    private final String path;"},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"    private Person personToEdit;"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"    private Person editedPerson;"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"    public AddPictureCommand(Index index, String path) {"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(index);"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(path);"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"        this.index \u003d index;"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"        this.path \u003d path;"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"        int personIndex \u003d index.getZeroBased();"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"        if (personIndex \u003e\u003d lastShownList.size()) {"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"        personToEdit \u003d lastShownList.get(personIndex);"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":"        editedPerson \u003d new Person(personToEdit);"},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":"            editedPerson.setPicture(path);"},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"            throw new CommandException(Picture.MESSAGE_PICTURE_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":80,"author":{"gitID":"dezhanglee"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":81,"author":{"gitID":"dezhanglee"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, index.getOneBased()));"},{"lineNumber":82,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":84,"author":{"gitID":"dezhanglee"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"dezhanglee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"dezhanglee"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":"                || (other instanceof AddPictureCommand // instanceof handles nulls"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"                \u0026\u0026 this.index.equals(((AddPictureCommand) other).index)"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":"                \u0026\u0026 this.path.equals(((AddPictureCommand) other).path)); // state check"},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"-":7,"dezhanglee":84}},{"path":"src/main/java/seedu/address/logic/commands/ConvertCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.Currency;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jill858"},"content":"//@@author jill858"},{"lineNumber":6,"author":{"gitID":"jill858"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jill858"},"content":" * Converts any amount from one currency to another"},{"lineNumber":8,"author":{"gitID":"jill858"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jill858"},"content":"public class ConvertCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"jill858"},"content":""},{"lineNumber":11,"author":{"gitID":"jill858"},"content":"    public static final String COMMAND_WORD \u003d \"convert\";"},{"lineNumber":12,"author":{"gitID":"jill858"},"content":"    public static final String COMMAND_ALIAS \u003d \"cv\";"},{"lineNumber":13,"author":{"gitID":"jill858"},"content":""},{"lineNumber":14,"author":{"gitID":"jill858"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Converts an amount from one currency to another\\n\""},{"lineNumber":15,"author":{"gitID":"jill858"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 SGD USD\\n\""},{"lineNumber":16,"author":{"gitID":"jill858"},"content":"            + \"Sample currency code: \\n\""},{"lineNumber":17,"author":{"gitID":"jill858"},"content":"            + \"AUD - Australian dollar\\n\""},{"lineNumber":18,"author":{"gitID":"jill858"},"content":"            + \"CAD - Canadian dollar\\n\""},{"lineNumber":19,"author":{"gitID":"jill858"},"content":"            + \"CNY - Renminbi (Chinese) yuan\\n\""},{"lineNumber":20,"author":{"gitID":"jill858"},"content":"            + \"HKD - Hong Kong dollar\\n\""},{"lineNumber":21,"author":{"gitID":"jill858"},"content":"            + \"JPY - Japanese yen\\n\""},{"lineNumber":22,"author":{"gitID":"jill858"},"content":"            + \"MYR - Malaysian ringgit\\n\""},{"lineNumber":23,"author":{"gitID":"jill858"},"content":"            + \"SGD - Singapore dollar\\n\""},{"lineNumber":24,"author":{"gitID":"jill858"},"content":"            + \"TWD - New Taiwan dollar\\n\""},{"lineNumber":25,"author":{"gitID":"jill858"},"content":"            + \"USD - United States dollar\\n\";"},{"lineNumber":26,"author":{"gitID":"jill858"},"content":""},{"lineNumber":27,"author":{"gitID":"jill858"},"content":"    public static final String MESSAGE_COMPLETE \u003d \"Converted %s %,.2f to %s %,.2f\";"},{"lineNumber":28,"author":{"gitID":"jill858"},"content":""},{"lineNumber":29,"author":{"gitID":"jill858"},"content":"    private Currency currency \u003d new Currency();"},{"lineNumber":30,"author":{"gitID":"jill858"},"content":""},{"lineNumber":31,"author":{"gitID":"jill858"},"content":"    private String fromCurrencyCode;"},{"lineNumber":32,"author":{"gitID":"jill858"},"content":"    private String toCurrencyCode;"},{"lineNumber":33,"author":{"gitID":"jill858"},"content":"    private final double value;"},{"lineNumber":34,"author":{"gitID":"jill858"},"content":""},{"lineNumber":35,"author":{"gitID":"jill858"},"content":"    public ConvertCommand(String fromCurrencyCode, String toCurrencyCode, double value) {"},{"lineNumber":36,"author":{"gitID":"jill858"},"content":"        this.fromCurrencyCode \u003d fromCurrencyCode;"},{"lineNumber":37,"author":{"gitID":"jill858"},"content":"        this.toCurrencyCode \u003d toCurrencyCode;"},{"lineNumber":38,"author":{"gitID":"jill858"},"content":"        this.value \u003d value;"},{"lineNumber":39,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jill858"},"content":""},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":"    public CommandResult execute() {"},{"lineNumber":43,"author":{"gitID":"jill858"},"content":"        double convertedValue;"},{"lineNumber":44,"author":{"gitID":"jill858"},"content":""},{"lineNumber":45,"author":{"gitID":"jill858"},"content":"        if (fromCurrencyCode.equals(\"SGD\")) {"},{"lineNumber":46,"author":{"gitID":"jill858"},"content":"            //rate is already in the form of base rate"},{"lineNumber":47,"author":{"gitID":"jill858"},"content":"            //therefore multiply to the rate to be converted"},{"lineNumber":48,"author":{"gitID":"jill858"},"content":"            double rate \u003d currency.getCurrencyRate(toCurrencyCode);"},{"lineNumber":49,"author":{"gitID":"jill858"},"content":""},{"lineNumber":50,"author":{"gitID":"jill858"},"content":"            convertedValue \u003d value * rate;"},{"lineNumber":51,"author":{"gitID":"jill858"},"content":"        } else {"},{"lineNumber":52,"author":{"gitID":"jill858"},"content":"            //convert the value to the base rate (SGD)"},{"lineNumber":53,"author":{"gitID":"jill858"},"content":"            //followed by multiplying the rate to be converted"},{"lineNumber":54,"author":{"gitID":"jill858"},"content":"            double fromRate \u003d currency.getCurrencyRate(fromCurrencyCode);"},{"lineNumber":55,"author":{"gitID":"jill858"},"content":"            double toRate \u003d currency.getCurrencyRate(toCurrencyCode);"},{"lineNumber":56,"author":{"gitID":"jill858"},"content":""},{"lineNumber":57,"author":{"gitID":"jill858"},"content":"            double toSgd \u003d value / fromRate;"},{"lineNumber":58,"author":{"gitID":"jill858"},"content":"            convertedValue \u003d toSgd * toRate;"},{"lineNumber":59,"author":{"gitID":"jill858"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"jill858"},"content":""},{"lineNumber":61,"author":{"gitID":"jill858"},"content":"        return new CommandResult(String.format(MESSAGE_COMPLETE,"},{"lineNumber":62,"author":{"gitID":"jill858"},"content":"                fromCurrencyCode, value, toCurrencyCode, convertedValue));"},{"lineNumber":63,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jill858"},"content":""},{"lineNumber":65,"author":{"gitID":"jill858"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"jill858"},"content":"    public boolean equals(Object o) {"},{"lineNumber":67,"author":{"gitID":"jill858"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":68,"author":{"gitID":"jill858"},"content":"            return true;"},{"lineNumber":69,"author":{"gitID":"jill858"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"jill858"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":71,"author":{"gitID":"jill858"},"content":"            return false;"},{"lineNumber":72,"author":{"gitID":"jill858"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"jill858"},"content":"        ConvertCommand that \u003d (ConvertCommand) o;"},{"lineNumber":74,"author":{"gitID":"jill858"},"content":"        return Double.compare(that.value, value) \u003d\u003d 0;"},{"lineNumber":75,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":72,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/TaskEditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DUE_DATE;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PRIORITY;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"import seedu.address.logic.commands.TaskEditCommand.EditTaskDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":" * Parses input arguments and creates a new TaskEditCommand object"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"public class TaskEditCommandParser implements Parser\u003cTaskEditCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"     * Parses the given {@code String} of arguments in the context of the TaskEditCommand"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"     * and returns a TaskEditCommand object for execution."},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    public TaskEditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TASK_NAME, PREFIX_TASK_PRIORITY,"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"                PREFIX_TASK_DESCRIPTION, PREFIX_TASK_DUE_DATE, PREFIX_TASK_STATUS, PREFIX_TASK_CATEGORY);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskEditCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"            ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_TASK_NAME))"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"                    .ifPresent(editTaskDescriptor::setTaskName);"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"            ParserUtil.parseTaskPriority(argMultimap.getValue(PREFIX_TASK_PRIORITY))"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"                    .ifPresent(editTaskDescriptor::setTaskPriority);"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"            ParserUtil.parseTaskDescription(argMultimap.getValue(PREFIX_TASK_DESCRIPTION))"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"                    .ifPresent(editTaskDescriptor::setTaskDescription);"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"            ParserUtil.parseTaskDueDate(argMultimap.getValue(PREFIX_TASK_DUE_DATE))"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"                    .ifPresent(editTaskDescriptor::setTaskDueDate);"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"            ParserUtil.parseTaskStatus(argMultimap.getValue(PREFIX_TASK_STATUS))"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"                    .ifPresent(editTaskDescriptor::setTaskStatus);"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"            parseTaskCategoriesForEdit(argMultimap.getAllValues(PREFIX_TASK_CATEGORY))"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"                    .ifPresent(editTaskDescriptor::setTaskCategories);"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        if (!editTaskDescriptor.isAnyFieldEdited()) {"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"            throw new ParseException(TaskEditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        return new TaskEditCommand(index, editTaskDescriptor);"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"     * Parses {@code Collection\u003cString\u003e taskCategories} into a {@code Set\u003cTaskCategory\u003e}"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"     * if {@code taskCategories} is non-empty."},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"     * If {@code taskCategories} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"     * {@code Set\u003cTaskCategory\u003e} containing zero taskCategories."},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"    private Optional\u003cSet\u003cTaskCategory\u003e\u003e parseTaskCategoriesForEdit(Collection\u003cString\u003e taskCategories)"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"            throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"        assert taskCategories !\u003d null;"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"        if (taskCategories.isEmpty()) {"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"            return Optional.empty();"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"        Collection\u003cString\u003e taskCategorySet \u003d"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"                taskCategories.size() \u003d\u003d 1 \u0026\u0026 taskCategories.contains(\"\") ? Collections.emptySet() : taskCategories;"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"        return Optional.of(ParserUtil.parseTaskCategories(taskCategorySet));"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":80,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/AddTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":7,"author":{"gitID":"dezhanglee"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"dezhanglee"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"dezhanglee"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.logic.commands.AddTagCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":" * Parses input arguments to extract index and tags, and creates a new AddTagCommand object"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":" */"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":"public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTagCommand"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":"     * and returns an AddTagCommand object for execution."},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":"    public AddTagCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":"                || argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"        Index index;"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"        List\u003cString\u003e tags;"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":";"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":"        Set\u003cTag\u003e tagSet;"},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"            tagSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":"            System.out.println(ive.getMessage());"},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"        return new AddTagCommand(index, tagSet);"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"-":11,"dezhanglee":54}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":" * Sorts alphabetically by name and lists all persons in the address book to the user."},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_ALIAS \u003d \"sn\";"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons sorted alphabetically by name\";"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"        model.sortPersons();"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":18}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of events."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"     * @return summary message for events displayed"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    public static String getMessageForEventListShownSummary(int displaySize) {"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        return String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of tasks."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"     * @return summary message for tasks displayed"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    public static String getMessageForTaskListShownSummary(int displaySize) {"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"        return String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"    public void setStorage(Storage storage) {"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":10,"x3tsunayh":10,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/ListAllEventsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":" * Lists all events in the event book to the user."},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"public class ListAllEventsCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_WORD \u003d \"listallevents\";"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_WORD_TWO \u003d \"listevents\";"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_WORD_THREE \u003d \"allevents\";"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"        return new CommandResult(\"All \""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"                + getMessageForEventListShownSummary(model.getFilteredEventList().size()));"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":21}},{"path":"src/main/java/seedu/address/logic/commands/FindEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.TitleContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":" * Finds and lists all events in event book whose name contains any of the argument keywords."},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":" * Keyword matching is case sensitive, and only one field can be searched."},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"public class FindEventCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_WORD \u003d \"findevent\";"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"            + \": Finds all events whose title or description contain any \""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"            + \"of the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"            + \"Parameters: et/KEYWORD [MORE_KEYWORDS]... for title OR ed/KEYWORD [MORE_KEYWORDS]... for description\\n\""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"            + \"Example: \" + COMMAND_WORD + \" et/movie date party\";"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    private final TitleContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    public FindEventCommand(TitleContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    public static String getCommandWord() {"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"        return COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    public CommandResult execute() {"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"        model.updateFilteredEventList(predicate);"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        return new CommandResult(getMessageForEventListShownSummary(model.getFilteredEventList().size()));"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"                || (other instanceof FindEventCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 this.predicate.equals(((FindEventCommand) other).predicate));"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":43}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DATETIME;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":" * Adds an event to event book."},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"public class AddEventCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_WORD \u003d \"addevent\";"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the event book. \""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_TITLE + \"NAME \""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_LOCATION + \"LOCATION \""},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_DATETIME + \"DATETIME\\n\""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_TITLE + \"Movie Outing \""},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"Watching Black Panther \""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_LOCATION + \"Suntec City GV \""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"            + PREFIX_EVENT_DATETIME + \"22-04-2018 1630\";"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the event book\";"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    private final ReadOnlyEvent toAdd;"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"     * Creates an AddEventCommand to add the specified {@code ReadOnlyEvent}"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    public AddEventCommand(ReadOnlyEvent event)  {"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(event);"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        toAdd \u003d new Event(event);"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"            model.addEvent(toAdd);"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"        } catch (Error e) {"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":59,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/TaskListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"CYX28"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":" * Lists all tasks in the address book to the user."},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"public class TaskListCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_WORD \u003d \"task-list\";"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_ALIAS \u003d \"tl\";"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all tasks in Address Book.\\n\""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":24}},{"path":"src/main/java/seedu/address/logic/commands/DeleteByNameCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":" * Deletes a person by name. Case insensitive"},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":" * Will not work if there are multiple people with same names, use DeleteCommand instead"},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":" */"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":"public class DeleteByNameCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"    public static final String COMMAND_WORD \u003d \"deletebyname\";"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"            + \": Deletes the person identified by the input NAME. Non case sensitive.\\n\""},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"            + \"Parameters: NAME\\n\""},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":"            + \"Example: \" + COMMAND_WORD + \" John\";"},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_NAME_NOT_FOUND \u003d \"Person with input name not found. \""},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"            + \"Please check if the person exists using the list command - \\n\""},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"            + ListCommand.MESSAGE_USAGE;"},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_MULTIPLE_SAME_NAME \u003d \"There are several people with the same name.\""},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"            + \"Please use the delete command instead -  \\n\""},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":"            + DeleteCommand.MESSAGE_USAGE;"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":"    private Name inputName;"},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"    private List\u003cPerson\u003e allPersons;"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"    private List \u003cPerson\u003e personsWithMatchingName;"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":"    private Person personToBeDeleted;"},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"    public DeleteByNameCommand(Name inputName) {"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"        this.inputName \u003d inputName;"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":"        searchForPersonByName();"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"        if (personsWithMatchingName.size() \u003d\u003d 0) {"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":"            throw new CommandException(MESSAGE_NAME_NOT_FOUND);"},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"        } else if (personsWithMatchingName.size() \u003e 1) {"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"            throw new CommandException(MESSAGE_MULTIPLE_SAME_NAME);"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"            personToBeDeleted \u003d personsWithMatchingName.get(0);"},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"            model.deletePerson(personToBeDeleted);"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToBeDeleted));"},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"     * Helper function: Extract and search PersonList for the name"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"    public void searchForPersonByName() {"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":"        this.allPersons \u003d model.getAddressBook().getPersonList();"},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":"        Stream\u003cPerson\u003e searchPerson \u003d allPersons.stream()"},{"lineNumber":80,"author":{"gitID":"dezhanglee"},"content":"                .filter(person -\u003e person.getName().toString().toLowerCase()"},{"lineNumber":81,"author":{"gitID":"dezhanglee"},"content":"                        .equals(inputName.toString().toLowerCase())); //"},{"lineNumber":82,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":83,"author":{"gitID":"dezhanglee"},"content":"        this.personsWithMatchingName \u003d searchPerson.collect(Collectors.toList());"},{"lineNumber":84,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":85,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":"            return true;"},{"lineNumber":92,"author":{"gitID":"dezhanglee"},"content":"        } else if (other instanceof DeleteByNameCommand) {"},{"lineNumber":93,"author":{"gitID":"dezhanglee"},"content":"            Name otherName \u003d ((DeleteByNameCommand) other).inputName;"},{"lineNumber":94,"author":{"gitID":"dezhanglee"},"content":"            return otherName.equals(this.inputName);"},{"lineNumber":95,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"dezhanglee"},"content":"        return false;"},{"lineNumber":97,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"dezhanglee":91,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name or tags contains any of the keywords or partial keywords."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds persons whose names or tags contain any of \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"the keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"By Name Parameters: n/KEYWORD [MORE_KEYWORDS]... \\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"By Tag Parameters: t/KEYWORD [MORE_KEYWORDS].. \\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/alice bob charlie \\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" t/friends\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Predicate\u003cPerson\u003e predicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jill858"},"content":"    //@@author jill858"},{"lineNumber":26,"author":{"gitID":"jill858"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":27,"author":{"gitID":"jill858"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":28,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jill858"},"content":""},{"lineNumber":30,"author":{"gitID":"jill858"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"jill858"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitID":"jill858"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":33,"author":{"gitID":"jill858"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":34,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jill858"},"content":""},{"lineNumber":36,"author":{"gitID":"jill858"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"jill858"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"jill858"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"jill858"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"jill858"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":18,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"x\";"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/TaskFindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskNameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":" * Finds and lists all tasks in address book whose task name contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":" * Keyword matching is case insensitive and allows partial word matching."},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"public class TaskFindCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_WORD \u003d \"task-find\";"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_ALIAS \u003d \"tf\";"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of the \""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"            + \"specified keywords (case-insensitive and partial word matching) and displays them as a list with \""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"            + \"index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"            + \"Example: \" + COMMAND_WORD + \" agenda buy meeting\";"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    private final TaskNameContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    public TaskFindCommand(TaskNameContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"        model.updateFilteredTaskList(predicate);"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        return new CommandResult(getMessageForTaskListShownSummary(model.getFilteredTaskList().size()));"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskFindCommand"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.predicate.equals(((TaskFindCommand) other).predicate));"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":40}},{"path":"src/main/java/seedu/address/logic/commands/TaskAddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DUE_DATE;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PRIORITY;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":" * Adds a task to the address book."},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"public class TaskAddCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_WORD \u003d \"task-add\";"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_ALIAS \u003d \"ta\";"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the address book. \""},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_PRIORITY + \"PRIORITY \""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_DUE_DATE + \"DUE DATE \""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_STATUS + \"STATUS \""},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"            + \"[\" + PREFIX_TASK_CATEGORY + \"CATEGORY]...\\n\""},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_NAME + \"Agenda for meeting \""},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_PRIORITY + \"high \""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_DESCRIPTION + \"Discuss proposal details \""},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_DUE_DATE + \"2018-04-29 \""},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_STATUS + \"undone \""},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_CATEGORY + \"Meeting\";"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book\";"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"    private final Task toAdd;"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"     * Creates a TaskAddCommand to add the specified {@code Task}"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    public TaskAddCommand(Task task) {"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        requireNonNull(task);"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        toAdd \u003d task;"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        requireNonNull(model);"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"            model.addTask(toAdd);"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskAddCommand"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 toAdd.equals(((TaskAddCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":66,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/SwitchTabCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.control.SingleSelectionModel;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.control.Tab;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":" * switch between the Events and Tasks list"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"public class SwitchTabCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_WORD \u003d \"switchtab\";"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_WORD_TWO \u003d \"switch\";"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches between Event and Task UI List Tab\";"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Switched Tabs!\";"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    private static final int EVENTS_TAB \u003d 0;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    private static final int TASKS_TAB \u003d 1;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    private final TabPane tabPane;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    public SwitchTabCommand(TabPane tabPane) {"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"        this.tabPane \u003d tabPane;"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"        int selectedIndex \u003d selectionModel.getSelectedIndex();"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        if (selectedIndex \u003d\u003d EVENTS_TAB) {"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"            selectedIndex \u003d TASKS_TAB;"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        } else {"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"            selectedIndex \u003d EVENTS_TAB;"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"        selectionModel.select(selectedIndex);"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":40}},{"path":"src/main/java/seedu/address/logic/commands/TaskSortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":" * Sorts tasks by priority in decreasing order of importance (i.e. high \u003e medium \u003e low) and"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":" * lists all tasks in the address book to the user."},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"public class TaskSortCommand extends UndoableCommand {"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_WORD \u003d \"task-sort\";"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_ALIAS \u003d \"ts\";"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_SUCCESS \u003d"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"            \"Listed all tasks sorted by priority from high to low importance\";"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"        model.sortTasksByPriority();"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":21}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.logic.parser.CalendarViewStateParser;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.ui.CalendarView;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    private final Storage storage;"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    private CalendarViewStateParser calendarViewStateParser;"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    public LogicManager(Model model, Storage storage, UserPrefs userprefs) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        this.userPrefs \u003d userprefs;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        this.storage \u003d storage;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    public CommandResult execute(String commandText) throws CommandException, IllegalValueException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"            command.setStorage(storage);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"            // Updates View state of Calendar UI"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"            if (calendarViewStateParser !\u003d null) {"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"                calendarViewStateParser.updateViewState(commandText);"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"    //@@author x3tsunayh"},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"    public void setCalendarView(CalendarView calendarView) {"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"        this.calendarViewStateParser \u003d new CalendarViewStateParser(this.userPrefs, this.model, calendarView);"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"    public ObservableList\u003cReadOnlyEvent\u003e getFilteredEventList() {"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"        return model.getFilteredEventList();"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"    public void setTabPane(TabPane tabPane) {"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"        addressBookParser.setTabPane(tabPane);"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"CYX28":6,"x3tsunayh":38,"-":54}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.parsers.ParserConfigurationException;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.events.model.EventBookChangedEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.ExistingFileException;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.InvalidFileException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"public interface Storage extends AddressBookStorage, EventBookStorage, UserPrefsStorage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    void exportAddressBook(ReadOnlyAddressBook addressBook)"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"            throws IOException, InvalidFileException, ExistingFileException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce) throws InvalidFileException;"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"    String getEventBookFilePath();"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"    Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException;"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    void saveEventBook(ReadOnlyEventBook eventBook) throws IOException;"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"    void exportEventBook() throws FileNotFoundException, ParserConfigurationException, IOException;"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"     * Saves the current version of the Event Book to the hard disk."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Creates the data file if it is missing."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"    void handleEventBookChangedEvent(EventBookChangedEvent event);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":28,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/DeleteEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":" * Deletes a event identified using its last displayed index from the latest displayed event list."},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"public class DeleteEventCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    public static final String COMMAND_WORD \u003d \"deleteevent\";"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"            + \": Deletes event identified by the index number used in the last event listing.\\n\""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    public DeleteEventCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        List\u003cReadOnlyEvent\u003e lastShownList \u003d model.getFilteredEventList();"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEvent eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"            model.deleteEvent(eventToDelete);"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        } catch (Error e) {"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"            assert false : \"Event cannot be empty.\";"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"                || (other instanceof DeleteEventCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteEventCommand) other).targetIndex));"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":52,"dezhanglee":1,"-":4}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTaskCategory.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":" * JAXB-friendly version of the Task Category."},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"public class XmlAdaptedTaskCategory {"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    @XmlValue"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    private String taskCategoryName;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"     * Constructs an XmlAdaptedTaskCategory."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    public XmlAdaptedTaskCategory() {}"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"     * Constructs a {@code XmlAdaptedTaskCategory} with the given {@code taskCategoryName}."},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    public XmlAdaptedTaskCategory(String taskCategoryName) {"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        this.taskCategoryName \u003d taskCategoryName;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"     * Converts a given TaskCategory into this class for JAXB use."},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTaskCategory."},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    public XmlAdaptedTaskCategory(TaskCategory source) {"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        taskCategoryName \u003d source.taskCategoryName;"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"     * Converts this jaxb-friendly adapted taskCategory object into the model\u0027s TaskCategory object."},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted Task"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    public TaskCategory toModelType() throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"        if (!TaskCategory.isValidTaskCategoryName(taskCategoryName)) {"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskCategory.MESSAGE_TASK_CATEGORY_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        return new TaskCategory(taskCategoryName);"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        if (!(other instanceof XmlAdaptedTaskCategory)) {"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        return taskCategoryName.equals(((XmlAdaptedTaskCategory) other).taskCategoryName);"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":59,"-":5}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.ExistingFileException;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.InvalidFileException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath)"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"            throws DataConversionException, IOException, JAXBException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException, InvalidFileException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to given filepath."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"    void exportAddressBook(ReadOnlyAddressBook addressBook, String filePath)"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"            throws IOException, InvalidFileException, ExistingFileException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Backups the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem backing up the file."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException, InvalidFileException;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"    void exportAddressBookCsv(ReadOnlyAddressBook addressBook, String filePath)"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"            throws IOException, InvalidFileException, ExistingFileException;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":16,"-":50}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Datetime;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":" * JAXB-friendly version of the Event."},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"public class XmlAdaptedEvent {"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    private String title;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    private String description;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    private String location;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    private String datetime;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"     * Constructs an XmlAdaptedEvent."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    public XmlAdaptedEvent() {"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    public XmlAdaptedEvent(ReadOnlyEvent source) {"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        title \u003d source.getTitle();"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"        description \u003d source.getDescription();"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        location \u003d source.getLocation();"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        datetime \u003d source.getDatetime().value;"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    public Event toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        final String title \u003d new String(this.title);"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        final String description \u003d new String(this.description);"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        final String location \u003d new String(this.location);"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        final Datetime datetime \u003d new Datetime(this.datetime);"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        return new Event(title, description, location, datetime);"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":45,"-":5}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.ExistingFileException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.InvalidFileException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"    public void exportAddressBook(ReadOnlyAddressBook addressBook, String filePath)"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"            throws IOException, InvalidFileException, ExistingFileException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"        if (!FileUtil.isValidXmlFile(filePath) \u0026\u0026 !FileUtil.isValidCsvFile(filePath)) {"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"            throw new InvalidFileException();"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"        if (FileUtil.isFileExists(file)) {"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"            throw new ExistingFileException();"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath + \"-backup\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":"    public void exportAddressBookCsv(ReadOnlyAddressBook addressBook, String filePath)"},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":"            throws IOException, InvalidFileException, ExistingFileException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"        if (!FileUtil.isValidXmlFile(filePath) \u0026\u0026 !FileUtil.isValidCsvFile(filePath)) {"},{"lineNumber":123,"author":{"gitID":"x3tsunayh"},"content":"            throw new InvalidFileException();"},{"lineNumber":124,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":127,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":128,"author":{"gitID":"x3tsunayh"},"content":"        if (FileUtil.isFileExists(file)) {"},{"lineNumber":129,"author":{"gitID":"x3tsunayh"},"content":"            throw new ExistingFileException();"},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":133,"author":{"gitID":"x3tsunayh"},"content":"        CsvFileStorage.saveDataToFile(addressBook, filePath);"},{"lineNumber":134,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":31,"-":105}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.parsers.ParserConfigurationException;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.transform.TransformerException;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.events.model.EventBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.ExistingFileException;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.exceptions.InvalidFileException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    private EventBookStorage eventBookStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, EventBookStorage eventBookStorage,"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"                          UserPrefsStorage userPrefsStorage) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        this.eventBookStorage \u003d eventBookStorage;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"        } catch (JAXBException e) {"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"JAXBException\");"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath)"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"            throws IOException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"    public void exportAddressBook(ReadOnlyAddressBook addressBook)"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"            throws IOException, InvalidFileException, ExistingFileException {"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"        exportAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"    public void exportAddressBook(ReadOnlyAddressBook addressBook, String filePath)"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"            throws IOException, InvalidFileException, ExistingFileException {"},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"        addressBookStorage.exportAddressBook(addressBook, filePath);"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException, InvalidFileException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"    public void exportAddressBookCsv(ReadOnlyAddressBook addressBook, String filePath)"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"            throws IOException, ExistingFileException, InvalidFileException {"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"        addressBookStorage.exportAddressBookCsv(addressBook, filePath);"},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":132,"author":{"gitID":"x3tsunayh"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":133,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":134,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"x3tsunayh"},"content":"    public String getEventBookFilePath() {"},{"lineNumber":136,"author":{"gitID":"x3tsunayh"},"content":"        return eventBookStorage.getEventBookFilePath();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"x3tsunayh"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException {"},{"lineNumber":141,"author":{"gitID":"x3tsunayh"},"content":"        return readEventBook(eventBookStorage.getEventBookFilePath());"},{"lineNumber":142,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":144,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"x3tsunayh"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":147,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"x3tsunayh"},"content":"            return eventBookStorage.readEventBook(filePath);"},{"lineNumber":149,"author":{"gitID":"x3tsunayh"},"content":"        } catch (JAXBException e) {"},{"lineNumber":150,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"Not supposed to have errors!\");"},{"lineNumber":151,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":154,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"x3tsunayh"},"content":"    public void exportEventBook() throws ParserConfigurationException, IOException {"},{"lineNumber":156,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"x3tsunayh"},"content":"            eventBookStorage.exportEventBook();"},{"lineNumber":158,"author":{"gitID":"x3tsunayh"},"content":"        } catch (TransformerException e) {"},{"lineNumber":159,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"Not supposed to have errors!\");"},{"lineNumber":160,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":163,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"x3tsunayh"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook) throws IOException {"},{"lineNumber":165,"author":{"gitID":"x3tsunayh"},"content":"        saveEventBook(eventBook, eventBookStorage.getEventBookFilePath());"},{"lineNumber":166,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":168,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"x3tsunayh"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook, String filePath) throws IOException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":171,"author":{"gitID":"x3tsunayh"},"content":"        eventBookStorage.saveEventBook(eventBook, filePath);"},{"lineNumber":172,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":174,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"x3tsunayh"},"content":"    public void backupEventBook(ReadOnlyEventBook eventBook) throws IOException {"},{"lineNumber":176,"author":{"gitID":"x3tsunayh"},"content":"        String filePath \u003d getEventBookFilePath().substring(0, getEventBookFilePath().indexOf(\u0027.\u0027)) + \"_backup.xml\";"},{"lineNumber":177,"author":{"gitID":"x3tsunayh"},"content":"        eventBookStorage.saveEventBook(eventBook, filePath);"},{"lineNumber":178,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":180,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":181,"author":{"gitID":"x3tsunayh"},"content":"    @Subscribe"},{"lineNumber":182,"author":{"gitID":"x3tsunayh"},"content":"    public void handleEventBookChangedEvent(EventBookChangedEvent event) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":185,"author":{"gitID":"x3tsunayh"},"content":"            saveEventBook(event.data);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":91,"-":99}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDueDate;"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskStatus;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":" * JAXB-friendly version of the Task."},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"public class XmlAdaptedTask {"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    private String taskName;"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    private String taskPriority;"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    private String taskDescription;"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    private String taskDueDate;"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    private String taskStatus;"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"    @XmlElement"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    private List\u003cXmlAdaptedTaskCategory\u003e categorised \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"    public XmlAdaptedTask() {}"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    public XmlAdaptedTask(String taskName, String taskPriority, String taskDescription, String taskDueDate,"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"                          String taskStatus, List\u003cXmlAdaptedTaskCategory\u003e categorised) {"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        this.taskPriority \u003d taskPriority;"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        this.taskDueDate \u003d taskDueDate;"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        this.taskStatus \u003d taskStatus;"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        if (categorised !\u003d null) {"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"            this.categorised \u003d new ArrayList\u003c\u003e(categorised);"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTask"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        taskName \u003d source.getTaskName().value;"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"        taskPriority \u003d source.getTaskPriority().value;"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        taskDescription \u003d source.getTaskDescription().value;"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        taskDueDate \u003d source.getTaskDueDate().value;"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        taskStatus \u003d source.getTaskStatus().value;"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        categorised \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"        for (TaskCategory taskCategory : source.getTaskCategories()) {"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"            categorised.add(new XmlAdaptedTaskCategory(taskCategory));"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"        final List\u003cTaskCategory\u003e taskCategories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"        for (XmlAdaptedTaskCategory taskCategory : categorised) {"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"            taskCategories.add(taskCategory.toModelType());"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"        if (this.taskName \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"                    TaskName.class.getSimpleName()));"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":"        if (!TaskName.isValidTaskName(this.taskName)) {"},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskName.MESSAGE_TASK_NAME_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"        final TaskName taskName \u003d new TaskName(this.taskName);"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"        if (this.taskPriority \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"                    TaskPriority.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"        if (!TaskPriority.isValidTaskPriority(this.taskPriority)) {"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskPriority.MESSAGE_TASK_PRIORITY_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"        final TaskPriority taskPriority \u003d new TaskPriority(this.taskPriority);"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":"        if (this.taskDescription \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":"                    TaskDescription.class.getSimpleName()));"},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"        if (!TaskDescription.isValidTaskDescription(this.taskDescription)) {"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskDescription.MESSAGE_TASK_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"        final TaskDescription taskDescription \u003d new TaskDescription(this.taskDescription);"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":"        if (this.taskDueDate \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":"                    TaskDescription.class.getSimpleName()));"},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":"        if (!TaskDueDate.isValidTaskDueDate(this.taskDueDate)) {"},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskDueDate.MESSAGE_TASK_DUE_DATE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"        final TaskDueDate taskDueDate \u003d new TaskDueDate(this.taskDueDate);"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"        if (this.taskStatus \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"                    TaskStatus.class.getSimpleName()));"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":"        if (!TaskStatus.isValidTaskStatus(this.taskStatus)) {"},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":"            throw new IllegalValueException(TaskStatus.MESSAGE_TASK_STATUS_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"CYX28"},"content":"        final TaskStatus taskStatus \u003d new TaskStatus(this.taskStatus);"},{"lineNumber":135,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":136,"author":{"gitID":"CYX28"},"content":"        final Set\u003cTaskCategory\u003e categories \u003d new HashSet\u003c\u003e(taskCategories);"},{"lineNumber":137,"author":{"gitID":"CYX28"},"content":"        return new Task(taskName, taskPriority, taskDescription, taskDueDate, taskStatus, categories);"},{"lineNumber":138,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":140,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":142,"author":{"gitID":"CYX28"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":143,"author":{"gitID":"CYX28"},"content":"            return true;"},{"lineNumber":144,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":146,"author":{"gitID":"CYX28"},"content":"        if (!(other instanceof XmlAdaptedTask)) {"},{"lineNumber":147,"author":{"gitID":"CYX28"},"content":"            return false;"},{"lineNumber":148,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":"        return Objects.equals(taskName, otherTask.taskName)"},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 Objects.equals(taskPriority, otherTask.taskPriority)"},{"lineNumber":153,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 Objects.equals(taskDescription, otherTask.taskDescription)"},{"lineNumber":154,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 Objects.equals(taskDueDate, otherTask.taskDueDate)"},{"lineNumber":155,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 Objects.equals(taskStatus, otherTask.taskStatus)"},{"lineNumber":156,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 categorised.equals(otherTask.categorised);"},{"lineNumber":157,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":159,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":148,"-":11}},{"path":"src/main/java/seedu/address/storage/XmlSerializableEventBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"@XmlRootElement(name \u003d \"eventbook\")"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"public class XmlSerializableEventBook implements ReadOnlyEventBook {"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    private List\u003cXmlAdaptedEvent\u003e events;"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"     * Creates an empty XmlSerializableEventBook."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    public XmlSerializableEventBook() {"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"        events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"     * Conversion"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"    public XmlSerializableEventBook(ReadOnlyEventBook src) {"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"        this();"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e titleProperty() {"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    public String getTitle() {"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e descriptionProperty() {"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"    public String getDescription() {"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e locationProperty() {"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"    public String getLocation() {"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e datetimeProperty() {"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"    public String getDatetime() {"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"    public ObservableList\u003cReadOnlyEvent\u003e getEventList() {"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"        final ObservableList\u003cReadOnlyEvent\u003e events \u003d this.events.stream().map(p -\u003e {"},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"            try {"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"                return p.toModelType();"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"                e.printStackTrace();"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"                return null;"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"        return FXCollections.unmodifiableObservableList(events);"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":76,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/AddTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":7,"author":{"gitID":"dezhanglee"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"dezhanglee"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList.DuplicateTagException;"},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":" * Add tags to an existing person in the Address Book"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":" */"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"public class AddTagCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":"    public static final String COMMAND_WORD \u003d \"addtag\";"},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add tag(s) to the person identified \""},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":"            + \"by the index number used in the last person listing. \\n\""},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"            + \"[\" + PREFIX_TAG + \"TAG] \" + \"[\" + PREFIX_TAG + \"TAG] ...\\n\""},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"            + PREFIX_TAG + \"NUS \" + PREFIX_TAG + \"CS2103 \" + PREFIX_TAG + \"Tutor\";"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_ADD_TAG_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_TAGS_MUST_NOT_EXIST \u003d \"All input tags must be new.\";"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":"    private final Index index;"},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"    private final Set\u003cTag\u003e tags;"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":"     * @param tags to be added to person refered to by index"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":"    public AddTagCommand(Index index, Set\u003cTag\u003e tags) {"},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(index);"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(tags);"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"        this.index \u003d index;"},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":"        this.tags \u003d tags;"},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"        Person editedPerson \u003d new Person(personToEdit);"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"            editedPerson.addTags(tags);"},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":"        } catch (DuplicateTagException dte) {"},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":"            throw new CommandException(MESSAGE_TAGS_MUST_NOT_EXIST);"},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":80,"author":{"gitID":"dezhanglee"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_TAG_PERSON_SUCCESS, editedPerson));"},{"lineNumber":81,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":83,"author":{"gitID":"dezhanglee"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"dezhanglee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitID":"dezhanglee"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":86,"author":{"gitID":"dezhanglee"},"content":"                || (other instanceof AddTagCommand // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":"                \u0026\u0026 this.index.equals(((AddTagCommand) other).index)"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"                \u0026\u0026 this.tags.equals(((AddTagCommand) other).tags)); // state check"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"-":14,"dezhanglee":77}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.person.Picture;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"    private String picture;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"        this.picture \u003d null;"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"    //@@author dezhanglee"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"     * Constructs an {@code XmlAdaptedPerson} with an additional Picture parameter"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, String picture,"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":"        this.name \u003d name;"},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":"        this.phone \u003d phone;"},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"        this.email \u003d email;"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":"        this.address \u003d address;"},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":"        this.picture \u003d picture;"},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"        picture \u003d source.getPicture().getPath();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":137,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":138,"author":{"gitID":"dezhanglee"},"content":"        Picture pic \u003d new Picture();"},{"lineNumber":139,"author":{"gitID":"dezhanglee"},"content":"        if (this.picture !\u003d null) {"},{"lineNumber":140,"author":{"gitID":"dezhanglee"},"content":"            System.out.println(this.picture);"},{"lineNumber":141,"author":{"gitID":"dezhanglee"},"content":"            pic \u003d new Picture(this.picture);"},{"lineNumber":142,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":144,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":146,"author":{"gitID":"dezhanglee"},"content":"        return new Person(name, phone, email, address, pic, tags);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":164,"author":{"gitID":"dezhanglee"},"content":"                \u0026\u0026 Objects.equals(picture, otherPerson.picture)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":135,"dezhanglee":32}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static void saveDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"     * Saves the given eventbook data to the specified file."},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    public static void saveDataToFile(File file, XmlSerializableEventBook eventBook)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"            XmlUtil.saveDataToFile(file, eventBook);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static XmlSerializableAddressBook loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"     * Loads the given eventbook data from the specified file."},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"    public static ReadOnlyEventBook loadEventDataFromSaveFile(File file)"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"            throws FileNotFoundException, JAXBException {"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"        return XmlUtil.getDataFromFile(file, XmlSerializableEventBook.class);"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":14,"-":46}},{"path":"src/main/java/seedu/address/storage/CsvFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import java.io.PrintWriter;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":" * Stores addressbook data in a CSV file"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"public class CsvFileStorage {"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    // This string forms the header for the Google CSV format."},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    public static final String GOOGLE_CSV_FORMAT \u003d \"Name,Given Name,Additional Name,Family Name,Yomi Name,\""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"            + \"Given Name Yomi,Additional Name Yomi,Family Name Yomi,Name Prefix,Name Suffix,Initials,Nickname,\""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"            + \"Short Name,Maiden Name,Birthday,Gender,Location,Billing Information,Directory Server,Mileage,\""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"            + \"Occupation,Hobby,Sensitivity,Priority,Subject,Notes,Group Membership,E-mail 1 - Type,E-mail 1 - Value,\""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"            + \"Phone 1 - Type,Phone 1 - Value,Phone 2 - Type,Phone 2 - Value,Organization 1 - Type,\""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"            + \"Organization 1 - Name,Organization 1 - Yomi Name,Organization 1 - Title,Organization 1 - Department,\""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"            + \"Organization 1 - Symbol,Organization 1 - Location,Organization 1 - Job Description\";"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    public static void saveDataToFile(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"        PrintWriter pw \u003d new PrintWriter(new File(filePath));"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        sb.append(GOOGLE_CSV_FORMAT);"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        sb.append(\u0027\\n\u0027);"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        for (Person person : addressBook.getPersonList()) {"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"            sb.append(person.getName());"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"            sb.append(\",,,,,,,,,,,,,,,,,,,,,,,,,,\");"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"            sb.append(\"* My Contacts\");"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"            sb.append(\",,\");"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"            sb.append(person.getEmail());"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"            sb.append(\",,\");"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"            sb.append(person.getPhone());"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"            sb.append(\",,,,,,,,,,\");"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"            sb.append(\u0027\\n\u0027);"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        pw.write(sb.toString());"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        pw.close();"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":47,"-":4}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    private List\u003cXmlAdaptedTaskCategory\u003e taskCategories;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        taskCategories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        taskCategories.addAll(src.getTaskCategoryList().stream().map(XmlAdaptedTaskCategory::new)"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag} or {@code XmlAdaptedTask} or {@code XmlAdaptedTaskCategory}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        for (XmlAdaptedTaskCategory c : taskCategories) {"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"            addressBook.addTaskCategory(c.toModelType());"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        for (XmlAdaptedTask task : tasks) {"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"            addressBook.addTask(task.toModelType());"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 tasks.equals(otherAb.tasks)"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 taskCategories.equals(otherAb.taskCategories);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":18,"-":71}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.storage.EventBookStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.storage.XmlEventBookStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"        EventBookStorage eventBookStorage \u003d new XmlEventBookStorage(userPrefs.getEventBookFilePath());"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"        storage \u003d new StorageManager(addressBookStorage, eventBookStorage, userPrefsStorage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"        logic \u003d new LogicManager(model, storage, userPrefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"        Optional\u003cReadOnlyEventBook\u003e eventBookOptional;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEventBook initialEventData;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"            eventBookOptional \u003d storage.readEventBook();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"            initialEventData \u003d eventBookOptional.orElseGet(SampleDataUtil::getSampleEventBook);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"            initialEventData \u003d new EventBook();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"            initialEventData \u003d new EventBook();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"        return new ModelManager(initialData, initialEventData, userPrefs);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":146,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":174,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":15,"-":208}},{"path":"src/main/java/seedu/address/storage/XmlEventBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.parsers.ParserConfigurationException;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":" * A class to access TunedIn EventBook data stored as an xml file on the hard disk."},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"public class XmlEventBookStorage implements EventBookStorage {"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlEventBookStorage.class);"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"    private String filePath;"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    private String exportedPath;"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    private String header;"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    public XmlEventBookStorage(String filePath) {"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    public String getEventBookFilePath() {"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"        return filePath;"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook() throws IOException, JAXBException, DataConversionException {"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        return readEventBook(filePath);"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    public Optional\u003cReadOnlyEventBook\u003e readEventBook(String filePath) throws DataConversionException,"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"            FileNotFoundException, JAXBException {"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(filePath);"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        File eventBookFile \u003d new File(filePath);"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"        if (!eventBookFile.exists()) {"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"            logger.info(\"EventBook file \" + eventBookFile + \" not found\");"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"            return Optional.empty();"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"        ReadOnlyEventBook eventBookOptional \u003d XmlFileStorage.loadEventDataFromSaveFile(new File(filePath));"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"        return Optional.of(eventBookOptional);"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"        saveEventBook(eventBook, filePath);"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"    public void saveEventBook(ReadOnlyEventBook eventBook, String filePath) throws IOException {"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(eventBook);"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(filePath);"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableEventBook(eventBook));"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"    public void backupEventBook(ReadOnlyEventBook eventBook) throws IOException {"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"        saveEventBook(eventBook, filePath + \"-backup\");"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"    public void exportEventBook() throws ParserConfigurationException, IOException {"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"        //TODO"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":75,"-":13}},{"path":"src/main/java/seedu/address/storage/EventBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.parsers.ParserConfigurationException;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import javax.xml.transform.TransformerException;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":" * Represents a storage for {@link seedu.address.model.EventBook}."},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"public interface EventBookStorage {"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"     * Returns the file path of the data file."},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    String getEventBookFilePath();"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"     * Returns AddressBook data as a {@link ReadOnlyEventBook}."},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"     * @throws IOException             if there was any problem when reading from the storage."},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    Optional\u003cReadOnlyEventBook\u003e readEventBook() throws DataConversionException, IOException, JAXBException;"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"     * @see #getEventBookFilePath()"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    Optional\u003cReadOnlyEventBook\u003e readEventBook(String filePath)"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"            throws DataConversionException, IOException, JAXBException;"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"     * Saves the given {@link ReadOnlyEventBook} to the storage."},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"     * @param eventBook cannot be null."},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    void saveEventBook(ReadOnlyEventBook eventBook) throws IOException;"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"     * @see #saveEventBook(ReadOnlyEventBook)"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"    void saveEventBook(ReadOnlyEventBook eventBook, String filePath) throws IOException;"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"     * @see #saveEventBook(ReadOnlyEventBook)"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    void backupEventBook(ReadOnlyEventBook eventBook) throws IOException;"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"     * @see #exportEventBook()"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"    void exportEventBook() throws ParserConfigurationException, IOException, TransformerException;"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":58,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/TaskDeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":" * Deletes a task identified using its last displayed index from the address book."},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"public class TaskDeleteCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_WORD \u003d \"task-delete\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_ALIAS \u003d \"td\";"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"            + \": Deletes the task identified by the index number used in the last task listing.\\n\""},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    private Task taskToDelete;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    public TaskDeleteCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskToDelete);"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"            model.deleteTask(taskToDelete);"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskDeleteCommand"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.targetIndex.equals(((TaskDeleteCommand) other).targetIndex)"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 Objects.equals(this.taskToDelete, ((TaskDeleteCommand) other).taskToDelete));"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":59,"-":10}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.EventBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Datetime;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDueDate;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskStatus;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    public static Task[] getSampleTasks() {"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        return new Task[] {"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"            new Task(new TaskName(\"Task XYZ\"), new TaskPriority(\"medium\"),"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"                new TaskDescription(\"Task description XYZ\"),"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"                new TaskDueDate(\"2018-04-28\"), new TaskStatus(\"undone\"),"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"                getTaskCategorySet(\"Work\")),"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"            new Task(new TaskName(\"Essay research\"), new TaskPriority(\"low\"),"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"                new TaskDescription(\"Google for interesting points on essay topic\"),"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"                new TaskDueDate(\"2018-05-29\"), new TaskStatus(\"undone\"),"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"                getTaskCategorySet(\"Personal\")),"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"            new Task(new TaskName(\"Formulate meeting agenda\"), new TaskPriority(\"high\"),"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"                new TaskDescription(\"(1) Analyse the project requirements (2) Record meeting agenda\"),"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"                new TaskDueDate(\"2018-04-20\"), new TaskStatus(\"undone\"),"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"                getTaskCategorySet(\"Meeting\"))"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        };"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"            for (Task sampleTask : getSampleTasks()) {"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"                sampleAb.addTask(sampleTask);"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"            }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate tasks\", e);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"    public static ReadOnlyEventBook getSampleEventBook() {"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"            EventBook sampleEb \u003d new EventBook();"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"            for (Event sampleEvent : getSampleEvents()) {"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"                sampleEb.addEvent(sampleEvent);"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"            return sampleEb;"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"        } catch (CommandException e) {"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate events\", e);"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"            throw new AssertionError(\"Invalid input given!\");"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":"     * Returns a task category set containing the list of strings given."},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":"    public static Set\u003cTaskCategory\u003e getTaskCategorySet(String... strings) {"},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"        HashSet\u003cTaskCategory\u003e taskCategories \u003d new HashSet\u003c\u003e();"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":"        for (String s : strings) {"},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"            taskCategories.add(new TaskCategory(s));"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":"        return taskCategories;"},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":129,"author":{"gitID":"x3tsunayh"},"content":"    public static Event[] getSampleEvents() throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"        return new Event[]{"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":"            new Event(new String(\"Clique Gathering\"), new String(\"Night out with friends\"),"},{"lineNumber":132,"author":{"gitID":"x3tsunayh"},"content":"                new String(\"Tampines Hub\"), new Datetime(\"13-10-2017 1700\")),"},{"lineNumber":133,"author":{"gitID":"x3tsunayh"},"content":"            new Event(new String(\"School Hall Concert\"), new String(\"Friend performing\"),"},{"lineNumber":134,"author":{"gitID":"x3tsunayh"},"content":"                new String(\"UCC\"), new Datetime(\"26-10-2017 1800\")),"},{"lineNumber":135,"author":{"gitID":"x3tsunayh"},"content":"            new Event(new String(\"Halloween Party\"), new String(\"Halloween Event\"),"},{"lineNumber":136,"author":{"gitID":"x3tsunayh"},"content":"                new String(\"Andy\u0027s House\"), new Datetime(\"31-10-2017 2000\"))"},{"lineNumber":137,"author":{"gitID":"x3tsunayh"},"content":"        };"},{"lineNumber":138,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":42,"x3tsunayh":28,"-":69}},{"path":"src/main/java/seedu/address/model/category/TaskCategory.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.category;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":" * Represents a TaskCategory in the address book."},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTaskCategoryName(String)}"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskCategory {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_TASK_CATEGORY_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"            \"Task category names should be alphanumeric, and does not contain any whitespaces\";"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_CATEGORY_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    public final String taskCategoryName;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"     * Constructs a {@code TaskCategory}."},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"     * @param taskCategoryName A valid task category name."},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    public TaskCategory(String taskCategoryName) {"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskCategoryName);"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"        checkArgument(isValidTaskCategoryName(taskCategoryName), MESSAGE_TASK_CATEGORY_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"        this.taskCategoryName \u003d taskCategoryName;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"     * Returns true if a given string is a valid task category name."},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    public static boolean isValidTaskCategoryName(String test) {"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        return test.matches(TASK_CATEGORY_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskCategory"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.taskCategoryName.equals(((TaskCategory) other).taskCategoryName));"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    public int hashCode() {"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"        return taskCategoryName.hashCode();"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"     * Format state as text for viewing."},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"        return \u0027[\u0027 + taskCategoryName + \u0027]\u0027;"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":52,"-":4}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"-"},"content":" *"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"     * Sorts all persons in list alphabetically by name"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"    public void sort() {"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"        internalList.sort((person1, person2) -\u003e person1.getName().toString()"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"                .compareToIgnoreCase(person2.getName().toString()));"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":10,"-":118}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":"import seedu.address.model.tag.UniqueTagList.DuplicateTagException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":"    private Picture picture;"},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"    //@@author dezhanglee"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Picture pic, Set\u003cTag\u003e tags) {"},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"        this.phone \u003d phone;"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"        this.email \u003d email;"},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":"        this.address \u003d address;"},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"        this.picture \u003d pic;"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"        this.picture \u003d new Picture();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"    public Person(Person source) {"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getPicture(),"},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"                source.getTags());"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"    //@@author dezhanglee"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":"    public Picture getPicture() {"},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":"        return picture;"},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"dezhanglee"},"content":"    public UniqueTagList getUniqueTagList() {"},{"lineNumber":81,"author":{"gitID":"dezhanglee"},"content":"        return tags;"},{"lineNumber":82,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"dezhanglee"},"content":"    //@@author dezhanglee"},{"lineNumber":84,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"dezhanglee"},"content":"     * Update contact picture to that located in path"},{"lineNumber":86,"author":{"gitID":"dezhanglee"},"content":"     * @param path"},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"    public void updatePicture(String path) {"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":"        int hash \u003d this.hashCode();"},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":"        String filename \u003d String.valueOf(hash);"},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":"        this.picture \u003d new Picture(path, filename);"},{"lineNumber":92,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":94,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"dezhanglee"},"content":"     * Set profile picture to that in path"},{"lineNumber":96,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"dezhanglee"},"content":"    public void setPicture(String path) throws IllegalValueException {"},{"lineNumber":98,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":99,"author":{"gitID":"dezhanglee"},"content":"        Picture oldPic \u003d this.picture;"},{"lineNumber":100,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"dezhanglee"},"content":"            int fileName \u003d this.hashCode();"},{"lineNumber":102,"author":{"gitID":"dezhanglee"},"content":"            this.picture \u003d new Picture(path, String.valueOf(fileName));"},{"lineNumber":103,"author":{"gitID":"dezhanglee"},"content":"        } catch (Exception e) {"},{"lineNumber":104,"author":{"gitID":"dezhanglee"},"content":"            this.picture \u003d oldPic; //reset picture back to default"},{"lineNumber":105,"author":{"gitID":"dezhanglee"},"content":"            throw new IllegalValueException(Picture.MESSAGE_PICTURE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":109,"author":{"gitID":"dezhanglee"},"content":"    //@@author dezhanglee"},{"lineNumber":110,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"dezhanglee"},"content":"     * Adds tags from {@code toAdd} to existing Person tag list, throws exception if there are duplicate tags"},{"lineNumber":112,"author":{"gitID":"dezhanglee"},"content":"     * @param toAdd"},{"lineNumber":113,"author":{"gitID":"dezhanglee"},"content":"     * @throws DuplicateTagException"},{"lineNumber":114,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"dezhanglee"},"content":"    public void addTags(Set\u003cTag\u003e toAdd) throws DuplicateTagException {"},{"lineNumber":116,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":117,"author":{"gitID":"dezhanglee"},"content":"        for (Tag t : toAdd) {"},{"lineNumber":118,"author":{"gitID":"dezhanglee"},"content":"            this.tags.add(t);"},{"lineNumber":119,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"dezhanglee"},"content":"    //@@author"},{"lineNumber":122,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":123,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":96,"dezhanglee":74}},{"path":"src/main/java/seedu/address/model/person/Picture.java","lines":[{"lineNumber":1,"author":{"gitID":"dezhanglee"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":3,"author":{"gitID":"dezhanglee"},"content":"import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"dezhanglee"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"dezhanglee"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitID":"dezhanglee"},"content":"import javax.imageio.ImageIO;"},{"lineNumber":10,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":11,"author":{"gitID":"dezhanglee"},"content":"//@@author dezhanglee"},{"lineNumber":12,"author":{"gitID":"dezhanglee"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"dezhanglee"},"content":" * Represents a Picture in the address book."},{"lineNumber":14,"author":{"gitID":"dezhanglee"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"dezhanglee"},"content":" */"},{"lineNumber":16,"author":{"gitID":"dezhanglee"},"content":"public class Picture {"},{"lineNumber":17,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":18,"author":{"gitID":"dezhanglee"},"content":"    public static final String DEFAULT_PATH \u003d \"images/default.png\";"},{"lineNumber":19,"author":{"gitID":"dezhanglee"},"content":"    public static final String MESSAGE_PICTURE_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitID":"dezhanglee"},"content":"            \"Filepath must be valid, point to an image file, and is less than 10MB in size\";"},{"lineNumber":21,"author":{"gitID":"dezhanglee"},"content":"    public static final String PICTURE_VALIDATION_REGEX_EXT \u003d \"([a-zA-Z]:)?(\\\\\\\\[a-zA-Z0-9._-]+)+\\\\\\\\?\";"},{"lineNumber":22,"author":{"gitID":"dezhanglee"},"content":"    public static final String PICTURE_VALIDATION_REGEX_INT \u003d \"[^\\\\s].*\";"},{"lineNumber":23,"author":{"gitID":"dezhanglee"},"content":"    public static final String APPDATA_DIR \u003d getDefaultDirectory();"},{"lineNumber":24,"author":{"gitID":"dezhanglee"},"content":"    public static final String FOLDER \u003d APPDATA_DIR + \"/AddressBook\";"},{"lineNumber":25,"author":{"gitID":"dezhanglee"},"content":"    private static final String URL_PREFIX \u003d \"file:/\";"},{"lineNumber":26,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":27,"author":{"gitID":"dezhanglee"},"content":"    private static final int FIVE_MB_IN_BYTES \u003d 5242880;"},{"lineNumber":28,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":29,"author":{"gitID":"dezhanglee"},"content":"    private String path;"},{"lineNumber":30,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":31,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"dezhanglee"},"content":"     * Default initializer, uses default picture"},{"lineNumber":33,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"dezhanglee"},"content":"    public Picture() {"},{"lineNumber":35,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":36,"author":{"gitID":"dezhanglee"},"content":"        this.path \u003d DEFAULT_PATH;"},{"lineNumber":37,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":39,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"dezhanglee"},"content":"     * initializer if path pointing to pic is specified. For now, only called by XmlAdaptedPerson class"},{"lineNumber":41,"author":{"gitID":"dezhanglee"},"content":"     * Since its only called by XmlAdaptedPerson (which saves the picture filepaths based on last successful state),"},{"lineNumber":42,"author":{"gitID":"dezhanglee"},"content":"     * arguments are correct and hence no need to call checkArgument on {@code path}"},{"lineNumber":43,"author":{"gitID":"dezhanglee"},"content":"     * @param path"},{"lineNumber":44,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"dezhanglee"},"content":"    public Picture(String path) {"},{"lineNumber":46,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":47,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(path);"},{"lineNumber":48,"author":{"gitID":"dezhanglee"},"content":"        String p \u003d truncateFilePrefix(path);"},{"lineNumber":49,"author":{"gitID":"dezhanglee"},"content":"        //if invalid/outdated copy of picture in XMLAdaptedPerson, reset to default pic."},{"lineNumber":50,"author":{"gitID":"dezhanglee"},"content":"        if (isValidPath(p)) {"},{"lineNumber":51,"author":{"gitID":"dezhanglee"},"content":"            this.path \u003d path;"},{"lineNumber":52,"author":{"gitID":"dezhanglee"},"content":"        } else {"},{"lineNumber":53,"author":{"gitID":"dezhanglee"},"content":"            this.path \u003d DEFAULT_PATH;"},{"lineNumber":54,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":57,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"dezhanglee"},"content":"     * initializer if path, and image name of new picture is specified"},{"lineNumber":59,"author":{"gitID":"dezhanglee"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"dezhanglee"},"content":"     * @param path"},{"lineNumber":61,"author":{"gitID":"dezhanglee"},"content":"     * @param newPictureName"},{"lineNumber":62,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"dezhanglee"},"content":"    public Picture(String path, String newPictureName) {"},{"lineNumber":64,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":65,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(path);"},{"lineNumber":66,"author":{"gitID":"dezhanglee"},"content":"        checkArgument(isValidPath(path), MESSAGE_PICTURE_CONSTRAINTS);"},{"lineNumber":67,"author":{"gitID":"dezhanglee"},"content":"        String extension \u003d \"\";"},{"lineNumber":68,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":69,"author":{"gitID":"dezhanglee"},"content":"        int i \u003d path.lastIndexOf(\u0027.\u0027);"},{"lineNumber":70,"author":{"gitID":"dezhanglee"},"content":"        if (i \u003e 0) {"},{"lineNumber":71,"author":{"gitID":"dezhanglee"},"content":"            extension \u003d path.substring(i + 1);"},{"lineNumber":72,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"dezhanglee"},"content":"        this.path \u003d FOLDER + \"//\"  + newPictureName + \".\" + extension;"},{"lineNumber":74,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":75,"author":{"gitID":"dezhanglee"},"content":"        createNewPicture(path, newPictureName + \".\" + extension);"},{"lineNumber":76,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":77,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":79,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"dezhanglee"},"content":"     * Check if path is valid"},{"lineNumber":81,"author":{"gitID":"dezhanglee"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"dezhanglee"},"content":"     * @param path"},{"lineNumber":83,"author":{"gitID":"dezhanglee"},"content":"     * @return"},{"lineNumber":84,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"dezhanglee"},"content":"    public static boolean isValidPath(String path) {"},{"lineNumber":86,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":87,"author":{"gitID":"dezhanglee"},"content":"        if (path.equals(DEFAULT_PATH)) {"},{"lineNumber":88,"author":{"gitID":"dezhanglee"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":91,"author":{"gitID":"dezhanglee"},"content":"        boolean isValidExternalPath \u003d path.matches(PICTURE_VALIDATION_REGEX_EXT);"},{"lineNumber":92,"author":{"gitID":"dezhanglee"},"content":"        boolean isValidInternalPath \u003d path.matches(PICTURE_VALIDATION_REGEX_INT);"},{"lineNumber":93,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":94,"author":{"gitID":"dezhanglee"},"content":"        if (isValidExternalPath || isValidInternalPath) {"},{"lineNumber":95,"author":{"gitID":"dezhanglee"},"content":"            return isValidPicture(path);"},{"lineNumber":96,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"dezhanglee"},"content":"        return false;"},{"lineNumber":98,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":100,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"dezhanglee"},"content":"     * Checks if the image pointed to by the path is indeed a valid image"},{"lineNumber":102,"author":{"gitID":"dezhanglee"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"dezhanglee"},"content":"     * @param path"},{"lineNumber":104,"author":{"gitID":"dezhanglee"},"content":"     * @return"},{"lineNumber":105,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"dezhanglee"},"content":"    public static boolean isValidPicture(String path) {"},{"lineNumber":107,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":108,"author":{"gitID":"dezhanglee"},"content":"        File f \u003d new File(path);"},{"lineNumber":109,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":110,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"dezhanglee"},"content":"            if (ImageIO.read(f) \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"dezhanglee"},"content":"                return false;"},{"lineNumber":113,"author":{"gitID":"dezhanglee"},"content":"            }"},{"lineNumber":114,"author":{"gitID":"dezhanglee"},"content":"        } catch (Exception e) { //cannot read image properly"},{"lineNumber":115,"author":{"gitID":"dezhanglee"},"content":"            return false;"},{"lineNumber":116,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":118,"author":{"gitID":"dezhanglee"},"content":"        return isValidSize(path);"},{"lineNumber":119,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"dezhanglee"},"content":"     * Check if image is greater than allowed size"},{"lineNumber":122,"author":{"gitID":"dezhanglee"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"dezhanglee"},"content":"     * @param path"},{"lineNumber":124,"author":{"gitID":"dezhanglee"},"content":"     * @return"},{"lineNumber":125,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"dezhanglee"},"content":"    public static boolean isValidSize(String path) {"},{"lineNumber":127,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":128,"author":{"gitID":"dezhanglee"},"content":"        File f \u003d new File(path);"},{"lineNumber":129,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":130,"author":{"gitID":"dezhanglee"},"content":"        return (f.length() \u003c\u003d FIVE_MB_IN_BYTES);"},{"lineNumber":131,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":133,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"dezhanglee"},"content":"     * copies the file from (@code source) to the profile pic folder"},{"lineNumber":135,"author":{"gitID":"dezhanglee"},"content":"     * If unable to copy, then just directly use file at source."},{"lineNumber":136,"author":{"gitID":"dezhanglee"},"content":"     * This will work since we have already passed {@code source} into isValidPath to ensure it can be read"},{"lineNumber":137,"author":{"gitID":"dezhanglee"},"content":"     * TODO: display some kind of commandresult to notify user of this ^"},{"lineNumber":138,"author":{"gitID":"dezhanglee"},"content":"     * @param source"},{"lineNumber":139,"author":{"gitID":"dezhanglee"},"content":"     * @param dstFilename"},{"lineNumber":140,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"dezhanglee"},"content":"    public void createNewPicture(String source, String dstFilename) {"},{"lineNumber":142,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":143,"author":{"gitID":"dezhanglee"},"content":"        File folder \u003d new File(FOLDER);"},{"lineNumber":144,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":145,"author":{"gitID":"dezhanglee"},"content":"        if (!folder.exists()) {"},{"lineNumber":146,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":147,"author":{"gitID":"dezhanglee"},"content":"            if (!folder.mkdir()) {"},{"lineNumber":148,"author":{"gitID":"dezhanglee"},"content":"                this.path \u003d URL_PREFIX + source;"},{"lineNumber":149,"author":{"gitID":"dezhanglee"},"content":"                return;"},{"lineNumber":150,"author":{"gitID":"dezhanglee"},"content":"            }"},{"lineNumber":151,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":153,"author":{"gitID":"dezhanglee"},"content":"        File src \u003d null;"},{"lineNumber":154,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":155,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"dezhanglee"},"content":"            src \u003d new File(source);"},{"lineNumber":157,"author":{"gitID":"dezhanglee"},"content":"        } catch (Exception e) {"},{"lineNumber":158,"author":{"gitID":"dezhanglee"},"content":"            this.path \u003d URL_PREFIX + source;"},{"lineNumber":159,"author":{"gitID":"dezhanglee"},"content":"            return;"},{"lineNumber":160,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":162,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":163,"author":{"gitID":"dezhanglee"},"content":"        File dest \u003d new File(FOLDER + \"//\" + dstFilename);"},{"lineNumber":164,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":165,"author":{"gitID":"dezhanglee"},"content":"        if (!dest.exists()) {"},{"lineNumber":166,"author":{"gitID":"dezhanglee"},"content":"            try {"},{"lineNumber":167,"author":{"gitID":"dezhanglee"},"content":"                dest.createNewFile();"},{"lineNumber":168,"author":{"gitID":"dezhanglee"},"content":"            } catch (Exception e) {"},{"lineNumber":169,"author":{"gitID":"dezhanglee"},"content":"                this.path \u003d URL_PREFIX + source;"},{"lineNumber":170,"author":{"gitID":"dezhanglee"},"content":"                return;"},{"lineNumber":171,"author":{"gitID":"dezhanglee"},"content":"            }"},{"lineNumber":172,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":174,"author":{"gitID":"dezhanglee"},"content":"        try {"},{"lineNumber":175,"author":{"gitID":"dezhanglee"},"content":"            Files.copy(src.toPath(), dest.toPath() , REPLACE_EXISTING);"},{"lineNumber":176,"author":{"gitID":"dezhanglee"},"content":"            this.path \u003d URL_PREFIX + dest.toPath().toString();"},{"lineNumber":177,"author":{"gitID":"dezhanglee"},"content":"        } catch (Exception e) {"},{"lineNumber":178,"author":{"gitID":"dezhanglee"},"content":"            this.path \u003d URL_PREFIX + source;"},{"lineNumber":179,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":182,"author":{"gitID":"dezhanglee"},"content":"    public String getPath() {"},{"lineNumber":183,"author":{"gitID":"dezhanglee"},"content":"        return this.path;"},{"lineNumber":184,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":186,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"dezhanglee"},"content":"     * Determines the User OS and output the appropriate folder to store profile pic"},{"lineNumber":188,"author":{"gitID":"dezhanglee"},"content":"     *"},{"lineNumber":189,"author":{"gitID":"dezhanglee"},"content":"     * @return"},{"lineNumber":190,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"dezhanglee"},"content":"    private static String getDefaultDirectory() {"},{"lineNumber":192,"author":{"gitID":"dezhanglee"},"content":"        String os \u003d System.getProperty(\"os.name\").toLowerCase();"},{"lineNumber":193,"author":{"gitID":"dezhanglee"},"content":"        if (os.contains(\"WIN\")) {"},{"lineNumber":194,"author":{"gitID":"dezhanglee"},"content":"            return System.getenv(\"APPDATA\");"},{"lineNumber":195,"author":{"gitID":"dezhanglee"},"content":"        } else if (os.contains(\"MAC\")) {"},{"lineNumber":196,"author":{"gitID":"dezhanglee"},"content":"            return System.getProperty(\"user.home\") + \"/Library/Application \""},{"lineNumber":197,"author":{"gitID":"dezhanglee"},"content":"                    + \"Support\";"},{"lineNumber":198,"author":{"gitID":"dezhanglee"},"content":"        } else if (os.contains(\"NUX\")) {"},{"lineNumber":199,"author":{"gitID":"dezhanglee"},"content":"            return System.getProperty(\"user.home\");"},{"lineNumber":200,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"dezhanglee"},"content":"        return System.getProperty(\"user.dir\");"},{"lineNumber":202,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":204,"author":{"gitID":"dezhanglee"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"dezhanglee"},"content":"     * Removes the \"file:/\" prefix from a filepath, so that can use isValidPath on p"},{"lineNumber":206,"author":{"gitID":"dezhanglee"},"content":"     * @param p"},{"lineNumber":207,"author":{"gitID":"dezhanglee"},"content":"     * @return"},{"lineNumber":208,"author":{"gitID":"dezhanglee"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"dezhanglee"},"content":"    private String truncateFilePrefix(String p) {"},{"lineNumber":210,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":211,"author":{"gitID":"dezhanglee"},"content":"        if (p.substring(0, 6).equals(\"file:/\")) {"},{"lineNumber":212,"author":{"gitID":"dezhanglee"},"content":"            return p.substring(6);"},{"lineNumber":213,"author":{"gitID":"dezhanglee"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"dezhanglee"},"content":"        return p;"},{"lineNumber":215,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":217,"author":{"gitID":"dezhanglee"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"dezhanglee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":219,"author":{"gitID":"dezhanglee"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":220,"author":{"gitID":"dezhanglee"},"content":"                || (other instanceof Picture // instanceof handles nulls"},{"lineNumber":221,"author":{"gitID":"dezhanglee"},"content":"                \u0026\u0026 this.path.equals(((Picture) other).path)); // state check"},{"lineNumber":222,"author":{"gitID":"dezhanglee"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":224,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":225,"author":{"gitID":"dezhanglee"},"content":"}"}],"authorContributionMap":{"dezhanglee":222,"-":3}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"     * Returns an unmodifiable view of the tasks list."},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"     * This list will not contain any duplicate tasks."},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"     * Returns an unmodifiable view of the taskCategories list."},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"     * This list will not contain any duplicate taskCategories."},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    ObservableList\u003cTaskCategory\u003e getTaskCategoryList();"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":14,"-":24}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    private String eventBookFilePath \u003d \"data/eventbook.xml\";"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"    private String eventBookName \u003d \"MyEventBook\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"    public String getEventBookFilePath() {"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"        return eventBookFilePath;"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"    public void setEventBookFilePath(String eventBookFilePath) {"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        this.eventBookFilePath \u003d eventBookFilePath;"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"    public String getEventBookName() {"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        return eventBookName;"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"    public void setEventBookName(String addressBookName) {"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"        this.eventBookName \u003d eventBookName;"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"x3tsunayh":19,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/TaskEditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DUE_DATE;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_NAME;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_PRIORITY;"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_STATUS;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDescription;"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskDueDate;"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskName;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskPriority;"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.TaskStatus;"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":" * Edits the details of an existing task in the address book."},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"public class TaskEditCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_WORD \u003d \"task-edit\";"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    public static final String COMMAND_ALIAS \u003d \"te\";"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"            + \"by the index number used the last task listing. \""},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"            + \"[\" + PREFIX_TASK_NAME + \"NAME] \""},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"            + \"[\" + PREFIX_TASK_PRIORITY + \"PRIORITY] \""},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"            + \"[\" + PREFIX_TASK_DESCRIPTION + \"DESCRIPTION] \""},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"            + \"[\" + PREFIX_TASK_DUE_DATE + \"DUE_DATE] \""},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"            + \"[\" + PREFIX_TASK_STATUS + \"STATUS] \""},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"            + \"[\" + PREFIX_TASK_CATEGORY + \"CATEGORY]...\\n \""},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_PRIORITY + \"medium \""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"            + PREFIX_TASK_STATUS + \"done\";"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book.\";"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"    private final Index index;"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    private final EditTaskDescriptor editTaskDescriptor;"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"    private Task taskToEdit;"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"    private Task editedTask;"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"     * @param index of the task in the filtered task list to edit"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"     * @param editTaskDescriptor details to edit the task with"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"    public TaskEditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        requireNonNull(index);"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"        requireNonNull(editTaskDescriptor);"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"        this.index \u003d index;"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":"        taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"        editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"     * edited with {@code editTaskDescriptor}."},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":"        TaskName updatedTaskName \u003d"},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":"                editTaskDescriptor.getTaskName().orElse(taskToEdit.getTaskName());"},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"        TaskPriority updatedTaskPriority \u003d"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"                editTaskDescriptor.getTaskPriority().orElse(taskToEdit.getTaskPriority());"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"        TaskDescription updatedTaskDescription \u003d"},{"lineNumber":115,"author":{"gitID":"CYX28"},"content":"                editTaskDescriptor.getTaskDescription().orElse(taskToEdit.getTaskDescription());"},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"        TaskDueDate updatedTaskDueDate \u003d"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":"                editTaskDescriptor.getTaskDueDate().orElse(taskToEdit.getTaskDueDate());"},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":"        TaskStatus updatedTaskStatus \u003d"},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":"                editTaskDescriptor.getTaskStatus().orElse(taskToEdit.getTaskStatus());"},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":"        Set\u003cTaskCategory\u003e updatedTaskCategories \u003d"},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"                editTaskDescriptor.getTaskCategories().orElse(taskToEdit.getTaskCategories());"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"        return new Task(updatedTaskName, updatedTaskPriority, updatedTaskDescription, updatedTaskDueDate,"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"                updatedTaskStatus, updatedTaskCategories);"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":"            return true;"},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":"        // instanceof handles nulls"},{"lineNumber":134,"author":{"gitID":"CYX28"},"content":"        if (!(other instanceof TaskEditCommand)) {"},{"lineNumber":135,"author":{"gitID":"CYX28"},"content":"            return false;"},{"lineNumber":136,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":138,"author":{"gitID":"CYX28"},"content":"        // state check"},{"lineNumber":139,"author":{"gitID":"CYX28"},"content":"        TaskEditCommand te \u003d (TaskEditCommand) other;"},{"lineNumber":140,"author":{"gitID":"CYX28"},"content":"        return index.equals(te.index)"},{"lineNumber":141,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 editTaskDescriptor.equals(te.editTaskDescriptor)"},{"lineNumber":142,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 Objects.equals(taskToEdit, te.taskToEdit);"},{"lineNumber":143,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":145,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"CYX28"},"content":"     * Stores the details to edit the task with. Each non-empty field value will replace the"},{"lineNumber":147,"author":{"gitID":"CYX28"},"content":"     * corresponding field value of the task."},{"lineNumber":148,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"CYX28"},"content":"    public static class EditTaskDescriptor {"},{"lineNumber":150,"author":{"gitID":"CYX28"},"content":"        private TaskName taskName;"},{"lineNumber":151,"author":{"gitID":"CYX28"},"content":"        private TaskPriority taskPriority;"},{"lineNumber":152,"author":{"gitID":"CYX28"},"content":"        private TaskDescription taskDescription;"},{"lineNumber":153,"author":{"gitID":"CYX28"},"content":"        private TaskDueDate taskDueDate;"},{"lineNumber":154,"author":{"gitID":"CYX28"},"content":"        private TaskStatus taskStatus;"},{"lineNumber":155,"author":{"gitID":"CYX28"},"content":"        private Set\u003cTaskCategory\u003e taskCategories;"},{"lineNumber":156,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":157,"author":{"gitID":"CYX28"},"content":"        public EditTaskDescriptor() {}"},{"lineNumber":158,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":159,"author":{"gitID":"CYX28"},"content":"        /**"},{"lineNumber":160,"author":{"gitID":"CYX28"},"content":"         * Copy constructor."},{"lineNumber":161,"author":{"gitID":"CYX28"},"content":"         * A defensive copy of {@code categories} is used internally."},{"lineNumber":162,"author":{"gitID":"CYX28"},"content":"         */"},{"lineNumber":163,"author":{"gitID":"CYX28"},"content":"        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"},{"lineNumber":164,"author":{"gitID":"CYX28"},"content":"            setTaskName(toCopy.taskName);"},{"lineNumber":165,"author":{"gitID":"CYX28"},"content":"            setTaskPriority(toCopy.taskPriority);"},{"lineNumber":166,"author":{"gitID":"CYX28"},"content":"            setTaskDescription(toCopy.taskDescription);"},{"lineNumber":167,"author":{"gitID":"CYX28"},"content":"            setTaskDueDate(toCopy.taskDueDate);"},{"lineNumber":168,"author":{"gitID":"CYX28"},"content":"            setTaskStatus(toCopy.taskStatus);"},{"lineNumber":169,"author":{"gitID":"CYX28"},"content":"            setTaskCategories(toCopy.taskCategories);"},{"lineNumber":170,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":172,"author":{"gitID":"CYX28"},"content":"        /**"},{"lineNumber":173,"author":{"gitID":"CYX28"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":174,"author":{"gitID":"CYX28"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"CYX28"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":176,"author":{"gitID":"CYX28"},"content":"            return CollectionUtil.isAnyNonNull(this.taskName, this.taskPriority, this.taskDescription,"},{"lineNumber":177,"author":{"gitID":"CYX28"},"content":"                    this.taskDueDate, this.taskStatus, this.taskCategories);"},{"lineNumber":178,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":180,"author":{"gitID":"CYX28"},"content":"        public void setTaskName(TaskName taskName) {"},{"lineNumber":181,"author":{"gitID":"CYX28"},"content":"            this.taskName \u003d taskName;"},{"lineNumber":182,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":184,"author":{"gitID":"CYX28"},"content":"        public Optional\u003cTaskName\u003e getTaskName() {"},{"lineNumber":185,"author":{"gitID":"CYX28"},"content":"            return Optional.ofNullable(taskName);"},{"lineNumber":186,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":188,"author":{"gitID":"CYX28"},"content":"        public void setTaskPriority(TaskPriority taskPriority) {"},{"lineNumber":189,"author":{"gitID":"CYX28"},"content":"            this.taskPriority \u003d taskPriority;"},{"lineNumber":190,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":192,"author":{"gitID":"CYX28"},"content":"        public Optional\u003cTaskPriority\u003e getTaskPriority() {"},{"lineNumber":193,"author":{"gitID":"CYX28"},"content":"            return Optional.ofNullable(taskPriority);"},{"lineNumber":194,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":196,"author":{"gitID":"CYX28"},"content":"        public void setTaskDescription(TaskDescription taskDescription) {"},{"lineNumber":197,"author":{"gitID":"CYX28"},"content":"            this.taskDescription \u003d taskDescription;"},{"lineNumber":198,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":200,"author":{"gitID":"CYX28"},"content":"        public Optional\u003cTaskDescription\u003e getTaskDescription() {"},{"lineNumber":201,"author":{"gitID":"CYX28"},"content":"            return Optional.ofNullable(taskDescription);"},{"lineNumber":202,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":204,"author":{"gitID":"CYX28"},"content":"        public void setTaskDueDate(TaskDueDate taskDueDate) {"},{"lineNumber":205,"author":{"gitID":"CYX28"},"content":"            this.taskDueDate \u003d taskDueDate;"},{"lineNumber":206,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":208,"author":{"gitID":"CYX28"},"content":"        public Optional\u003cTaskDueDate\u003e getTaskDueDate() {"},{"lineNumber":209,"author":{"gitID":"CYX28"},"content":"            return Optional.ofNullable(taskDueDate);"},{"lineNumber":210,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":212,"author":{"gitID":"CYX28"},"content":"        public void setTaskStatus(TaskStatus taskStatus) {"},{"lineNumber":213,"author":{"gitID":"CYX28"},"content":"            this.taskStatus \u003d taskStatus;"},{"lineNumber":214,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":216,"author":{"gitID":"CYX28"},"content":"        public Optional\u003cTaskStatus\u003e getTaskStatus() {"},{"lineNumber":217,"author":{"gitID":"CYX28"},"content":"            return Optional.ofNullable(taskStatus);"},{"lineNumber":218,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":220,"author":{"gitID":"CYX28"},"content":"        /**"},{"lineNumber":221,"author":{"gitID":"CYX28"},"content":"         * Sets {@code categories} to this object\u0027s {@code categories}."},{"lineNumber":222,"author":{"gitID":"CYX28"},"content":"         * A defensive copy of {@code categories} is used internally."},{"lineNumber":223,"author":{"gitID":"CYX28"},"content":"         */"},{"lineNumber":224,"author":{"gitID":"CYX28"},"content":"        public void setTaskCategories(Set\u003cTaskCategory\u003e taskCategories) {"},{"lineNumber":225,"author":{"gitID":"CYX28"},"content":"            this.taskCategories \u003d (taskCategories !\u003d null) ? new HashSet\u003c\u003e(taskCategories) : null;"},{"lineNumber":226,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":228,"author":{"gitID":"CYX28"},"content":"        /**"},{"lineNumber":229,"author":{"gitID":"CYX28"},"content":"         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"},{"lineNumber":230,"author":{"gitID":"CYX28"},"content":"         * if modification is attempted."},{"lineNumber":231,"author":{"gitID":"CYX28"},"content":"         * Returns {@code Optional#empty()} if {@code categories} is null."},{"lineNumber":232,"author":{"gitID":"CYX28"},"content":"         */"},{"lineNumber":233,"author":{"gitID":"CYX28"},"content":"        public Optional\u003cSet\u003cTaskCategory\u003e\u003e getTaskCategories() {"},{"lineNumber":234,"author":{"gitID":"CYX28"},"content":"            return (taskCategories !\u003d null) ? Optional.of(Collections.unmodifiableSet(taskCategories))"},{"lineNumber":235,"author":{"gitID":"CYX28"},"content":"                    : Optional.empty();"},{"lineNumber":236,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":238,"author":{"gitID":"CYX28"},"content":"        @Override"},{"lineNumber":239,"author":{"gitID":"CYX28"},"content":"        public boolean equals(Object other) {"},{"lineNumber":240,"author":{"gitID":"CYX28"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":241,"author":{"gitID":"CYX28"},"content":"                return true;"},{"lineNumber":242,"author":{"gitID":"CYX28"},"content":"            }"},{"lineNumber":243,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":244,"author":{"gitID":"CYX28"},"content":"            // instanceof handle nulls"},{"lineNumber":245,"author":{"gitID":"CYX28"},"content":"            if (!(other instanceof EditTaskDescriptor)) {"},{"lineNumber":246,"author":{"gitID":"CYX28"},"content":"                return false;"},{"lineNumber":247,"author":{"gitID":"CYX28"},"content":"            }"},{"lineNumber":248,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":249,"author":{"gitID":"CYX28"},"content":"            // state check"},{"lineNumber":250,"author":{"gitID":"CYX28"},"content":"            EditTaskDescriptor etd \u003d (EditTaskDescriptor) other;"},{"lineNumber":251,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":252,"author":{"gitID":"CYX28"},"content":"            return getTaskName().equals(etd.getTaskName())"},{"lineNumber":253,"author":{"gitID":"CYX28"},"content":"                    \u0026\u0026 getTaskPriority().equals(etd.getTaskPriority())"},{"lineNumber":254,"author":{"gitID":"CYX28"},"content":"                    \u0026\u0026 getTaskDescription().equals(etd.getTaskDescription())"},{"lineNumber":255,"author":{"gitID":"CYX28"},"content":"                    \u0026\u0026 getTaskDueDate().equals(etd.getTaskDueDate())"},{"lineNumber":256,"author":{"gitID":"CYX28"},"content":"                    \u0026\u0026 getTaskStatus().equals(etd.getTaskStatus())"},{"lineNumber":257,"author":{"gitID":"CYX28"},"content":"                    \u0026\u0026 getTaskCategories().equals(etd.getTaskCategories());"},{"lineNumber":258,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":261,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":246,"-":15}},{"path":"src/main/java/seedu/address/model/Currency.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jill858"},"content":"//@@author jill858"},{"lineNumber":7,"author":{"gitID":"jill858"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jill858"},"content":" * Represent currencies and its rate"},{"lineNumber":9,"author":{"gitID":"jill858"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jill858"},"content":"public class Currency {"},{"lineNumber":11,"author":{"gitID":"jill858"},"content":""},{"lineNumber":12,"author":{"gitID":"jill858"},"content":"    private List\u003cString\u003e currencyCodes \u003d Arrays.asList(\"SGD\","},{"lineNumber":13,"author":{"gitID":"jill858"},"content":"            \"AUD\", \"CAD\", \"CHF\", \"CNY\", \"GBP\","},{"lineNumber":14,"author":{"gitID":"jill858"},"content":"            \"HKD\",  \"ILS\", \"INR\", \"JPY\", \"MYR\","},{"lineNumber":15,"author":{"gitID":"jill858"},"content":"            \"NZD\", \"PHP\", \"SEK\", \"THB\", \"TWD\","},{"lineNumber":16,"author":{"gitID":"jill858"},"content":"            \"USD\");"},{"lineNumber":17,"author":{"gitID":"jill858"},"content":""},{"lineNumber":18,"author":{"gitID":"jill858"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"jill858"},"content":"     * Check the currency code given contains in the list of currency codes"},{"lineNumber":20,"author":{"gitID":"jill858"},"content":"     * @param currencyCode"},{"lineNumber":21,"author":{"gitID":"jill858"},"content":"     * @return true is a given currency code is found in the list"},{"lineNumber":22,"author":{"gitID":"jill858"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"jill858"},"content":"    public boolean containsCurrencyCode(String currencyCode) {"},{"lineNumber":24,"author":{"gitID":"jill858"},"content":"        boolean isCurrencyCode \u003d currencyCodes.stream().anyMatch(code -\u003e code.equals(currencyCode));"},{"lineNumber":25,"author":{"gitID":"jill858"},"content":""},{"lineNumber":26,"author":{"gitID":"jill858"},"content":"        return isCurrencyCode;"},{"lineNumber":27,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jill858"},"content":""},{"lineNumber":29,"author":{"gitID":"jill858"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"jill858"},"content":"     * Retrieve the rate of the currency given the currency code"},{"lineNumber":31,"author":{"gitID":"jill858"},"content":"     * The default based rate is in SGD (Singapore Dollar)"},{"lineNumber":32,"author":{"gitID":"jill858"},"content":"     * @param currencyCode"},{"lineNumber":33,"author":{"gitID":"jill858"},"content":"     * @return rate of the currency code"},{"lineNumber":34,"author":{"gitID":"jill858"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"jill858"},"content":"    public double getCurrencyRate(String currencyCode) {"},{"lineNumber":36,"author":{"gitID":"jill858"},"content":"        double currencyRate \u003d 1;"},{"lineNumber":37,"author":{"gitID":"jill858"},"content":""},{"lineNumber":38,"author":{"gitID":"jill858"},"content":"        switch (currencyCode) {"},{"lineNumber":39,"author":{"gitID":"jill858"},"content":""},{"lineNumber":40,"author":{"gitID":"jill858"},"content":"        //Singapore Dollar"},{"lineNumber":41,"author":{"gitID":"jill858"},"content":"        case \"SGD\":"},{"lineNumber":42,"author":{"gitID":"jill858"},"content":"            return 1.000;"},{"lineNumber":43,"author":{"gitID":"jill858"},"content":""},{"lineNumber":44,"author":{"gitID":"jill858"},"content":"        //Australian dollar"},{"lineNumber":45,"author":{"gitID":"jill858"},"content":"        case \"AUD\":"},{"lineNumber":46,"author":{"gitID":"jill858"},"content":"            return 0.991;"},{"lineNumber":47,"author":{"gitID":"jill858"},"content":""},{"lineNumber":48,"author":{"gitID":"jill858"},"content":"        //Canadian dollar"},{"lineNumber":49,"author":{"gitID":"jill858"},"content":"        case \"CAD\":"},{"lineNumber":50,"author":{"gitID":"jill858"},"content":"            return 0.981;"},{"lineNumber":51,"author":{"gitID":"jill858"},"content":""},{"lineNumber":52,"author":{"gitID":"jill858"},"content":"        //Swiss franc"},{"lineNumber":53,"author":{"gitID":"jill858"},"content":"        case \"CHF\":"},{"lineNumber":54,"author":{"gitID":"jill858"},"content":"            return 0.724;"},{"lineNumber":55,"author":{"gitID":"jill858"},"content":""},{"lineNumber":56,"author":{"gitID":"jill858"},"content":"        //Renminbi (Chinese) yuan"},{"lineNumber":57,"author":{"gitID":"jill858"},"content":"        case \"CNY\":"},{"lineNumber":58,"author":{"gitID":"jill858"},"content":"            return 4.801;"},{"lineNumber":59,"author":{"gitID":"jill858"},"content":""},{"lineNumber":60,"author":{"gitID":"jill858"},"content":"        //Pound sterling"},{"lineNumber":61,"author":{"gitID":"jill858"},"content":"        case \"GBP\":"},{"lineNumber":62,"author":{"gitID":"jill858"},"content":"            return 0.539;"},{"lineNumber":63,"author":{"gitID":"jill858"},"content":""},{"lineNumber":64,"author":{"gitID":"jill858"},"content":"        //Hong Kong dollar"},{"lineNumber":65,"author":{"gitID":"jill858"},"content":"        case \"HKD\":"},{"lineNumber":66,"author":{"gitID":"jill858"},"content":"            return 5.998;"},{"lineNumber":67,"author":{"gitID":"jill858"},"content":""},{"lineNumber":68,"author":{"gitID":"jill858"},"content":"        //Israeli new shekel"},{"lineNumber":69,"author":{"gitID":"jill858"},"content":"        case \"ILS\":"},{"lineNumber":70,"author":{"gitID":"jill858"},"content":"            return 2.662;"},{"lineNumber":71,"author":{"gitID":"jill858"},"content":""},{"lineNumber":72,"author":{"gitID":"jill858"},"content":"        //Indian rupee"},{"lineNumber":73,"author":{"gitID":"jill858"},"content":"        case \"INR\":"},{"lineNumber":74,"author":{"gitID":"jill858"},"content":"            return 49.587;"},{"lineNumber":75,"author":{"gitID":"jill858"},"content":""},{"lineNumber":76,"author":{"gitID":"jill858"},"content":"        //Japanese yen"},{"lineNumber":77,"author":{"gitID":"jill858"},"content":"        case \"JPY\":"},{"lineNumber":78,"author":{"gitID":"jill858"},"content":"            return 80.847;"},{"lineNumber":79,"author":{"gitID":"jill858"},"content":""},{"lineNumber":80,"author":{"gitID":"jill858"},"content":"        //Malaysian ringgit"},{"lineNumber":81,"author":{"gitID":"jill858"},"content":"        case \"MYR\":"},{"lineNumber":82,"author":{"gitID":"jill858"},"content":"            return 2.962;"},{"lineNumber":83,"author":{"gitID":"jill858"},"content":""},{"lineNumber":84,"author":{"gitID":"jill858"},"content":"        //New Zealand dollar"},{"lineNumber":85,"author":{"gitID":"jill858"},"content":"        case \"NZD\":"},{"lineNumber":86,"author":{"gitID":"jill858"},"content":"            return 1.049;"},{"lineNumber":87,"author":{"gitID":"jill858"},"content":""},{"lineNumber":88,"author":{"gitID":"jill858"},"content":"        //Philippine piso"},{"lineNumber":89,"author":{"gitID":"jill858"},"content":"        case \"PHP\":"},{"lineNumber":90,"author":{"gitID":"jill858"},"content":"            return 40.063;"},{"lineNumber":91,"author":{"gitID":"jill858"},"content":""},{"lineNumber":92,"author":{"gitID":"jill858"},"content":"        //Swedish krona/kronor"},{"lineNumber":93,"author":{"gitID":"jill858"},"content":"        case \"SEK\":"},{"lineNumber":94,"author":{"gitID":"jill858"},"content":"            return 6.279;"},{"lineNumber":95,"author":{"gitID":"jill858"},"content":""},{"lineNumber":96,"author":{"gitID":"jill858"},"content":"        //Thai baht"},{"lineNumber":97,"author":{"gitID":"jill858"},"content":"        case \"THB\":"},{"lineNumber":98,"author":{"gitID":"jill858"},"content":"            return 23.840;"},{"lineNumber":99,"author":{"gitID":"jill858"},"content":""},{"lineNumber":100,"author":{"gitID":"jill858"},"content":"        //New Taiwan dollar"},{"lineNumber":101,"author":{"gitID":"jill858"},"content":"        case \"TWD\":"},{"lineNumber":102,"author":{"gitID":"jill858"},"content":"            return 22.285;"},{"lineNumber":103,"author":{"gitID":"jill858"},"content":""},{"lineNumber":104,"author":{"gitID":"jill858"},"content":"        //United States dollar"},{"lineNumber":105,"author":{"gitID":"jill858"},"content":"        case \"USD\":"},{"lineNumber":106,"author":{"gitID":"jill858"},"content":"            return 0.764;"},{"lineNumber":107,"author":{"gitID":"jill858"},"content":""},{"lineNumber":108,"author":{"gitID":"jill858"},"content":"        default: return 1;"},{"lineNumber":109,"author":{"gitID":"jill858"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":106,"-":5}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.UniqueTaskCategoryList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.UniqueTaskList;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"    private final UniqueTaskCategoryList taskCategories;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        tasks \u003d new UniqueTaskList();"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        taskCategories \u003d new UniqueTaskCategoryList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"     * Creates an AddressBook using the Persons, Tags, Tasks and TaskCategories in the {@code toBeCopied}"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"    public void setTaskCategories(Set\u003cTaskCategory\u003e taskCategories) {"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"        this.taskCategories.setTaskCategories(taskCategories);"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        setTaskCategories(new HashSet\u003c\u003e(newData.getTaskCategoryList()));"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"        List\u003cTask\u003e syncedTaskList \u003d newData.getTaskList().stream()"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"                .map(this::syncWithMasterTaskCategoryList)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"            setTasks(syncedTaskList);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate tasks\");"},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"dezhanglee"},"content":"    public void updatePerson(Person target, Person editedReadOnlyPerson)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":134,"author":{"gitID":"dezhanglee"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"dezhanglee"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":137,"author":{"gitID":"dezhanglee"},"content":"        syncWithMasterTagList(editedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":141,"author":{"gitID":"dezhanglee"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":159,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":162,"author":{"gitID":"dezhanglee"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":163,"author":{"gitID":"dezhanglee"},"content":"                person.getPicture(), correctTagReferences);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":179,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"CYX28"},"content":"     * Sorts the person list alphabetically by name"},{"lineNumber":181,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"CYX28"},"content":"    public void sortPersons() {"},{"lineNumber":183,"author":{"gitID":"CYX28"},"content":"        persons.sort();"},{"lineNumber":184,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":186,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":194,"author":{"gitID":"CYX28"},"content":"    //// task-level operations"},{"lineNumber":195,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"CYX28"},"content":"     * Adds a task to the address book."},{"lineNumber":197,"author":{"gitID":"CYX28"},"content":"     * Also checks the new task\u0027s categories and updates {@link #taskCategories} with any new taskCategories found,"},{"lineNumber":198,"author":{"gitID":"CYX28"},"content":"     * and updates the TaskCategory objects in the task to point to those in {@link #taskCategories}."},{"lineNumber":199,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":200,"author":{"gitID":"CYX28"},"content":"     * @throws DuplicateTaskException if an equivalent task already exists."},{"lineNumber":201,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"CYX28"},"content":"    public void addTask(Task t) throws DuplicateTaskException {"},{"lineNumber":203,"author":{"gitID":"CYX28"},"content":"        Task task \u003d syncWithMasterTaskCategoryList(t);"},{"lineNumber":204,"author":{"gitID":"CYX28"},"content":"        // TODO: the taskCategories master list will be updated even though the below line fails."},{"lineNumber":205,"author":{"gitID":"CYX28"},"content":"        // This can cause the taskCategories master list to have additional taskCategories that are not tagged to"},{"lineNumber":206,"author":{"gitID":"CYX28"},"content":"        // any task in the task list."},{"lineNumber":207,"author":{"gitID":"CYX28"},"content":"        tasks.add(task);"},{"lineNumber":208,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":210,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"CYX28"},"content":"     * Replaces the given task {@code target} in the list with {@code editedTask}."},{"lineNumber":212,"author":{"gitID":"CYX28"},"content":"     * {@code AddressBook}\u0027s taskCategory list will be updated with the taskCategories of {@code editedTask}."},{"lineNumber":213,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":214,"author":{"gitID":"CYX28"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to"},{"lineNumber":215,"author":{"gitID":"CYX28"},"content":"     * another existing task in the list."},{"lineNumber":216,"author":{"gitID":"CYX28"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":217,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":218,"author":{"gitID":"CYX28"},"content":"     * @see #syncWithMasterTaskCategoryList(Task)"},{"lineNumber":219,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"CYX28"},"content":"    public void updateTask(Task target, Task editedTask) throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":221,"author":{"gitID":"CYX28"},"content":"        requireNonNull(editedTask);"},{"lineNumber":222,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":223,"author":{"gitID":"CYX28"},"content":"        Task syncedEditedTask \u003d syncWithMasterTaskCategoryList(editedTask);"},{"lineNumber":224,"author":{"gitID":"CYX28"},"content":"        // TODO: the taskCategories master list will be updated even though the below line fails."},{"lineNumber":225,"author":{"gitID":"CYX28"},"content":"        // This can cause the taskCategories master list to have additional taskCategories that are not tagged to"},{"lineNumber":226,"author":{"gitID":"CYX28"},"content":"        // any task in the person list."},{"lineNumber":227,"author":{"gitID":"CYX28"},"content":"        tasks.setTask(target, syncedEditedTask);"},{"lineNumber":228,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":230,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"CYX28"},"content":"     * Updates the master taskCategory list to include taskCategories in {@code task} that are not in the list."},{"lineNumber":232,"author":{"gitID":"CYX28"},"content":"     * @return a copy of this {@code task} such that every taskCategory in this task points to a TaskCategory object"},{"lineNumber":233,"author":{"gitID":"CYX28"},"content":"     * in the master list."},{"lineNumber":234,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"CYX28"},"content":"    private Task syncWithMasterTaskCategoryList(Task task) {"},{"lineNumber":236,"author":{"gitID":"CYX28"},"content":"        final UniqueTaskCategoryList categories \u003d new UniqueTaskCategoryList(task.getTaskCategories());"},{"lineNumber":237,"author":{"gitID":"CYX28"},"content":"        taskCategories.mergeFrom(categories);"},{"lineNumber":238,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":239,"author":{"gitID":"CYX28"},"content":"        // Create map with values \u003d taskCategory object references in the master list"},{"lineNumber":240,"author":{"gitID":"CYX28"},"content":"        // Used for checking task category references"},{"lineNumber":241,"author":{"gitID":"CYX28"},"content":"        final Map\u003cTaskCategory, TaskCategory\u003e masterTaskCategoryObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":242,"author":{"gitID":"CYX28"},"content":"        taskCategories.forEach(taskCategory -\u003e masterTaskCategoryObjects.put(taskCategory, taskCategory));"},{"lineNumber":243,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":244,"author":{"gitID":"CYX28"},"content":"        // Rebuild the list of task categories to point to the relevant taskCategories in the master taskCategory list."},{"lineNumber":245,"author":{"gitID":"CYX28"},"content":"        final Set\u003cTaskCategory\u003e correctTaskCategoryReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":246,"author":{"gitID":"CYX28"},"content":"        categories.forEach(taskCategory -\u003e correctTaskCategoryReferences.add("},{"lineNumber":247,"author":{"gitID":"CYX28"},"content":"                masterTaskCategoryObjects.get(taskCategory)));"},{"lineNumber":248,"author":{"gitID":"CYX28"},"content":"        return new Task(task.getTaskName(), task.getTaskPriority(), task.getTaskDescription(), task.getTaskDueDate(),"},{"lineNumber":249,"author":{"gitID":"CYX28"},"content":"                task.getTaskStatus(), correctTaskCategoryReferences);"},{"lineNumber":250,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":252,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"CYX28"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":254,"author":{"gitID":"CYX28"},"content":"     * @throws TaskNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":255,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"CYX28"},"content":"    public boolean removeTask(Task key) throws TaskNotFoundException {"},{"lineNumber":257,"author":{"gitID":"CYX28"},"content":"        if (tasks.remove(key)) {"},{"lineNumber":258,"author":{"gitID":"CYX28"},"content":"            return true;"},{"lineNumber":259,"author":{"gitID":"CYX28"},"content":"        } else {"},{"lineNumber":260,"author":{"gitID":"CYX28"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":261,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":264,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"CYX28"},"content":"     * Sorts the task list by priority from high to low importance"},{"lineNumber":266,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"CYX28"},"content":"    public void sortTasksByPriority() {"},{"lineNumber":268,"author":{"gitID":"CYX28"},"content":"        tasks.sortByPriority();"},{"lineNumber":269,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":271,"author":{"gitID":"CYX28"},"content":"    //// taskCategory-level operations"},{"lineNumber":272,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":273,"author":{"gitID":"CYX28"},"content":"    public void addTaskCategory(TaskCategory tc) throws UniqueTaskCategoryList.DuplicateTaskCategoryException {"},{"lineNumber":274,"author":{"gitID":"CYX28"},"content":"        taskCategories.add(tc);"},{"lineNumber":275,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":277,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":282,"author":{"gitID":"CYX28"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":283,"author":{"gitID":"CYX28"},"content":"                + tasks.asObservableList().size() + \" tasks, \" + taskCategories.asObservableList().size()"},{"lineNumber":284,"author":{"gitID":"CYX28"},"content":"                + \" task categories\";"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":299,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":300,"author":{"gitID":"CYX28"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":301,"author":{"gitID":"CYX28"},"content":"        return tasks.asObservableList();"},{"lineNumber":302,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":304,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"CYX28"},"content":"    public ObservableList\u003cTaskCategory\u003e getTaskCategoryList() {"},{"lineNumber":306,"author":{"gitID":"CYX28"},"content":"        return taskCategories.asObservableList();"},{"lineNumber":307,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":309,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":313,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":314,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":315,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"},{"lineNumber":316,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.tasks.equals(((AddressBook) other).tasks)"},{"lineNumber":317,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.taskCategories.equalsOrderInsensitive(((AddressBook) other).taskCategories));"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":323,"author":{"gitID":"CYX28"},"content":"        return Objects.hash(persons, tags, tasks, taskCategories);"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":139,"x3tsunayh":1,"-":179,"dezhanglee":7}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.commons.events.model.EventBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    private final EventBook eventBook;"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    private final FilteredList\u003cReadOnlyEvent\u003e filteredEvents;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyEventBook eventBook, UserPrefs userPrefs) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"        this.eventBook \u003d new EventBook(eventBook);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.eventBook.getEventList());"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"        this(new AddressBook(), new EventBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"    public ReadOnlyEventBook getEventBook() {"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"        return eventBook;"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"dezhanglee"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"    //@@author CYX28"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"    public void sortPersons() {"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        this.addressBook.sortPersons();"},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"        indicateAddressBookChanged();"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":"    public synchronized void deleteTask(Task target) throws TaskNotFoundException {"},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"        addressBook.removeTask(target);"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"        indicateAddressBookChanged();"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":"    public synchronized void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":"        addressBook.addTask(task);"},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":"        indicateAddressBookChanged();"},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"    public void updateTask(Task target, Task editedTask) throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":"        addressBook.updateTask(target, editedTask);"},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":"        indicateAddressBookChanged();"},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":"    public void sortTasksByPriority() {"},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":"        this.addressBook.sortTasksByPriority();"},{"lineNumber":134,"author":{"gitID":"CYX28"},"content":"        indicateAddressBookChanged();"},{"lineNumber":135,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":137,"author":{"gitID":"CYX28"},"content":"    //@@author"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"x3tsunayh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":156,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"x3tsunayh"},"content":"    public ObservableList\u003cReadOnlyEvent\u003e getFilteredEventList() {"},{"lineNumber":158,"author":{"gitID":"x3tsunayh"},"content":"        return FXCollections.unmodifiableObservableList(filteredEvents);"},{"lineNumber":159,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":161,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"x3tsunayh"},"content":"    public void updateFilteredEventList(Predicate\u003cReadOnlyEvent\u003e predicate) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":164,"author":{"gitID":"x3tsunayh"},"content":"        filteredEvents.setPredicate(predicate);"},{"lineNumber":165,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":167,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"x3tsunayh"},"content":"    public void addEvent(ReadOnlyEvent eventToAdd) throws CommandException {"},{"lineNumber":169,"author":{"gitID":"x3tsunayh"},"content":"        eventBook.addEvent(eventToAdd);"},{"lineNumber":170,"author":{"gitID":"x3tsunayh"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":171,"author":{"gitID":"x3tsunayh"},"content":"        indicateEventBookChanged();"},{"lineNumber":172,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":174,"author":{"gitID":"x3tsunayh"},"content":"    private void indicateEventBookChanged() {"},{"lineNumber":175,"author":{"gitID":"x3tsunayh"},"content":"        raise(new EventBookChangedEvent(eventBook));"},{"lineNumber":176,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":178,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":179,"author":{"gitID":"x3tsunayh"},"content":"    public void deleteEvent(ReadOnlyEvent eventToDelete) throws CommandException {"},{"lineNumber":180,"author":{"gitID":"x3tsunayh"},"content":"        eventBook.removeEvent(eventToDelete);"},{"lineNumber":181,"author":{"gitID":"x3tsunayh"},"content":"        indicateEventBookChanged();"},{"lineNumber":182,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":184,"author":{"gitID":"CYX28"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":185,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":186,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"CYX28"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":188,"author":{"gitID":"CYX28"},"content":"        return FXCollections.unmodifiableObservableList(filteredTasks);"},{"lineNumber":189,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":191,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":192,"author":{"gitID":"CYX28"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":194,"author":{"gitID":"CYX28"},"content":"        filteredTasks.setPredicate(predicate);"},{"lineNumber":195,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":212,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":213,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":54,"x3tsunayh":42,"-":119,"dezhanglee":1}},{"path":"src/main/java/seedu/address/model/task/TaskStatus.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":" * Represents a Task\u0027s status in the address book."},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTaskStatus(String)}"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskStatus {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_TASK_STATUS_CONSTRAINTS \u003d \"Task status can only be either done or undone.\";"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"     * The first character of the task status must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"     * The valid values for task status can start with or without capital letter."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_STATUS_VALIDATION_REGEX \u003d \"^(done|undone)$\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"     * Constructs a {@code TaskStatus}"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"     * @param taskStatus A valid task status."},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    public TaskStatus(String taskStatus) {"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskStatus);"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        checkArgument(isValidTaskStatus(taskStatus), MESSAGE_TASK_STATUS_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        this.value \u003d taskStatus;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"     * Returns true if a given string is a valid task status."},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    public static boolean isValidTaskStatus(String test) {"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        return test.matches(TASK_STATUS_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskStatus"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.value.equals(((TaskStatus) other).value));"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":55,"-":4}},{"path":"src/main/java/seedu/address/model/task/TaskDueDate.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":" * Represents a Task\u0027s due date in the address book."},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTaskDueDate(String)}"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskDueDate {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_TASK_DUE_DATE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"            \"Task due dates must be a valid date in the format yyyy-MM-dd\";"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"     * The first character of the task due date must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"     * This regex checks for years from 1900 to 9999 and also leap year."},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_DUE_DATE_VALIDATION_REGEX \u003d"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"            \"^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)$|\""},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"                    + \"^(((19|[2-9][0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))$|\""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"                    + \"^(((19|[2-9][0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))$|\""},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"                    + \"^(((19|[2-9][0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))$\";"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    public final String value;"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"     * Constructs a {@code TaskDueDate}."},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"     * @param taskDueDate A valid task due date."},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"    public TaskDueDate(String taskDueDate) {"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskDueDate);"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        checkArgument(isValidTaskDueDate(taskDueDate), MESSAGE_TASK_DUE_DATE_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        this.value \u003d taskDueDate;"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"     * Returns true if a given string is a valid task due date."},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"    public static boolean isValidTaskDueDate(String test) {"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        return test.matches(TASK_DUE_DATE_VALIDATION_REGEX);"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        return value;"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskDueDate"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.value.equals(((TaskDueDate) other).value));"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"        return value.hashCode();"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":60,"-":4}},{"path":"src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":" * Signals that the operation is unable to find the specified task."},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"public class TaskNotFoundException extends Exception { }"}],"authorContributionMap":{"CYX28":6}},{"path":"src/main/java/seedu/address/model/category/UniqueTaskCategoryList.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.category;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"/** A list of categories that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":" *"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":" *"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":" * @see TaskCategory#equals(Object)"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"public class UniqueTaskCategoryList implements Iterable\u003cTaskCategory\u003e {"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    private final ObservableList\u003cTaskCategory\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"     * Constructs empty TaskCategoryList."},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    public UniqueTaskCategoryList() {}"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"     * Creates a UniqueTaskCategoryList using given taskCategories."},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    public UniqueTaskCategoryList(Set\u003cTaskCategory\u003e categories) {"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        requireAllNonNull(categories);"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        internalList.addAll(categories);"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"     * Returns all taskCategories in this list as a Set."},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"    public Set\u003cTaskCategory\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"     * Replaces the TaskCategories in this list with those in the argument taskCategory list."},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    public void setTaskCategories(Set\u003cTaskCategory\u003e taskCategories) {"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        requireAllNonNull(taskCategories);"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        internalList.setAll(taskCategories);"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"     * Ensures every taskCategory in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"    public void mergeFrom(UniqueTaskCategoryList from) {"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        final Set\u003cTaskCategory\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"                .filter(taskCategory -\u003e !alreadyInside.contains(taskCategory))"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"     * Returns true if the list contains an equivalent TaskCategory as the given argument."},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"    public boolean contains(TaskCategory toCheck) {"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"     * Adds a TaskCategory to the list."},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"     * @throws DuplicateTaskCategoryException if the TaskCategory to add"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"     * is a duplicate of an existing TaskCategory in the list."},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"    public void add(TaskCategory toAdd) throws DuplicateTaskCategoryException {"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"        requireNonNull(toAdd);"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"        if (contains(toAdd)) {"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"            throw new DuplicateTaskCategoryException();"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"        internalList.add(toAdd);"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"    public Iterator\u003cTaskCategory\u003e iterator() {"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":"        return internalList.iterator();"},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"    public ObservableList\u003cTaskCategory\u003e asObservableList() {"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"                || (other instanceof UniqueTaskCategoryList"},{"lineNumber":115,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueTaskCategoryList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":"    public boolean equalsOrderInsensitive(UniqueTaskCategoryList other) {"},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":"        return internalList.hashCode();"},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":134,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"CYX28"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":136,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"CYX28"},"content":"    public static class DuplicateTaskCategoryException extends DuplicateDataException {"},{"lineNumber":138,"author":{"gitID":"CYX28"},"content":"        protected DuplicateTaskCategoryException() {"},{"lineNumber":139,"author":{"gitID":"CYX28"},"content":"            super(\"Operation would result in duplicate taskCategories\");"},{"lineNumber":140,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":143,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":130,"-":13}},{"path":"src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":5,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":" * Signals that the operation will result in duplicate Task objects."},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"public class DuplicateTaskException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"    public DuplicateTaskException() {"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"        super(\"Operation would result in duplicate tasks\");"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":11,"-":1}},{"path":"src/main/java/seedu/address/model/EventBook.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":" * Wraps all data at the event-book level"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"public class EventBook implements ReadOnlyEventBook {"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    private final UniqueEventList events;"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    /*"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"     *   among constructors."},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    {"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        events \u003d new UniqueEventList();"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    public EventBook() {"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"     * Creates an EventBook using the Events in the {@code toBeCopied}"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    public EventBook(ReadOnlyEventBook toBeCopied) {"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        resetData(toBeCopied);"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    //// list overwrite operations"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"    public void setEvents(List\u003c? extends ReadOnlyEvent\u003e events) throws CommandException {"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        this.events.setEvents(events);"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"     * Resets the existing data of this {@code EventBook} with {@code newData}."},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"    public void resetData(ReadOnlyEventBook newData) {"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(newData);"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"            setEvents(newData.getEventList());"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":"        } catch (CommandException e) {"},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"            assert false : \"EventBooks should not have duplicate events\";"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"     * Adds an event to the event book."},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"     * @throws CommandException if an equivalent event already exists."},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"    public void addEvent(ReadOnlyEvent e) throws CommandException {"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"        Event newEvent \u003d new Event(e);"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"        events.add(newEvent);"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"     * Replaces the given event {@code target} in the list with {@code editedReadOnlyEvent}."},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"    public void updateEvent(ReadOnlyEvent target, ReadOnlyEvent editedReadOnlyEvent)"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"            throws CommandException {"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(editedReadOnlyEvent);"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"        Event editedPerson \u003d new Event(editedReadOnlyEvent);"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"        events.setEvent(target, editedPerson);"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"     * Removes {@code key} from this {@code EventBook}."},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"    public boolean removeEvent(ReadOnlyEvent key) throws CommandException {"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"        if (events.remove(key)) {"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"            return true;"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"        } else {"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(\"\");"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"     * Order list of all events in the event Book based on the parameter."},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"    public void orderList(String parameter) throws CommandException {"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"        events.orderBy(parameter);"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"    //// util methods"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":"        return Objects.hash(events);"},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"                || (other instanceof EventBook // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 this.events.equals(((EventBook) other).events));"},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":120,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"x3tsunayh"},"content":"    public String toString() {"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"        return events.asObservableList().size() + \" events\";"},{"lineNumber":123,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":125,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e titleProperty() {"},{"lineNumber":127,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":128,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":"    public String getTitle() {"},{"lineNumber":132,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":133,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":135,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e descriptionProperty() {"},{"lineNumber":137,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":138,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":140,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"x3tsunayh"},"content":"    public String getDescription() {"},{"lineNumber":142,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":143,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":145,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e locationProperty() {"},{"lineNumber":147,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":148,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":150,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"x3tsunayh"},"content":"    public String getLocation() {"},{"lineNumber":152,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":153,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":155,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e datetimeProperty() {"},{"lineNumber":157,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":158,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":160,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"x3tsunayh"},"content":"    public String getDatetime() {"},{"lineNumber":162,"author":{"gitID":"x3tsunayh"},"content":"        return null;"},{"lineNumber":163,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":165,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"x3tsunayh"},"content":"    public ObservableList\u003cReadOnlyEvent\u003e getEventList() {"},{"lineNumber":167,"author":{"gitID":"x3tsunayh"},"content":"        return events.asObservableList();"},{"lineNumber":168,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":161,"-":8}},{"path":"src/main/java/seedu/address/model/task/TaskPriority.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":" * Represents a Task\u0027s priority in the address book."},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTaskPriority(String)}"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"public class TaskPriority {"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_PRIORITY_HIGH \u003d \"high\";"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_PRIORITY_MEDIUM \u003d \"medium\";"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_PRIORITY_LOW \u003d \"low\";"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    public static final List\u003cString\u003e PRIORITY_ORDER \u003d"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"            Arrays.asList(TASK_PRIORITY_HIGH, TASK_PRIORITY_MEDIUM, TASK_PRIORITY_LOW);"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_TASK_PRIORITY_CONSTRAINTS \u003d"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"            \"Task priority can only be either high, medium or low\";"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"     * The first character of the task priority must not be a whitespace,"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"     * otherwise \" \" ( a blank string) becomes a valid input."},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"     * The valid values for task priority can start with or without capital letter."},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_PRIORITY_VALIDATION_REGEX \u003d \"^(high|medium|low)$\";"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    public final String value;"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"     * Constructs a {@code TaskPriority}"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"     * @param taskPriority A valid task priority."},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    public TaskPriority(String taskPriority) {"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskPriority);"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"        checkArgument(isValidTaskPriority(taskPriority), MESSAGE_TASK_PRIORITY_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        this.value \u003d taskPriority;"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"     * Returns true if a given string is a valid task priority."},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"    public static boolean isValidTaskPriority(String test) {"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        return test.matches(TASK_PRIORITY_VALIDATION_REGEX);"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"        return value;"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskPriority"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.value.equals(((TaskPriority) other).value));"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"        return value.hashCode();"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":66,"-":4}},{"path":"src/main/java/seedu/address/model/task/TaskDescription.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":" * Represents a Task\u0027s description in the address book."},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTaskDescription(String)}"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskDescription {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_TASK_DESCRIPTION_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"            \"Task descriptions can contain any character, but it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"     * The first character of the task description must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"     * otherwise \" \" ( a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_DESCRIPTION_VALIDATION_REGEX \u003d \"^\\\\S+[\\\\s\\\\S ]*\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"     * Constructs a {@code TaskDescription}."},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"     * @param taskDescription A valid task description."},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    public TaskDescription(String taskDescription) {"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskDescription);"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        checkArgument(isValidTaskDescription(taskDescription), MESSAGE_TASK_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        this.value \u003d taskDescription;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"     * Returns true if a given string is a valid task description."},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    public static boolean isValidTaskDescription(String test) {"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        return test.matches(TASK_DESCRIPTION_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskDescription"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.value.equals(((TaskDescription) other).value));"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":55,"-":4}},{"path":"src/main/java/seedu/address/model/task/TaskNameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":" * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"public class TaskNameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    public TaskNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    public boolean test(Task task) {"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getTaskName().value, keyword));"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskNameContainsKeywordsPredicate"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.keywords.equals(((TaskNameContainsKeywordsPredicate) other).keywords));"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":27,"-":6}},{"path":"src/main/java/seedu/address/model/task/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.TaskCategory;"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.category.UniqueTaskCategoryList;"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":" * Represents a Task in the address book."},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"public class Task {"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"    private final TaskName taskName;"},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"    private final TaskPriority taskPriority;"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    private final TaskDescription taskDescription;"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":"    private final TaskDueDate taskDueDate;"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    private final TaskStatus taskStatus;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    private final UniqueTaskCategoryList taskCategories;"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    public Task(TaskName taskName, TaskPriority taskPriority, TaskDescription taskDescription, TaskDueDate taskDueDate,"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"                TaskStatus taskStatus, Set\u003cTaskCategory\u003e taskCategories) {"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        requireAllNonNull(taskName, taskPriority, taskDescription, taskDueDate, taskStatus, taskCategories);"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        this.taskPriority \u003d taskPriority;"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"        this.taskDueDate \u003d taskDueDate;"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"        this.taskStatus \u003d taskStatus;"},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"        // protect internal categories from changes in the arg list"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"        this.taskCategories \u003d new UniqueTaskCategoryList(taskCategories);"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"    public TaskName getTaskName() {"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"        return taskName;"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    public TaskPriority getTaskPriority() {"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"        return taskPriority;"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"    public TaskDescription getTaskDescription() {"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"        return taskDescription;"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"    public TaskDueDate getTaskDueDate() {"},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"        return taskDueDate;"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    public TaskStatus getTaskStatus() {"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":"        return taskStatus;"},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"     * Returns an immutable category set, which throws {@code UnsupportedOperationException}"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":"     * if modification is attempted."},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"    public Set\u003cTaskCategory\u003e getTaskCategories() {"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        return Collections.unmodifiableSet(taskCategories.toSet());"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"            return true;"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"            return false;"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"        Task otherTask \u003d (Task) other;"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"        return otherTask.getTaskName().equals(this.getTaskName())"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 otherTask.getTaskPriority().equals(this.getTaskPriority())"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 otherTask.getTaskDescription().equals(this.getTaskDescription())"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 otherTask.getTaskDueDate().equals(this.getTaskDueDate())"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 otherTask.getTaskStatus().equals(this.getTaskStatus());"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        return Objects.hash(taskName, taskPriority, taskDescription, taskDueDate, taskStatus, taskCategories);"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"    public String toString() {"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"        builder.append(getTaskName())"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"                .append(\" Priority: \")"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"                .append(getTaskPriority())"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":"                .append(\" Description: \")"},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"                .append(getTaskDescription())"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":"                .append(\" Due Date: \")"},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"                .append(getTaskDueDate())"},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"                .append(\" Status: \")"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"                .append(getTaskStatus())"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"                .append(\" Categories: \");"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        getTaskCategories().forEach(builder::append);"},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"        return builder.toString();"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":102,"-":7}},{"path":"src/main/java/seedu/address/model/task/TaskName.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":7,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"CYX28"},"content":" * Represents a Task\u0027s name in the address book."},{"lineNumber":9,"author":{"gitID":"CYX28"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTaskName(String)}"},{"lineNumber":10,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":11,"author":{"gitID":"CYX28"},"content":"public class TaskName {"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"    public static final String MESSAGE_TASK_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"            \"Task names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"     * The first character of the task name must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":"    public static final String TASK_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"     * Constructs a {@code TaskName}."},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"     * @param taskName A valid task name."},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    public TaskName(String taskName) {"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"        requireNonNull(taskName);"},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"        checkArgument(isValidTaskName(taskName), MESSAGE_TASK_NAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"        this.value \u003d taskName;"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":"     * Returns true if a given string is a valid task name."},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"    public static boolean isValidTaskName(String test) {"},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"        return test.matches(TASK_NAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this"},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"                || (other instanceof TaskName"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.value.equals(((TaskName) other).value));"},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":55,"-":4}},{"path":"src/main/java/seedu/address/model/event/ReadOnlyEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":" * Interface for Events related to Calendar View feature."},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"public interface ReadOnlyEvent {"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"    ObjectProperty\u003cString\u003e titleProperty();"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"    String getTitle();"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    ObjectProperty\u003cString\u003e descriptionProperty();"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    String getDescription();"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    ObjectProperty\u003cString\u003e locationProperty();"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    String getLocation();"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    ObjectProperty\u003cDatetime\u003e datetimeProperty();"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    Datetime getDatetime();"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"     * Checks if @param other is of the same state as this."},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"    default boolean isSameStateAs(ReadOnlyEvent other) {"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"                || (other !\u003d null"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 other.getTitle().equals(this.getTitle())"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 other.getDescription().equals(this.getDescription())"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 other.getLocation().equals(this.getLocation())"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 other.getDatetime().equals(this.getDatetime()));"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    default String getAsText() {"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        builder.append(getTitle())"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"                .append(\" Description: \")"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"                .append(getDescription())"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"                .append(\" Location: \")"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"                .append(getLocation())"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"                .append(\" Datetime: \")"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"                .append(getDatetime());"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"        return builder.toString();"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":53}},{"path":"src/main/java/seedu/address/model/event/ReadOnlyEventBook.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"x3tsunayh"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":" * A read-only immutable interface for a event in the eventbook."},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"public interface ReadOnlyEventBook {"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    ObjectProperty\u003cString\u003e titleProperty();"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    String getTitle();"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    ObjectProperty\u003cString\u003e descriptionProperty();"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    String getDescription();"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    ObjectProperty\u003cString\u003e locationProperty();"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    String getLocation();"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    ObjectProperty\u003cString\u003e datetimeProperty();"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    String getDatetime();"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    default boolean isSameStateAs(ReadOnlyEventBook other) {"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 other.getTitle().equals(this.getTitle()) // state checks here onwards"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 other.getDescription().equals(this.getDescription())"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 other.getLocation().equals(this.getLocation())"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 other.getDatetime().equals(this.getDatetime()));"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    default String getAsText() {"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        builder.append(getTitle())"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"                .append(\" Description: \")"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"                .append(getDescription())"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"                .append(\" Location: \")"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"                .append(getLocation())"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"                .append(\" Datetime: \")"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"                .append(getDatetime());"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        return builder.toString();"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"    List\u003c? extends ReadOnlyEvent\u003e getEventList();"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":59}},{"path":"src/main/java/seedu/address/model/event/Datetime.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":" * Represents an Event\u0027s Datetime in the event book."},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":" * Ensures valid Datetime input and aids future implementations involving NLP, etc."},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"public class Datetime {"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    public static final String MESSAGE_DATETIME_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":"            \"Event datetime should be in the format: dd-mm-yyyy hhmm\";"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"    private static final int VALID_DATETIME_LENGTH \u003d 15;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"     * Validates given datetime."},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"     * @throws IllegalValueException if given datetime string is invalid."},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    public Datetime(String datetime) throws IllegalValueException {"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(datetime);"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"        String trimmedDatetime \u003d datetime.trim();"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"        if (!isValidDatetime(trimmedDatetime)) {"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"            throw new IllegalValueException(MESSAGE_DATETIME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"        this.value \u003d trimmedDatetime;"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"     * Returns true if a given string is a valid event datetime."},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"    public static boolean isValidDatetime(String test) {"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"        Boolean validTime \u003d false;"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"        Boolean validDate \u003d false;"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        if (test.length() !\u003d VALID_DATETIME_LENGTH) {"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"            return false;"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"            int day \u003d Integer.parseInt(test.substring(0, 2));"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"            int month \u003d Integer.parseInt(test.substring(3, 5));"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"            int year \u003d Integer.parseInt(test.substring(6, 10));"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"            int hour \u003d Integer.parseInt(test.substring(11, 13));"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"            int min \u003d Integer.parseInt(test.substring(13, 15));"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"            //Time Validation"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":"            if (0 \u003c\u003d hour \u0026\u0026 hour \u003c\u003d 23) {"},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"                if (0 \u003c\u003d min \u0026\u0026 min \u003c\u003d 59) {"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"                    validTime \u003d true;"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"                }"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"            //Date Validation"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"            if (day \u003e\u003d 1) {"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"                // For months with 30 days."},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"                if ((month \u003d\u003d 4"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"                        || month \u003d\u003d 6"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"                        || month \u003d\u003d 9"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"                        || month \u003d\u003d 11)"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"                        \u0026\u0026 day \u003c\u003d 30) {"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"                    validDate \u003d true;"},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"                }"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"                // For months with 31 days."},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"                if ((month \u003d\u003d 1"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"                        || month \u003d\u003d 3"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"                        || month \u003d\u003d 5"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"                        || month \u003d\u003d 7"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"                        || month \u003d\u003d 8"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"                        || month \u003d\u003d 10"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"                        || month \u003d\u003d 12)"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"                        \u0026\u0026 day \u003c\u003d 31) {"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"                    validDate \u003d true;"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"                }"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"                // For February."},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"                if (month \u003d\u003d 2) {"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"                    if (day \u003c\u003d 28) {"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"                        validDate \u003d true;"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"                    } else if (day \u003d\u003d 29) {"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"                        if ((year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) || year % 400 \u003d\u003d 0) {"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"                            validDate \u003d true;"},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"                        }"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"                    }"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"                }"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"            return false;"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"        return validTime \u0026\u0026 validDate;"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"    public int hashCode() {"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"        return value.hashCode();"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"                || (other instanceof Datetime"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 this.value.equals(((Datetime) other).value));"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"    public String toString() {"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"        return value;"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":114,"-":2}},{"path":"src/main/java/seedu/address/model/event/TitleContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":" * Tests that a {@code ReadOnlyEvent}\u0027s {@code Title} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"public class TitleContainsKeywordsPredicate implements Predicate\u003cReadOnlyEvent\u003e {"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"    private static String predicateType \u003d \"et\";"},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    public static void setPredicateType(String predicateType) {"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"        TitleContainsKeywordsPredicate.predicateType \u003d predicateType;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"    public boolean test(ReadOnlyEvent event) {"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"        if (predicateType.equals(\"et\")) {"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"            return keywords.stream()"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getTitle(), keyword));"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        if (predicateType.equals(\"edt\")) {"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"            return keywords.stream()"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getDatetime().value, keyword));"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"        if (predicateType.equals(\"ed\")) {"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"            return keywords.stream()"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getDescription(), keyword));"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"        return false;"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"                || (other instanceof TitleContainsKeywordsPredicate"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 this.keywords.equals(((TitleContainsKeywordsPredicate) other).keywords));"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":45,"-":6}},{"path":"src/main/java/seedu/address/model/event/Event.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":9,"author":{"gitID":"x3tsunayh"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":10,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":11,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":" * Represents an Event in the event book."},{"lineNumber":15,"author":{"gitID":"x3tsunayh"},"content":" * Makes sure all fields are filled and not null."},{"lineNumber":16,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":"public class Event implements ReadOnlyEvent {"},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":"    private ObjectProperty\u003cString\u003e title;"},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"    private ObjectProperty\u003cString\u003e description;"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":"    private ObjectProperty\u003cString\u003e location;"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    private ObjectProperty\u003cDatetime\u003e datetime;"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"     * Every field must be present and not null."},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    public Event(String title, String description, String location, Datetime datetime) {"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":"        requireAllNonNull(title, description, location, datetime);"},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"        this.title \u003d new SimpleObjectProperty\u003c\u003e(title);"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":"        this.description \u003d new SimpleObjectProperty\u003c\u003e(description);"},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"        this.location \u003d new SimpleObjectProperty\u003c\u003e(location);"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"        this.datetime \u003d new SimpleObjectProperty\u003c\u003e(datetime);"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"     * Creates a copy of the given ReadOnlyEvent."},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"     * This prevents the original version from being changed unknowingly."},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    public Event(ReadOnlyEvent source) {"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"        this(source.getTitle(), source.getDescription(), source.getLocation(), source.getDatetime());"},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e titleProperty() {"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"        return title;"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":"    public String getTitle() {"},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"        return title.get();"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"    public void setTitle(String title) {"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"        this.title.set(requireNonNull(title));"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e descriptionProperty() {"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"        return description;"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"    public String getDescription() {"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"        return description.get();"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"    public void setDescription(String description) {"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":"        this.description.set(requireNonNull(description));"},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cString\u003e locationProperty() {"},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"        return location;"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"    public String getLocation() {"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"        return location.get();"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"    public void setLocation(String location) {"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":"        this.location.set(requireNonNull(location));"},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":"    public ObjectProperty\u003cDatetime\u003e datetimeProperty() {"},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"        return datetime;"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"    public Datetime getDatetime() {"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"        return datetime.get();"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"    public void setDatetime(Datetime datetime) {"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"        this.datetime.set(requireNonNull(datetime));"},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"                || (other instanceof ReadOnlyEvent"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyEvent) other));"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"        return Objects.hash(title, description, location, datetime);"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":"    public String toString() {"},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"        return getAsText();"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":111,"-":4}},{"path":"src/main/java/seedu/address/model/task/UniqueTaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"CYX28"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"CYX28"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":15,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":16,"author":{"gitID":"CYX28"},"content":"//@@author CYX28"},{"lineNumber":17,"author":{"gitID":"CYX28"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"CYX28"},"content":" * A list of tasks that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"CYX28"},"content":" *"},{"lineNumber":20,"author":{"gitID":"CYX28"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"CYX28"},"content":" *"},{"lineNumber":22,"author":{"gitID":"CYX28"},"content":" * @see Task#equals(Object)"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"CYX28"},"content":" */"},{"lineNumber":25,"author":{"gitID":"CYX28"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":26,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":27,"author":{"gitID":"CYX28"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":29,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"CYX28"},"content":"     * Returns true if the list contains an equivalent task as the given argument."},{"lineNumber":31,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"CYX28"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":33,"author":{"gitID":"CYX28"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"CYX28"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":37,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"CYX28"},"content":"     * Adds a task to the list."},{"lineNumber":39,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"CYX28"},"content":"     * @throws DuplicateTaskException if the task to add is a duplicate of an existing task in the list."},{"lineNumber":41,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"CYX28"},"content":"    public void add(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":43,"author":{"gitID":"CYX28"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"CYX28"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"CYX28"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":46,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"CYX28"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":50,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"CYX28"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":52,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"CYX28"},"content":"     * @throws DuplicateTaskException if the replacement is equivalent to another existing task in the list."},{"lineNumber":54,"author":{"gitID":"CYX28"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"CYX28"},"content":"    public void setTask(Task target, Task editedTask) throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":57,"author":{"gitID":"CYX28"},"content":"        requireNonNull(editedTask);"},{"lineNumber":58,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"        if (!target.equals(editedTask) \u0026\u0026 internalList.contains(editedTask)) {"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"        internalList.set(index, editedTask);"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"     * Removes the equivalent task from the list."},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":"     * @throws TaskNotFoundException if no such task could be found in the list."},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"    public boolean remove(Task toRemove) throws TaskNotFoundException {"},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"        if (!taskFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"        return taskFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":"     * Sorts the task list by priority from high to low importance"},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"    public void sortByPriority() {"},{"lineNumber":89,"author":{"gitID":"CYX28"},"content":"        // Sorts based on high to low priority"},{"lineNumber":90,"author":{"gitID":"CYX28"},"content":"        internalList.sort(Comparator.comparing(Task::getTaskPriority, (t1, t2) -\u003e {"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"            return TaskPriority.PRIORITY_ORDER.indexOf(t1.value.toLowerCase())"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":"                    - TaskPriority.PRIORITY_ORDER.indexOf(t2.value.toLowerCase());"},{"lineNumber":93,"author":{"gitID":"CYX28"},"content":"        }));"},{"lineNumber":94,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":96,"author":{"gitID":"CYX28"},"content":"    public void setTasks(UniqueTaskList replacement) {"},{"lineNumber":97,"author":{"gitID":"CYX28"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":98,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":100,"author":{"gitID":"CYX28"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":101,"author":{"gitID":"CYX28"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":102,"author":{"gitID":"CYX28"},"content":"        final UniqueTaskList replacement \u003d new UniqueTaskList();"},{"lineNumber":103,"author":{"gitID":"CYX28"},"content":"        for (final Task task : tasks) {"},{"lineNumber":104,"author":{"gitID":"CYX28"},"content":"            replacement.add(task);"},{"lineNumber":105,"author":{"gitID":"CYX28"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"CYX28"},"content":"        setTasks(replacement);"},{"lineNumber":107,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":109,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"CYX28"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":111,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"CYX28"},"content":"    public ObservableList\u003cTask\u003e asObservableList() {"},{"lineNumber":113,"author":{"gitID":"CYX28"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":114,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":116,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"CYX28"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":118,"author":{"gitID":"CYX28"},"content":"        return internalList.iterator();"},{"lineNumber":119,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":121,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"CYX28"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitID":"CYX28"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":124,"author":{"gitID":"CYX28"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls"},{"lineNumber":125,"author":{"gitID":"CYX28"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueTaskList) other).internalList));"},{"lineNumber":126,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":128,"author":{"gitID":"CYX28"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"CYX28"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitID":"CYX28"},"content":"        return internalList.hashCode();"},{"lineNumber":131,"author":{"gitID":"CYX28"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":133,"author":{"gitID":"CYX28"},"content":"}"}],"authorContributionMap":{"CYX28":123,"-":10}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEvent;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import seedu.address.model.event.ReadOnlyEventBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":13,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":14,"author":{"gitID":"CYX28"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":"    Predicate\u003cReadOnlyEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"},{"lineNumber":23,"author":{"gitID":"CYX28"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    /** Returns the Eventbook */"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"    ReadOnlyEventBook getEventBook();"},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"CYX28"},"content":"     * Sorts the person list alphabetically by name"},{"lineNumber":61,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"CYX28"},"content":"    void sortPersons();"},{"lineNumber":63,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":64,"author":{"gitID":"CYX28"},"content":"    /** Deletes the given task. */"},{"lineNumber":65,"author":{"gitID":"CYX28"},"content":"    void deleteTask(Task target) throws TaskNotFoundException;"},{"lineNumber":66,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":67,"author":{"gitID":"CYX28"},"content":"    /** Adds the given task. */"},{"lineNumber":68,"author":{"gitID":"CYX28"},"content":"    void addTask(Task task) throws DuplicateTaskException;"},{"lineNumber":69,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":70,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"CYX28"},"content":"     * Sorts the task list by priority from high to low importance"},{"lineNumber":72,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"CYX28"},"content":"    void sortTasksByPriority();"},{"lineNumber":74,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":75,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"CYX28"},"content":"     * Replaces the given task {@code target} with {@code editedTask}."},{"lineNumber":77,"author":{"gitID":"CYX28"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"CYX28"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to"},{"lineNumber":79,"author":{"gitID":"CYX28"},"content":"     * another existing task in the list."},{"lineNumber":80,"author":{"gitID":"CYX28"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":81,"author":{"gitID":"CYX28"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"CYX28"},"content":"    void updateTask(Task target, Task editedTask) throws DuplicateTaskException, TaskNotFoundException;"},{"lineNumber":83,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":84,"author":{"gitID":"CYX28"},"content":"    /** Returns an unmodifiable view of the filtered task list */"},{"lineNumber":85,"author":{"gitID":"CYX28"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":86,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":87,"author":{"gitID":"CYX28"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"CYX28"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"CYX28"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"},{"lineNumber":92,"author":{"gitID":"CYX28"},"content":""},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"    void addEvent(ReadOnlyEvent toAdd) throws CommandException;"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"    void deleteEvent(ReadOnlyEvent eventToDelete) throws CommandException;"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"    ObservableList\u003cReadOnlyEvent\u003e getFilteredEventList();"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"     * Updates the filter of the filtered event list to filter by the given {@code predicate}."},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"    void updateFilteredEventList(Predicate\u003cReadOnlyEvent\u003e predicate);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"CYX28":36,"x3tsunayh":16,"-":53}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","lines":[{"lineNumber":1,"author":{"gitID":"x3tsunayh"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":5,"author":{"gitID":"x3tsunayh"},"content":"import java.text.ParseException;"},{"lineNumber":6,"author":{"gitID":"x3tsunayh"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitID":"x3tsunayh"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"x3tsunayh"},"content":"import java.util.Date;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"x3tsunayh"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":13,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":14,"author":{"gitID":"x3tsunayh"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":18,"author":{"gitID":"x3tsunayh"},"content":"//@@author x3tsunayh"},{"lineNumber":19,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":20,"author":{"gitID":"x3tsunayh"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"x3tsunayh"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":22,"author":{"gitID":"x3tsunayh"},"content":" *"},{"lineNumber":23,"author":{"gitID":"x3tsunayh"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitID":"x3tsunayh"},"content":" */"},{"lineNumber":25,"author":{"gitID":"x3tsunayh"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {"},{"lineNumber":26,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":27,"author":{"gitID":"x3tsunayh"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":29,"author":{"gitID":"x3tsunayh"},"content":"    private final ObservableList\u003cReadOnlyEvent\u003e mappedList \u003d EasyBind.map(internalList, (event) -\u003e event);"},{"lineNumber":30,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":31,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"x3tsunayh"},"content":"     * Returns true if the list contains an equivalent event as the given argument."},{"lineNumber":33,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"x3tsunayh"},"content":"    public boolean contains(ReadOnlyEvent toCheck) {"},{"lineNumber":35,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitID":"x3tsunayh"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":37,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":39,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"x3tsunayh"},"content":"     * Adds an event to the list."},{"lineNumber":41,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"x3tsunayh"},"content":"    public void add(ReadOnlyEvent toAdd) throws CommandException {"},{"lineNumber":43,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"x3tsunayh"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(\"\");"},{"lineNumber":46,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"x3tsunayh"},"content":"        internalList.add(new Event(toAdd));"},{"lineNumber":48,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":50,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"x3tsunayh"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}."},{"lineNumber":52,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"x3tsunayh"},"content":"    public void setEvent(ReadOnlyEvent target, ReadOnlyEvent editedEvent)"},{"lineNumber":54,"author":{"gitID":"x3tsunayh"},"content":"            throws CommandException {"},{"lineNumber":55,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(editedEvent);"},{"lineNumber":56,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":57,"author":{"gitID":"x3tsunayh"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":58,"author":{"gitID":"x3tsunayh"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":59,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(\"\");"},{"lineNumber":60,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":62,"author":{"gitID":"x3tsunayh"},"content":"        if (!target.equals(editedEvent) \u0026\u0026 internalList.contains(editedEvent)) {"},{"lineNumber":63,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(\"\");"},{"lineNumber":64,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":66,"author":{"gitID":"x3tsunayh"},"content":"        internalList.set(index, new Event(editedEvent));"},{"lineNumber":67,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":69,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"x3tsunayh"},"content":"     * Removes the equivalent event from the list."},{"lineNumber":71,"author":{"gitID":"x3tsunayh"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"x3tsunayh"},"content":"     * @throws CommandException if no such event could be found in the list."},{"lineNumber":73,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"x3tsunayh"},"content":"    public boolean remove(ReadOnlyEvent toRemove) throws CommandException {"},{"lineNumber":75,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(toRemove);"},{"lineNumber":76,"author":{"gitID":"x3tsunayh"},"content":"        final boolean eventFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":77,"author":{"gitID":"x3tsunayh"},"content":"        if (!eventFoundAndDeleted) {"},{"lineNumber":78,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(\"\");"},{"lineNumber":79,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"x3tsunayh"},"content":"        return eventFoundAndDeleted;"},{"lineNumber":81,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":83,"author":{"gitID":"x3tsunayh"},"content":"    public void setEvents(UniqueEventList replacement) {"},{"lineNumber":84,"author":{"gitID":"x3tsunayh"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":87,"author":{"gitID":"x3tsunayh"},"content":"    public void setEvents(List\u003c? extends ReadOnlyEvent\u003e events) throws CommandException {"},{"lineNumber":88,"author":{"gitID":"x3tsunayh"},"content":"        final UniqueEventList replacement \u003d new UniqueEventList();"},{"lineNumber":89,"author":{"gitID":"x3tsunayh"},"content":"        for (final ReadOnlyEvent event : events) {"},{"lineNumber":90,"author":{"gitID":"x3tsunayh"},"content":"            replacement.add(new Event(event));"},{"lineNumber":91,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"x3tsunayh"},"content":"        setEvents(replacement);"},{"lineNumber":93,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":95,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"x3tsunayh"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":97,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"x3tsunayh"},"content":"    public ObservableList\u003cReadOnlyEvent\u003e asObservableList() {"},{"lineNumber":99,"author":{"gitID":"x3tsunayh"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":100,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":102,"author":{"gitID":"x3tsunayh"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"x3tsunayh"},"content":"     * Orders the list."},{"lineNumber":104,"author":{"gitID":"x3tsunayh"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"x3tsunayh"},"content":"    public void orderBy(String parameter) throws CommandException {"},{"lineNumber":106,"author":{"gitID":"x3tsunayh"},"content":"        requireNonNull(parameter);"},{"lineNumber":107,"author":{"gitID":"x3tsunayh"},"content":"        Comparator\u003cEvent\u003e orderByTitle \u003d (Event a, Event b) -\u003e a.getTitle().toString()"},{"lineNumber":108,"author":{"gitID":"x3tsunayh"},"content":"                .compareToIgnoreCase(b.getTitle().toString());"},{"lineNumber":109,"author":{"gitID":"x3tsunayh"},"content":"        Comparator\u003cEvent\u003e orderByLocation \u003d (Event a, Event b) -\u003e a.getLocation().toString()"},{"lineNumber":110,"author":{"gitID":"x3tsunayh"},"content":"                .compareToIgnoreCase(b.getLocation().toString());"},{"lineNumber":111,"author":{"gitID":"x3tsunayh"},"content":"        Comparator\u003cEvent\u003e orderByDatetime \u003d (Event a, Event b) -\u003e {"},{"lineNumber":112,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":113,"author":{"gitID":"x3tsunayh"},"content":"            SimpleDateFormat formatDate \u003d new SimpleDateFormat(\"dd-MM-yyyy hhmm\");"},{"lineNumber":114,"author":{"gitID":"x3tsunayh"},"content":"            try {"},{"lineNumber":115,"author":{"gitID":"x3tsunayh"},"content":"                Date datetime1 \u003d formatDate.parse(a.getDatetime().value);"},{"lineNumber":116,"author":{"gitID":"x3tsunayh"},"content":"                Date datetime2 \u003d formatDate.parse(b.getDatetime().value);"},{"lineNumber":117,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":118,"author":{"gitID":"x3tsunayh"},"content":"                return datetime2.compareTo(datetime1);"},{"lineNumber":119,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":120,"author":{"gitID":"x3tsunayh"},"content":"            } catch (ParseException e) {"},{"lineNumber":121,"author":{"gitID":"x3tsunayh"},"content":"                e.printStackTrace();"},{"lineNumber":122,"author":{"gitID":"x3tsunayh"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"x3tsunayh"},"content":"            return 0;"},{"lineNumber":124,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":125,"author":{"gitID":"x3tsunayh"},"content":"        };"},{"lineNumber":126,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":127,"author":{"gitID":"x3tsunayh"},"content":"        switch (parameter) {"},{"lineNumber":128,"author":{"gitID":"x3tsunayh"},"content":"        case \"TITLE\":"},{"lineNumber":129,"author":{"gitID":"x3tsunayh"},"content":"            internalList.sort(orderByTitle);"},{"lineNumber":130,"author":{"gitID":"x3tsunayh"},"content":"            break;"},{"lineNumber":131,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":132,"author":{"gitID":"x3tsunayh"},"content":"        case \"LOCATION\":"},{"lineNumber":133,"author":{"gitID":"x3tsunayh"},"content":"            internalList.sort(orderByLocation);"},{"lineNumber":134,"author":{"gitID":"x3tsunayh"},"content":"            break;"},{"lineNumber":135,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":136,"author":{"gitID":"x3tsunayh"},"content":"        case \"DATETIME\":"},{"lineNumber":137,"author":{"gitID":"x3tsunayh"},"content":"            internalList.sort(orderByDatetime);"},{"lineNumber":138,"author":{"gitID":"x3tsunayh"},"content":"            break;"},{"lineNumber":139,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":140,"author":{"gitID":"x3tsunayh"},"content":"        default:"},{"lineNumber":141,"author":{"gitID":"x3tsunayh"},"content":"            throw new CommandException(\"\");"},{"lineNumber":142,"author":{"gitID":"x3tsunayh"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":144,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":145,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":147,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"x3tsunayh"},"content":"    public Iterator\u003cEvent\u003e iterator() {"},{"lineNumber":149,"author":{"gitID":"x3tsunayh"},"content":"        return internalList.iterator();"},{"lineNumber":150,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":152,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"x3tsunayh"},"content":"    public int hashCode() {"},{"lineNumber":154,"author":{"gitID":"x3tsunayh"},"content":"        return internalList.hashCode();"},{"lineNumber":155,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"x3tsunayh"},"content":""},{"lineNumber":157,"author":{"gitID":"x3tsunayh"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"x3tsunayh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":159,"author":{"gitID":"x3tsunayh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":160,"author":{"gitID":"x3tsunayh"},"content":"                || (other instanceof UniqueEventList"},{"lineNumber":161,"author":{"gitID":"x3tsunayh"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueEventList) other).internalList));"},{"lineNumber":162,"author":{"gitID":"x3tsunayh"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"x3tsunayh"},"content":"}"}],"authorContributionMap":{"x3tsunayh":156,"-":7}},{"path":"src/main/java/seedu/address/model/tag/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.base.Joiner;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jill858"},"content":"//@@author jill858"},{"lineNumber":12,"author":{"gitID":"jill858"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jill858"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":14,"author":{"gitID":"jill858"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jill858"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":16,"author":{"gitID":"jill858"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":17,"author":{"gitID":"jill858"},"content":""},{"lineNumber":18,"author":{"gitID":"jill858"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":19,"author":{"gitID":"jill858"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":20,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"jill858"},"content":""},{"lineNumber":22,"author":{"gitID":"jill858"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"jill858"},"content":"    public boolean test(Person person) {"},{"lineNumber":24,"author":{"gitID":"jill858"},"content":"        String stringifyTags \u003d Joiner.on(\" \").join(person.getTags());"},{"lineNumber":25,"author":{"gitID":"jill858"},"content":"        return keywords.stream()"},{"lineNumber":26,"author":{"gitID":"jill858"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(stringifyTags, keyword));"},{"lineNumber":27,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jill858"},"content":""},{"lineNumber":29,"author":{"gitID":"jill858"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"jill858"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"jill858"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"jill858"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"jill858"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":34,"author":{"gitID":"jill858"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jill858"},"content":""},{"lineNumber":36,"author":{"gitID":"jill858"},"content":"}"}],"authorContributionMap":{"jill858":26,"-":10}}]
