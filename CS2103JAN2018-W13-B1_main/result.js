var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"ContactSails was developed by team W13-B1. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Aadyaa Maddi"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::aadyaa.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"{empty}[https://github.com/CS2103JAN2018-W13-B1[homepage]] [https://github.com/amad-person[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":16,"author":{"gitID":"-"},"content":"Responsibilities: Logic, Documentation, Deliverables and Deadlines"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d Alicia Ho Sor Sian"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"image::suxianalicia.JPG[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"{empty}[https://github.com/SuxianAlicia[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"Responsibilities: In charge of Model Component, Code Quality"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"AJZ1995"},"content":"\u003d\u003d\u003d Ang Jing Zhe"},{"lineNumber":30,"author":{"gitID":"AJZ1995"},"content":"image::AJZ1995.JPG[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"AJZ1995"},"content":"{empty}[https://github.com/AJZ1995[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Kevin Yeong"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image::kevinyeong.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"{empty}[https://github.com/A0143487X[github]] [\u003c\u003ckevinyeong#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"Responsibilities: -"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"SuxianAlicia":4,"AJZ1995":3,"-":38}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d ContactSails"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W13-B1/main[image:https://travis-ci.org/CS2103JAN2018-W13-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/CS2103-W13-B1-helper/main/branch/master[image:https://ci.appveyor.com/api/projects/status/6joo4jjgehy0gy30/branch/master?svg\u003dtrue[Build Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W13-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W13-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/CS2103-W13-B1-helper/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103JAN2018-W13-B1/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/bd21fc56cd1f4c968e246a55d23ed930[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ContactSails is an address book application meant exclusively for salespersons from small businesses with customers from various social media platforms."},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"In addition to aggregating customer details from these platforms, it can also be used for keeping track of orders of your customers and sending relevant promotions to them."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":20,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"With ContactSails, you can do the following:"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"* Manage customer contacts: Add, edit and delete contacts."},{"lineNumber":27,"author":{"gitID":"-"},"content":"* Categorize customers: Group customers according to their preferences, social media platforms, or any other category you want to define."},{"lineNumber":28,"author":{"gitID":"-"},"content":"* Manage orders: Add, edit, and delete customer orders."},{"lineNumber":29,"author":{"gitID":"-"},"content":"* Send promotions: Apply differentiated marketing strategies by sending promotions to relevant customers."},{"lineNumber":30,"author":{"gitID":"-"},"content":"* Keep track of deadlines: Add tasks and reminders and view your schedules in the integrated calendar."},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Know your customer demographic: See what the top selling items and who your most frequent customers are."},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":37,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":38,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"* This project is based on AddressBook-Level4 project which was created by the https://github.com/se-edu/[SE-EDU initiative]."},{"lineNumber":43,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":44,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://github.com/dlemmermann/CalendarFX[CalendarFX]"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"SuxianAlicia":1,"-":46}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns null to force test app to load data of the file in {@code getAbDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    protected String getAbDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":2,"-":49}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d ContactSails - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W13-B1/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team W13-B1`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"ContactSails is for users who *prefer to use a desktop app for managing contacts*. More importantly, it is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ContactSails can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"To set up and start using ContactSails, do the following:"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":27,"author":{"gitID":"-"},"content":"+"},{"lineNumber":28,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":30,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Download the latest `ContactSails.jar` link:{repoURL}/releases[here]."},{"lineNumber":33,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":34,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":40,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":44,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":45,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":".  Commands also have alias words so you can execute the same commands in a quicker way."},{"lineNumber":48,"author":{"gitID":"-"},"content":".  Some example command aliases you can try:"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"* *`l`* : lists all contacts"},{"lineNumber":51,"author":{"gitID":"-"},"content":"* **`a`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":52,"author":{"gitID":"-"},"content":"* **`d`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":53,"author":{"gitID":"-"},"content":"* *`exit`* : q"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"This section describes each command in ContactSails in detail."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"* Items in square brackets are optional e.g `n/NAME [g/GROUP]` can be used as `n/John Doe g/friend` or as `n/John Doe`."},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[g/GROUP]...` `[pr/PREFERENCE]...` can be used as `{nbsp}` (i.e. 0 times), `g/friend`, `g/friend g/family` etc."},{"lineNumber":68,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":72,"author":{"gitID":"-"},"content":"ContactSails will automatically complete the command you want to enter if you press the `TAB` key. +"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"For example, typing `ad` in the command box and then pressing `TAB` will automatically fill `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]...[pr/PREFERENCE]` in the command box."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"Format: `help` +"},{"lineNumber":78,"author":{"gitID":"-"},"content":"Alias: `?`"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Adds a person to ContactSails +"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]... [pr/PREFERENCE]...` +"},{"lineNumber":84,"author":{"gitID":"-"},"content":"Alias: `a`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"A person can have any number of groups and preferences (including 0)"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 pr/notebooks` OR +"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"`a n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 pr/notebooks` +"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"* `add n/Betsy Crowe g/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 g/criminal` OR +"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"`a n/Betsy Crowe g/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 g/criminal`"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"Shows a list of all persons in ContactSails. +"},{"lineNumber":99,"author":{"gitID":"-"},"content":"Format: `list` +"},{"lineNumber":100,"author":{"gitID":"-"},"content":"Alias: `l`"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"Edits an existing person in ContactSails. +"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [g/GROUP]... [pr/PREFERENCE]...` +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"Alias: `e`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"****"},{"lineNumber":109,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":111,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"* When editing groups or preferences, the existing groups and preferences of the person will be removed i.e adding of groups and preferences is not cumulative."},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"* You can remove all the person\u0027s groups and preferences by typing `g/` and `pr/` without specifying any groups and preferences after it respectively."},{"lineNumber":114,"author":{"gitID":"-"},"content":"****"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` OR +"},{"lineNumber":119,"author":{"gitID":"-"},"content":"`e 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":120,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"* `edit 2 n/Betsy Crower g/` OR +"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"`e 2 n/Betsy Crower g/` +"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing groups."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `f KEYWORD [MORE KEYWORDS]`"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"****"},{"lineNumber":133,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":134,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":135,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":136,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":137,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":138,"author":{"gitID":"-"},"content":"****"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"* `find John` OR +"},{"lineNumber":143,"author":{"gitID":"-"},"content":"`f John` +"},{"lineNumber":144,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` OR +"},{"lineNumber":147,"author":{"gitID":"-"},"content":"`f Betsy Tim John` +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d Locating persons by groups: `groupfind` `since v1.2`"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"Finds persons whose groups matches any of the given keywords. +"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"Format: `groupfind KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `gf KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"* The search is case insensitive. e.g `Friends` will match `friends`"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"* Only the names of groups of a person is searched."},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"* Only full words will be matched e.g. `friend` will not match `friends`"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `criminal friends` will return `John Doe`, `Betsy Crowe` who have the groups `friends` and `criminal` respectively."},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"Examples:"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"* `groupfind friends` OR +"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"`gf friends` +"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"Returns `John Doe`"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"* `groupfind neighbours friends colleagues` OR +"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"`gf neighbours friends colleagues` +"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"Returns any person having groups `neighbours`, `friends`, or `colleagues`"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d Locating persons by preferences: `preffind` `since v1.2`"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"Finds persons whose preferences matches any of the given keywords. +"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"Format: `preffind KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `pf KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"* The search is case insensitive. e.g `Computers` will match `computers`"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"* Only the names of preferences of a person is searched."},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":"* Only full words will be matched e.g. `computer` will not match `computers`"},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `computers knives` will return `John Doe`, `Betsy Crowe` who have the preferences `computers` and `knives` respectively."},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"Examples:"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"* `preffind computers` OR +"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"`pf computers` +"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"Returns `John Doe`"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"* `preffind computers shoes necklaces` OR +"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"`pf computers shoes necklaces` +"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"Returns any person having preferences `computers`, `shoes`, or `necklaces`"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"Deletes the specified person from ContactSails. +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"Format: `delete INDEX` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"Alias: `d INDEX`"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"****"},{"lineNumber":203,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":204,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":205,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":206,"author":{"gitID":"-"},"content":"****"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"`delete 2` OR `d 2` +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"Deletes the 2nd person in ContactSails."},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"`delete 1`  OR `d 1` +"},{"lineNumber":216,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a group : `groupdelete` `since v1.2`"},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"Deletes the specified group from ContactSails. +"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":"Format: `groupdelete GROUP_NAME` +"},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `gd GROUP_NAME`"},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":225,"author":{"gitID":"SuxianAlicia"},"content":"* Deletes the group specified by `GROUP_NAME`."},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":"* The group name must be alphanumeric."},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":"* All persons with specified group will have their group tag removed."},{"lineNumber":228,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"Examples:"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":232,"author":{"gitID":"SuxianAlicia"},"content":"* `groupdelete friends` OR+"},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"`gd friends`+"},{"lineNumber":234,"author":{"gitID":"SuxianAlicia"},"content":"All persons in ContactSails with the group `friends` will have the group removed."},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a preference : `prefdelete` `since v1.2`"},{"lineNumber":237,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"Deletes the specified preference from ContactSails. +"},{"lineNumber":239,"author":{"gitID":"SuxianAlicia"},"content":"Format: `prefdelete PREFERENCE_NAME` +"},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `pd PREFERENCE_NAME`"},{"lineNumber":241,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":243,"author":{"gitID":"SuxianAlicia"},"content":"* Deletes the preference specified by `PREFERENCE_NAME`."},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"* The preference name must be alphanumeric."},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":"* All persons with specified preference will have their preference tag removed."},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":247,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":248,"author":{"gitID":"SuxianAlicia"},"content":"Examples:"},{"lineNumber":249,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":250,"author":{"gitID":"SuxianAlicia"},"content":"* `prefdelete computers` OR+"},{"lineNumber":251,"author":{"gitID":"SuxianAlicia"},"content":"`pd computers`+"},{"lineNumber":252,"author":{"gitID":"SuxianAlicia"},"content":"All persons in ContactSails with the preference [computers] will have the preference removed."},{"lineNumber":253,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"Format: `select INDEX` +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"Alias: `s INDEX`"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"****"},{"lineNumber":261,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":262,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":263,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":264,"author":{"gitID":"-"},"content":"****"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"`select 2` OR `s 2` +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"Selects the 2nd person in ContactSails."},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":273,"author":{"gitID":"-"},"content":"`select 1` OR `s 1` +"},{"lineNumber":274,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding an order : `orderadd` `since v1.2`"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"Adds an order to the person specified by the index number used in the last person listing. +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"Format: `orderadd INDEX i/ORDER INFORMATION pr/PRICE q/QUANTITY d/DELIVERY DATE` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"Alias: `oa`"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":283,"author":{"gitID":"-"},"content":"For now, orders are added to the list of all orders and not the person selected."},{"lineNumber":284,"author":{"gitID":"-"},"content":"We are planning to implement this aspect by `v1.5`."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"`orderadd 1 i/Chocolates pr/10.00 q/5 d/12-08-2018` OR +"},{"lineNumber":290,"author":{"gitID":"-"},"content":"`oa 1 i/Chocolates pr/10.00 q/5 d/12-08-2018` +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"Adds the \u0027Chocolates\u0027 order to the 1st person in ContactSails."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":294,"author":{"gitID":"-"},"content":"`orderadd 2 i/Books pr/20.00 q/2 d/04-11-2018` OR +"},{"lineNumber":295,"author":{"gitID":"-"},"content":"`oa 2 i/Books pr/20.00 q/2 d/04-11-2018` +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"Adds the \u0027Books\u0027 order to 2nd person in the results of the `find` command."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing an order : `orderedit` `since v1.2`"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"Edits the order specified by the index number used in the order listing. +"},{"lineNumber":301,"author":{"gitID":"-"},"content":"Format: `orderedit INDEX [i/ORDER INFORMATION] [pr/PRICE] [q/QUANTITY] [d/DELIVERY DATE]` +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"Alias: `oe`"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"****"},{"lineNumber":305,"author":{"gitID":"-"},"content":"* Edits the order at the specified `INDEX`. The index refers to the index number shown in the last order listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":306,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":307,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":308,"author":{"gitID":"-"},"content":"****"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"* `orderedit 1 q/10` OR +"},{"lineNumber":313,"author":{"gitID":"-"},"content":"`or 1 q/10` +"},{"lineNumber":314,"author":{"gitID":"-"},"content":"Edits the quantity field of the 1st order to be 10."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an order : `orderdelete` `since v1.2`"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"Deletes the order specified by the index number used in the order listing. +"},{"lineNumber":319,"author":{"gitID":"-"},"content":"Format: `orderdelete INDEX` +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"Alias: `od`"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"****"},{"lineNumber":323,"author":{"gitID":"-"},"content":"* Deletes the order at the specified `INDEX`."},{"lineNumber":324,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent order listing."},{"lineNumber":325,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":326,"author":{"gitID":"-"},"content":"****"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"* `orderdelete 3` OR +"},{"lineNumber":331,"author":{"gitID":"-"},"content":"`od 3` +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"Deletes the 3rd order of the order list in ContactSails."},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all orders : `orderlist` `Since v1.4`"},{"lineNumber":335,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"Shows a list of all orders in ContactSails. +"},{"lineNumber":337,"author":{"gitID":"SuxianAlicia"},"content":"Format: `orderlist` +"},{"lineNumber":338,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `ol`"},{"lineNumber":339,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":343,"author":{"gitID":"-"},"content":"Format: `history` +"},{"lineNumber":344,"author":{"gitID":"-"},"content":"Alias: `h`"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":347,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":348,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":349,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing the theme : `theme` `since v1.3`"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"Changes the theme of the application. +"},{"lineNumber":354,"author":{"gitID":"-"},"content":"Format: `theme THEME_TYPE` +"},{"lineNumber":355,"author":{"gitID":"-"},"content":"Alias: `t`"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"****"},{"lineNumber":358,"author":{"gitID":"-"},"content":"* Currently, you can choose between \u0027dark\u0027 and \u0027light\u0027 themes only."},{"lineNumber":359,"author":{"gitID":"-"},"content":"****"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"* `theme light` OR +"},{"lineNumber":364,"author":{"gitID":"-"},"content":"`t light` +"},{"lineNumber":365,"author":{"gitID":"-"},"content":"Changes the theme of the application to the light theme."},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing the order status : `orderstatus` `since v1.4`"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"Changes the order status of the order specified by the index number used in the order listing."},{"lineNumber":370,"author":{"gitID":"-"},"content":"Format: `orderstatus INDEX os/ORDER STATUS`"},{"lineNumber":371,"author":{"gitID":"-"},"content":"Alias: `os`"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"****"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* Orders can be marked as `ongoing` and `done` only."},{"lineNumber":375,"author":{"gitID":"-"},"content":"****"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"* `orderstatus 2 os/done` OR +"},{"lineNumber":380,"author":{"gitID":"-"},"content":"`os 2 os/done`"},{"lineNumber":381,"author":{"gitID":"-"},"content":"Marks the order status of the 2nd order in the most recent order listing as \u0027done\u0027."},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":384,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"Restores ContactSails to the state before the previous _undoable_ command was executed. +"},{"lineNumber":387,"author":{"gitID":"-"},"content":"Format: `undo` +"},{"lineNumber":388,"author":{"gitID":"-"},"content":"Alias: `u`"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":392,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify ContactSails\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":398,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":399,"author":{"gitID":"-"},"content":"`undo` OR `u` (reverses the `delete 1` command) +"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":402,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":403,"author":{"gitID":"-"},"content":"`undo` OR `u` +"},{"lineNumber":404,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":407,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":408,"author":{"gitID":"-"},"content":"`undo` OR `u` (reverses the `clear` command) +"},{"lineNumber":409,"author":{"gitID":"-"},"content":"`undo` OR `u` (reverses the `delete 1` command) +"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":414,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":419,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":420,"author":{"gitID":"-"},"content":"`redo` OR `r` (reapplies the `delete 1` command) +"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":423,"author":{"gitID":"-"},"content":"`redo` OR `r` +"},{"lineNumber":424,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":427,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":428,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":429,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":430,"author":{"gitID":"-"},"content":"`redo` OR `r` (reapplies the `delete 1` command) +"},{"lineNumber":431,"author":{"gitID":"-"},"content":"`redo` OR `r` (reapplies the `clear` command) +"},{"lineNumber":432,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Displaying Calendar : `calendar` `since v1.3`"},{"lineNumber":435,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":436,"author":{"gitID":"SuxianAlicia"},"content":"Displays the Calendar at centre of window in specified viewing format. +"},{"lineNumber":437,"author":{"gitID":"SuxianAlicia"},"content":"Format: `calendar [VIEW_FORMAT]` +"},{"lineNumber":438,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `cal` +"},{"lineNumber":439,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":440,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":441,"author":{"gitID":"SuxianAlicia"},"content":"* Calendar has 3 views; Day, Week, and Month."},{"lineNumber":442,"author":{"gitID":"SuxianAlicia"},"content":"* `VIEW_FORMAT` only accepts the keywords, `day`, `week` and `month` to display the calendar in the respective format."},{"lineNumber":443,"author":{"gitID":"SuxianAlicia"},"content":"* Calendar shows current day by default if no parameters are entered or invalid parameters are entered."},{"lineNumber":444,"author":{"gitID":"SuxianAlicia"},"content":"* Calendar will display all incoming entries within timeframe of the specified view."},{"lineNumber":445,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":446,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":447,"author":{"gitID":"SuxianAlicia"},"content":"Examples:"},{"lineNumber":448,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":449,"author":{"gitID":"SuxianAlicia"},"content":"* `calendar` OR +"},{"lineNumber":450,"author":{"gitID":"SuxianAlicia"},"content":"`cal` +"},{"lineNumber":451,"author":{"gitID":"SuxianAlicia"},"content":"Shows Calendar in Day-View."},{"lineNumber":452,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":453,"author":{"gitID":"SuxianAlicia"},"content":"* `calendar month` OR +"},{"lineNumber":454,"author":{"gitID":"SuxianAlicia"},"content":"`cal month` +"},{"lineNumber":455,"author":{"gitID":"SuxianAlicia"},"content":"Shows Calendar in Month-View."},{"lineNumber":456,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Go to next page in Calendar : `calendarnext` `coming in v1.5`"},{"lineNumber":458,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":459,"author":{"gitID":"SuxianAlicia"},"content":"Goes to the next page in Calendar."},{"lineNumber":460,"author":{"gitID":"SuxianAlicia"},"content":"Format: `calendarnext` +"},{"lineNumber":461,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `calnext` +"},{"lineNumber":462,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":463,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":464,"author":{"gitID":"SuxianAlicia"},"content":"* Depending on the current day/week/month calendar is displaying, this command will display the next day/week/month."},{"lineNumber":465,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":466,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Go to previous page in Calendar : `calendarprev` `coming in v1.5`"},{"lineNumber":468,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":469,"author":{"gitID":"SuxianAlicia"},"content":"Goes to the previous page in Calendar."},{"lineNumber":470,"author":{"gitID":"SuxianAlicia"},"content":"Format: `calendarprev` +"},{"lineNumber":471,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `calprev` +"},{"lineNumber":472,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":473,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":474,"author":{"gitID":"SuxianAlicia"},"content":"* Depending on the current day/week/month calendar is displaying, this command will display the previous day/week/month."},{"lineNumber":475,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":476,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Display current day in Calendar : `calendarnow` `coming in v1.5`"},{"lineNumber":478,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":479,"author":{"gitID":"SuxianAlicia"},"content":"Displays today\u0027s date in Calendar."},{"lineNumber":480,"author":{"gitID":"SuxianAlicia"},"content":"Format: `calendarnow` +"},{"lineNumber":481,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `calnow` +"},{"lineNumber":482,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":483,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":484,"author":{"gitID":"SuxianAlicia"},"content":"* If calendar is displaying in day-view, command displays today\u0027s date in day-view."},{"lineNumber":485,"author":{"gitID":"SuxianAlicia"},"content":"* If calendar is displaying in week-view, command displays the current week of today in week-view."},{"lineNumber":486,"author":{"gitID":"SuxianAlicia"},"content":"* If calendar is displaying in month-view, command displays current month of today in month-view."},{"lineNumber":487,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":488,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding entries to calendar entry list : `entryadd` `Since v1.3`"},{"lineNumber":490,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":491,"author":{"gitID":"SuxianAlicia"},"content":"Adds an entry to the Calendar entry list. +"},{"lineNumber":492,"author":{"gitID":"SuxianAlicia"},"content":"Format: `entryadd t/TITLE [sd/START_DATE] ed/END_DATE [st/START_TIME] et/END_TIME` +"},{"lineNumber":493,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `ea t/TITLE [sd/START_DATE] ed/END_DATE [st/START_TIME] et/END_TIME` +"},{"lineNumber":494,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":495,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":496,"author":{"gitID":"SuxianAlicia"},"content":"* If input does not contain START_DATE, it is assumed that START DATE is the same as END_DATE."},{"lineNumber":497,"author":{"gitID":"SuxianAlicia"},"content":"* If input does not contain START_TIME, it is assumed that START_TIME is 00:00."},{"lineNumber":498,"author":{"gitID":"SuxianAlicia"},"content":"* TITLE is alphanumeric and accepts white space. TITLE accepts maximum of 40 characters."},{"lineNumber":499,"author":{"gitID":"SuxianAlicia"},"content":"* START_DATE and END_DATE must follow the format: DD-MM-YYYY (E.g. 04-04-2020 represents 4 April 2020)"},{"lineNumber":500,"author":{"gitID":"SuxianAlicia"},"content":"* START_TIME and END_TIME must follow the 24-Hour format: HH:MM (E.g. 23:59)"},{"lineNumber":501,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":502,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":503,"author":{"gitID":"SuxianAlicia"},"content":"Examples:"},{"lineNumber":504,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":505,"author":{"gitID":"SuxianAlicia"},"content":"* `entryadd t/meet with boss ed/05-05-2020 st/10:00 et/12:00` OR +"},{"lineNumber":506,"author":{"gitID":"SuxianAlicia"},"content":"`ea t/meet with boss ed/05-05-2020 st/10:00 et/12:00` +"},{"lineNumber":507,"author":{"gitID":"SuxianAlicia"},"content":"Creates a calendar entry with listed title, starts from 1000 and ends at 1200 on 5 May 2020. +"},{"lineNumber":508,"author":{"gitID":"SuxianAlicia"},"content":"Entry appears on specified date in the Calendar."},{"lineNumber":509,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":510,"author":{"gitID":"SuxianAlicia"},"content":"* `entryadd t/roadshow sd/01-01-2019 ed/10-01-2019 st/09:00 et/18:00` OR +"},{"lineNumber":511,"author":{"gitID":"SuxianAlicia"},"content":"`ea t/roadshow sd/01-01-2019 ed/10-01-2019 st/09:00 et/18:00` +"},{"lineNumber":512,"author":{"gitID":"SuxianAlicia"},"content":"Entry starting from 1 Jan 2019 1000 and ending at 10 Jan 2019 1800 appears at the specified time period in Calendar."},{"lineNumber":513,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":514,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d editing entries in calendar entry list : `entryedit` `Coming in v1.5`"},{"lineNumber":516,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":517,"author":{"gitID":"SuxianAlicia"},"content":"Edits an existing entry in the Calendar entry List. +"},{"lineNumber":518,"author":{"gitID":"SuxianAlicia"},"content":"Format: `entryedit e/ENTRY_INDEX [t/TITLE] [sd/START_DATE] [ed/END_DATE] [st/START_TIME] [et/END_TIME]` +"},{"lineNumber":519,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `ee e/ENTRY_INDEX [t/TITLE] [sd/START_DATE] [ed/END_DATE] [st/START_TIME] [et/END_TIME]` +"},{"lineNumber":520,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":521,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":522,"author":{"gitID":"SuxianAlicia"},"content":"* Edits the entry at specified ENTRY_INDEX. The index refers to the index number shown in the last entry listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":523,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":524,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":525,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":526,"author":{"gitID":"SuxianAlicia"},"content":"Examples:"},{"lineNumber":527,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":528,"author":{"gitID":"SuxianAlicia"},"content":"* `entryedit e/1 t/meet with bosses et/1400` OR +"},{"lineNumber":529,"author":{"gitID":"SuxianAlicia"},"content":"`ee e/1 t/meet with bosses et/1400` +"},{"lineNumber":530,"author":{"gitID":"SuxianAlicia"},"content":"Edits title and end time of 1st entry in entry list to \"meet with bosses\" and 1400 respectively. +"},{"lineNumber":531,"author":{"gitID":"SuxianAlicia"},"content":"Changes reflect on the Calendar."},{"lineNumber":532,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":533,"author":{"gitID":"SuxianAlicia"},"content":"* `entryedit e/3 sd/01-01-2019 ed/11-01-2019 st/0900 et/1800` OR +"},{"lineNumber":534,"author":{"gitID":"SuxianAlicia"},"content":"`ee e/3 sd/01-01-2019 ed/11-01-2019 st/0900 et/1800` +"},{"lineNumber":535,"author":{"gitID":"SuxianAlicia"},"content":"Edits starting date and time, ending date and time of the 3rd entry in entry list."},{"lineNumber":536,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting entries in calendar entry list : `entrydelete` `Since v1.4`"},{"lineNumber":538,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":539,"author":{"gitID":"SuxianAlicia"},"content":"Deletes an existing entry in Calendar entry list. +"},{"lineNumber":540,"author":{"gitID":"SuxianAlicia"},"content":"Format: `entrydelete ENTRY_INDEX` +"},{"lineNumber":541,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `ed ENTRY_INDEX` +"},{"lineNumber":542,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":543,"author":{"gitID":"SuxianAlicia"},"content":"****"},{"lineNumber":544,"author":{"gitID":"SuxianAlicia"},"content":"* Deletes entry at specified ENTRY_INDEX of entry list."},{"lineNumber":545,"author":{"gitID":"SuxianAlicia"},"content":"* The index refers to index number shown in the most recent entry listing."},{"lineNumber":546,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":547,"author":{"gitID":"-"},"content":"****"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"SuxianAlicia"},"content":"* `entrydelete 1` OR +"},{"lineNumber":552,"author":{"gitID":"SuxianAlicia"},"content":"`ed 1` +"},{"lineNumber":553,"author":{"gitID":"SuxianAlicia"},"content":"Deletes the entry at index 1 of most recent entry listing. +"},{"lineNumber":554,"author":{"gitID":"SuxianAlicia"},"content":"Entry is removed from the Calendar."},{"lineNumber":555,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all calendar entries : `entrylist` `Since v1.4`"},{"lineNumber":557,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"Shows a list of all calendar entries in ContactSails. +"},{"lineNumber":559,"author":{"gitID":"SuxianAlicia"},"content":"Format: `entrylist` +"},{"lineNumber":560,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `el`"},{"lineNumber":561,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":562,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d Clearing all entries in entryList : `entryclear` `coming in v1.5`"},{"lineNumber":563,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"Clears all entry list entries from ContactSails. +"},{"lineNumber":565,"author":{"gitID":"SuxianAlicia"},"content":"Format: `entryclear` +"},{"lineNumber":566,"author":{"gitID":"SuxianAlicia"},"content":"Alias: `ec`"},{"lineNumber":567,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"Clears all entries from ContactSails. +"},{"lineNumber":571,"author":{"gitID":"-"},"content":"Format: `clear` +"},{"lineNumber":572,"author":{"gitID":"-"},"content":"Alias: `c`"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":577,"author":{"gitID":"-"},"content":"Format: `exit` +"},{"lineNumber":578,"author":{"gitID":"-"},"content":"Alias: `q`"},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing top customers : `topcustomers` `coming in v2.0`"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"Displays a list of the top customers based on the frequency their contacts are accessed. +"},{"lineNumber":583,"author":{"gitID":"-"},"content":"Format: `topcustomers NUMBER` +"},{"lineNumber":584,"author":{"gitID":"-"},"content":"Alias: `tc`"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"****"},{"lineNumber":587,"author":{"gitID":"-"},"content":"* The command will display the top `NUMBER` amount of people, sorted by most frequently contacted to the least."},{"lineNumber":588,"author":{"gitID":"-"},"content":"* `NUMBER` must be in the range of 1 to total number of persons in ContactSails, both inclusive."},{"lineNumber":589,"author":{"gitID":"-"},"content":"****"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"* `topcustomers 10` OR +"},{"lineNumber":594,"author":{"gitID":"-"},"content":"`tc 10` +"},{"lineNumber":595,"author":{"gitID":"-"},"content":"Displays the list of the top ten persons in ContactSails based on how frequently you access these contacts."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing top customers : `topitems` `coming in v2.0`"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"Displays a list of the top items based on amount of items that have been sold to customers. +"},{"lineNumber":600,"author":{"gitID":"-"},"content":"Format: `topitems NUMBER` +"},{"lineNumber":601,"author":{"gitID":"-"},"content":"Alias: `ti`"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"****"},{"lineNumber":604,"author":{"gitID":"-"},"content":"* The command will display the top `NUMBER` amount of items, sorted by most bought item to the least."},{"lineNumber":605,"author":{"gitID":"-"},"content":"* `NUMBER` must be in the range of 1 to total number of items in ContactSails, both inclusive."},{"lineNumber":606,"author":{"gitID":"-"},"content":"****"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"* `topitems 10` OR +"},{"lineNumber":611,"author":{"gitID":"-"},"content":"`ti 10` +"},{"lineNumber":612,"author":{"gitID":"-"},"content":"Displays the list of the top ten items in ContactSails based on how many of the items have been sold."},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sending promotions based on group : `sendpromogroup` `coming in v2.0`"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"Opens a promotion email draft in the browser, which can be sent to multiple persons having the same group tags."},{"lineNumber":617,"author":{"gitID":"-"},"content":"Format: `sendpromogroup GROUP... [sub/SUBJECT] [b/BODY]`"},{"lineNumber":618,"author":{"gitID":"-"},"content":"Alias: `spg`"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"****"},{"lineNumber":621,"author":{"gitID":"-"},"content":"* The email draft will use the Default Email Service Provider on your local device."},{"lineNumber":622,"author":{"gitID":"-"},"content":"* The command will add all the persons with the `GROUP` tag as recipients of the email."},{"lineNumber":623,"author":{"gitID":"-"},"content":"* Multiple `GROUP` tags can be specified. All persons in these groups will be added as recipients."},{"lineNumber":624,"author":{"gitID":"-"},"content":"* The subject and body of the email will be specified by the `SUBJECT` and `BODY` parameters respectively."},{"lineNumber":625,"author":{"gitID":"-"},"content":"****"},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"* `sendpromogroup friends sub/New Offer on Sunglasses` OR +"},{"lineNumber":630,"author":{"gitID":"-"},"content":"`spg friends sub/New Offer on Sunglasses` +"},{"lineNumber":631,"author":{"gitID":"-"},"content":"Opens an email draft in the browser with recipients as all persons tagged as \u0027friends\u0027 and subject as \u0027New Offer on Sunglasses\u0027. +"},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sending promotions based on preference : `sendpromopref` `coming in v2.0`"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"Opens a promotion email draft in the browser, which can be sent to multiple persons having the same preference tags."},{"lineNumber":636,"author":{"gitID":"-"},"content":"Format: `sendpromopref PREFERENCE... [sub/SUBJECT] [b/BODY]`"},{"lineNumber":637,"author":{"gitID":"-"},"content":"Alias: `spp`"},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"****"},{"lineNumber":640,"author":{"gitID":"-"},"content":"* The email draft will use the Default Email Service Provider on your local device."},{"lineNumber":641,"author":{"gitID":"-"},"content":"* The command will add all the persons with the `PREFERENCE` tag as recipients of the email."},{"lineNumber":642,"author":{"gitID":"-"},"content":"* Multiple `PREFERENCE` tags can be specified. All persons in these groups will be added as recipients."},{"lineNumber":643,"author":{"gitID":"-"},"content":"* The subject and body of the email will be specified by the `SUBJECT` and `BODY` parameters respectively."},{"lineNumber":644,"author":{"gitID":"-"},"content":"****"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"* `sendpromopref books sub/Books on SALE` OR +"},{"lineNumber":649,"author":{"gitID":"-"},"content":"`spp books sub/Books on SALE` +"},{"lineNumber":650,"author":{"gitID":"-"},"content":"Opens an email draft in the browser with recipients as all persons tagged with \u0027books\u0027 and subject as \u0027Books on SALE\u0027. +"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":655,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":660,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"SuxianAlicia"},"content":"* *Add* : `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]... [pr/PREFERENCE]...` +"},{"lineNumber":665,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 g/friend g/colleague pr/computers`"},{"lineNumber":666,"author":{"gitID":"SuxianAlicia"},"content":"* *Calendar* : `calendar [VIEW_FORMAT]` +"},{"lineNumber":667,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `calendar week`"},{"lineNumber":668,"author":{"gitID":"SuxianAlicia"},"content":"* *Calendar Next `coming in v1.5`* : `calendarnext`"},{"lineNumber":669,"author":{"gitID":"SuxianAlicia"},"content":"* *Calendar Previous `coming in v1.5`* : `calendarprev`"},{"lineNumber":670,"author":{"gitID":"SuxianAlicia"},"content":"* *Calendar Today `coming in v1.5`* : `calendarnow`"},{"lineNumber":671,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":672,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":673,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":674,"author":{"gitID":"-"},"content":"* *GroupDelete* : `groupdelete GROUP_NAME` +"},{"lineNumber":675,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `groupdelete friends`"},{"lineNumber":676,"author":{"gitID":"-"},"content":"* *PreferenceDelete*: `prefdelete PREFERENCE_NAME` +"},{"lineNumber":677,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `prefdelete computers`"},{"lineNumber":678,"author":{"gitID":"SuxianAlicia"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [g/GROUP]... [pr/PREFERENCE]...` +"},{"lineNumber":679,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":680,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryAdd* : `entryadd t/TITLE [sd/START_DATE] ed/END_DATE [st/START_TIME] et/END_TIME` +"},{"lineNumber":681,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `entryadd t/roadshow sd/01-01-2019 ed/10-01-2019 st/0900 et/1800`"},{"lineNumber":682,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryEdit `coming in v1.5`* : `entryedit e/ENTRY_INDEX [t/TITLE] [sd/START_DATE] [ed/END_DATE] [st/START_TIME] [et/END_TIME]` +"},{"lineNumber":683,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `entryedit e/2 t/meeting with Jason ed/20-20-2020`"},{"lineNumber":684,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryDelete* : `entrydelete INDEX` +"},{"lineNumber":685,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `entrydelete 2`"},{"lineNumber":686,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryList* : `entrylist`"},{"lineNumber":687,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryListClear `coming in v1.5`* : `entryclear`"},{"lineNumber":688,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":689,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":690,"author":{"gitID":"-"},"content":"* *GroupFind* : `groupfind KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":691,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `groupfind friends`"},{"lineNumber":692,"author":{"gitID":"-"},"content":"* *PrefFind* : `preffind KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":693,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `preffind computers`"},{"lineNumber":694,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":695,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":696,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":697,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":698,"author":{"gitID":"-"},"content":"* *OrderAdd* : `orderadd INDEX i/ORDER INFORMATION pr/PRICE q/QUANTITY d/DELIVERY DATE` +"},{"lineNumber":699,"author":{"gitID":"-"},"content":"e.g. `orderadd 1 i/NBA 2k18 pr/229.99 q/1 d/11-09-2018`"},{"lineNumber":700,"author":{"gitID":"-"},"content":"* *OrderEdit* : `orderedit INDEX [i/ORDER INFORMATION] [pr/PRICE] [q/QUANTITY] [d/DELIVERY DATE]` +"},{"lineNumber":701,"author":{"gitID":"-"},"content":"e.g. `orderedit 1 pr/15.00 d/05-03-2018`"},{"lineNumber":702,"author":{"gitID":"-"},"content":"* *OrderDelete* : `orderdelete INDEX` +"},{"lineNumber":703,"author":{"gitID":"-"},"content":"e.g. `orderdelete 5`"},{"lineNumber":704,"author":{"gitID":"SuxianAlicia"},"content":"* *OrderList* : `orderlist`"},{"lineNumber":705,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":706,"author":{"gitID":"-"},"content":"* *Theme* : `theme THEME_TYPE`"},{"lineNumber":707,"author":{"gitID":"-"},"content":"* *OrderStatus* : `orderstatus INDEX os/ORDER STATUS`"},{"lineNumber":708,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":709,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":710,"author":{"gitID":"-"},"content":"* *TopCustomers `coming in v2.0`* : `topcustomers NUMBER`"},{"lineNumber":711,"author":{"gitID":"-"},"content":"* *TopItems `coming in v2.0`* : `topitems NUMBER`"},{"lineNumber":712,"author":{"gitID":"-"},"content":"* *SendPromoGroup `coming in v2.0`* : `sendpromogroup GROUP... [sub/SUBJECT] [b/BODY]`"},{"lineNumber":713,"author":{"gitID":"-"},"content":"* *SendPromoPref `coming in v2.0`* : `sendpromopref PREFERENCE... [sub/SUBJECT] [b/BODY]`"},{"lineNumber":714,"author":{"gitID":"-"},"content":"* *Exit* : `exit`"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"\u003d\u003d Command Alias Summary"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"SuxianAlicia"},"content":"* *Add* `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]... [pr/PREFERENCE]...` +"},{"lineNumber":719,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `a n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 g/friend g/colleague pr/computers`"},{"lineNumber":720,"author":{"gitID":"SuxianAlicia"},"content":"* *Calendar* : `cal [VIEW_FORMAT]` +"},{"lineNumber":721,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `cal week`"},{"lineNumber":722,"author":{"gitID":"SuxianAlicia"},"content":"* *Calendar Next `coming in v1.5`* : `calnext`"},{"lineNumber":723,"author":{"gitID":"SuxianAlicia"},"content":"* *Calendar Previous `coming in v1.5`* : `calprev`"},{"lineNumber":724,"author":{"gitID":"SuxianAlicia"},"content":"* *Calendar Today `coming in v1.5`* : `calnow`"},{"lineNumber":725,"author":{"gitID":"-"},"content":"* *Clear* : `c`"},{"lineNumber":726,"author":{"gitID":"-"},"content":"* *Delete* : `d INDEX` +"},{"lineNumber":727,"author":{"gitID":"-"},"content":"e.g. `d 3`"},{"lineNumber":728,"author":{"gitID":"-"},"content":"* *GroupDelete* : `gd GROUP_NAME` +"},{"lineNumber":729,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `gd friends`"},{"lineNumber":730,"author":{"gitID":"-"},"content":"* *PreferenceDelete*: `pd PREFERENCE_NAME` +"},{"lineNumber":731,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `pd computers`"},{"lineNumber":732,"author":{"gitID":"SuxianAlicia"},"content":"* *Edit* : `e INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [g/GROUP]... [pr/PREFERENCE]...` +"},{"lineNumber":733,"author":{"gitID":"-"},"content":"e.g. `e 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":734,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryAdd* : `ea t/TITLE [sd/START_DATE] ed/END_DATE [st/START_TIME] et/END_TIME` +"},{"lineNumber":735,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `ea t/roadshow sd/01-01-2019 ed/10-01-2019 st/0900 et/1800`"},{"lineNumber":736,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryEdit `coming in v1.5`* : `ee e/ENTRY_INDEX [t/TITLE] [sd/START_DATE] [ed/END_DATE] [st/START_TIME] [et/END_TIME]` +"},{"lineNumber":737,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `ee e/2 t/meeting with Jason ed/20-20-2020`"},{"lineNumber":738,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryDelete* : `ed INDEX` +"},{"lineNumber":739,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `ed 2`"},{"lineNumber":740,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryList* : `el`"},{"lineNumber":741,"author":{"gitID":"SuxianAlicia"},"content":"* *EntryListClear `coming in v1.5`* : `elc`"},{"lineNumber":742,"author":{"gitID":"-"},"content":"* *Find* : `f KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":743,"author":{"gitID":"-"},"content":"e.g. `f James Jake`"},{"lineNumber":744,"author":{"gitID":"-"},"content":"* *GroupFind* : `gf KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":745,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `gf friends`"},{"lineNumber":746,"author":{"gitID":"-"},"content":"* *PrefFind* : `pf KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":747,"author":{"gitID":"SuxianAlicia"},"content":"e.g. `pf computers`"},{"lineNumber":748,"author":{"gitID":"-"},"content":"* *List* : `l`"},{"lineNumber":749,"author":{"gitID":"-"},"content":"* *Help* : `?`"},{"lineNumber":750,"author":{"gitID":"-"},"content":"* *Select* : `s INDEX` +"},{"lineNumber":751,"author":{"gitID":"-"},"content":"e.g. `s 2`"},{"lineNumber":752,"author":{"gitID":"-"},"content":"* *OrderAdd* : `oa INDEX i/ORDER INFORMATION pr/PRICE q/QUANTITY d/DELIVERY DATE` +"},{"lineNumber":753,"author":{"gitID":"-"},"content":"e.g. `oa 1 i/NBA 2k18 pr/229.99 q/1 d/11-09-2018`"},{"lineNumber":754,"author":{"gitID":"-"},"content":"* *OrderEdit* : `oe [i/ORDER INFORMATION] [pr/PRICE] [q/QUANTITY] [d/DELIVERY DATE]` +"},{"lineNumber":755,"author":{"gitID":"-"},"content":"e.g. `oe 1 pr/15.00 d/05-03-2018`"},{"lineNumber":756,"author":{"gitID":"-"},"content":"* *OrderDelete* : `od INDEX` +"},{"lineNumber":757,"author":{"gitID":"-"},"content":"e.g. `od 5`"},{"lineNumber":758,"author":{"gitID":"SuxianAlicia"},"content":"* *OrderList* : `ol`"},{"lineNumber":759,"author":{"gitID":"-"},"content":"* *History* : `h`"},{"lineNumber":760,"author":{"gitID":"-"},"content":"* *Theme* : `t THEME_TYPE`"},{"lineNumber":761,"author":{"gitID":"-"},"content":"* *OrderStatus* : `os INDEX os/ORDER STATUS`"},{"lineNumber":762,"author":{"gitID":"-"},"content":"* *Undo* : `u`"},{"lineNumber":763,"author":{"gitID":"-"},"content":"* *Redo* : `r`"},{"lineNumber":764,"author":{"gitID":"-"},"content":"* *TopCustomers `coming in v2.0`* : `tc NUMBER`"},{"lineNumber":765,"author":{"gitID":"-"},"content":"* *TopItems `coming in v2.0`* : `ti NUMBER`"},{"lineNumber":766,"author":{"gitID":"-"},"content":"* *SendPromoGroup `coming in v2.0`* : `spg GROUP... [sub/SUBJECT] [b/BODY]`"},{"lineNumber":767,"author":{"gitID":"-"},"content":"* *SendPromoPref `coming in v2.0`* : `spp PREFERENCE... [sub/SUBJECT] [b/BODY]`"},{"lineNumber":768,"author":{"gitID":"-"},"content":"* *Exit* : `q`"}],"authorContributionMap":{"SuxianAlicia":258,"-":510}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook,"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"                                    Supplier\u003cReadOnlyCalendarManager\u003e calendarManager, String saveAbFileLocation,"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                                    String saveCmFileLocation) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, calendarManager,"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"                    saveAbFileLocation, saveCmFileLocation));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":6,"-":71}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_COLLEAGUES;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_FRIEND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PREFERENCE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREFERENCE_DESC_COMPUTERS;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREFERENCE_DESC_SHOES;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_SHOES;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: add a person without preferences or groups to a non-empty address book,"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"         * command with leading spaces and trailing spaces -\u003e added"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + GROUP_DESC_FRIEND + PREFERENCE_DESC_SHOES;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"                .withAddress(VALID_ADDRESS_AMY).withGroups(VALID_GROUP_FRIEND)"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_SHOES).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"                + GROUP_DESC_FRIEND + PREFERENCE_DESC_SHOES;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"                .withAddress(VALID_ADDRESS_AMY).withGroups(VALID_GROUP_FRIEND)"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_SHOES).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"                + GROUP_DESC_FRIEND + PREFERENCE_DESC_SHOES;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"                .withAddress(VALID_ADDRESS_AMY).withGroups(VALID_GROUP_FRIEND)"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_SHOES).build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"                + GROUP_DESC_FRIEND + PREFERENCE_DESC_SHOES;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"                .withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_FRIEND)"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_SHOES).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"                + GROUP_DESC_FRIEND + PREFERENCE_DESC_SHOES;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: add a person with groups and preferences, command with parameters in random order -\u003e added */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d AddCommand.COMMAND_WORD + GROUP_DESC_FRIEND + GROUP_DESC_COLLEAGUES + PHONE_DESC_BOB"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + NAME_DESC_BOB + PREFERENCE_DESC_COMPUTERS + EMAIL_DESC_BOB;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: add a duplicate person except with different groups -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        // \"friends\" is an existing group used in the default model, see TypicalPersons#ALICE"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        // This test will fail if a new group that is not in the model is used, see the bug documented in"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_GROUP.getPrefix() + \"friends\";"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid group -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"                + INVALID_GROUP_DESC;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid preferences -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"                + INVALID_PREFERENCE_DESC;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":37,"-":239}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOrders.BOOKS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOrders.CHOCOLATES;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOrders.FACEWASH;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOrders.SHOES;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.TypicalCalendarEntries;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":50,"author":{"gitID":"-"},"content":" */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, this::getInitialCalendarData,"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"                getAbDataFileLocation(), getCmDataFileLocation());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the data to be loaded into the file in {@link #getAbDataFileLocation()}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            ab.addOrderToOrderList(BOOKS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            ab.addOrderToOrderList(CHOCOLATES);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            ab.addOrderToOrderList(FACEWASH);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            ab.addOrderToOrderList(SHOES);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (UniqueOrderList.DuplicateOrderException doe) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"not possible\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the data to be loaded into the file in {@Link #getCmDataFileLocation()}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    protected CalendarManager getInitialCalendarData() {"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager cm \u003d TypicalCalendarEntries.getTypicalCalendarManagerWithEntries();"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        return cm;"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the directory of the data file of address book."},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    protected String getAbDataFileLocation() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the directory of the data file of calendar manager."},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"    protected String getCmDataFileLocation() {"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"        return TestApp.SAVE_LOCATION_FOR_CALENDAR_TESTING;"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public PersonPanelHandle getPersonPanel() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonPanel();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":159,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the person panel remains displaying the details"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Asserts that the person panel is changed to display the details of the person in the person list panel at"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Asserts that the person panel and the selected card in the person list panel remain unchanged."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":300,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":22,"-":282}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d ContactSails - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W13-B1/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team W13-B1`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"ContactSails is a desktop application targeted at salespersons who want to manage their customer contacts, sales orders,"},{"lineNumber":20,"author":{"gitID":"-"},"content":"and calendar events in an efficient manner. +"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"This guide provides the necessary technical information for those"},{"lineNumber":23,"author":{"gitID":"-"},"content":"who might want to join our team as a software developer or a tester,"},{"lineNumber":24,"author":{"gitID":"-"},"content":"or for those who want to develop an entirely different product by using ContactSails as a base. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"The following points illustrate what information this guide provides:"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"1. Details about the software architecture and how each component of the application is designed. +"},{"lineNumber":29,"author":{"gitID":"-"},"content":"2. Implementation details of some noteworthy features in the application. +"},{"lineNumber":30,"author":{"gitID":"-"},"content":"3. Details about software testing, documentation, and dev ops."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"This section will guide you in setting up the developer environment on your computer for coding and testing purposes."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"Ensure that you have the following prerequisites for successfully setting up the developer environment:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"The Java JDK is a software development kit that includes a runtime environment and tools for developing, debugging, and"},{"lineNumber":44,"author":{"gitID":"-"},"content":"monitoring Java applications."},{"lineNumber":45,"author":{"gitID":"-"},"content":"You can download it http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html[here]."},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8, so ensure that you have installed the right version of Java 8."},{"lineNumber":50,"author":{"gitID":"-"},"content":"+"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":". *IntelliJ* IDEA"},{"lineNumber":53,"author":{"gitID":"-"},"content":"+"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"IntelliJ IDEA is a Java integrated development environment for developing computer software."},{"lineNumber":56,"author":{"gitID":"-"},"content":"You can download the (free) community edition https://www.jetbrains.com/idea/download/[here]."},{"lineNumber":57,"author":{"gitID":"-"},"content":"+"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":60,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":61,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project on your computer"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Follow these steps to set up the project on your computer:"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":69,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":70,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle:"},{"lineNumber":71,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":72,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":73,"author":{"gitID":"-"},"content":". Click `Import Project`."},{"lineNumber":74,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":75,"author":{"gitID":"-"},"content":". Click `Open as Project`."},{"lineNumber":76,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings."},{"lineNumber":77,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":78,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Follow these steps to verify that the project has been setup correctly:"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands."},{"lineNumber":85,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"This section provides information on the additional configurations that you need to setup before you can start writing code."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. +"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"To use the correct coding style, follow these steps:"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."},{"lineNumber":98,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`."},{"lineNumber":99,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order:"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":102,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"Optionally, you can follow the https://github.com/CS2103JAN2018-W13-B1/main/blob/master/docs/UsingCheckstyle.adoc[UsingCheckstyle.adoc] document to configure Intellij to check style-compliance as you write code."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W13-B1/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-W13-B1/main` repo), you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See https://github.com/CS2103JAN2018-W13-B1/main/blob/master/docs/UsingTravis.adoc[UsingTravis.adoc] to learn how to set it up."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork see https://github.com/CS2103JAN2018-W13-B1/main/blob/master/docs/UsingCoveralls.adoc[UsingCoveralls.adoc]."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":117,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI see https://github.com/CS2103JAN2018-W13-B1/main/blob/master/docs/UsingAppVeyor.adoc[UsingAppVeyor.adoc]."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":122,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":129,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"The following section provides information about the software architecture of ContactSails and how each of its components are designed."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given below (Figure 1) explains the high-level design of the App."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":141,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\" align\u003d\"center\"]"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":144,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Given below is a quick overview of each component."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]."},{"lineNumber":149,"author":{"gitID":"-"},"content":"It does the following:"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":152,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."},{"lineNumber":155,"author":{"gitID":"-"},"content":"Two of those classes, `EventsCenter` and `LogsCenter`, play important roles at the architecture level."},{"lineNumber":156,"author":{"gitID":"-"},"content":"Given below is a description of what each of those classes do:"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."},{"lineNumber":159,"author":{"gitID":"-"},"content":"* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"The rest of the App consists of four components:"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"1. \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":164,"author":{"gitID":"-"},"content":"2. \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":165,"author":{"gitID":"-"},"content":"3. \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":166,"author":{"gitID":"-"},"content":"4. \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from and writes data to the hard disk."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"Each of the four components does the following:"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see Figure 2 below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":176,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ (Figure 3) below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":184,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":187,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ (Figure 4) below shows how `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":192,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":195,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":200,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI Component"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"The `UI` Component consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":203,"author":{"gitID":"-"},"content":"Figure 5 below shows the structure of the `UI` component."},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":206,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"*API* for the `UI` Component: link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"The `UI` Component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"The `UI` Component does the following:"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":". Executes user commands using the `Logic` component."},{"lineNumber":215,"author":{"gitID":"-"},"content":". Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":216,"author":{"gitID":"-"},"content":". Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic Component"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"The `Logic` Component deals with how each command would be parsed and executed in an event-driven design."},{"lineNumber":222,"author":{"gitID":"-"},"content":"Figure 6 below shows the structure of the `Logic` Component."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":226,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component."},{"lineNumber":229,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This diagram above (Figure 7) shows the finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"*API* for the `Logic` Component:"},{"lineNumber":234,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"The `Logic` Component does the following:"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":239,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":240,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":241,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"Given below is the _Sequence Diagram_ (Figure 8) for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":246,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":249,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model Component"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"The `Model` Component handles the contacts, orders, and events in the address book and all their stored details in data structures."},{"lineNumber":252,"author":{"gitID":"-"},"content":"These structures also provide APIs to create, read, update and delete the details of these objects."},{"lineNumber":253,"author":{"gitID":"-"},"content":"Figure 9 below shows the structure of the `Model` Component."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":".Structure of the `Model` Component"},{"lineNumber":256,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"*API* for the `Model` Component: link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"The `Model` Component does the following:"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":". Stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":263,"author":{"gitID":"-"},"content":". Stores the Address Book data."},{"lineNumber":264,"author":{"gitID":"-"},"content":". Exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":267,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage Component"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"The `Storage` Component handles the storing of data in the address book on the local computer."},{"lineNumber":270,"author":{"gitID":"-"},"content":"Figure 10 below shows the structure of the `Storage` Component."},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":273,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"*API* for the `Storage` Component: link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"The `Storage` Component does the following:"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":". Saves `UserPref` objects in .json format and reads it back."},{"lineNumber":280,"author":{"gitID":"-"},"content":". Saves the Address Book data in .xml format and reads it back."},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":283,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":292,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":293,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":294,"author":{"gitID":"SuxianAlicia"},"content":"This feature allows users to undo and redo certain commands executed in the current session."},{"lineNumber":295,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"SuxianAlicia"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"SuxianAlicia"},"content":".Inheritance Diagram for commands in `Logic` Component"},{"lineNumber":303,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":308,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":309,"author":{"gitID":"-"},"content":"----"},{"lineNumber":310,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":314,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"-"},"content":"}"},{"lineNumber":316,"author":{"gitID":"-"},"content":"----"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":319,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":320,"author":{"gitID":"-"},"content":"----"},{"lineNumber":321,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":"}"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":334,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"-"},"content":"}"},{"lineNumber":336,"author":{"gitID":"-"},"content":"----"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"SuxianAlicia"},"content":".UndoRedoStack before and after executing 1 Delete Command"},{"lineNumber":343,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"SuxianAlicia"},"content":".UndoRedoStack before and after Executing 1 Add Command"},{"lineNumber":348,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":351,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"SuxianAlicia"},"content":".UndoRedoStack before and after executing Undo Command"},{"lineNumber":358,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":361,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"SuxianAlicia"},"content":".Sequence Diagram for executing Undo Command"},{"lineNumber":366,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":371,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"SuxianAlicia"},"content":".UndoRedoStack before and after executing Clear Command"},{"lineNumber":376,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"SuxianAlicia"},"content":".UndoRedoStack before and after executing List Command"},{"lineNumber":381,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"SuxianAlicia"},"content":".Execution Path when Undoable Commands"},{"lineNumber":386,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\" align\u003d\"center\"]"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":393,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":394,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":395,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":396,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":397,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":402,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":403,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":404,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":405,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":406,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":412,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":413,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":414,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":415,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":416,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":417,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":423,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":424,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":425,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":426,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":427,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":428,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"// tag::orders[]"},{"lineNumber":431,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Orders"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"Orders refer to the sales orders that will be added by the salesperson to ContactSails."},{"lineNumber":434,"author":{"gitID":"-"},"content":"These orders can be added to any particular person of the address book."},{"lineNumber":435,"author":{"gitID":"-"},"content":"After being added, orders can be edited and deleted."},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"An `Order` is represented in the application as shown in _Figure 11_ given below."},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"// UML Diagram for Order"},{"lineNumber":442,"author":{"gitID":"-"},"content":".UML Diagram for Order"},{"lineNumber":443,"author":{"gitID":"-"},"content":"image::OrderUMLDiagram.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"A brief description of each of the attributes of an `Order` is given below: +"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"* OrderInformation: Represents information about the order item. +"},{"lineNumber":448,"author":{"gitID":"-"},"content":"* OrderStatus: Denotes whether the sales order is ongoing or has been fulfilled by the salesperson. +"},{"lineNumber":449,"author":{"gitID":"-"},"content":"* Price: Represents the price of a single item of the sales order. +"},{"lineNumber":450,"author":{"gitID":"-"},"content":"* Quantity: Represents the number of items in the sales order. +"},{"lineNumber":451,"author":{"gitID":"-"},"content":"* DeliveryDate: Represents the date by which the sales order must be fulfilled. +"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"As orders are added to a particular person, there exists an association between a `Person` object and an `Order` object."},{"lineNumber":454,"author":{"gitID":"SuxianAlicia"},"content":"This relationship is shown in _Figure 20_ given below."},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"// UML Diagram showing association between a Person and an Order"},{"lineNumber":457,"author":{"gitID":"-"},"content":".UML Diagram showing association between a Person and an Order"},{"lineNumber":458,"author":{"gitID":"-"},"content":"image::PersonOrderAssociationUMLDiagram.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"The association is implemented in the following manner:"},{"lineNumber":461,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":462,"author":{"gitID":"-"},"content":"----"},{"lineNumber":463,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"    // ... other Person attributes ..."},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"    private final UniquePersonOrderList personOrders;"},{"lineNumber":468,"author":{"gitID":"-"},"content":"}"},{"lineNumber":469,"author":{"gitID":"-"},"content":"----"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"----"},{"lineNumber":472,"author":{"gitID":"-"},"content":"public class PersonOrder {"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"    Person person;"},{"lineNumber":475,"author":{"gitID":"-"},"content":"    Order order;"},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"    // ... PersonOrder attribute getters and setters ..."},{"lineNumber":478,"author":{"gitID":"-"},"content":"}"},{"lineNumber":479,"author":{"gitID":"-"},"content":"----"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"Operations on orders can be done using the `AddOrderCommand`, `EditOrderCommand`, and `DeleteOrderCommand` commands."},{"lineNumber":482,"author":{"gitID":"-"},"content":"These commands are described in more detail below. +"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Adding Orders"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"The `AddOrderCommand` adds an order to the person specified by their `index` in the last shown listing of persons."},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"The following snippet shows how the `executeUndoableCommand()` method updates the `model` of the address book"},{"lineNumber":489,"author":{"gitID":"-"},"content":"application by adding `orderToAdd` to the list of orders of the `person` specified. Note that `orderToAdd` will"},{"lineNumber":490,"author":{"gitID":"-"},"content":"not be added if the `person` has not been found or a duplicate order has already been assigned to this `person`."},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":493,"author":{"gitID":"-"},"content":"----"},{"lineNumber":494,"author":{"gitID":"-"},"content":"public class AddOrderCommand extends UndoableCommand {"},{"lineNumber":495,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":496,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":497,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":498,"author":{"gitID":"-"},"content":"            model.addOrderToPerson(person, orderToAdd);"},{"lineNumber":499,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":500,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":501,"author":{"gitID":"-"},"content":"        } catch (DuplicateOrderException e) {"},{"lineNumber":502,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_ORDER_NOT_ADDED);"},{"lineNumber":503,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"        // ... display updated address book ..."},{"lineNumber":506,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":507,"author":{"gitID":"-"},"content":"}"},{"lineNumber":508,"author":{"gitID":"-"},"content":"----"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"The order added will be displayed in the address book."},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Editing Orders"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"The `EditOrderCommand` edits the `targetOrder` with the provided information which is specified by its `index`"},{"lineNumber":515,"author":{"gitID":"-"},"content":"in the last shown listing of orders. The order will be updated with the information stored in `editOrderDescriptor`"},{"lineNumber":516,"author":{"gitID":"-"},"content":"object."},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"A new class called `EditOrderDescriptor` is defined to create the `editOrderDescriptor` object that stores the new values"},{"lineNumber":519,"author":{"gitID":"-"},"content":"of the fields that need to be edited. Each non-empty field value will replace the corresponding field value of the `order`."},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"The constructors of this class are shown below:"},{"lineNumber":522,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":523,"author":{"gitID":"-"},"content":"----"},{"lineNumber":524,"author":{"gitID":"-"},"content":"public static class EditOrderDescriptor {"},{"lineNumber":525,"author":{"gitID":"-"},"content":"    public EditOrderDescriptor() {}"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":528,"author":{"gitID":"-"},"content":"     * Copy constructor."},{"lineNumber":529,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":530,"author":{"gitID":"-"},"content":"    public EditOrderDescriptor(EditOrderDescriptor toCopy) {"},{"lineNumber":531,"author":{"gitID":"-"},"content":"        setOrderInformation(toCopy.orderInformation);"},{"lineNumber":532,"author":{"gitID":"-"},"content":"        setOrderStatus(toCopy.orderStatus);"},{"lineNumber":533,"author":{"gitID":"-"},"content":"        setPrice(toCopy.price);"},{"lineNumber":534,"author":{"gitID":"-"},"content":"        setQuantity(toCopy.quantity);"},{"lineNumber":535,"author":{"gitID":"-"},"content":"        setDeliveryDate(toCopy.deliveryDate);"},{"lineNumber":536,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":537,"author":{"gitID":"-"},"content":"}"},{"lineNumber":538,"author":{"gitID":"-"},"content":"----"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"The `EditOrderDescriptor` uses Optionals to return `Optional.empty()` if any of the field values are null."},{"lineNumber":541,"author":{"gitID":"-"},"content":"If `Optional.empty()` is returned for any field, that particular field does not need to be edited."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"The `createEditedOrder()` method constructs the edited order. Finally, the `executeUndoableCommand()` method calls the `createEditedOrder()` method"},{"lineNumber":544,"author":{"gitID":"-"},"content":"for getting the edited order and updates the `model` of the application."},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":547,"author":{"gitID":"-"},"content":"----"},{"lineNumber":548,"author":{"gitID":"-"},"content":"public class EditOrderCommand extends UndoableCommand {"},{"lineNumber":549,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":550,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":551,"author":{"gitID":"-"},"content":"            model.updateOrder(orderToEdit, editedOrder);"},{"lineNumber":552,"author":{"gitID":"-"},"content":"        } catch (DuplicateOrderException doe) {"},{"lineNumber":553,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"},{"lineNumber":554,"author":{"gitID":"-"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":555,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target order cannot be missing\");"},{"lineNumber":556,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"        // ... display updated address book ..."},{"lineNumber":559,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":560,"author":{"gitID":"-"},"content":"}"},{"lineNumber":561,"author":{"gitID":"-"},"content":"----"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"The new order returned is now stored in the address book in the place of the old order."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Deleting Orders"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"The `DeleteOrderCommand` deletes the order specified by its `index` in the last shown listing of orders."},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"The code snippet below shows the `executeUndoableMethod()` of the `DeleteOrderCommand` class:"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":572,"author":{"gitID":"-"},"content":"----"},{"lineNumber":573,"author":{"gitID":"-"},"content":"public class DeleteOrderCommand extends UndoableCommand {"},{"lineNumber":574,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":575,"author":{"gitID":"-"},"content":"        requireNonNull(orderToDelete);"},{"lineNumber":576,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":577,"author":{"gitID":"-"},"content":"            model.deleteOrder(orderToDelete);"},{"lineNumber":578,"author":{"gitID":"-"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":579,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target order cannot be missing\");"},{"lineNumber":580,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"        // ... display updated address book ..."},{"lineNumber":583,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":584,"author":{"gitID":"-"},"content":"}"},{"lineNumber":585,"author":{"gitID":"-"},"content":"----"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"The above method deletes `orderToDelete` from the `model` of the address book and the resulting list of orders is displayed."},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Displaying Orders In GUI"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"SuxianAlicia"},"content":"A single `Order` is displayed using an `OrderListCard` (refer to Figure 21 below). The list of all orders in the address book is then displayed in a list"},{"lineNumber":592,"author":{"gitID":"-"},"content":"using the `OrderListPanel`."},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":".OrderListCard FXML Render"},{"lineNumber":595,"author":{"gitID":"-"},"content":"image::OrderListCardFXMLRender.png[width\u003d\"150\" align\u003d\"center\"]"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structures to support order operations"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Using the `PersonOrder` association class."},{"lineNumber":602,"author":{"gitID":"-"},"content":"** Pros: Duplicate orders (with the same information except the person associated with it) will just be stored as a"},{"lineNumber":603,"author":{"gitID":"-"},"content":"single order in memory. If multiple persons have the same order, there will be multiple references to one `Order` object."},{"lineNumber":604,"author":{"gitID":"-"},"content":"** Cons: Harder to implement as updating or deleting orders for one person must not affect orders of another person having"},{"lineNumber":605,"author":{"gitID":"-"},"content":"the same order."},{"lineNumber":606,"author":{"gitID":"-"},"content":"* **Alternative 2:** Store a `UniqueOrderList` of orders in each person."},{"lineNumber":607,"author":{"gitID":"-"},"content":"** Pros: Easier to implement."},{"lineNumber":608,"author":{"gitID":"-"},"content":"** Cons: Higher memory usage might affect the performance of the application."},{"lineNumber":609,"author":{"gitID":"-"},"content":"// end::orders[]"},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":612,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Data Encryption"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"The address book will decrypt and encrypt the XML data file every time there is an update that needs to be made to the data"},{"lineNumber":617,"author":{"gitID":"-"},"content":"being stored."},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"The secret key for encryption/decryption is generated using the `javax.crypto` library."},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"The actual encryption/decryption is done using the `org.apache.xml.security` library, specifically the `XMLCipher` class."},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":624,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Time of encryption of XML data file"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Encrypt/decrypt the whole file each time there is an update to what information needs to stored."},{"lineNumber":629,"author":{"gitID":"-"},"content":"** Pros: A new secret key can be used for each encryption/decryption, which would make it more secure against tampering or outsider access."},{"lineNumber":630,"author":{"gitID":"-"},"content":"** Cons: Encryption of data file for every minor change can reduce the performance of the application."},{"lineNumber":631,"author":{"gitID":"-"},"content":"* **Alternative 2:** Encrypt/decrypt the file only after a set time interval."},{"lineNumber":632,"author":{"gitID":"-"},"content":"** Pros: Performance will be improved."},{"lineNumber":633,"author":{"gitID":"-"},"content":"** Cons: Approach might be less secure. Implementation can also be harder."},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":640,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":641,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":646,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":647,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":648,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":651,"author":{"gitID":"SuxianAlicia"},"content":"// tag::calendarEntries[]"},{"lineNumber":652,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d Calendar and Event tracking"},{"lineNumber":653,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":654,"author":{"gitID":"SuxianAlicia"},"content":"Events refer to meetings, deadlines and order deliveries created by users in ContactSails."},{"lineNumber":655,"author":{"gitID":"SuxianAlicia"},"content":"Users can create, edit and delete events, and existing events are displayed in a calendar interface within the application."},{"lineNumber":656,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":658,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":659,"author":{"gitID":"SuxianAlicia"},"content":"`CalendarEvent` represents an event created by users."},{"lineNumber":660,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":661,"author":{"gitID":"SuxianAlicia"},"content":"A `CalendarEvent` is implemented in the following manner:"},{"lineNumber":662,"author":{"gitID":"SuxianAlicia"},"content":"[source,java]"},{"lineNumber":663,"author":{"gitID":"SuxianAlicia"},"content":"----"},{"lineNumber":664,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEvent {"},{"lineNumber":665,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":666,"author":{"gitID":"SuxianAlicia"},"content":"    private final String entryTitle;"},{"lineNumber":667,"author":{"gitID":"SuxianAlicia"},"content":"    private final StartDate startDate;"},{"lineNumber":668,"author":{"gitID":"SuxianAlicia"},"content":"    private final EndDate endDate;"},{"lineNumber":669,"author":{"gitID":"SuxianAlicia"},"content":"    private final StartTime startTime;"},{"lineNumber":670,"author":{"gitID":"SuxianAlicia"},"content":"    private final EndTime endTime;"},{"lineNumber":671,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"    // ... Order attribute getters and setters ..."},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"}"},{"lineNumber":676,"author":{"gitID":"-"},"content":"----"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"SuxianAlicia"},"content":"The following is a brief description of the attributes of `CalendarEvent`:"},{"lineNumber":679,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":680,"author":{"gitID":"SuxianAlicia"},"content":"* entryTitle: Represents title of event."},{"lineNumber":681,"author":{"gitID":"SuxianAlicia"},"content":"* startDate: Represents starting date of the event in DD-MM-YYYY format."},{"lineNumber":682,"author":{"gitID":"SuxianAlicia"},"content":"* endDate: Represents ending date of the event in DD-MM-YYYY format."},{"lineNumber":683,"author":{"gitID":"SuxianAlicia"},"content":"* startTime: Represents starting time of the event in HH:MM format (24-Hour format)."},{"lineNumber":684,"author":{"gitID":"SuxianAlicia"},"content":"* endTime: Represents ending time of the event in HH:MM format (24-Hour format)."},{"lineNumber":685,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":686,"author":{"gitID":"SuxianAlicia"},"content":"Events management is facilitated by `ModelManager`, which resides inside `Model`."},{"lineNumber":687,"author":{"gitID":"SuxianAlicia"},"content":"It is supported by `UserEventsManager` residing inside `UserEvents`, which supports the adding, removing and editing of `CalendarEvent`(e.g. `addEvent`, `deleteEvent`)."},{"lineNumber":688,"author":{"gitID":"SuxianAlicia"},"content":"Orders of a person will also appear as `CalendarEvent` based on the `DeliveryDate` attribute of the `Order`."},{"lineNumber":689,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":690,"author":{"gitID":"SuxianAlicia"},"content":"The following diagram shows class diagram of `Model` Component related to `CalendarEvent`."},{"lineNumber":691,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":692,"author":{"gitID":"SuxianAlicia"},"content":".`Model` Component showing classes related to events management"},{"lineNumber":693,"author":{"gitID":"SuxianAlicia"},"content":"image::UserEventClassDiagram.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":694,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":695,"author":{"gitID":"SuxianAlicia"},"content":"In the Figure 22, `ModelManager` creates an instance of `UserEvents` interface, which provides the `UserEvents` API for `ModelManager` to implement."},{"lineNumber":696,"author":{"gitID":"SuxianAlicia"},"content":"`UserEventsManager` implements methods used by users to add, edit or delete `CalendarEvent`, which contains information of an event. `CalendarEvent` is stored in the `UniqueEventList`. +"},{"lineNumber":697,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":698,"author":{"gitID":"SuxianAlicia"},"content":"`Logic` Component contains the commands required to manage user\u0027s events (e.g. `AddEventCommand`, `deleteEventCommand`)."},{"lineNumber":699,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":700,"author":{"gitID":"SuxianAlicia"},"content":"The sequence diagram below shows how add event operation works:"},{"lineNumber":701,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":702,"author":{"gitID":"SuxianAlicia"},"content":".Sequence Diagram for adding of an event into ContactSails"},{"lineNumber":703,"author":{"gitID":"SuxianAlicia"},"content":"image::AddEventSD.png[width\u003d\"800\" align\u003d\"center]"},{"lineNumber":704,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":705,"author":{"gitID":"SuxianAlicia"},"content":"In Figure 23, when a user enters the command to add an event, `AddEventCommand` will call `addEvent()` in `ModelManager`."},{"lineNumber":706,"author":{"gitID":"SuxianAlicia"},"content":"`ModelManager` in turn calls `addEvent()` in `UserEventsManager`, which creates a new `CalendarEvent` containing the information given by user."},{"lineNumber":707,"author":{"gitID":"SuxianAlicia"},"content":"`UserEventsManager` will then add `CalendarEvent` to `UniqueEventList`. If addition of event is a success, control is eventually returned from `UserEventsManager` to `AddEventCommand`."},{"lineNumber":708,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":709,"author":{"gitID":"SuxianAlicia"},"content":"Events added, removed or modified by users will have their intended results displayed by the `CalendarUi` residing inside `Ui` Component."},{"lineNumber":710,"author":{"gitID":"SuxianAlicia"},"content":"The `CalendarUi` can display dates in a week, month and year format, depending on user inputs. +"},{"lineNumber":711,"author":{"gitID":"SuxianAlicia"},"content":"Storing of `CalendarEvent` data is managed by `CalendarStorage` within `Storage` Component, converting `CalendarEvent` to `XmlAdaptedEvent` to store in a .xml file."},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of feature as a whole"},{"lineNumber":716,"author":{"gitID":"SuxianAlicia"},"content":"* **Alternative 1 (current choice):** Creates a localised version of Calendar where all data related to it is stored locally."},{"lineNumber":717,"author":{"gitID":"SuxianAlicia"},"content":"** Pros: Does not require constant Internet access to manage data of Calendar."},{"lineNumber":718,"author":{"gitID":"SuxianAlicia"},"content":"** Cons: Disallows quick synchronisation between this Calendar and other Calendar applications, such as Google Calendar, that users might use. There are much more areas in the code that potentially contains hidden bugs."},{"lineNumber":719,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":720,"author":{"gitID":"SuxianAlicia"},"content":"* **Alternative 2:** Uses a third-party library such as Google Calendar API to manage."},{"lineNumber":721,"author":{"gitID":"SuxianAlicia"},"content":"** Pros: Does not require substantial maintenance of related code as less code is required to implement the feature. Some third-party libraries allows users to access some existing calendar applications, saving time required to transfer their calendar events."},{"lineNumber":722,"author":{"gitID":"SuxianAlicia"},"content":"** Cons: Some third-party libraries use REST APIs, which would require users to have Internet access to edit their Calendars. Some libraries will periodically prompt for authentication of user to continue to use their API, which can be a problematic if authentication process is changed in the future."},{"lineNumber":723,"author":{"gitID":"SuxianAlicia"},"content":"// end::calendarEntries[]"},{"lineNumber":724,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":726,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":735,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":740,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":753,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":754,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":755,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":758,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\" align\u003d\"center\"]"},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":761,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":768,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":773,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":780,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":793,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":794,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":795,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":796,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":797,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":798,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":799,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":800,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":801,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":805,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":808,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"SuxianAlicia"},"content":"This section covers the build automation tools, coverage reporting tools and other tools used in ContactSails."},{"lineNumber":813,"author":{"gitID":"SuxianAlicia"},"content":"It also covers the steps required to create new releases and manage dependencies."},{"lineNumber":814,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":828,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":835,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":836,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":837,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"SuxianAlicia"},"content":"A project often depends on third-party libraries. For example, ContactSails depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives: +"},{"lineNumber":842,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":843,"author":{"gitID":"SuxianAlicia"},"content":"* Include those libraries in the repo. (this bloats the repo size) +"},{"lineNumber":844,"author":{"gitID":"SuxianAlicia"},"content":"* Require developers to download those libraries manually. (this creates extra work for developers)"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":847,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":848,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"SuxianAlicia"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time."},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":857,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":864,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":865,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":870,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":871,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":872,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":877,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":882,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":887,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":890,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":895,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":896,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":901,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":902,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":903,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":906,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":911,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":918,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":923,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":930,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":935,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":936,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":939,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":950,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":955,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":958,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":965,"author":{"gitID":"-"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":969,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":984,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"SuxianAlicia"},"content":"This section states the intended users of ContactSails, the value ContactSails should bring to them and"},{"lineNumber":987,"author":{"gitID":"SuxianAlicia"},"content":"contributions of every developer in the team in regards to developing ContactSails to meet the proposed value."},{"lineNumber":988,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":989,"author":{"gitID":"SuxianAlicia"},"content":"*Target user profile*: ContactSails is meant for salespersons from small companies or home-grown businesses with customers from various social media platforms."},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"A typical user from our target user profile:"},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"* promotes and sells products or services through social media."},{"lineNumber":994,"author":{"gitID":"-"},"content":"* works in a small company or runs his/her own business."},{"lineNumber":995,"author":{"gitID":"-"},"content":"* has limited applications to support their marketing strategies."},{"lineNumber":996,"author":{"gitID":"-"},"content":"* has a need to manage a large number of contacts."},{"lineNumber":997,"author":{"gitID":"-"},"content":"* has many contacts spread across many social media platforms such as Facebook, Twitter, Instagram, etc."},{"lineNumber":998,"author":{"gitID":"-"},"content":"* has many contacts with volatile details."},{"lineNumber":999,"author":{"gitID":"-"},"content":"* has many contacts that can be grouped together based on type of products purchased by contacts."},{"lineNumber":1000,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types."},{"lineNumber":1001,"author":{"gitID":"-"},"content":"* can type fast."},{"lineNumber":1002,"author":{"gitID":"-"},"content":"* prefers typing over mouse input."},{"lineNumber":1003,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps."},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"SuxianAlicia"},"content":"*Value proposition*: ContactSails serve as the consolidation platform for all contacts from different platforms for"},{"lineNumber":1006,"author":{"gitID":"SuxianAlicia"},"content":" users to communicate with customers more easily, analyse and apply their marketing strategies more effectively and efficiently."},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"SuxianAlicia"},"content":"*Feature Contribution:*"},{"lineNumber":1009,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1010,"author":{"gitID":"SuxianAlicia"},"content":"1. *Aadyaa Maddi*"},{"lineNumber":1011,"author":{"gitID":"SuxianAlicia"},"content":"* *Major Feature*: Ability to manage customer orders."},{"lineNumber":1012,"author":{"gitID":"-"},"content":"** Orders can be added, edited, and deleted."},{"lineNumber":1013,"author":{"gitID":"-"},"content":"** A list of current orders can be viewed."},{"lineNumber":1014,"author":{"gitID":"-"},"content":"** Orders can also be marked as ongoing or fulfilled."},{"lineNumber":1015,"author":{"gitID":"SuxianAlicia"},"content":"* *Minor Feature*: Encryption of application data."},{"lineNumber":1016,"author":{"gitID":"SuxianAlicia"},"content":"* *How the above features fit into the product scope:*"},{"lineNumber":1017,"author":{"gitID":"SuxianAlicia"},"content":"** *Major Feature*: For salespersons, this feature will be essential to have as they would want to keep track of what their customers are ordering and what they have ordered already."},{"lineNumber":1018,"author":{"gitID":"-"},"content":"If customers have any issues regarding their orders, salespersons will be able to view all the relevant information in a single place."},{"lineNumber":1019,"author":{"gitID":"SuxianAlicia"},"content":"** *Minor Feature*: Since ContactSails has a lot of personal details of customers, the owner of the address book would want to encrypt the application data file to prevent outside access to sensitive information."},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"SuxianAlicia"},"content":"2. *Alicia Ho Sor Sian*"},{"lineNumber":1022,"author":{"gitID":"SuxianAlicia"},"content":"* *Major Feature*: Ability to manage events which are displayed in a calendar."},{"lineNumber":1023,"author":{"gitID":"SuxianAlicia"},"content":"** Allows users to add, edit or delete events, which can represent meetings or deadlines including order deliveries."},{"lineNumber":1024,"author":{"gitID":"SuxianAlicia"},"content":"** Once set, the event will be displayed in ContactSails\u0027 calendar, which shows all incoming events for the current month and after."},{"lineNumber":1025,"author":{"gitID":"SuxianAlicia"},"content":"** Orders set by users will automatically appear in the calendar without the user having to create an event for it."},{"lineNumber":1026,"author":{"gitID":"SuxianAlicia"},"content":"* *Minor Feature*: Classifying tags into two categories, groups and preferences."},{"lineNumber":1027,"author":{"gitID":"SuxianAlicia"},"content":"** Create 2 distinct categories of tags representing groups that a contact belongs to and preferences that a contact has."},{"lineNumber":1028,"author":{"gitID":"SuxianAlicia"},"content":"** Each category is displayed at a separate location in the Ui."},{"lineNumber":1029,"author":{"gitID":"SuxianAlicia"},"content":"* *How the above features fit into the product scope:*"},{"lineNumber":1030,"author":{"gitID":"SuxianAlicia"},"content":"** *Major Feature*: The calendar can remind salespersons any impending meetings or deadlines especially order deliveries to save time in planning their next course of action carefully."},{"lineNumber":1031,"author":{"gitID":"SuxianAlicia"},"content":"It provides a quicker way to manage events compared to using other calendar applications that mainly relies on GUI input."},{"lineNumber":1032,"author":{"gitID":"SuxianAlicia"},"content":"** *Minor Feature*: Groups can be used to indicate which social media platform does the salesperson use to communicate with a particular contact, while preferences indicates the products and services a contact usually purchases."},{"lineNumber":1033,"author":{"gitID":"SuxianAlicia"},"content":"Using separate labels for groups and preferences placed at separate locations in the Ui display gives a more organised display of a contact\u0027s information, allowing salespersons to derive important information of their contacts quickly."},{"lineNumber":1034,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1035,"author":{"gitID":"SuxianAlicia"},"content":"3. *Ang Jing Zhe*"},{"lineNumber":1036,"author":{"gitID":"SuxianAlicia"},"content":"* *Major Feature*: Addition of person panel to the user interface."},{"lineNumber":1037,"author":{"gitID":"SuxianAlicia"},"content":"** It allows users to see their contacts\u0027 information in a neater and more detailed manner."},{"lineNumber":1038,"author":{"gitID":"SuxianAlicia"},"content":"** An alternative consideration is to vary the amount of information put up at the panel."},{"lineNumber":1039,"author":{"gitID":"SuxianAlicia"},"content":"* *Minor Feature*: Adding colours to tags."},{"lineNumber":1040,"author":{"gitID":"SuxianAlicia"},"content":"** Putting colours to tags so that it looks more user friendly."},{"lineNumber":1041,"author":{"gitID":"SuxianAlicia"},"content":"* *How the above features fit into the product scope:*"},{"lineNumber":1042,"author":{"gitID":"SuxianAlicia"},"content":"** *Major Feature*: Users can see their contacts\u0027 information more clearly and neatly."},{"lineNumber":1043,"author":{"gitID":"SuxianAlicia"},"content":"** *Minor Feature*: Colours are more eye-catching and help users to identify different tags."},{"lineNumber":1044,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1045,"author":{"gitID":"SuxianAlicia"},"content":"4. *Kevin Yeong Yu Heng*"},{"lineNumber":1046,"author":{"gitID":"SuxianAlicia"},"content":"* *Major Feature*: Ability to import and export contacts from and to other formats."},{"lineNumber":1047,"author":{"gitID":"-"},"content":"** Allows user to export contacts to a local contact files and import contacts from local contact files."},{"lineNumber":1048,"author":{"gitID":"SuxianAlicia"},"content":"** The exported file can integrate in the users\u0027 workflow which might include external manipulation of the data such as printing a hardcopy of the contact list or using it in an external spreadsheet software."},{"lineNumber":1049,"author":{"gitID":"SuxianAlicia"},"content":"* *Minor Feature*: Ability to generate and display a list of relevant fields of multiple contacts."},{"lineNumber":1050,"author":{"gitID":"-"},"content":"** Ability to only show certain fields associated to contacts selected by filters."},{"lineNumber":1051,"author":{"gitID":"-"},"content":"** Displays the information in a list rather and excludes other information which is not needed by the user."},{"lineNumber":1052,"author":{"gitID":"SuxianAlicia"},"content":"* *How the above features fit into the product scope:*"},{"lineNumber":1053,"author":{"gitID":"SuxianAlicia"},"content":"** *Major Feature*: The export and import facility enables users to use the data from ContactSails solely as an addressbook, but gives them the option to more easily integrate it to their current application processes which might allow them to be more efficient in their work."},{"lineNumber":1054,"author":{"gitID":"SuxianAlicia"},"content":"** *Minor Feature*: The more targeted listing feature allows users fit more relevant data into their screen which helps them to focus on the data they need while minimising other non essential information."},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"SuxianAlicia"},"content":"The following table shows all user stories collected thus far."},{"lineNumber":1061,"author":{"gitID":"SuxianAlicia"},"content":"Priority indicates importance of implementing the user story."},{"lineNumber":1062,"author":{"gitID":"SuxianAlicia"},"content":"Release indicates the version of ContactSails that has already implemented the user story."},{"lineNumber":1063,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"20%,\u003c20%,\u003c20%,\u003c20%,\u003c20%\",options\u003d\"header\",]"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can... |Release"},{"lineNumber":1069,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App |1.0"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |add new entries |1.0"},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need |1.0"},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list |1.0"},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"|`* * *` |user |keep an offline back up |download and access a local copy of the application data |2.0"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"|`* * *` |lazy user |use short-forms for commands |execute commands more quickly |1.0"},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"SuxianAlicia"},"content":"|`* * *` |task-oriented user |implement meetings or deadlines for contacts |keep track of tasks to do for the contacts |1.5"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"|`* * *` |organized user |delete multiple contacts at a time |remove the contacts I no longer need quickly |2.0"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"SuxianAlicia"},"content":"|`* * *` |user with many contacts |remove a specific tag |all contacts with that tag will have the tag removed instead of removing the tag from from every one of them |1.2"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"SuxianAlicia"},"content":"|`* * *` |user with many contacts |find contacts based on the group they are in |see all contacts belonging to a certain group |1.2"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"|`* * *` |user with many contacts |sort the contacts by last contacted time |find contacts I corresponded with recently |2.0"},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"|`* * *` |salesperson |view a list of current orders| keep track of which customers I might need to contact at that point in time |2.0"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"|`* * *` |salesperson |see a list of current customers |view necessary information about current customers more quickly |2.0"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"|`* * *` |salesperson |send promotions to a group of contacts |ensure my differentiated marketing strategies work |2.0"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"SuxianAlicia"},"content":"|`* * *` |salesperson |add a list of preferences to contact |know what my customers are interested in |1.2"},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"SuxianAlicia"},"content":"|`* * *` |salesperson |edit contact’s preferences |update my customers\u0027 changing interests |1.2"},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"|`* * *` |salesperson |see the top preference among all contacts |know what products I should focus on |2.0"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"|`* * *` |salesperson |edit specific details of contacts |update my customers\u0027 information more conveniently |2.0"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"|`* * *` |salesperson |see top contacts |divide my attention among my customers as needed |2.0"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"|`* *` |salesperson |export contacts |share my customers\u0027 public details with concerned businesses |2.0"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident |1.0"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"SuxianAlicia"},"content":"|`* *` |user who prefers visual imagery |use a calendar to know if there are any tasks or deadlines |clearer view on how to prioritise my work |1.5"},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"|`* *` |user |access and change my preferred Email Service provider within the ContactSails |look at my emails and my contacts at the same time |2.0"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"|`* *` |user with many contacts |synchronise the ContactSails with Google Contacts |save time importing contacts from Google Contacts |2.0"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"|`* *` |user who is fast at typing |copy a contact\u0027s email to the clipboard without using a mouse |save time in emailing a contact |2.0"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"SuxianAlicia"},"content":"|`* *` |lazy user |add contact details in any order |don\u0027t need to remember the order to enter the details |1.5"},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"|`* *` |lazy user |auto-completion of commands |execute commands quickly |1.1"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"|`* *` |user |add notes to a contact |have a clearer description about the contact |2.0"},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"SuxianAlicia"},"content":"|`* *` |user |group contacts using tags |categorize my customers as needed |1.5"},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"SuxianAlicia"},"content":"|`* *` |user |change the theme and font of the application |personalize my AddressBook |1.5"},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"|`* *` |salesperson |see contact statistics |more informed about my customer demographic |2.0"},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"SuxianAlicia"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily |2.0"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"|`*` |user |export contacts in different formats |share contacts to other software |2.0"},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"|`*` |user who likes personalising contacts |add profile photos to each contact |recognise the customer easily based on their photo |2.0"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"|`*` |user |see a list of tags |don\u0027t need to remember all existing tags |2.0"},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"SuxianAlicia"},"content":"The below use cases indicate how ContactSails and its users should interact in each use case."},{"lineNumber":1145,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1146,"author":{"gitID":"SuxianAlicia"},"content":"(For all use cases below, the *System* is the `ContactSails` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"SuxianAlicia"},"content":"1.  User requests to list persons."},{"lineNumber":1154,"author":{"gitID":"SuxianAlicia"},"content":"2.  ContactSails shows a list of persons."},{"lineNumber":1155,"author":{"gitID":"SuxianAlicia"},"content":"3.  User requests to delete a specific person in the list."},{"lineNumber":1156,"author":{"gitID":"SuxianAlicia"},"content":"4.  ContactSails deletes the person."},{"lineNumber":1157,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1164,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1168,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1169,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"** 3a1. ContactSails shows an error message."},{"lineNumber":1172,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add person"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"SuxianAlicia"},"content":"1.\tUser requests to add specific person."},{"lineNumber":1181,"author":{"gitID":"SuxianAlicia"},"content":"2.\tContactSails adds the person."},{"lineNumber":1182,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1188,"author":{"gitID":"SuxianAlicia"},"content":"* 1a. User enters invalid format for the Add feature."},{"lineNumber":1189,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1191,"author":{"gitID":"SuxianAlicia"},"content":"** 1a1. ContactSails shows an error message."},{"lineNumber":1192,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1193,"author":{"gitID":"SuxianAlicia"},"content":"Use case ends."},{"lineNumber":1194,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1195,"author":{"gitID":"SuxianAlicia"},"content":"[none]"},{"lineNumber":1196,"author":{"gitID":"SuxianAlicia"},"content":"* 1b. User enters exact details of person existing in ContactSails."},{"lineNumber":1197,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1198,"author":{"gitID":"SuxianAlicia"},"content":"[none]"},{"lineNumber":1199,"author":{"gitID":"SuxianAlicia"},"content":"** 1b1. ContactSails shows an error message."},{"lineNumber":1200,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: List current customers"},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"SuxianAlicia"},"content":"1.  User requests for current customers."},{"lineNumber":1209,"author":{"gitID":"SuxianAlicia"},"content":"2.  ContactSails finds and displays a list of the list of customers whose orders are currently being fulfilled by user."},{"lineNumber":1210,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1211,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1212,"author":{"gitID":"-"},"content":""},{"lineNumber":1213,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1216,"author":{"gitID":"SuxianAlicia"},"content":"* 2a. The list is empty as there are no current orders."},{"lineNumber":1217,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1219,"author":{"gitID":"SuxianAlicia"},"content":"** 2a1. ContactSails shows an error message."},{"lineNumber":1220,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit specific details of contacts"},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"SuxianAlicia"},"content":"1.  User selects contact to edit from the current list of contacts."},{"lineNumber":1229,"author":{"gitID":"SuxianAlicia"},"content":"2.  ContactSails shows the selected contact."},{"lineNumber":1230,"author":{"gitID":"SuxianAlicia"},"content":"3.  User requests to edit a certain field of the contact."},{"lineNumber":1231,"author":{"gitID":"SuxianAlicia"},"content":"4.  ContactSails updates the contact details and shows contact details after the changes made."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1238,"author":{"gitID":"SuxianAlicia"},"content":"* 1a. User selects invalid contact."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1241,"author":{"gitID":"SuxianAlicia"},"content":"** 1a1. ContactSails shows an error message."},{"lineNumber":1242,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1246,"author":{"gitID":"SuxianAlicia"},"content":"* 2a. User selects invalid field to edit."},{"lineNumber":1247,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1249,"author":{"gitID":"SuxianAlicia"},"content":"** 2a1. ContactSails shows an error message."},{"lineNumber":1250,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add notes to contacts"},{"lineNumber":1255,"author":{"gitID":"-"},"content":""},{"lineNumber":1256,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"SuxianAlicia"},"content":"1. User requests to list persons."},{"lineNumber":1259,"author":{"gitID":"SuxianAlicia"},"content":"2. ContactSails shows a list of persons."},{"lineNumber":1260,"author":{"gitID":"SuxianAlicia"},"content":"3. User requests to add notes to specific person in the list."},{"lineNumber":1261,"author":{"gitID":"SuxianAlicia"},"content":"4. ContactSails adds notes to the specified person."},{"lineNumber":1262,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1263,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1266,"author":{"gitID":"-"},"content":""},{"lineNumber":1267,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1268,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1269,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1270,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1271,"author":{"gitID":"-"},"content":""},{"lineNumber":1272,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1273,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1274,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1275,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1276,"author":{"gitID":"-"},"content":"** 3a1. ContactSails shows an error message."},{"lineNumber":1277,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add contact specific tasks"},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"SuxianAlicia"},"content":"1.  User selects contact to add a task for and enters task description and deadline."},{"lineNumber":1286,"author":{"gitID":"SuxianAlicia"},"content":"2.  ContactSails adds task to specified contact and shows a success message."},{"lineNumber":1287,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1293,"author":{"gitID":"SuxianAlicia"},"content":"* 1a. User selects invalid contact."},{"lineNumber":1294,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1295,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1296,"author":{"gitID":"SuxianAlicia"},"content":"** 1a1. ContactSails shows an error message."},{"lineNumber":1297,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1298,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1301,"author":{"gitID":"SuxianAlicia"},"content":"* 1b. User enters invalid task details."},{"lineNumber":1302,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1303,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1304,"author":{"gitID":"SuxianAlicia"},"content":"** 1b1. ContactSails shows en error message."},{"lineNumber":1305,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1306,"author":{"gitID":"SuxianAlicia"},"content":"Use case ends."},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Find persons by name"},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"SuxianAlicia"},"content":"1.\tUser requests to find persons with specific names."},{"lineNumber":1314,"author":{"gitID":"SuxianAlicia"},"content":"2.\tContactSails shows list of persons with specified names."},{"lineNumber":1315,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1321,"author":{"gitID":"SuxianAlicia"},"content":"* 1a. User does not specify any name."},{"lineNumber":1322,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1324,"author":{"gitID":"SuxianAlicia"},"content":"** 1a1. ContactSails shows an error message."},{"lineNumber":1325,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1326,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1329,"author":{"gitID":"SuxianAlicia"},"content":"* 1b. ContactSails does not have any names specified by user."},{"lineNumber":1330,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1331,"author":{"gitID":"SuxianAlicia"},"content":"** 1b1. ContactSails shows empty list."},{"lineNumber":1332,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1336,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d Use case: Find persons by groups"},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1339,"author":{"gitID":"-"},"content":""},{"lineNumber":1340,"author":{"gitID":"SuxianAlicia"},"content":"1.\tUser requests to find persons with specific groups."},{"lineNumber":1341,"author":{"gitID":"SuxianAlicia"},"content":"2.\tContactSails shows list of persons with specified groups."},{"lineNumber":1342,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1343,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1348,"author":{"gitID":"SuxianAlicia"},"content":"* 1a. User does not specify any group."},{"lineNumber":1349,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1350,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1351,"author":{"gitID":"SuxianAlicia"},"content":"** 1a1. ContactSails shows an error message."},{"lineNumber":1352,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1353,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1356,"author":{"gitID":"SuxianAlicia"},"content":"* 1b. ContactSails does not have any groups specified by user."},{"lineNumber":1357,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1358,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1359,"author":{"gitID":"SuxianAlicia"},"content":"** 1b1. ContactSails shows empty list."},{"lineNumber":1360,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1364,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d Use case: Find persons by preferences"},{"lineNumber":1365,"author":{"gitID":"-"},"content":""},{"lineNumber":1366,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"SuxianAlicia"},"content":"1.\tUser requests to find persons with specific preferences."},{"lineNumber":1369,"author":{"gitID":"SuxianAlicia"},"content":"2.\tContactSails shows list of persons with specified preferences."},{"lineNumber":1370,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1371,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1374,"author":{"gitID":"-"},"content":""},{"lineNumber":1375,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1376,"author":{"gitID":"SuxianAlicia"},"content":"* 1a. User does not specify any preference."},{"lineNumber":1377,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1378,"author":{"gitID":"SuxianAlicia"},"content":"[none]"},{"lineNumber":1379,"author":{"gitID":"SuxianAlicia"},"content":"** 1a1. ContactSails shows an error message."},{"lineNumber":1380,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1381,"author":{"gitID":"SuxianAlicia"},"content":"Use case ends."},{"lineNumber":1382,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1383,"author":{"gitID":"SuxianAlicia"},"content":"[none]"},{"lineNumber":1384,"author":{"gitID":"SuxianAlicia"},"content":"* 1b. ContactSails does not have any preference specified by user."},{"lineNumber":1385,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1386,"author":{"gitID":"SuxianAlicia"},"content":"[none]"},{"lineNumber":1387,"author":{"gitID":"SuxianAlicia"},"content":"** 1b1. ContactSails shows empty list."},{"lineNumber":1388,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1389,"author":{"gitID":"SuxianAlicia"},"content":"Use case ends."},{"lineNumber":1390,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1391,"author":{"gitID":"SuxianAlicia"},"content":"[discrete]"},{"lineNumber":1392,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d Use case: Remove specific group"},{"lineNumber":1393,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1394,"author":{"gitID":"SuxianAlicia"},"content":"*MSS*"},{"lineNumber":1395,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1396,"author":{"gitID":"SuxianAlicia"},"content":"1.  User requests to remove a group and enters group they want to remove."},{"lineNumber":1397,"author":{"gitID":"SuxianAlicia"},"content":"2.  ContactSails removes the specific group from all contacts who have this group assigned to them."},{"lineNumber":1398,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1399,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1400,"author":{"gitID":"-"},"content":""},{"lineNumber":1401,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1404,"author":{"gitID":"SuxianAlicia"},"content":"* 2a. There are no groups."},{"lineNumber":1405,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1406,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1407,"author":{"gitID":"SuxianAlicia"},"content":"** 2a1. ContactSails shows an error message."},{"lineNumber":1408,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1409,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1412,"author":{"gitID":"SuxianAlicia"},"content":"* 2a. User enters invalid group."},{"lineNumber":1413,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1414,"author":{"gitID":"SuxianAlicia"},"content":"[none]"},{"lineNumber":1415,"author":{"gitID":"SuxianAlicia"},"content":"** 2a1. ContactSails shows an error message."},{"lineNumber":1416,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1417,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1418,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1419,"author":{"gitID":"SuxianAlicia"},"content":"[discrete]"},{"lineNumber":1420,"author":{"gitID":"SuxianAlicia"},"content":"\u003d\u003d\u003d Use case: Remove specific preference"},{"lineNumber":1421,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1422,"author":{"gitID":"SuxianAlicia"},"content":"*MSS*"},{"lineNumber":1423,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1424,"author":{"gitID":"SuxianAlicia"},"content":"1.  User requests to remove a preference enters the preference they want to remove."},{"lineNumber":1425,"author":{"gitID":"SuxianAlicia"},"content":"2.  ContactSails removes the specific preference from all contacts who have this group assigned to them."},{"lineNumber":1426,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1427,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1432,"author":{"gitID":"SuxianAlicia"},"content":"* 2a. There are no preferences."},{"lineNumber":1433,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1434,"author":{"gitID":"SuxianAlicia"},"content":"[none]"},{"lineNumber":1435,"author":{"gitID":"SuxianAlicia"},"content":"** 2a1. ContactSails shows an error message."},{"lineNumber":1436,"author":{"gitID":"SuxianAlicia"},"content":"+"},{"lineNumber":1437,"author":{"gitID":"SuxianAlicia"},"content":"Use case ends."},{"lineNumber":1438,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1439,"author":{"gitID":"SuxianAlicia"},"content":"[none]"},{"lineNumber":1440,"author":{"gitID":"SuxianAlicia"},"content":"* 2a. User enters invalid preference."},{"lineNumber":1441,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1442,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1443,"author":{"gitID":"SuxianAlicia"},"content":"** 2a1. ContactSails shows an error message."},{"lineNumber":1444,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1445,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1448,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add order"},{"lineNumber":1449,"author":{"gitID":"-"},"content":""},{"lineNumber":1450,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1451,"author":{"gitID":"-"},"content":""},{"lineNumber":1452,"author":{"gitID":"SuxianAlicia"},"content":"1.\tUser requests to add order to a specific person."},{"lineNumber":1453,"author":{"gitID":"SuxianAlicia"},"content":"2.\tContactSails adds the order."},{"lineNumber":1454,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1455,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1456,"author":{"gitID":"-"},"content":""},{"lineNumber":1457,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1458,"author":{"gitID":"-"},"content":""},{"lineNumber":1459,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1460,"author":{"gitID":"SuxianAlicia"},"content":"* 1a. User enters invalid format for the AddOrder command."},{"lineNumber":1461,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1462,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1463,"author":{"gitID":"SuxianAlicia"},"content":"** 1a1. ContactSails shows an error message."},{"lineNumber":1464,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1465,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1466,"author":{"gitID":"-"},"content":""},{"lineNumber":1467,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1468,"author":{"gitID":"SuxianAlicia"},"content":"* 1a. User adds a duplicate order."},{"lineNumber":1469,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1470,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1471,"author":{"gitID":"SuxianAlicia"},"content":"** 1a1. ContactSails shows an error message."},{"lineNumber":1472,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1473,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1474,"author":{"gitID":"-"},"content":""},{"lineNumber":1475,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1476,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete order"},{"lineNumber":1477,"author":{"gitID":"-"},"content":""},{"lineNumber":1478,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1479,"author":{"gitID":"-"},"content":""},{"lineNumber":1480,"author":{"gitID":"SuxianAlicia"},"content":"1.  User requests to list orders."},{"lineNumber":1481,"author":{"gitID":"SuxianAlicia"},"content":"2.  ContactSails shows a list of orders."},{"lineNumber":1482,"author":{"gitID":"SuxianAlicia"},"content":"3.  User requests to delete a specific order in the list."},{"lineNumber":1483,"author":{"gitID":"SuxianAlicia"},"content":"4.  ContactSails deletes the order from the application."},{"lineNumber":1484,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1485,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1488,"author":{"gitID":"-"},"content":""},{"lineNumber":1489,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1490,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1491,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1492,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1495,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1496,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1497,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1498,"author":{"gitID":"-"},"content":"** 3a1. ContactSails shows an error message."},{"lineNumber":1499,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1500,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1501,"author":{"gitID":"-"},"content":""},{"lineNumber":1502,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1503,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Export contacts"},{"lineNumber":1504,"author":{"gitID":"-"},"content":""},{"lineNumber":1505,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1506,"author":{"gitID":"-"},"content":""},{"lineNumber":1507,"author":{"gitID":"SuxianAlicia"},"content":"1.  User selects contacts to export from the current list of contacts."},{"lineNumber":1508,"author":{"gitID":"SuxianAlicia"},"content":"2.  ContactSails stores the selection and processes the contacts to export."},{"lineNumber":1509,"author":{"gitID":"SuxianAlicia"},"content":"3.  User requests to create a file containing the selected contacts."},{"lineNumber":1510,"author":{"gitID":"SuxianAlicia"},"content":"4.  ContactSails creates the file and prompts for save location of file."},{"lineNumber":1511,"author":{"gitID":"SuxianAlicia"},"content":"5.  User specifies location of file to be saved."},{"lineNumber":1512,"author":{"gitID":"SuxianAlicia"},"content":"6.  ContactSails saves the file and shows a success message."},{"lineNumber":1513,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1514,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1515,"author":{"gitID":"-"},"content":""},{"lineNumber":1516,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1517,"author":{"gitID":"-"},"content":""},{"lineNumber":1518,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1519,"author":{"gitID":"SuxianAlicia"},"content":"* 1a. User does not select any contact."},{"lineNumber":1520,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1521,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1522,"author":{"gitID":"SuxianAlicia"},"content":"** 1a1. ContactSails shows an error message."},{"lineNumber":1523,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1524,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1525,"author":{"gitID":"-"},"content":""},{"lineNumber":1526,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1527,"author":{"gitID":"SuxianAlicia"},"content":"* 1b. User makes an invalid selection."},{"lineNumber":1528,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1529,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1530,"author":{"gitID":"SuxianAlicia"},"content":"** 1b1. ContactSails shows an error message."},{"lineNumber":1531,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1532,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1533,"author":{"gitID":"-"},"content":""},{"lineNumber":1534,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1535,"author":{"gitID":"SuxianAlicia"},"content":"* 4a. ContactSails is unable to create the file with selected contacts."},{"lineNumber":1536,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1537,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1538,"author":{"gitID":"SuxianAlicia"},"content":"** 4a1. ContactSails shows an error message."},{"lineNumber":1539,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1540,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1541,"author":{"gitID":"-"},"content":""},{"lineNumber":1542,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1543,"author":{"gitID":"SuxianAlicia"},"content":"* 6a. ContactSails is unable to save the file in the specified location."},{"lineNumber":1544,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1545,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1546,"author":{"gitID":"SuxianAlicia"},"content":"** 6a1. ContactSails shows an error message."},{"lineNumber":1547,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1548,"author":{"gitID":"-"},"content":"Use case resumes at step 5."},{"lineNumber":1549,"author":{"gitID":"-"},"content":""},{"lineNumber":1550,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1551,"author":{"gitID":"SuxianAlicia"},"content":"* *a. User cancels the operation at any time."},{"lineNumber":1552,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1553,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1554,"author":{"gitID":"-"},"content":"** *a1. ContactSails shows an error message."},{"lineNumber":1555,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1556,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1557,"author":{"gitID":"-"},"content":""},{"lineNumber":1558,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1559,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Store a local backup of contacts"},{"lineNumber":1560,"author":{"gitID":"-"},"content":""},{"lineNumber":1561,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1562,"author":{"gitID":"-"},"content":""},{"lineNumber":1563,"author":{"gitID":"SuxianAlicia"},"content":"1.  User requests to create a backup file containing all the data stored in the application."},{"lineNumber":1564,"author":{"gitID":"SuxianAlicia"},"content":"2.  ContactSails prompts user to indicate save location."},{"lineNumber":1565,"author":{"gitID":"SuxianAlicia"},"content":"3.  User specifies location of file to be saved."},{"lineNumber":1566,"author":{"gitID":"SuxianAlicia"},"content":"4.  ContactSails saves the file in the location specified and shows a success message."},{"lineNumber":1567,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1568,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1569,"author":{"gitID":"-"},"content":""},{"lineNumber":1570,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1571,"author":{"gitID":"-"},"content":""},{"lineNumber":1572,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1573,"author":{"gitID":"SuxianAlicia"},"content":"* 2a. ContactSails is unable to create the file."},{"lineNumber":1574,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1575,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1576,"author":{"gitID":"SuxianAlicia"},"content":"** 2a1. ContactSails shows an error message."},{"lineNumber":1577,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1578,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1579,"author":{"gitID":"-"},"content":""},{"lineNumber":1580,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1581,"author":{"gitID":"SuxianAlicia"},"content":"* 4a. ContactSails is unable to save the file in the specified location."},{"lineNumber":1582,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1583,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1584,"author":{"gitID":"SuxianAlicia"},"content":"** 4a1. ContactSails shows an error message."},{"lineNumber":1585,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1586,"author":{"gitID":"-"},"content":"Use case resumes at step 3."},{"lineNumber":1587,"author":{"gitID":"-"},"content":""},{"lineNumber":1588,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1589,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"SuxianAlicia"},"content":"The requirements indicate the constraints that ContactSails have to be developed with."},{"lineNumber":1592,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1593,"author":{"gitID":"SuxianAlicia"},"content":".  ContactSails should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1594,"author":{"gitID":"SuxianAlicia"},"content":".  ContactSails should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1595,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1596,"author":{"gitID":"-"},"content":".  ContactSails should be usable even for users without experience in using command line applications."},{"lineNumber":1597,"author":{"gitID":"SuxianAlicia"},"content":".  Users should be able to download ContactSails for free as ContactSails is modified from an open-source software."},{"lineNumber":1598,"author":{"gitID":"-"},"content":".  ContactSails should continue to run the original, intended functions, even when problems occur during execution."},{"lineNumber":1599,"author":{"gitID":"SuxianAlicia"},"content":".  In sessions when ContactSails has crashed, changes made to it during those sessions should not be lost."},{"lineNumber":1600,"author":{"gitID":"SuxianAlicia"},"content":".  Size of ContactSails should not exceed 1GB even with many contacts stored in it (maximum number of contacts allowed is 1000)"},{"lineNumber":1601,"author":{"gitID":"-"},"content":".  ContactSails should take up to 2 seconds to execute any command except for commands that are reliant on internet connectivity."},{"lineNumber":1602,"author":{"gitID":"-"},"content":".  ContactSails can still work even if there is limited internet connectivity when executed commands open websites."},{"lineNumber":1603,"author":{"gitID":"-"},"content":".  Users can use ContactSails without requiring an installer."},{"lineNumber":1604,"author":{"gitID":"-"},"content":".  Data of ContactSails should be stored locally and in a human editable text file."},{"lineNumber":1605,"author":{"gitID":"-"},"content":".  Data of ContactSails should be able to be encrypted such that only the user can see it when text file containing the data is directly accessed."},{"lineNumber":1606,"author":{"gitID":"-"},"content":".  ContactSails should not be required to print any detailed reports of contacts."},{"lineNumber":1607,"author":{"gitID":"-"},"content":""},{"lineNumber":1608,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1609,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1610,"author":{"gitID":"-"},"content":""},{"lineNumber":1611,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1612,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1613,"author":{"gitID":"-"},"content":""},{"lineNumber":1614,"author":{"gitID":"-"},"content":"[[contacts]] Contacts::"},{"lineNumber":1615,"author":{"gitID":"SuxianAlicia"},"content":"People whose details are present in ContactSails."},{"lineNumber":1616,"author":{"gitID":"-"},"content":""},{"lineNumber":1617,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1618,"author":{"gitID":"SuxianAlicia"},"content":"A contact detail that is not meant to be shared with others."},{"lineNumber":1619,"author":{"gitID":"-"},"content":""},{"lineNumber":1620,"author":{"gitID":"SuxianAlicia"},"content":"[[groups]] Group::"},{"lineNumber":1621,"author":{"gitID":"SuxianAlicia"},"content":"A label attached to a person\u0027s contact information for the purpose of grouping persons."},{"lineNumber":1622,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1623,"author":{"gitID":"SuxianAlicia"},"content":"[[preferences]] Preference::"},{"lineNumber":1624,"author":{"gitID":"SuxianAlicia"},"content":"A label attached to a person\u0027s contact information for the purpose of providing more specific details of person\u0027s interests."},{"lineNumber":1625,"author":{"gitID":"-"},"content":""},{"lineNumber":1626,"author":{"gitID":"-"},"content":"[[tasks]] Tasks::"},{"lineNumber":1627,"author":{"gitID":"SuxianAlicia"},"content":"A deadline, reminder, or a general note that can be added to keep track of things needed to be done."},{"lineNumber":1628,"author":{"gitID":"-"},"content":""},{"lineNumber":1629,"author":{"gitID":"-"},"content":"[[mss]] MSS::"},{"lineNumber":1630,"author":{"gitID":"SuxianAlicia"},"content":"Represents the most straightforward interaction between System and User where nothing goes wrong, in a use case."},{"lineNumber":1631,"author":{"gitID":"-"},"content":""},{"lineNumber":1632,"author":{"gitID":"-"},"content":"[[extenstions]] Extensions::"},{"lineNumber":1633,"author":{"gitID":"SuxianAlicia"},"content":"Represents interactions between System and User where something might have gone wrong."},{"lineNumber":1634,"author":{"gitID":"-"},"content":""},{"lineNumber":1635,"author":{"gitID":"-"},"content":"[[profile-photo]] Profile Photo::"},{"lineNumber":1636,"author":{"gitID":"SuxianAlicia"},"content":"A photograph attached to a certain contact to represent the person."},{"lineNumber":1637,"author":{"gitID":"-"},"content":""},{"lineNumber":1638,"author":{"gitID":"-"},"content":"[[backup-file]] Backup File::"},{"lineNumber":1639,"author":{"gitID":"SuxianAlicia"},"content":"An XML data file that stores all data in the application in a local copy on my computer."},{"lineNumber":1640,"author":{"gitID":"-"},"content":""},{"lineNumber":1641,"author":{"gitID":"-"},"content":"[[java-fx]] Java FX::"},{"lineNumber":1642,"author":{"gitID":"SuxianAlicia"},"content":"A software platform that contains a set of packages for graphics that enables developers to develop rich cross-platform applications."},{"lineNumber":1643,"author":{"gitID":"-"},"content":""},{"lineNumber":1644,"author":{"gitID":"-"},"content":"[[travis]] Travis::"},{"lineNumber":1645,"author":{"gitID":"SuxianAlicia"},"content":"A hosted, distributed continuous integration service used to build and test software projects hosted at GitHub on a Linux virtual machine."},{"lineNumber":1646,"author":{"gitID":"-"},"content":""},{"lineNumber":1647,"author":{"gitID":"-"},"content":"[[appveyor]] AppVeyor::"},{"lineNumber":1648,"author":{"gitID":"SuxianAlicia"},"content":"A hosted, distributed continuous integration service used to build and test software projects hosted at GitHub on a Windows virtual machine."},{"lineNumber":1649,"author":{"gitID":"-"},"content":""},{"lineNumber":1650,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1651,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1652,"author":{"gitID":"-"},"content":""},{"lineNumber":1653,"author":{"gitID":"SuxianAlicia"},"content":"The following indicates the structure that product surveys should have."},{"lineNumber":1654,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":1655,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1656,"author":{"gitID":"-"},"content":""},{"lineNumber":1657,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1658,"author":{"gitID":"-"},"content":""},{"lineNumber":1659,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1660,"author":{"gitID":"-"},"content":""},{"lineNumber":1661,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1662,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1663,"author":{"gitID":"-"},"content":""},{"lineNumber":1664,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1665,"author":{"gitID":"-"},"content":""},{"lineNumber":1666,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1667,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1668,"author":{"gitID":"-"},"content":""},{"lineNumber":1669,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1670,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1671,"author":{"gitID":"-"},"content":""},{"lineNumber":1672,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1673,"author":{"gitID":"-"},"content":""},{"lineNumber":1674,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1675,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1676,"author":{"gitID":"-"},"content":""},{"lineNumber":1677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1678,"author":{"gitID":"-"},"content":""},{"lineNumber":1679,"author":{"gitID":"SuxianAlicia"},"content":". *Initial launch*"},{"lineNumber":1680,"author":{"gitID":"-"},"content":""},{"lineNumber":1681,"author":{"gitID":"SuxianAlicia"},"content":".. Download the jar file and copy into an empty folder."},{"lineNumber":1682,"author":{"gitID":"SuxianAlicia"},"content":".. Double-click the jar file. +"},{"lineNumber":1683,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1684,"author":{"gitID":"-"},"content":""},{"lineNumber":1685,"author":{"gitID":"SuxianAlicia"},"content":". *Saving window preferences*"},{"lineNumber":1686,"author":{"gitID":"-"},"content":""},{"lineNumber":1687,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1688,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1689,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1690,"author":{"gitID":"-"},"content":""},{"lineNumber":1691,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1692,"author":{"gitID":"-"},"content":""},{"lineNumber":1693,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1694,"author":{"gitID":"-"},"content":""},{"lineNumber":1695,"author":{"gitID":"SuxianAlicia"},"content":". *Deleting a person while all persons are listed*"},{"lineNumber":1696,"author":{"gitID":"-"},"content":""},{"lineNumber":1697,"author":{"gitID":"SuxianAlicia"},"content":".. Prerequisites:"},{"lineNumber":1698,"author":{"gitID":"SuxianAlicia"},"content":"** List all persons using the `list` command."},{"lineNumber":1699,"author":{"gitID":"SuxianAlicia"},"content":"** There should be multiple persons in the list."},{"lineNumber":1700,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1701,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1702,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1703,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1704,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1705,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1706,"author":{"gitID":"-"},"content":""},{"lineNumber":1707,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1708,"author":{"gitID":"-"},"content":""},{"lineNumber":1709,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1710,"author":{"gitID":"-"},"content":""},{"lineNumber":1711,"author":{"gitID":"SuxianAlicia"},"content":". *Dealing with missing/corrupted data files*"},{"lineNumber":1712,"author":{"gitID":"-"},"content":""},{"lineNumber":1713,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1714,"author":{"gitID":"-"},"content":""},{"lineNumber":1715,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"SuxianAlicia":317,"-":1398}},{"path":"src/test/java/systemtests/DeleteGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.DeleteGroupCommand.MESSAGE_GROUP_NOT_FOUND;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.BUDDIES;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.NEIGHBOURS;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.TWITTER;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteGroupCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String MESSAGE_INVALID_DELETE_GROUP_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public void deleteGroup() {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        /* ------------- Performing delete group operation while an unfiltered list is being shown -------------- */"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: delete the group \"twitter\" in the list, command with leading spaces and trailing spaces -\u003e"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        deleted */"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        String command \u003d \"     \" + DeleteGroupCommand.COMMAND_WORD + \"      \" + TWITTER.tagName + \"       \";"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        Group deletedGroup \u003d TWITTER;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        removeGroup(expectedModel, TWITTER);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_GROUP_SUCCESS, deletedGroup);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: undo deleting the group \"twitter\" in the list -\u003e group \"twitter\" restored */"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: redo deleting the group \"twitter\" in the list -\u003e \"twitter\" deleted again */"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        removeGroup(modelBeforeDeletingLast, TWITTER);"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedModel, modelBeforeDeletingLast);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        /* -------------- Performing delete group operation while a filtered list is being shown ------------------ */"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: filtered person list, delete existing group but not in filtered person list -\u003e deleted */"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        deletedGroup \u003d FRIENDS;"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        removeGroup(expectedModel, FRIENDS);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeleteGroupCommand.COMMAND_WORD + \" \" + FRIENDS.tagName;"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_GROUP_SUCCESS, deletedGroup);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: filtered person list, delete non-existing group in address book -\u003e rejected */"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        Group invalidGroup \u003d BUDDIES;"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeleteGroupCommand.COMMAND_WORD + \" \" + invalidGroup.tagName;"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        /* ----------------- Performing delete group operation while a person card is selected -------------------- */"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: delete group existing in the selected person -\u003e person list panel still selects the person */"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        showAllPersons();"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        deletedGroup \u003d NEIGHBOURS;"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        Index selectedIndex \u003d Index.fromOneBased(5);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        Index expectedIndex \u003d selectedIndex;"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeleteGroupCommand.COMMAND_WORD + \" \" + NEIGHBOURS.tagName;"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        removeGroup(expectedModel, NEIGHBOURS);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_GROUP_SUCCESS, deletedGroup);"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        /* --------------------------- Performing invalid delete preference operation ------------------------------ */"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid arguments (non-alphanumeric arguments) -\u003e rejected */"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(DeleteGroupCommand.COMMAND_WORD + \" fr!end3\","},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_DELETE_GROUP_COMMAND_FORMAT);"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(DeleteGroupCommand.COMMAND_WORD + \" friends twitter\","},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_DELETE_GROUP_COMMAND_FORMAT);"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(\"GrouPDeletE neighbours\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes the {@code Group} in {@code model}\u0027s address book."},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    private void removeGroup(Model model, Group toDelete) {"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"            model.deleteGroup(toDelete);"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Group should exist in address book.\");"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"     * @see DeleteGroupCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"}"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":""}],"authorContributionMap":{"SuxianAlicia":171}},{"path":"src/test/java/systemtests/FindPreferenceCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_VIDEOGAMES;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public void findPreference() {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book by their preferences,"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        command with leading spaces and trailing spaces -\u003e 2 persons found */"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        String command \u003d \"   \" + FindPreferenceCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_VIDEOGAMES + \"   \";"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, GEORGE);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        // Both Benson and George have preferences \"videoGames\""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: repeat previous find preference command where person list is displaying the persons we are finding"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_VIDEOGAMES;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find persons via their preferences where person list is not displaying the person we are finding"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 3 persons found */"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" computers\";"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, ELLE, FIONA);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via preferences, 2 keywords -\u003e 3 persons found */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videoGames shoes\";"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, GEORGE);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via preferences, 2 keywords in reversed order"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 3 persons found */"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" shoes videoGames\";"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via preferences, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videoGames shoes videoGames\";"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via preferences, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videoGames shoes NonMatchingKeyWord\";"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find same persons via preferences in address book after deleting 1 of them -\u003e 2 persons found */"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(ALICE));"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_VIDEOGAMES;"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, GEORGE);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via preferences,"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        keyword is same as preference name but of different case -\u003e 2 persons found */"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" VIdeOGameS\";"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via preferences, keyword is substring of preference name"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videogame\";"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via preferences,"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        preference name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videogamess\";"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person via preferences not in address book -\u003e 0 persons found */"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" facialWash\";"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find name of person in address book with FindPreferenceCommand -\u003e 0 persons found */"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + ELLE.getName().toString();"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + ELLE.getPhone().value;"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + ELLE.getAddress().value;"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + ELLE.getEmail().value;"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find groups of person in address book -\u003e 0 persons found */"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cGroup\u003e groups \u003d new ArrayList\u003c\u003e(ELLE.getGroupTags());"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + groups.get(0).tagName;"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find via preferences while a person is selected -\u003e selected card deselected */"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        showAllPersons();"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(ELLE.getName().fullName));"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videoGames\";"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, GEORGE);"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in empty address book via group tags -\u003e 0 persons found */"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        deleteAllPersons();"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_VIDEOGAMES;"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d \"PREferenCEFiNd necklaces\";"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"     * These verifications are done by"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"     * These verifications are done by"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"     * error style."},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":208}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":32,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":40,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":41,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + GEORGE.getPhone().value;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + GEORGE.getAddress().value;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + GEORGE.getEmail().value;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find groups of person in address book -\u003e 0 persons found */"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cGroup\u003e groups \u003d new ArrayList\u003c\u003e(GEORGE.getGroupTags());"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + groups.get(0).tagName;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find preferences of person in address book -\u003e 0 persons found */"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cPreference\u003e preferences \u003d new ArrayList\u003c\u003e(GEORGE.getPreferenceTags());"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + preferences.get(0).tagName;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(GEORGE.getName().fullName));"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson\";"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":177,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":15,"-":188}},{"path":"src/test/java/systemtests/AddOrderCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_CHOC;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_INFORMATION_DESC;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_CHOC;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_COMPUTER;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_CHOC;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_COMPUTER;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_CHOC;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_COMPUTER;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_CHOC;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_COMPUTER;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_CHOC;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHOC;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_COMPUTER;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_CHOC;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_COMPUTER;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.COMICBOOK;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.COMPUTER;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderUtil;"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"public class AddOrderCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    public void addOrder() throws Exception {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        Model model \u003d getModel();"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        /* --------------------- Perform addOrder operations on the shown unfiltered list -------------------------- */"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        Order toAdd \u003d COMPUTER;"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        /* Case: add an order to a non-empty address book,"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"         * command with leading spaces and trailing spaces -\u003e added"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        String command \u003d \"   \" + AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \""},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + \"   \" + PRICE_DESC_COMPUTER + \"   \" + QUANTITY_DESC_COMPUTER + \"  \""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"                + DELIVERY_DATE_DESC_COMPUTER + \"   \";"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        /* Case: undo adding Books to the list -\u003e Books deleted */"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        /* Case: redo adding Books to the list -\u003e Books added again */"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        model.addOrderToOrderList(toAdd);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        /* Case: add order with all fields same as another order in address book except order information -\u003e added */"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d new OrderBuilder()"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_CHOC)"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_COMPUTER)"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER)"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_CHOC + PRICE_DESC_COMPUTER"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        /* Case: add order with all fields same as another order in address book except price -\u003e added */"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d new OrderBuilder()"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_CHOC)"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER)"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_CHOC"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        /* Case: add order with all fields same as another order in address book except quantity -\u003e added */"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d new OrderBuilder()"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_COMPUTER)"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_CHOC)"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER)"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_COMPUTER"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_CHOC + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        /* Case: add order with all fields same as another order in address book except delivery date -\u003e added */"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d new OrderBuilder()"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_COMPUTER)"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_CHOC)"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_COMPUTER"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_CHOC;"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"        /* Case: add an order command with parameters in random order -\u003e added */"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d COMICBOOK;"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"                + \" d/01-01-2018\" + \" i/Comic Book\" + \" q/1\" + \" pr/17.99\";"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        /* --------------------- Perform addOrder operations on the shown filtered list -------------------------- */"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        /* --------------------------------- Perform invalid addOrder operations --------------------------------- */"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"        /* Case: missing person index -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + ORDER_INFORMATION_DESC_COMPUTER"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"                + PRICE_DESC_COMPUTER + QUANTITY_DESC_COMPUTER"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"                + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"        /* Case: missing order information -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"                + PRICE_DESC_COMPUTER + QUANTITY_DESC_COMPUTER"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"                + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        /* Case: missing price -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased() + ORDER_INFORMATION_DESC_COMPUTER"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"        /* Case: missing quantity -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased() + ORDER_INFORMATION_DESC_COMPUTER"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"                + PRICE_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        /* Case: missing delivery date -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased() + ORDER_INFORMATION_DESC_COMPUTER"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"                + PRICE_DESC_COMPUTER + QUANTITY_DESC_COMPUTER;"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"        command \u003d \"ordersadds \" + \" \" + index.getOneBased() + OrderUtil.getOrderDetails(toAdd);"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid order information -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"                + INVALID_ORDER_INFORMATION_DESC + PRICE_DESC_COMPUTER"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + INVALID_PRICE_DESC"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid quantity -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_COMPUTER"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"                + INVALID_QUANTITY_DESC + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid delivery date -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_COMPUTER"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"     * Executes the {@code AddOrderCommand} that adds {@code toAdd} to the model and asserts that the:\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"     * 3. Result display box displays the success message of executing {@code AddOrderCommand} with details of"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(Index index, Order toAdd) {"},{"lineNumber":205,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(OrderUtil.getAddOrderCommand(index.getZeroBased(), toAdd), index, toAdd);"},{"lineNumber":206,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Index, Order)}. Executes {@code command}"},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"     * instead."},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":"     * @see AddOrderCommandSystemTest#assertCommandSuccess(Index, Order)"},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Index index, Order toAdd) {"},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"        Person person \u003d expectedModel.getAddressBook().getPersonList().get(index.getZeroBased());"},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":217,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":218,"author":{"gitID":"amad-person"},"content":"            expectedModel.addOrderToOrderList(toAdd);"},{"lineNumber":219,"author":{"gitID":"amad-person"},"content":"        } catch (UniqueOrderList.DuplicateOrderException dpe) {"},{"lineNumber":220,"author":{"gitID":"amad-person"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":221,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":223,"author":{"gitID":"amad-person"},"content":"                AddOrderCommand.MESSAGE_ADD_ORDER_SUCCESS, person.getName(), toAdd);"},{"lineNumber":224,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":225,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":226,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Order)} except asserts that"},{"lineNumber":230,"author":{"gitID":"amad-person"},"content":"     * the:\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"amad-person"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"amad-person"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":233,"author":{"gitID":"amad-person"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"amad-person"},"content":"     * @see AddOrderCommandSystemTest#assertCommandSuccess(String, Index, Order)"},{"lineNumber":235,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":237,"author":{"gitID":"amad-person"},"content":"        executeCommand(command);"},{"lineNumber":238,"author":{"gitID":"amad-person"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":239,"author":{"gitID":"amad-person"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":240,"author":{"gitID":"amad-person"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":241,"author":{"gitID":"amad-person"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":242,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":244,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"amad-person"},"content":"     * Executes {@code command} and asserts that the:\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"amad-person"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"amad-person"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"amad-person"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"amad-person"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"amad-person"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"amad-person"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":252,"author":{"gitID":"amad-person"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":254,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"amad-person"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":256,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":257,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":258,"author":{"gitID":"amad-person"},"content":"        executeCommand(command);"},{"lineNumber":259,"author":{"gitID":"amad-person"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":260,"author":{"gitID":"amad-person"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":261,"author":{"gitID":"amad-person"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":262,"author":{"gitID":"amad-person"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":263,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":264}},{"path":"src/test/java/systemtests/DeletePreferenceCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.DeletePreferenceCommand.MESSAGE_DELETE_PREFERENCE_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.DeletePreferenceCommand.MESSAGE_PREFERENCE_NOT_FOUND;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.NECKLACES;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.VIDEO_GAMES;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"public class DeletePreferenceCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String MESSAGE_INVALID_DELETE_PREFERENCE_COMMAND_FORMAT \u003d"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePreferenceCommand.MESSAGE_USAGE);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public void deletePreference() {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        /* ------------ Performing delete preference operation while an unfiltered list is being shown -------------- */"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: delete the preference \"videoGames\" in the list, command with leading spaces and trailing spaces -\u003e"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        deleted */"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        String command \u003d \"     \" + DeletePreferenceCommand.COMMAND_WORD + \"      \" + VIDEO_GAMES.tagName + \"       \";"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        Preference deletedPreference \u003d VIDEO_GAMES;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        removePreference(expectedModel, VIDEO_GAMES);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PREFERENCE_SUCCESS, deletedPreference);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: undo deleting the preference \"videoGames\" in the list -\u003e preference \"videoGames\" restored */"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: redo deleting the preference \"videoGames\" in the list -\u003e \"videoGames\" deleted again */"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        removePreference(modelBeforeDeletingLast, VIDEO_GAMES);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedModel, modelBeforeDeletingLast);"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        /* ------------ Performing delete preference operation while a filtered list is being shown ---------------- */"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: filtered person list, delete existing preference but not in filtered person list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        deletedPreference \u003d NECKLACES;"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        removePreference(expectedModel, NECKLACES);"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeletePreferenceCommand.COMMAND_WORD + \" \" + NECKLACES.tagName;"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PREFERENCE_SUCCESS, deletedPreference);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: filtered person list, delete non-existing preference in address book -\u003e rejected */"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        Preference invalidPref \u003d NECKLACES;"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeletePreferenceCommand.COMMAND_WORD + \" \" + invalidPref.tagName;"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, MESSAGE_PREFERENCE_NOT_FOUND);"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        /* --------------- Performing delete preference operation while a person card is selected ------------------ */"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: delete preference existing in the selected person -\u003e person list panel still selects the person */"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        showAllPersons();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        deletedPreference \u003d COMPUTERS;"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        Index selectedIndex \u003d Index.fromOneBased(2);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        Index expectedIndex \u003d selectedIndex;"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeletePreferenceCommand.COMMAND_WORD + \" \" + COMPUTERS.tagName;"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        removePreference(expectedModel, COMPUTERS);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PREFERENCE_SUCCESS, deletedPreference);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        /* --------------------------- Performing invalid delete preference operation ------------------------------ */"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid arguments (non-alphanumeric arguments) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(DeletePreferenceCommand.COMMAND_WORD + \" sh!es\","},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_DELETE_PREFERENCE_COMMAND_FORMAT);"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(DeletePreferenceCommand.COMMAND_WORD + \" shoes computers\","},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_DELETE_PREFERENCE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(\"pREFDelEte shoes\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes the {@code Preference} in {@code model}\u0027s address book."},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"    private void removePreference(Model model, Preference toDelete) {"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"            model.deletePreference(toDelete);"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (PreferenceNotFoundException pnfe) {"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Preference should exist in address book.\");"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"     * @see DeletePreferenceCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":167}},{"path":"src/test/java/seedu/address/ui/PersonPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"AJZ1995"},"content":"//@@author AJZ1995"},{"lineNumber":2,"author":{"gitID":"AJZ1995"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":4,"author":{"gitID":"AJZ1995"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"AJZ1995"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"AJZ1995"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"AJZ1995"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":8,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":9,"author":{"gitID":"AJZ1995"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":11,"author":{"gitID":"AJZ1995"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"AJZ1995"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":14,"author":{"gitID":"AJZ1995"},"content":"import guitests.guihandles.PersonPanelHandle;"},{"lineNumber":15,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":18,"author":{"gitID":"AJZ1995"},"content":"public class PersonPanelTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":20,"author":{"gitID":"AJZ1995"},"content":"    private PersonPanel personPanel;"},{"lineNumber":21,"author":{"gitID":"AJZ1995"},"content":"    private PersonPanelHandle personPanelHandle;"},{"lineNumber":22,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":23,"author":{"gitID":"AJZ1995"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"AJZ1995"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"AJZ1995"},"content":"        guiRobot.interact(() -\u003e personPanel \u003d new PersonPanel());"},{"lineNumber":26,"author":{"gitID":"AJZ1995"},"content":"        uiPartRule.setUiPart(personPanel);"},{"lineNumber":27,"author":{"gitID":"AJZ1995"},"content":"        personPanelHandle \u003d new PersonPanelHandle(personPanel.getRoot());"},{"lineNumber":28,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":30,"author":{"gitID":"AJZ1995"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"AJZ1995"},"content":"    public void display() throws Exception {"},{"lineNumber":32,"author":{"gitID":"AJZ1995"},"content":"        postNow(new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0)));"},{"lineNumber":33,"author":{"gitID":"AJZ1995"},"content":"        assertPersonIsDisplayed(ALICE, personPanelHandle);"},{"lineNumber":34,"author":{"gitID":"AJZ1995"},"content":"        postNow(new PersonPanelSelectionChangedEvent(new PersonCard(BOB, 1)));"},{"lineNumber":35,"author":{"gitID":"AJZ1995"},"content":"        assertPersonIsDisplayed(BOB, personPanelHandle);"},{"lineNumber":36,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":38,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"AJZ1995"},"content":"     * Asserts that {@code personPanelHandle} displays the details of {@code expectedPerson} correctly"},{"lineNumber":40,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"AJZ1995"},"content":"    private void assertPersonIsDisplayed(Person expectedPerson, PersonPanelHandle personPanelHandle) {"},{"lineNumber":42,"author":{"gitID":"AJZ1995"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":43,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getName().toString(), personPanelHandle.getName());"},{"lineNumber":44,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getPhone().toString(), personPanelHandle.getPhone());"},{"lineNumber":45,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getEmail().toString(), personPanelHandle.getEmail());"},{"lineNumber":46,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getAddress().toString(), personPanelHandle.getAddress());"},{"lineNumber":47,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":49,"author":{"gitID":"AJZ1995"},"content":"    /*"},{"lineNumber":50,"author":{"gitID":"AJZ1995"},"content":"     * Asserts that {@code personPanelHandle} displays the groups of {@code expectedPerson} correctly"},{"lineNumber":51,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"AJZ1995"},"content":"    private void assertGroupsAreDisplayed(Person expectedPerson, PersonPanelHandle personPanelHandle) {"},{"lineNumber":53,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getGroupTags().stream()"},{"lineNumber":54,"author":{"gitID":"AJZ1995"},"content":"                        .map(groupLabels -\u003e groupLabels.tagName).collect(Collectors.toList()),"},{"lineNumber":55,"author":{"gitID":"AJZ1995"},"content":"                personPanelHandle.getGroups());"},{"lineNumber":56,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":58,"author":{"gitID":"AJZ1995"},"content":"    /*"},{"lineNumber":59,"author":{"gitID":"AJZ1995"},"content":"     * Asserts that {@code personPanelHandle} displays the preferences of {@code expectedPerson} correctly"},{"lineNumber":60,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"AJZ1995"},"content":"    private void assertPreferencesAreDisplayed(Person expectedPerson, PersonPanelHandle personPanelHandle) {"},{"lineNumber":62,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getPreferenceTags().stream()"},{"lineNumber":63,"author":{"gitID":"AJZ1995"},"content":"                        .map(preferenceLabels -\u003e preferenceLabels.tagName).collect(Collectors.toList()),"},{"lineNumber":64,"author":{"gitID":"AJZ1995"},"content":"                personPanelHandle.getPreferences());"},{"lineNumber":65,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"AJZ1995"},"content":"}"}],"authorContributionMap":{"AJZ1995":66}},{"path":"src/test/java/systemtests/EditOrderCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_INFORMATION_DESC;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_BOOKS;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_COMPUTER;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_COMPUTER;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_COMPUTER;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_COMPUTER;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_COMPUTER;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_COMPUTER;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ORDER;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"public class EditOrderCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    public void edit() throws Exception {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        Model model \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"         * -\u003e edited"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"         */"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        Index index \u003d INDEX_THIRD_ORDER;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        String command \u003d \" \" + EditOrderCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"    \""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + \" \" + PRICE_DESC_COMPUTER + \"  \" + QUANTITY_DESC_COMPUTER"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"                + \"    \" + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d new OrderBuilder().withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_COMPUTER).withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER).build();"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, editedOrder);"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        /* Case: undo editing the order in the list -\u003e order restored */"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        model.updateOrder("},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"                getModel().getFilteredOrderList().get(INDEX_THIRD_ORDER.getZeroBased()), editedOrder);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        index \u003d INDEX_THIRD_ORDER;"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        command \u003d EditOrderCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUANTITY_DESC_COMPUTER;"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        Order orderToEdit \u003d getModel().getFilteredOrderList().get(index.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        editedOrder \u003d new OrderBuilder(orderToEdit).withQuantity(VALID_QUANTITY_COMPUTER).build();"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, editedOrder);"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" 0\" + ORDER_INFORMATION_DESC_BOOKS,"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE));"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" -1\" + ORDER_INFORMATION_DESC_BOOKS,"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        int invalidIndex \u003d getModel().getFilteredOrderList().size() + 1;"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + invalidIndex"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"                        + ORDER_INFORMATION_DESC_BOOKS,"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + ORDER_INFORMATION_DESC_BOOKS,"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE));"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased(),"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"                EditOrderCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid order information -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased()"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"                        + INVALID_ORDER_INFORMATION_DESC,"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"                OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased()"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"                        + INVALID_PRICE_DESC,"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"                Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid quantity -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased()"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"                        + INVALID_QUANTITY_DESC,"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"                Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid delivery date -\u003e rejected */"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased()"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"                        + INVALID_DELIVERY_DATE_DESC,"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"                DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"     * selected card remains unchanged."},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"     * @see EditOrderCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"     * the selected card remains unchanged."},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"     * @see EditOrderCommandSystemTest#assertCommandSuccess(String, Index, Order, Index)"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Order editedOrder) {"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, toEdit, editedOrder, null);"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditOrderCommand}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"     * 2. Asserts that the model related components are updated to reflect the order at index {@code toEdit} being"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"     * updated to values specified {@code editedOrder}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"     * @see EditOrderCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Order editedOrder,"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"            expectedModel.updateOrder("},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"                    expectedModel.getFilteredOrderList().get(toEdit.getZeroBased()), editedOrder);"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"            expectedModel.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"        } catch (UniqueOrderList.DuplicateOrderException | OrderNotFoundException e) {"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"            throw new IllegalArgumentException("},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"                    \"editedOrder is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"                String.format(EditOrderCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder), expectedSelectedCardIndex);"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"     * 4. Asserts that the selected card updates accordingly depending on the card at"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"        executeCommand(command);"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"        } else {"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"     * 4. Asserts that the selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":206,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"        executeCommand(command);"},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":216}},{"path":"src/test/java/seedu/address/ui/CalendarEntryCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysEntry;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import guitests.guihandles.CalendarEntryCardHandle;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.CalendarEntryBuilder;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public void display() {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry calendarEntry \u003d new CalendarEntryBuilder().build();"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCard calendarEntryCard \u003d new CalendarEntryCard(calendarEntry, 1);"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        uiPartRule.setUiPart(calendarEntryCard);"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        assertCardDisplay(calendarEntryCard, calendarEntry, 1);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry calendarEntry \u003d new CalendarEntryBuilder().build();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCard calendarEntryCard \u003d new CalendarEntryCard(calendarEntry, 0);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        // same calendar entry, same index -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCard entryCardCopy \u003d new CalendarEntryCard(calendarEntry, 0);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(calendarEntryCard.equals(entryCardCopy));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(calendarEntryCard.equals(calendarEntryCard));"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarEntryCard.equals(null));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarEntryCard.equals(1));"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        // different order, same index -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry differentEntry \u003d new CalendarEntryBuilder().withEntryTitle(\"differentTitle\").build();"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarEntryCard.equals(new CalendarEntryCard(differentEntry, 0)));"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        // same order, different index -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarEntryCard.equals(new CalendarEntryCard(calendarEntry, 1)));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Asserts that {@code orderCard} displays the details of {@code expectedOrder} correctly and"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * matches {@code expectedId}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCardDisplay(CalendarEntryCard calendarEntryCard, CalendarEntry expectedEntry, int expectedId) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCardHandle entryCardHandle \u003d new CalendarEntryCardHandle(calendarEntryCard.getRoot());"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        // verify that id is displayed correctly"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", entryCardHandle.getId());"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        // verify order details are displayed correctly"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertCardDisplaysEntry(expectedEntry, entryCardHandle);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":53,"-":12}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        // no groups"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        Person personWithNoGroups \u003d new PersonBuilder().withGroups(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoGroups, 1);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        assertCardDisplay(personCard, personWithNoGroups, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        // with groups"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        Person personWithGroups \u003d new PersonBuilder().build();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        personCard \u003d new PersonCard(personWithGroups, 2);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        assertCardDisplay(personCard, personWithGroups, 2);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        // no preference"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        Person personWithNoPref \u003d new PersonBuilder().withPreferences(new String[0]).build();"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        personCard \u003d new PersonCard(personWithNoPref, 1);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertCardDisplay(personCard, personWithNoPref, 1);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        // with preferences"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        Person personWithPrefs \u003d new PersonBuilder().build();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        personCard \u003d new PersonCard(personWithPrefs, 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertCardDisplay(personCard, personWithPrefs, 2);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":21,"-":66}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_COLLEAGUES;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_FRIEND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PREFERENCE_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREFERENCE_DESC_COMPUTERS;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREFERENCE_DESC_SHOES;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_COLLEAGUES;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_COMPUTERS;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_SHOES;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PREFERENCE;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"                + PREFERENCE_DESC_COMPUTERS + \" \" + GROUP_DESC_COLLEAGUES + \" \";"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_COLLEAGUES)"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_COMPUTERS).build();"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":90,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND + GROUP_DESC_COLLEAGUES + PREFERENCE_DESC_COMPUTERS;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + GROUP_DESC_FRIEND"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"                + \" \" + PREFERENCE_DESC_SHOES;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withGroups(VALID_GROUP_FRIEND)"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_SHOES).build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: clear groups -\u003e cleared */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_GROUP.getPrefix();"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withGroups().withPreferences(VALID_PREFERENCE_SHOES).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: clear preferences -\u003e cleared */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_PREFERENCE.getPrefix();"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withGroups().withPreferences().build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":141,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":142,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_AMY + GROUP_DESC_FRIEND + PREFERENCE_DESC_SHOES;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid group -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_GROUP_DESC,"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid preference -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":"                        + INVALID_PREFERENCE_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND + PREFERENCE_DESC_COMPUTERS;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different groups -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":210,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: edit a person with new values same as another person\u0027s values"},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"        but with different preferences -\u003e rejected */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + PREFERENCE_DESC_COMPUTERS;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":243,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":247,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":44,"-":267}},{"path":"src/test/java/systemtests/DeleteOrderCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.DeleteOrderCommand.MESSAGE_DELETE_ORDER_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TestUtil.getLastOrderIndex;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TestUtil.getMidOrderIndex;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TestUtil.getOrder;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"public class DeleteOrderCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    private static final String MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT \u003d"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteOrderCommand.MESSAGE_USAGE);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public void delete() {"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        /* Case: delete the first order in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        String command \u003d \"     \" + DeleteOrderCommand.COMMAND_WORD + \"      \""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"                + INDEX_FIRST_ORDER.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        Order deletedOrder \u003d removeOrder(expectedModel, INDEX_FIRST_ORDER);"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ORDER_SUCCESS, deletedOrder);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        /* Case: delete the last order in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        Index lastOrderIndex \u003d getLastOrderIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(lastOrderIndex);"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        /* Case: undo deleting the last order in the list -\u003e last order restored */"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        /* Case: redo deleting the last order in the list -\u003e last order deleted again */"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        removeOrder(modelBeforeDeletingLast, lastOrderIndex);"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        /* Case: delete the middle order in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        Index middlePersonIndex \u003d getMidOrderIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        /* --------------------------------- Performing invalid delete operations ----------------------------------- */"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        command \u003d DeleteOrderCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        command \u003d DeleteOrderCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"                getModel().getAddressBook().getOrderList().size() + 1);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        command \u003d DeleteOrderCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(DeleteOrderCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT);"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(DeleteOrderCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"     * Removes the {@code Order} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"     * @return the removed order"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    private Order removeOrder(Model model, Index index) {"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        Order targetOrder \u003d getOrder(model, index);"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"            model.deleteOrder(targetOrder);"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"targetOrder is retrieved from model.\");"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        return targetOrder;"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"     * Deletes the order at {@code toDelete} by creating a default {@code DeleteOrderCommand} using {@code toDelete}"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"     * and performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"     * @see DeleteOrderCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        Order deletedOrder \u003d removeOrder(expectedModel, toDelete);"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ORDER_SUCCESS, deletedOrder);"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess("},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"                DeleteOrderCommand.COMMAND_WORD + \" \""},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"                        + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"     * @see DeleteOrderCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        executeCommand(command);"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        } else {"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"        executeCommand(command);"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":172}},{"path":"src/test/java/seedu/address/ui/OrderCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysOrder;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import guitests.guihandles.OrderCardHandle;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"public class OrderCardTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public void display() {"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        OrderCard orderCard \u003d new OrderCard(order, 1);"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        uiPartRule.setUiPart(orderCard);"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        assertCardDisplay(orderCard, order, 1);"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        OrderCard orderCard \u003d new OrderCard(order, 0);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        // same order, same index -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        OrderCard orderCardCopy \u003d new OrderCard(order, 0);"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        assertTrue(orderCard.equals(orderCardCopy));"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertTrue(orderCard.equals(orderCard));"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        assertFalse(orderCard.equals(null));"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        assertFalse(orderCard.equals(1));"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        // different order, same index -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        Order differentOrder \u003d new OrderBuilder().withOrderInformation(\"differentOrderInfo\").build();"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        assertFalse(orderCard.equals(new OrderCard(differentOrder, 0)));"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        // same order, different index -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        assertFalse(orderCard.equals(new OrderCard(order, 1)));"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"     * Asserts that {@code orderCard} displays the details of {@code expectedOrder} correctly and"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"     * matches {@code expectedId}."},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    private void assertCardDisplay(OrderCard orderCard, Order expectedOrder, int expectedId) {"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        OrderCardHandle orderCardHandle \u003d new OrderCardHandle(orderCard.getRoot());"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        // verify that id is displayed correctly"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", orderCardHandle.getId());"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        // verify order details are displayed correctly"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        assertCardDisplaysOrder(expectedOrder, orderCardHandle);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":67}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String COMMAND_ADD_INCOMPLETE \u003d \"ad\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_ADD_COMPLETE \u003d AddCommand.COMMAND_SYNTAX;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_EDIT_INCOMPLETE \u003d \"e\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String COMMAND_EDIT_COMPLETE \u003d EditCommand.COMMAND_SYNTAX;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"    public void handleKeyPress_tab() {"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"        // add command"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        commandBoxHandle.setInput(COMMAND_ADD_INCOMPLETE);"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_ADD_COMPLETE);"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        // edit command"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"        commandBoxHandle.setInput(COMMAND_EDIT_INCOMPLETE);"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_EDIT_COMPLETE);"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        // invalid command"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_THAT_FAILS);"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":164,"amad-person":16}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import guitests.guihandles.CalendarEntryCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.OrderCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedCard.getGroups(), actualCard.getGroups());"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedCard.getPreferences(), actualCard.getPreferences());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedPerson.getGroupTags().stream().map(group -\u003e group.tagName).collect(Collectors.toList()),"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"                actualCard.getGroups());"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedPerson.getPreferenceTags().stream().map(pref -\u003e pref.tagName).collect(Collectors.toList()),"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"                actualCard.getPreferences());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedOrder}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysOrder(Order expectedOrder, OrderCardHandle actualCard) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(expectedOrder.getOrderInformation().toString(), actualCard.getOrderInformation());"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String expectedPriceAndQuantity \u003d \"S$\" + expectedOrder.getPrice().toString() + \" X \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"                + expectedOrder.getQuantity().toString();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(expectedPriceAndQuantity, actualCard.getPriceAndQuantity());"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String expectedTotalPrice \u003d \"Total: S$\" + String.valueOf("},{"lineNumber":59,"author":{"gitID":"-"},"content":"                Double.parseDouble(expectedOrder.getPrice().toString())"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                        * Integer.parseInt(expectedOrder.getQuantity().toString()));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(expectedTotalPrice, actualCard.getTotalPrice());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"Deliver By: \" + expectedOrder.getDeliveryDate().toString(), actualCard.getDeliveryDate());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedEntry}."},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    public static void assertCardDisplaysEntry(CalendarEntry expectedEntry, CalendarEntryCardHandle actualCard) {"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedEntry.getEntryTitle().toString(), actualCard.getEntryTitle());"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedStartDate \u003d \"From: \" + expectedEntry.getStartDate().toString();"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedStartDate, actualCard.getStartDate());"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedEndDate \u003d \"To: \" + expectedEntry.getEndDate().toString();"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedEndDate, actualCard.getEndDate());"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedTimeDuration \u003d \"Between \" + expectedEntry.getStartTime().toString()"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"                + \" and \" + expectedEntry.getEndTime().toString();"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedTimeDuration, actualCard.getTimeDuration());"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":26,"-":91}},{"path":"src/test/java/seedu/address/ui/OrderListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalOrders;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysOrder;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import guitests.guihandles.OrderCardHandle;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import guitests.guihandles.OrderListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"public class OrderListPanelTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    private static final ObservableList\u003cOrder\u003e TYPICAL_ORDERS \u003d"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"            FXCollections.observableList(getTypicalOrders());"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    private OrderListPanelHandle orderListPanelHandle;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        OrderListPanel orderListPanel \u003d new OrderListPanel(TYPICAL_ORDERS);"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        uiPartRule.setUiPart(orderListPanel);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        orderListPanelHandle \u003d new OrderListPanelHandle(getChildNode(orderListPanel.getRoot(),"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"                OrderListPanelHandle.ORDER_LIST_VIEW_ID));"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    public void display() {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_ORDERS.size(); i++) {"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"            orderListPanelHandle.navigateToCard(TYPICAL_ORDERS.get(i));"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"            Order expectedOrder \u003d TYPICAL_ORDERS.get(i);"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"            OrderCardHandle actualCard \u003d orderListPanelHandle.getOrderCardHandle(i);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"            assertCardDisplaysOrder(expectedOrder, actualCard);"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":43}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.storage.XmlSerializableCalendarManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleAbData.xml\");"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String SAVE_LOCATION_FOR_CALENDAR_TESTING \u003d"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            TestUtil.getFilePathInSandboxFolder(\"sampleCalendarData.xml\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    protected static final String CALENDAR_MANAGER_NAME \u003d \"Calendar Test\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    protected Supplier\u003cReadOnlyCalendarManager\u003e initialCalDataSupplier \u003d () -\u003e null;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    protected String saveAbFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    protected String saveCmFileLocation \u003d SAVE_LOCATION_FOR_CALENDAR_TESTING;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier,"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"                   Supplier\u003cReadOnlyCalendarManager\u003e initialCalDataSupplier, String saveAbFileLocation,"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                   String saveCmFileLocation) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        this.initialCalDataSupplier \u003d initialCalDataSupplier;"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        this.saveAbFileLocation \u003d saveAbFileLocation;"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        this.saveCmFileLocation \u003d saveCmFileLocation;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"                    this.saveAbFileLocation);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        if (initialCalDataSupplier.get() !\u003d null) {"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"            createDataFileWithData(new XmlSerializableCalendarManager(this.initialCalDataSupplier.get()),"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"                    this.saveCmFileLocation);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        userPrefs.setAddressBookFilePath(saveAbFileLocation);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        userPrefs.setCalendarManagerFilePath(saveCmFileLocation);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        userPrefs.setCalendarManagerName(CALENDAR_MANAGER_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns a defensive copy of the calendar manager data stored inside the storage file."},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManager readStorageCalendarManager() {"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"            return new CalendarManager(storage.readCalendarManager().get());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Data is not in the CalendarManager format.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":33,"-":122}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.storage.XmlAdaptedGroup;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.storage.XmlAdaptedPreference;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    private static final List\u003cXmlAdaptedGroup\u003e VALID_GROUPS \u003d"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            Collections.singletonList(new XmlAdaptedGroup(\"friends\"));"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    private static final List\u003cXmlAdaptedPreference\u003e VALID_PREFERENCES \u003d"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            Collections.singletonList(new XmlAdaptedPreference(\"shoes\"));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(0, dataFromFile.getGroupList().size());"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(0, dataFromFile.getPreferenceList().size());"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":86,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":104,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"                builder.withPerson(new PersonBuilder().build()).withGroup(\"Friends\")"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"                        .withPreference(\"shoes\").build());"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":14,"-":138}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":2,"-":123}},{"path":"src/test/java/seedu/address/ui/CalendarEntryListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarEntries;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysEntry;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import guitests.guihandles.CalendarEntryCardHandle;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import guitests.guihandles.CalendarEntryListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryListPanelTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    private static final ObservableList\u003cCalendarEntry\u003e TYPICAL_CAL_ENTRIES \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            FXCollections.observableList(getTypicalCalendarEntries());"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarEntryListPanelHandle calendarEntryListPanelHandle;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryListPanel calendarEntryListPanel \u003d new CalendarEntryListPanel(TYPICAL_CAL_ENTRIES);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        uiPartRule.setUiPart(calendarEntryListPanel);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryListPanelHandle \u003d new CalendarEntryListPanelHandle(getChildNode(calendarEntryListPanel.getRoot(),"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"                calendarEntryListPanelHandle.CALENDAR_ENTRY_LIST_VIEW_ID));"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public void display() {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_CAL_ENTRIES.size(); i++) {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            calendarEntryListPanelHandle.navigateToCard(TYPICAL_CAL_ENTRIES.get(i));"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            CalendarEntry expectedCalEntry \u003d TYPICAL_CAL_ENTRIES.get(i);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            CalendarEntryCardHandle actualCard \u003d calendarEntryListPanelHandle.getCalendarEntryCardHandle(i);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            assertCardDisplaysEntry(expectedCalEntry, actualCard);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":34,"-":8}},{"path":"src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        String argsString \u003d \"  some random string /g group pr/ preference with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /** Also covers: testing for prefixes not specified as a prefix **/"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":1,"-":149}},{"path":"src/test/java/seedu/address/logic/parser/DeletePreferenceCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class DeletePreferenceCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    private DeletePreferenceCommandParser parser \u003d new DeletePreferenceCommandParser();"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_validArgs_returnsDeletePreferenceCommand() {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \"computers\", new DeletePreferenceCommand(COMPUTERS));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"Comp\u0026ters\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"                DeletePreferenceCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":16,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/FindGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    private FindGroupCommandParser parser \u003d new FindGroupCommandParser();"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindGroupCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_validArgs_returnsFindGroupCommand() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand expectedFindGroupCommand \u003d"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"                new FindGroupCommand(new GroupsContainKeywordsPredicate(Arrays.asList(\"Friends\", \"Colleagues\")));"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \"Friends Colleagues\", expectedFindGroupCommand);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \" \\n Friends \\n \\t Colleagues  \\t\", expectedFindGroupCommand);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":25,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.theme.Theme.LIGHT_THEME_KEYWORD;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.OrderUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseCommand_addOrder() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddOrderCommand command \u003d (AddOrderCommand) parser.parseCommand(OrderUtil"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .getAddOrderCommand(INDEX_FIRST_PERSON.getOneBased(), order));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(new AddOrderCommand(INDEX_FIRST_PERSON, order), command);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parseCommand_addOrderAlias() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        AddOrderCommand command \u003d (AddOrderCommand) parser.parseCommand(AddOrderCommand.COMMAND_ALIAS"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + OrderUtil.getOrderDetails(order));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(new AddOrderCommand(INDEX_FIRST_PERSON, order), command);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parseCommand_changeTheme() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ChangeThemeCommand command \u003d (ChangeThemeCommand) parser.parseCommand("},{"lineNumber":94,"author":{"gitID":"-"},"content":"                ChangeThemeCommand.COMMAND_WORD + \" \" + LIGHT_THEME_KEYWORD);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(new ChangeThemeCommand(LIGHT_THEME_KEYWORD), command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseCommand_changeTheseAliad() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ChangeThemeCommand command \u003d (ChangeThemeCommand) parser.parseCommand("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                ChangeThemeCommand.COMMAND_ALIAS + \" \" + LIGHT_THEME_KEYWORD);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(new ChangeThemeCommand(LIGHT_THEME_KEYWORD), command);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":120,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":127,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseCommand_deleteGroup() throws Exception {"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand command \u003d (DeleteGroupCommand) parser.parseCommand("},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"                DeleteGroupCommand.COMMAND_WORD + \" \" + \"friends\");"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(new DeleteGroupCommand(FRIENDS), command);"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseCommand_deleteGroupAlias() throws Exception {"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand command \u003d (DeleteGroupCommand) parser.parseCommand("},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"                DeleteGroupCommand.COMMAND_ALIAS + \" \" + \"friends\");"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(new DeleteGroupCommand(FRIENDS), command);"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseCommand_deletePreference() throws Exception {"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand command \u003d (DeletePreferenceCommand) parser.parseCommand("},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"                DeletePreferenceCommand.COMMAND_WORD + \" \" + \"computers\");"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(new DeletePreferenceCommand(COMPUTERS), command);"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseCommand_deletePreferenceAlias() throws Exception {"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand command \u003d (DeletePreferenceCommand) parser.parseCommand("},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"                DeletePreferenceCommand.COMMAND_ALIAS + \" \" + \"computers\");"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(new DeletePreferenceCommand(COMPUTERS), command);"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteOrder() throws Exception {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        DeleteOrderCommand command \u003d (DeleteOrderCommand) parser.parseCommand("},{"lineNumber":162,"author":{"gitID":"-"},"content":"                DeleteOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteOrderCommand(INDEX_FIRST_ORDER), command);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteOrderAlias() throws Exception {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        DeleteOrderCommand command \u003d (DeleteOrderCommand) parser.parseCommand("},{"lineNumber":169,"author":{"gitID":"-"},"content":"                DeleteOrderCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_ORDER.getOneBased());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteOrderCommand(INDEX_FIRST_ORDER), command);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":178,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":207,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":215,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseCommand_findGroups() throws Exception {"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"family\", \"neighbours\");"},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand command \u003d (FindGroupCommand) parser.parseCommand("},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"                FindGroupCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":225,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(new FindGroupCommand(new GroupsContainKeywordsPredicate(keywords)), command);"},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":228,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseCommand_findGroupAlias() throws Exception {"},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"family\", \"neighbours\");"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand command \u003d (FindGroupCommand) parser.parseCommand("},{"lineNumber":232,"author":{"gitID":"SuxianAlicia"},"content":"                FindGroupCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":234,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(new FindGroupCommand(new GroupsContainKeywordsPredicate(keywords)), command);"},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":237,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseCommand_findPreference() throws Exception {"},{"lineNumber":239,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"shoes\", \"computers\", \"necklaces\");"},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand command \u003d (FindPreferenceCommand) parser.parseCommand("},{"lineNumber":241,"author":{"gitID":"SuxianAlicia"},"content":"                FindPreferenceCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":243,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(keywords)), command);"},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseCommand_findPreferenceAlias() throws Exception {"},{"lineNumber":248,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"shoes\", \"computers\", \"necklaces\");"},{"lineNumber":249,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand command \u003d (FindPreferenceCommand) parser.parseCommand("},{"lineNumber":250,"author":{"gitID":"SuxianAlicia"},"content":"                FindPreferenceCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":251,"author":{"gitID":"SuxianAlicia"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":252,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(keywords)), command);"},{"lineNumber":253,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public void parseCommand_helpAlias() throws Exception {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":309,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":316,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWordAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":334,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWordAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":346,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":357,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":358,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":72,"-":286}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_COLLEAGUES;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_FRIEND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PREFERENCE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREFERENCE_DESC_COMPUTERS;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREFERENCE_DESC_SHOES;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_COMPUTERS;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_SHOES;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PREFERENCE;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String GROUP_EMPTY \u003d \" \" + PREFIX_GROUP;"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String PREFERENCE_EMPTY \u003d \" \" + PREFIX_PREFERENCE;"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + INVALID_GROUP_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid group"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PREFERENCE_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid preference"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        // while parsing {@code PREFIX_GROUP} alone will reset the groups of the {@code Person} being edited,"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        // parsing it together with a valid group results in error"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + GROUP_DESC_FRIEND + GROUP_DESC_COLLEAGUES + GROUP_EMPTY,"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + GROUP_DESC_FRIEND + GROUP_EMPTY + GROUP_DESC_COLLEAGUES,"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + GROUP_EMPTY + GROUP_DESC_FRIEND + GROUP_DESC_COLLEAGUES,"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        // while parsing {@code PREFIX_PREFERENCE} alone will reset the preferences of the {@code Person} being edited,"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        // parsing it together with a valid group results in error"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + PREFERENCE_DESC_COMPUTERS + PREFERENCE_DESC_SHOES + PREFERENCE_EMPTY,"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + PREFERENCE_DESC_COMPUTERS + PREFERENCE_EMPTY + PREFERENCE_DESC_SHOES,"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + PREFERENCE_EMPTY + PREFERENCE_DESC_COMPUTERS + PREFERENCE_DESC_SHOES,"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + PREFERENCE_DESC_COMPUTERS"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + GROUP_DESC_FRIEND;"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"                .withGroups(VALID_GROUP_FRIEND)"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_COMPUTERS).build();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"        // groups"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        userInput \u003d targetIndex.getOneBased() + GROUP_DESC_FRIEND;"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withGroups(VALID_GROUP_FRIEND).build();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"        // preferences"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"        userInput \u003d targetIndex.getOneBased() + PREFERENCE_DESC_SHOES;"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPreferences(VALID_PREFERENCE_SHOES).build();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":"                + GROUP_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + GROUP_DESC_FRIEND"},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + PREFERENCE_DESC_COMPUTERS;"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"                .withGroups(VALID_GROUP_FRIEND)"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_COMPUTERS).build();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_resetGroups_success() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"        String userInput \u003d targetIndex.getOneBased() + GROUP_EMPTY;"},{"lineNumber":234,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withGroups().build();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_resetPreferences_success() {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"        String userInput \u003d targetIndex.getOneBased() + PREFERENCE_EMPTY;"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPreferences().build();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":56,"-":195}},{"path":"src/test/java/systemtests/FindGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_TWITTER;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public void findGroup() {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book by their groups, command with leading spaces and trailing spaces"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        String command \u003d \"   \" + FindGroupCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TWITTER + \"   \";"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, ELLE); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: repeat previous find group command where person list is displaying the persons we are finding"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TWITTER;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find persons via their group tags where person list is not displaying the person we are finding"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 4 persons found */"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" friends\";"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, FIONA, GEORGE);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via group tags, 2 keywords -\u003e 2 persons found */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" neighbours twitter\";"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, ELLE);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via group tags, 2 keywords in reversed order"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" twitter neighbours\";"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via group tags, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" neighbours twitter neighbours\";"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via group tags, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" neighbours twitter NonMatchingKeyWord\";"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find same persons via group tags in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TWITTER;"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via group tag,"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        keyword is same as group name but of different case -\u003e 1 person found */"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" TWItter\";"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via group tag, keyword is substring of group name -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" twit\";"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via group tag, group name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" twitters\";"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person via group tags not in address book -\u003e 0 persons found */"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" Facebook\";"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find name of person in address book with FindGroupCommand -\u003e 0 persons found */"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + ALICE.getName().toString();"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + ALICE.getPhone().value;"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + ALICE.getAddress().value;"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + ALICE.getEmail().value;"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find preferences of person in address book -\u003e 0 persons found */"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cPreference\u003e preferences \u003d new ArrayList\u003c\u003e(ALICE.getPreferenceTags());"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + preferences.get(0).tagName;"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find via group tags while a person is selected -\u003e selected card deselected */"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        showAllPersons();"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(ELLE.getName().fullName));"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" twitter\";"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in empty address book via group tags -\u003e 0 persons found */"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        deleteAllPersons();"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TWITTER;"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d \"GrOuPFiNd neighbours\";"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"     * These verifications are done by"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"     * These verifications are done by"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"     * error style."},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":207}},{"path":"src/test/java/seedu/address/logic/parser/DeleteGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteGroupCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    private DeleteGroupCommandParser parser \u003d new DeleteGroupCommandParser();"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_validArgs_returnsDeleteGroupCommand() {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \"friends\", new DeleteGroupCommand(FRIENDS));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"fr!ends\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"                DeleteGroupCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":16,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_GROUP \u003d \"#friend\";"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_PREFERENCE \u003d \"#shoes\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_GROUP_1 \u003d \"friend\";"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_GROUP_2 \u003d \"neighbour\";"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_PREFERENCE_1 \u003d \"shoes\";"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_PREFERENCE_2 \u003d \"computers\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseGroup_null_throwsNullPointerException() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"        ParserUtil.parseGroup(null);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseGroup_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":210,"author":{"gitID":"SuxianAlicia"},"content":"        ParserUtil.parseGroup(INVALID_GROUP);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseGroup_validValueWithoutWhitespace_returnsGroup() throws Exception {"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"        Group expectedGroup \u003d new Group(VALID_GROUP_1);"},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedGroup, ParserUtil.parseGroup(VALID_GROUP_1));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseGroup_validValueWithWhitespace_returnsTrimmedGroup() throws Exception {"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":"        String groupWithWhitespace \u003d WHITESPACE + VALID_GROUP_1 + WHITESPACE;"},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":"        Group expectedGroup \u003d new Group(VALID_GROUP_1);"},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedGroup, ParserUtil.parseGroup(groupWithWhitespace));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseGroups_null_throwsNullPointerException() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":"        ParserUtil.parseGroups(null);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseGroups_collectionWithInvalidGroups_throwsIllegalValueException() throws Exception {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":"        ParserUtil.parseGroups(Arrays.asList(VALID_GROUP_1, INVALID_GROUP));"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseGroups_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(ParserUtil.parseGroups(Collections.emptyList()).isEmpty());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"    public void parseGroups_collectionWithValidGroups_returnsGroupSet() throws Exception {"},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cGroup\u003e actualGroupSet \u003d ParserUtil.parseGroups(Arrays.asList(VALID_GROUP_1, VALID_GROUP_2));"},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cGroup\u003e expectedGroupSet \u003d new HashSet\u003cGroup\u003e(Arrays.asList(new Group(VALID_GROUP_1),"},{"lineNumber":247,"author":{"gitID":"SuxianAlicia"},"content":"                new Group(VALID_GROUP_2)));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedGroupSet, actualGroupSet);"},{"lineNumber":250,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":252,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"SuxianAlicia"},"content":"    public void parsePreference_null_throwsNullPointerException() throws Exception {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":255,"author":{"gitID":"SuxianAlicia"},"content":"        ParserUtil.parsePreference(null);"},{"lineNumber":256,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":258,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":259,"author":{"gitID":"SuxianAlicia"},"content":"    public void parsePreference_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":261,"author":{"gitID":"SuxianAlicia"},"content":"        ParserUtil.parsePreference(INVALID_PREFERENCE);"},{"lineNumber":262,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":264,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":265,"author":{"gitID":"SuxianAlicia"},"content":"    public void parsePreference_validValueWithoutWhitespace_returnsPreference() throws Exception {"},{"lineNumber":266,"author":{"gitID":"SuxianAlicia"},"content":"        Preference expectedPreference \u003d new Preference(VALID_PREFERENCE_1);"},{"lineNumber":267,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedPreference, ParserUtil.parsePreference(VALID_PREFERENCE_1));"},{"lineNumber":268,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":270,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":271,"author":{"gitID":"SuxianAlicia"},"content":"    public void parsePreference_validValueWithWhitespace_returnsTrimmedPreference() throws Exception {"},{"lineNumber":272,"author":{"gitID":"SuxianAlicia"},"content":"        String preferenceWithWhitespace \u003d WHITESPACE + VALID_PREFERENCE_1 + WHITESPACE;"},{"lineNumber":273,"author":{"gitID":"SuxianAlicia"},"content":"        Preference expectedPreference \u003d new Preference(VALID_PREFERENCE_1);"},{"lineNumber":274,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedPreference, ParserUtil.parseGroup(preferenceWithWhitespace));"},{"lineNumber":275,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":277,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":278,"author":{"gitID":"SuxianAlicia"},"content":"    public void parsePreferences_null_throwsNullPointerException() throws Exception {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":280,"author":{"gitID":"SuxianAlicia"},"content":"        ParserUtil.parsePreferences(null);"},{"lineNumber":281,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":283,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":284,"author":{"gitID":"SuxianAlicia"},"content":"    public void parsePreferences_collectionWithInvalidPreferences_throwsIllegalValueException() throws Exception {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":286,"author":{"gitID":"SuxianAlicia"},"content":"        ParserUtil.parsePreferences(Arrays.asList(VALID_PREFERENCE_1, INVALID_PREFERENCE));"},{"lineNumber":287,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":289,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":290,"author":{"gitID":"SuxianAlicia"},"content":"    public void parsePreferences_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":291,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(ParserUtil.parsePreferences(Collections.emptyList()).isEmpty());"},{"lineNumber":292,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":294,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":295,"author":{"gitID":"SuxianAlicia"},"content":"    public void parsePreferences_collectionWithValidPreferences_returnsPreferenceSet() throws Exception {"},{"lineNumber":296,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cPreference\u003e actualPreferenceSet \u003d"},{"lineNumber":297,"author":{"gitID":"SuxianAlicia"},"content":"                ParserUtil.parsePreferences(Arrays.asList(VALID_PREFERENCE_1, VALID_PREFERENCE_2));"},{"lineNumber":298,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cPreference\u003e expectedPreferenceSet \u003d"},{"lineNumber":299,"author":{"gitID":"SuxianAlicia"},"content":"                new HashSet\u003cPreference\u003e(Arrays.asList(new Preference(VALID_PREFERENCE_1),"},{"lineNumber":300,"author":{"gitID":"SuxianAlicia"},"content":"                new Preference(VALID_PREFERENCE_2)));"},{"lineNumber":301,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":302,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedPreferenceSet, actualPreferenceSet);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":79,"-":225}},{"path":"src/test/java/seedu/address/logic/parser/FindPreferenceCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    private FindPreferenceCommandParser parser \u003d new FindPreferenceCommandParser();"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPreferenceCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_validArgs_returnsFindPreferenceCommand() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand expectedFindPreferenceCommand \u003d"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"                new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(Arrays.asList(\"Computers\", \"Shoes\")));"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \"Computers Shoes\", expectedFindPreferenceCommand);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \" \\n Computers \\n \\t Shoes  \\t\", expectedFindPreferenceCommand);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":24,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_FRIEND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PREFERENCE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREFERENCE_DESC_COMPUTERS;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_COLLEAGUES;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_COMPUTERS;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_SHOES;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_FRIEND)"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_COMPUTERS).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple groups - all accepted"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        Person expectedPersonMultipleGroups \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"                .withGroups(VALID_GROUP_FRIEND, VALID_GROUP_COLLEAGUES).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"                + PREFERENCE_DESC_COMPUTERS + GROUP_DESC_FRIEND, new AddCommand(expectedPersonMultipleGroups));"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple preferences - all accepted"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        Person expectedPersonMultiplePreferences \u003d new PersonBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_COMPUTERS, VALID_PREFERENCE_SHOES).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"                + PREFERENCE_DESC_COMPUTERS + GROUP_DESC_FRIEND, new AddCommand(expectedPersonMultiplePreferences));"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withGroups().build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"                + PREFERENCE_DESC_COMPUTERS + GROUP_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"                + PREFERENCE_DESC_COMPUTERS + GROUP_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"                + PREFERENCE_DESC_COMPUTERS + GROUP_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"                + PREFERENCE_DESC_COMPUTERS + GROUP_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid group"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"                + INVALID_GROUP_DESC + VALID_PREFERENCE_COMPUTERS, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid preference"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"                + GROUP_DESC_FRIEND + INVALID_PREFERENCE_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"                + ADDRESS_DESC_BOB + PREFERENCE_DESC_COMPUTERS + GROUP_DESC_FRIEND,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":38,"-":126}},{"path":"src/test/java/seedu/address/logic/parser/DeleteEntryCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteEntryCommand;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteEntryCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    private DeleteEntryCommandParser parser \u003d new DeleteEntryCommandParser();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \"1\", new DeleteEntryCommand(INDEX_FIRST_ENTRY));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"                DeleteEntryCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":13,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":6,"-":189}},{"path":"src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_GET_STOCKS;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_MEET_BOSS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_GET_STOCKS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_MEET_BOSS;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ENTRY_TITLE_DESC_GET_STOCKS;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ENTRY_TITLE_DESC_MEET_BOSS;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENTRY_TITLE_DESC;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_LATER_THAN_END_DATE_DESC;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_LATER_THAN_END_TIME_DESC;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_LESS_THAN_FIFTEEN_MINUTES_FROM_END_TIME_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_GET_STOCKS;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_MEET_BOSS;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_GET_STOCKS;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_MEET_BOSS;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_MEET_BOSS;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MEET_BOSS;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENTRY_TITLE_MEET_BOSS;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_MEET_BOSS;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MEET_BOSS;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.AddEventCommandParser.STANDARD_START_TIME;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.AddEntryCommand;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndDate;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndTime;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EntryTitle;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartDate;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartTime;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.CalendarEntryBuilder;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"public class AddEventCommandParserTest {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEntryCommand.MESSAGE_USAGE);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    private AddEventCommandParser parser \u003d new AddEventCommandParser();"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry expectedCalEvent \u003d new CalendarEntryBuilder()"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_BOSS)"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_START_DATE_MEET_BOSS)"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_MEET_BOSS)"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(VALID_START_TIME_MEET_BOSS)"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_BOSS).build();"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        // whitespace only preamble"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_BOSS + ENTRY_TITLE_DESC_MEET_BOSS"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_BOSS + START_TIME_DESC_MEET_BOSS + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple event title strings - last event title string accepted"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, ENTRY_TITLE_DESC_GET_STOCKS + START_DATE_DESC_MEET_BOSS"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_BOSS + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple start date strings - last start date string accepted"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, START_DATE_DESC_GET_STOCKS + START_DATE_DESC_MEET_BOSS"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_BOSS + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple end date strings - last end date string accepted"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, END_DATE_DESC_GET_STOCKS + START_DATE_DESC_MEET_BOSS"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_BOSS + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple start time strings - last start time string accepted"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, START_TIME_DESC_GET_STOCKS + START_DATE_DESC_MEET_BOSS"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_BOSS + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple end time strings - last end time string accepted"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, END_TIME_DESC_GET_STOCKS + START_DATE_DESC_MEET_BOSS"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_BOSS + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        // No start Date - Start Date should match End Date"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry expectedCalEvent \u003d new CalendarEntryBuilder()"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_BOSS)"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_END_DATE_MEET_BOSS)"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_MEET_BOSS)"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(VALID_START_TIME_MEET_BOSS)"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_BOSS).build();"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, ENTRY_TITLE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_BOSS + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        // No Start Time - Start Time equals to 00:00"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        expectedCalEvent \u003d new CalendarEntryBuilder()"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_BOSS)"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_START_DATE_MEET_BOSS)"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_MEET_BOSS)"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(STANDARD_START_TIME)"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_BOSS).build();"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, ENTRY_TITLE_DESC_MEET_BOSS + START_DATE_DESC_MEET_BOSS"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_BOSS + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        // No Start Date and No Start Time"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        expectedCalEvent \u003d new CalendarEntryBuilder()"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_BOSS)"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_END_DATE_MEET_BOSS)"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_MEET_BOSS)"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(STANDARD_START_TIME)"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_BOSS).build();"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, ENTRY_TITLE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        // Missing Event Title prefix"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  VALID_ENTRY_TITLE_MEET_BOSS"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_BOSS + START_TIME_DESC_MEET_BOSS,"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        // Missing End Date prefix"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_BOSS"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_BOSS + VALID_END_DATE_MEET_BOSS"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_BOSS + START_TIME_DESC_MEET_BOSS,"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        // Missing End Time prefix"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_BOSS"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"                        + VALID_END_TIME_MEET_BOSS + START_TIME_DESC_MEET_BOSS,"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"        // All prefixes missing"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  VALID_ENTRY_TITLE_MEET_BOSS"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"                        + VALID_START_DATE_MEET_BOSS + VALID_END_DATE_MEET_BOSS"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"                        + VALID_END_TIME_MEET_BOSS + VALID_START_TIME_MEET_BOSS,"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid Event Title"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  INVALID_ENTRY_TITLE_DESC"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_BOSS + START_TIME_DESC_MEET_BOSS,"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"                EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid Start Date"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_BOSS"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"                        + INVALID_START_DATE_DESC + END_DATE_DESC_MEET_BOSS"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_BOSS + START_TIME_DESC_MEET_BOSS,"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"                StartDate.MESSAGE_START_DATE_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid End Date"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_BOSS"},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_BOSS + INVALID_END_DATE_DESC"},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_BOSS + START_TIME_DESC_MEET_BOSS,"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"                EndDate.MESSAGE_END_DATE_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid Start Time"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_BOSS"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_BOSS + INVALID_START_TIME_DESC,"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"                StartTime.MESSAGE_START_TIME_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid End Time"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_BOSS"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_BOSS + END_DATE_DESC_MEET_BOSS"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"                        + INVALID_END_TIME_DESC + START_TIME_DESC_MEET_BOSS,"},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"                EndTime.MESSAGE_END_TIME_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"        // Start Date later than End Date"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, ENTRY_TITLE_DESC_MEET_BOSS + INVALID_START_DATE_LATER_THAN_END_DATE_DESC"},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_BOSS + START_TIME_DESC_MEET_BOSS + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"                AddEventCommandParser.START_AND_END_DATE_CONSTRAINTS);"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        // Start Time later than End Time for same Start Date and End Date"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, ENTRY_TITLE_DESC_MEET_BOSS + START_DATE_DESC_MEET_BOSS"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_BOSS + INVALID_START_TIME_LATER_THAN_END_TIME_DESC"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":"                AddEventCommandParser.START_AND_END_TIME_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":209,"author":{"gitID":"SuxianAlicia"},"content":"        // Start Time less than 15 minutes from End Time for same Start Date and End Date"},{"lineNumber":210,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, ENTRY_TITLE_DESC_MEET_BOSS + START_DATE_DESC_MEET_BOSS"},{"lineNumber":211,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_BOSS + INVALID_START_TIME_LESS_THAN_FIFTEEN_MINUTES_FROM_END_TIME_DESC"},{"lineNumber":212,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_BOSS,"},{"lineNumber":213,"author":{"gitID":"SuxianAlicia"},"content":"                AddEventCommandParser.EVENT_DURATION_CONSTRAINTS);"},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":206,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/DeleteOrderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalAddressBookWithOrders;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":" * {@code DeleteOrderCommand}."},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"public class DeleteOrderCommandTest {"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBookWithOrders(), new CalendarManager(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(DeleteOrderCommand.MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete);"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        expectedModel.deleteOrder(orderToDelete);"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(deleteOrderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(deleteOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        // delete -\u003e first order deleted"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        deleteOrderCommand.execute();"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        undoRedoStack.push(deleteOrderCommand);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        // undo -\u003e reverts address book back to previous state and order list to show all orders"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        // redo -\u003e same first order deleted again"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        expectedModel.deleteOrder(orderToDelete);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        // execution failed -\u003e deleteOrderCommand not pushed into undoRedoStack"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(deleteOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    public void equals() throws Exception {"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteFirstOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER);"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteSecondOrderCommand \u003d prepareCommand(INDEX_SECOND_ORDER);"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        assertTrue(deleteFirstOrderCommand.equals(deleteFirstOrderCommand));"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        // same values -\u003e returns true"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteFirstOrderCommandCopy \u003d prepareCommand(INDEX_FIRST_ORDER);"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"        assertTrue(deleteFirstOrderCommand.equals(deleteFirstOrderCommandCopy));"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        deleteFirstOrderCommandCopy.preprocessUndoableCommand();"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        assertFalse(deleteFirstOrderCommand.equals(deleteFirstOrderCommandCopy));"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        // different types -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        assertFalse(deleteFirstOrderCommand.equals(1));"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        // null -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        assertFalse(deleteFirstOrderCommand.equals(null));"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        // different order -\u003e returns false"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        assertFalse(deleteFirstOrderCommand.equals(deleteSecondOrderCommand));"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"     * Returns a {@code DeleteOrderCommand} with the parameter {@code index}."},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"    private DeleteOrderCommand prepareCommand(Index index) {"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d new DeleteOrderCommand(index);"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"        deleteOrderCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"        return deleteOrderCommand;"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":126}},{"path":"src/test/java/seedu/address/logic/commands/EditOrderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_COMICBOOK;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_COMPUTER;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_COMPUTER;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalAddressBookWithOrders;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand.EditOrderDescriptor;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.EditOrderDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":" * for EditOrderCommand."},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"public class EditOrderCommandTest {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBookWithOrders(), new CalendarManager(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d new OrderBuilder().build();"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(editedOrder).build();"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER, descriptor);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(EditOrderCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new CalendarManager(),"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrder(model.getFilteredOrderList().get(0), editedOrder);"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(editOrderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        Index indexLastOrder \u003d Index.fromOneBased(model.getFilteredOrderList().size());"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        Order lastOrder \u003d model.getFilteredOrderList().get(indexLastOrder.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        OrderBuilder orderInList \u003d new OrderBuilder(lastOrder);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d orderInList.withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER).build();"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER).build();"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(indexLastOrder, descriptor);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(EditOrderCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new CalendarManager(),"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrder(lastOrder, editedOrder);"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(editOrderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER, new EditOrderDescriptor());"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(EditOrderCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new CalendarManager(),"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrder(model.getFilteredOrderList().get(0), editedOrder);"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(editOrderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"    public void execute_duplicateOrderUnfilteredList_failure() {"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        Order firstOrder \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(firstOrder).build();"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(INDEX_SECOND_ORDER, descriptor);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(editOrderCommand, model, EditOrderCommand.MESSAGE_DUPLICATE_ORDER);"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"    public void execute_invalidOrderIndexUnfilteredList_failure() {"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER).build();"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(editOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d new OrderBuilder().build();"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        Order orderToEdit \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(editedOrder).build();"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER, descriptor);"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new CalendarManager(),"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        // edit -\u003e first order edited"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"        editOrderCommand.execute();"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"        undoRedoStack.push(editOrderCommand);"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"        // undo -\u003e reverts address book back to previous state and filtered order list to show all orders"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        // redo -\u003e same first order edited again"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrder(orderToEdit, editedOrder);"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER).build();"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        // execution failed -\u003e editOrderCommand not pushed into undoRedoStack"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(editOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"    public void equals() throws Exception {"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"        final EditOrderCommand firstCommand \u003d prepareCommand(INDEX_FIRST_ORDER, DESC_COMPUTER);"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"        // same values -\u003e returns true"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor copyDescriptor \u003d new EditOrderDescriptor(DESC_COMPUTER);"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand firstCommandCopy \u003d prepareCommand(INDEX_FIRST_ORDER, copyDescriptor);"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e returns true"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"        firstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(firstCommandCopy));"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"        // null -\u003e returns false"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"        // different types -\u003e returns false"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(1));"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        // different index -\u003e returns false"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(new EditOrderCommand(INDEX_SECOND_ORDER, DESC_COMPUTER)));"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(new EditOrderCommand(INDEX_FIRST_ORDER, DESC_COMICBOOK)));"},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"     * Returns an {@code EditOrderCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"    private EditOrderCommand prepareCommand(Index index, EditOrderDescriptor descriptor) {"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d new EditOrderCommand(index, descriptor);"},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"        editOrderCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"        return editOrderCommand;"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":193}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_FRIEND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                new CalendarManager(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"                .withGroups(VALID_GROUP_FRIEND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"                .withPhone(VALID_PHONE_BOB).withGroups(VALID_GROUP_FRIEND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"                new CalendarManager(), new UserPrefs());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"                new CalendarManager(), new UserPrefs());"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"                new CalendarManager(), new UserPrefs());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new CalendarManager(),"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"                new UserPrefs());"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new CalendarManager(),"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"                new UserPrefs());"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":17,"-":252}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(),  new CalendarManager(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":3,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/DeleteGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.COLLEAGUES;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":" * {@code DeleteGroupCommand}."},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteGroupCommandTest {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_validGroup_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        Group groupToDelete \u003d FRIENDS;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(FRIENDS);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deleteGroup(groupToDelete);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(deleteGroupCommand, model, expectedMessage, expectedModel);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_unexistingGroup_throwsCommandException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        Group groupToDelete \u003d new Group(\"friend\");"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(groupToDelete);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deleteGroupCommand, model, DeleteGroupCommand.MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_validGroup_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        Group groupToDelete \u003d FRIENDS;"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(groupToDelete);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        // delete -\u003e friends group deleted"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        deleteGroupCommand.execute();"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        undoRedoStack.push(deleteGroupCommand);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        // redo -\u003e same group deleted again"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deleteGroup(groupToDelete);"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_invalidPreference_failure() {"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        Group groupToDelete \u003d new Group(\"friend\");"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(groupToDelete);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        // execution failed -\u003e deleteGroupCommand not pushed into undoRedoStack"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deleteGroupCommand, model, DeleteGroupCommand.MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() throws Exception {"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteFirstCommand \u003d prepareCommand(FRIENDS);"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteSecondCommand \u003d prepareCommand(COLLEAGUES);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteFirstCommandCopy \u003d prepareCommand(FRIENDS);"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        // different preference -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    private DeleteGroupCommand prepareCommand(Group group) {"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(group);"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        deleteGroupCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        return deleteGroupCommand;"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":99,"-":20}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_COLLEAGUES;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_COMPUTERS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        // different groups -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGroups(VALID_GROUP_COLLEAGUES).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        // different preferences -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGroups(VALID_PREFERENCE_COMPUTERS).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":6,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/ListOrderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalAddressBookWithOrders;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListOrderCommand."},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"public class ListOrderCommandTest {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private ListOrderCommand listOrderCommand;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Before"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        model \u003d new ModelManager(getTypicalAddressBookWithOrders(),  new CalendarManager(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        listOrderCommand \u003d new ListOrderCommand();"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        listOrderCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(listOrderCommand, model, ListOrderCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":24,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/ViewCalendarCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewCalendarCommandTest {"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":7}},{"path":"src/test/java/seedu/address/logic/commands/DeletePreferenceCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.SHOES;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":" * {@code DeletePreferenceCommand}."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"public class DeletePreferenceCommandTest {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_validPreference_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        Preference prefToDelete \u003d SHOES;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d prepareCommand(SHOES);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(DeletePreferenceCommand.MESSAGE_DELETE_PREFERENCE_SUCCESS, prefToDelete);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deletePreference(prefToDelete);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(deletePrefCommand, model, expectedMessage, expectedModel);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_unexistingPreference_throwsCommandException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        Preference prefToDelete \u003d new Preference(\"shoe\");"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d prepareCommand(prefToDelete);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deletePrefCommand, model, DeletePreferenceCommand.MESSAGE_PREFERENCE_NOT_FOUND);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_validPreference_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        Preference prefToDelete \u003d SHOES;"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d prepareCommand(prefToDelete);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        // delete -\u003e shoes preference deleted"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        deletePrefCommand.execute();"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        undoRedoStack.push(deletePrefCommand);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        // redo -\u003e same preference deleted again"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deletePreference(prefToDelete);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_invalidPreference_failure() {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        Preference prefToDelete \u003d new Preference(\"shoe\");"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d prepareCommand(prefToDelete);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        // execution failed -\u003e deletePrefCommand not pushed into undoRedoStack"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deletePrefCommand, model, DeletePreferenceCommand.MESSAGE_PREFERENCE_NOT_FOUND);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() throws Exception {"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deleteFirstCommand \u003d prepareCommand(SHOES);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deleteSecondCommand \u003d prepareCommand(COMPUTERS);"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deleteFirstCommandCopy \u003d prepareCommand(SHOES);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        // different preference -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    private DeletePreferenceCommand prepareCommand(Preference preference) {"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d new DeletePreferenceCommand(preference);"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        deletePrefCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        return deletePrefCommand;"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":100,"-":20}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_TITLE;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PREFERENCE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditOrderDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_GROUP_FRIEND \u003d \"friend\";"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_GROUP_COLLEAGUES \u003d \"colleagues\";"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_PREFERENCE_COMPUTERS \u003d \"computers\";"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_PREFERENCE_SHOES \u003d \"shoes\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String VALID_ORDER_INFORMATION_CHOC \u003d \"Chocolates\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String VALID_PRICE_CHOC \u003d \"10.00\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String VALID_QUANTITY_CHOC \u003d \"15\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String VALID_DELIVERY_DATE_CHOC \u003d \"12-08-2018\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String VALID_ORDER_INFORMATION_BOOKS \u003d \"Books\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String VALID_PRICE_BOOKS \u003d \"15.00\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String VALID_QUANTITY_BOOKS \u003d \"3\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String VALID_DELIVERY_DATE_BOOKS \u003d \"04-12-2018\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String VALID_ORDER_INFORMATION_COMPUTER \u003d \"Computer\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String VALID_PRICE_COMPUTER \u003d \"2000.00\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String VALID_QUANTITY_COMPUTER \u003d \"1\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String VALID_DELIVERY_DATE_COMPUTER \u003d \"18-07-2018\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_ENTRY_TITLE_MEET_BOSS \u003d \"Meeting with boss\";"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_ENTRY_TITLE_GET_STOCKS \u003d \"Get stocks from supplier\";"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_START_DATE_MEET_BOSS \u003d \"06-06-2018\";"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_START_DATE_GET_STOCKS \u003d \"01-07-2018\";"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_END_DATE_MEET_BOSS \u003d \"06-06-2018\";"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_END_DATE_GET_STOCKS \u003d \"01-07-2018\";"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_START_TIME_MEET_BOSS \u003d \"10:00\";"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_START_TIME_GET_STOCKS \u003d \"08:00\";"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_END_TIME_MEET_BOSS \u003d \"12:00\";"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String VALID_END_TIME_GET_STOCKS \u003d \"12:00\";"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String GROUP_DESC_FRIEND \u003d \" \" + PREFIX_GROUP + VALID_GROUP_FRIEND;"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String GROUP_DESC_COLLEAGUES \u003d \" \" + PREFIX_GROUP + VALID_GROUP_COLLEAGUES;"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String PREFERENCE_DESC_COMPUTERS \u003d \" \" + PREFIX_PREFERENCE + VALID_PREFERENCE_COMPUTERS;"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String PREFERENCE_DESC_SHOES \u003d \" \" + PREFIX_PREFERENCE + VALID_PREFERENCE_SHOES;"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String ORDER_INFORMATION_DESC_CHOC \u003d \" \" + PREFIX_ORDER_INFORMATION"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            + VALID_ORDER_INFORMATION_CHOC;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String PRICE_DESC_CHOC \u003d \" \" + PREFIX_PRICE + VALID_PRICE_CHOC;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String QUANTITY_DESC_CHOC \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_CHOC;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String DELIVERY_DATE_DESC_CHOC \u003d \" \" + PREFIX_DELIVERY_DATE + VALID_DELIVERY_DATE_CHOC;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String ORDER_INFORMATION_DESC_BOOKS \u003d \" \" + PREFIX_ORDER_INFORMATION"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            + VALID_ORDER_INFORMATION_BOOKS;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final String PRICE_DESC_BOOKS \u003d \" \" + PREFIX_PRICE + VALID_PRICE_BOOKS;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final String QUANTITY_DESC_BOOKS \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_BOOKS;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static final String DELIVERY_DATE_DESC_BOOKS \u003d \" \" + PREFIX_DELIVERY_DATE + VALID_DELIVERY_DATE_BOOKS;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static final String ORDER_INFORMATION_DESC_COMPUTER \u003d \" \" + PREFIX_ORDER_INFORMATION"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            + VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static final String PRICE_DESC_COMPUTER \u003d \" \" + PREFIX_PRICE + VALID_PRICE_COMPUTER;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final String QUANTITY_DESC_COMPUTER \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_COMPUTER;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static final String DELIVERY_DATE_DESC_COMPUTER \u003d \" \" + PREFIX_DELIVERY_DATE + VALID_DELIVERY_DATE_COMPUTER;"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String ENTRY_TITLE_DESC_MEET_BOSS \u003d \" \" + PREFIX_ENTRY_TITLE + VALID_ENTRY_TITLE_MEET_BOSS;"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String ENTRY_TITLE_DESC_GET_STOCKS \u003d \" \" + PREFIX_ENTRY_TITLE + VALID_ENTRY_TITLE_GET_STOCKS;"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_DATE_DESC_MEET_BOSS \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_MEET_BOSS;"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_DATE_DESC_GET_STOCKS \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_GET_STOCKS;"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String END_DATE_DESC_MEET_BOSS \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_MEET_BOSS;"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String END_DATE_DESC_GET_STOCKS \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_GET_STOCKS;"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_TIME_DESC_MEET_BOSS \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_MEET_BOSS;"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_TIME_DESC_GET_STOCKS \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_GET_STOCKS;"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String END_TIME_DESC_MEET_BOSS \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_MEET_BOSS;"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String END_TIME_DESC_GET_STOCKS \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_GET_STOCKS;"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_GROUP_DESC \u003d \" \" + PREFIX_GROUP + \"hubby*\"; // \u0027*\u0027 not allowed in groups"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_PREFERENCE_DESC \u003d"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"            \" \" + PREFIX_PREFERENCE + \"computers*\"; // \u0027*\u0027 not allowed in preferences"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static final String INVALID_ORDER_INFORMATION_DESC \u003d \" \""},{"lineNumber":130,"author":{"gitID":"-"},"content":"            + PREFIX_ORDER_INFORMATION + \"\u0026Books\"; // \u0027\u0026\u0027 not allowed in order information"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"jdw11\"; // \u0027jdw\u0027 not allowed in prices"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static final String INVALID_QUANTITY_DESC \u003d \" \""},{"lineNumber":133,"author":{"gitID":"-"},"content":"            + PREFIX_QUANTITY + \"-11\"; // \u0027-\u0027 sign not allowed in quantities"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static final String INVALID_DELIVERY_DATE_DESC \u003d \" \" + PREFIX_DELIVERY_DATE + \"20-45-10000\"; // illegal date"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_ENTRY_TITLE_DESC \u003d \" \""},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_ENTRY_TITLE + \"M@@ting with the boss, \"; // \u0027@\u0027 and \u0027,\u0027 are not allowed in event title."},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_START_DATE_DESC \u003d \" \" + PREFIX_START_DATE + \"31-02-2018\"; // Illegal date"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_END_DATE_DESC \u003d \" \" + PREFIX_END_DATE + \"23-20-20000\"; // Illegal date"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"12-30\"; //Illegal time format"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"25:70\"; // Illegal time"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_START_DATE_LATER_THAN_END_DATE_DESC \u003d"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"            \" \" + PREFIX_START_DATE + \"06-07-2018\"; // Start Date later than 06-06-2018"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_START_TIME_LATER_THAN_END_TIME_DESC \u003d"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"            \" \" + PREFIX_START_TIME + \"23:00\"; // Start Time later than End time same Start Date and End Date."},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String INVALID_START_TIME_LESS_THAN_FIFTEEN_MINUTES_FROM_END_TIME_DESC \u003d"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"            \" \" + PREFIX_START_TIME + \"11:50\";"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static final String INVALID_THEME \u003d \"day791\";"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static final EditOrderCommand.EditOrderDescriptor DESC_COMPUTER;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public static final EditOrderCommand.EditOrderDescriptor DESC_COMICBOOK;"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"                .withGroups(VALID_GROUP_FRIEND).withPreferences(VALID_PREFERENCE_SHOES).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"                .withGroups(VALID_GROUP_COLLEAGUES, VALID_GROUP_FRIEND)"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"                .withPreferences(VALID_PREFERENCE_COMPUTERS).build();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        DESC_COMPUTER \u003d new EditOrderDescriptorBuilder().withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                .withPrice(VALID_PRICE_COMPUTER).withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER).build();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        DESC_COMICBOOK \u003d new EditOrderDescriptorBuilder().withOrderInformation(\"Comic Book\").withPrice(\"17.99\")"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                .withQuantity(\"1\")"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                .withDeliveryDate(\"01-01-2018\")"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":205,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":58,"-":203}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":2,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":3,"-":53}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":4,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":4,"-":65}},{"path":"src/test/java/seedu/address/logic/commands/ChangeThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.MESSAGE_INVALID_THEME;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.MESSAGE_THEME_CHANGED_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_THEME;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.DARK_THEME_KEYWORD;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.LIGHT_THEME_KEYWORD;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    private UserPrefs userPrefs;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    private Model model;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        guiSettings \u003d userPrefs.getGuiSettings();"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public void constructor_nullTheme_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        new ChangeThemeCommand(null);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    public void execute_themeAccepted_guiSettingsChanged() {"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand changeThemeToLightCommand \u003d prepareCommand(LIGHT_THEME_KEYWORD);"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MESSAGE_THEME_CHANGED_SUCCESS, LIGHT_THEME_KEYWORD);"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        UserPrefs expectedUserPrefs \u003d new UserPrefs();"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        expectedUserPrefs.setGuiSettings("},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowHeight(),"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowWidth(),"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowCoordinates().x,"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowCoordinates().y,"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"                LIGHT_THEME_KEYWORD"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        );"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), expectedUserPrefs);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(changeThemeToLightCommand, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand changeThemeToDarkCommand \u003d prepareCommand(DARK_THEME_KEYWORD);"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        expectedMessage \u003d String.format(MESSAGE_THEME_CHANGED_SUCCESS, DARK_THEME_KEYWORD);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        expectedUserPrefs \u003d new UserPrefs();"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        expectedUserPrefs.setGuiSettings("},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowHeight(),"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowWidth(),"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowCoordinates().x,"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowCoordinates().y,"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"                DARK_THEME_KEYWORD"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        );"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), expectedUserPrefs);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(changeThemeToDarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    public void execute_invalidTheme_throwsCommandException() {"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand invalidChangeThemeCommand \u003d prepareCommand(INVALID_THEME);"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_THEME, INVALID_THEME);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(invalidChangeThemeCommand, model, expectedMessage);"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    public void equals() {"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand darkThemeCommand \u003d new ChangeThemeCommand(DARK_THEME_KEYWORD);"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand lightThemeCommand \u003d new ChangeThemeCommand(LIGHT_THEME_KEYWORD);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e true"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        assertTrue(darkThemeCommand.equals(darkThemeCommand));"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        // same value -\u003e true"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand darkThemeCommandCopy \u003d new ChangeThemeCommand(DARK_THEME_KEYWORD);"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"        assertTrue(darkThemeCommand.equals(darkThemeCommandCopy));"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        // different value -\u003e false"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        assertFalse(darkThemeCommand.equals(lightThemeCommand));"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        assertFalse(darkThemeCommand.equals(1));"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        // null -\u003e false"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        assertFalse(darkThemeCommand.equals(null));"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"    private ChangeThemeCommand prepareCommand(String theme) {"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand changeThemeCommand \u003d new ChangeThemeCommand(theme);"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"        changeThemeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        return changeThemeCommand;"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":121}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":43,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":3,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":2,"-":140}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":2,"-":97}},{"path":"src/test/java/seedu/address/logic/commands/FindPreferenceCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommandTest {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate firstPredicate \u003d"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate secondPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand findPreferenceFirstCommand \u003d new FindPreferenceCommand(firstPredicate);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand findPreferenceSecondCommand \u003d new FindPreferenceCommand(secondPredicate);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(findPreferenceFirstCommand.equals(findPreferenceFirstCommand));"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand findPreferenceFirstCommandCopy \u003d new FindPreferenceCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(findPreferenceFirstCommand.equals(findPreferenceFirstCommandCopy));"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findPreferenceFirstCommand.equals(1));"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findPreferenceFirstCommand.equals(null));"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        // different person -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findPreferenceFirstCommand.equals(findPreferenceSecondCommand));"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand command \u003d prepareCommand(\" \");"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand command \u003d prepareCommand(\"videoGames shoes\");"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, GEORGE));"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code userInput} into a {@code FindPreferenceCommand}."},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    private FindPreferenceCommand prepareCommand(String userInput) {"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand command \u003d"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"                new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(Arrays.asList(userInput"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"                        .split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(FindPreferenceCommand command, String expectedMessage,"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"                                      List\u003cPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":76,"-":23}},{"path":"src/test/java/seedu/address/logic/commands/ListCalendarEntryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCalendarEntryCommand."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class ListCalendarEntryCommandTest {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private Model expectedModel;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private ListCalendarEntryCommand listCalendarEntryCommand;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendarManagerWithEntries(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        listCalendarEntryCommand \u003d new ListCalendarEntryCommand();"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        listCalendarEntryCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(listCalendarEntryCommand, model, ListCalendarEntryCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":23,"-":15}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlyCalendarManager newCalendarData) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        public void updateOrder(Order target, Order editedOrder) throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEventList() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"        public Calendar getCalendar() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateFilteredCalendarEventList(Predicate\u003cCalendarEntry\u003e predicate) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"        public void deleteGroup(Group targetGroup) throws GroupNotFoundException {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        public void deletePreference(Preference targetPreference) throws PreferenceNotFoundException {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void addOrderToOrderList(Order orderToAdd) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public void deleteOrder(Order targetOrder) throws OrderNotFoundException {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":"        public void addCalendarEntry(CalendarEntry toAdd)"},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateCalendarEntryException {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"        public void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * A Model stub that always throws a DuplicatePersonException when trying to add a person."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":243,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":"            return new CalendarManager();"},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * A Model stub that always accepts the person being added."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":266,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":267,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":268,"author":{"gitID":"SuxianAlicia"},"content":"            return new CalendarManager();"},{"lineNumber":269,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":49,"-":222}},{"path":"src/test/java/seedu/address/logic/commands/AddOrderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.FACEWASH;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.SHOES;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import java.util.function.Predicate;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.event.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"public class AddOrderCommandTest {"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    @Rule"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    public void constructor_nullOrder_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        new AddOrderCommand(null, null);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    public void execute_orderAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        ModelStubAcceptingOrderAdded modelStub \u003d new ModelStubAcceptingOrderAdded();"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        Order validOrder \u003d new OrderBuilder().build();"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        Person person \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        CommandResult commandResult \u003d getAddOrderCommandForOrder(INDEX_FIRST_PERSON, validOrder, modelStub).execute();"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        assertEquals(String.format(AddOrderCommand.MESSAGE_ADD_ORDER_SUCCESS,"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"                person.getName(), validOrder), commandResult.feedbackToUser);"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        assertEquals(Arrays.asList(validOrder), modelStub.ordersAdded);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    public void execute_duplicateOrder_throwsCommandException() throws Exception {"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateOrderException();"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        Order validOrder \u003d new OrderBuilder().build();"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        thrown.expectMessage(AddOrderCommand.MESSAGE_ORDER_NOT_ADDED);"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        getAddOrderCommandForOrder(INDEX_FIRST_PERSON, validOrder, modelStub).execute();"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"    public void equals() {"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        Order firstOrder \u003d SHOES;"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        Order secondOrder \u003d FACEWASH;"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand firstAddOrderCommmand \u003d new AddOrderCommand(INDEX_FIRST_PERSON, firstOrder);"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand secondAddOrderCommand \u003d new AddOrderCommand(INDEX_SECOND_PERSON, secondOrder);"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e returns true"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstAddOrderCommmand.equals(firstAddOrderCommmand));"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        // same values -\u003e returns true"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand firstAddOrderCommandCopy \u003d new AddOrderCommand(INDEX_FIRST_PERSON, firstOrder);"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstAddOrderCommmand.equals(firstAddOrderCommandCopy));"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        // different types -\u003e returns false"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstAddOrderCommmand.equals(1));"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        // null -\u003e return false"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstAddOrderCommandCopy.equals(null));"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        // different person -\u003e return false"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstAddOrderCommmand.equals(secondAddOrderCommand));"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"     * Generates a new AddOrderCommand with the details of the given order."},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"    private AddOrderCommand getAddOrderCommandForOrder(Index index, Order order, Model model) {"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand command \u003d new AddOrderCommand(index, order);"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        return command;"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"     * A default model stub that has all of the irrelevant methods failing."},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"    private class ModelStub implements Model {"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        private final FilteredList\u003cPerson\u003e filteredPersons \u003d new FilteredList\u003c\u003e(model.getFilteredPersonList());"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlyCalendarManager newCalendarData) {"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"            return null;"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"                throws DuplicatePersonException {"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        public void updateOrder(Order target, Order editedOrder) throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"        public void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"                throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"            return model.getFilteredPersonList();"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"            return model.getFilteredOrderList();"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"        public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEventList() {"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"            return model.getFilteredCalendarEventList();"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":"        public Calendar getCalendar() {"},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"            return null;"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"            return null;"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"            filteredPersons.setPredicate(predicate);"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":205,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"amad-person"},"content":"        public void updateFilteredCalendarEventList(Predicate\u003cCalendarEntry\u003e predicate) {"},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":"        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":"        public void deleteGroup(Group targetGroup) throws GroupNotFoundException {"},{"lineNumber":217,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":218,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":220,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"amad-person"},"content":"        public void deletePreference(Preference targetPreference) throws PreferenceNotFoundException {"},{"lineNumber":222,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":223,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":225,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":226,"author":{"gitID":"amad-person"},"content":"        public void addOrderToOrderList(Order orderToAdd) throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":230,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":231,"author":{"gitID":"amad-person"},"content":"        public void deleteOrder(Order targetOrder) throws OrderNotFoundException {"},{"lineNumber":232,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":233,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":235,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"amad-person"},"content":"        public void addCalendarEntry(CalendarEntry toAdd)"},{"lineNumber":237,"author":{"gitID":"amad-person"},"content":"                throws DuplicateCalendarEntryException {"},{"lineNumber":238,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":239,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":241,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":242,"author":{"gitID":"amad-person"},"content":"        public void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException {"},{"lineNumber":243,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":244,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":247,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"amad-person"},"content":"     * A Model stub that always throws a DuplicatePersonException when trying to add a person."},{"lineNumber":249,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"amad-person"},"content":"    private class ModelStubThrowingDuplicateOrderException extends ModelStub {"},{"lineNumber":251,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"amad-person"},"content":"        public void addOrderToOrderList(Order order) throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":253,"author":{"gitID":"amad-person"},"content":"            throw new UniqueOrderList.DuplicateOrderException();"},{"lineNumber":254,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":256,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":257,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":258,"author":{"gitID":"amad-person"},"content":"            return new AddressBook();"},{"lineNumber":259,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":261,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":263,"author":{"gitID":"amad-person"},"content":"            return new CalendarManager();"},{"lineNumber":264,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":267,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"amad-person"},"content":"     * A Model stub that always accepts the order being added."},{"lineNumber":269,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"amad-person"},"content":"    private class ModelStubAcceptingOrderAdded extends ModelStub {"},{"lineNumber":271,"author":{"gitID":"amad-person"},"content":"        final ArrayList\u003cOrder\u003e ordersAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":272,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":273,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":274,"author":{"gitID":"amad-person"},"content":"        public void addOrderToOrderList(Order order) throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":275,"author":{"gitID":"amad-person"},"content":"            requireNonNull(order);"},{"lineNumber":276,"author":{"gitID":"amad-person"},"content":"            ordersAdded.add(order);"},{"lineNumber":277,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":279,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":280,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":281,"author":{"gitID":"amad-person"},"content":"            return new AddressBook();"},{"lineNumber":282,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":284,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":285,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":286,"author":{"gitID":"amad-person"},"content":"            return new CalendarManager();"},{"lineNumber":287,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"amad-person"},"content":"}"},{"lineNumber":290,"author":{"gitID":"amad-person"},"content":""}],"authorContributionMap":{"amad-person":290}},{"path":"src/test/java/seedu/address/logic/commands/AddEntryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.CalendarEntryBuilder;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"public class AddEntryCommandTest {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        new AddEntryCommand(null);"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_calendarEventAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        ModelStubAcceptingCalendarEventAdded modelStub \u003d new ModelStubAcceptingCalendarEventAdded();"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry validEvent \u003d new CalendarEntryBuilder().build();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        CommandResult commandResult \u003d getAddEntryCommandForCalendarEvent(validEvent, modelStub).execute();"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(String.format(AddEntryCommand.MESSAGE_ADD_ENTRY_SUCCESS, validEvent),"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.calendarEventsAdded);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateCalendarEventException();"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry validEvent \u003d new CalendarEntryBuilder().build();"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expectMessage(AddEntryCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        getAddEntryCommandForCalendarEvent(validEvent, modelStub).execute();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry meetBoss \u003d new CalendarEntryBuilder().withEntryTitle(\"Meeting with boss\").build();"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry getSupplies \u003d new CalendarEntryBuilder().withEntryTitle(\"Get supplies\").build();"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        AddEntryCommand addMeetBossCommand \u003d new AddEntryCommand(meetBoss);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        AddEntryCommand addGetSuppliesCommand \u003d new AddEntryCommand(getSupplies);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(addMeetBossCommand.equals(addMeetBossCommand));"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        AddEntryCommand addMeetBossCommandCopy \u003d new AddEntryCommand(meetBoss);"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(addMeetBossCommand.equals(addMeetBossCommandCopy));"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(addMeetBossCommand.equals(1));"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(addMeetBossCommand.equals(null));"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        // different person -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(addMeetBossCommand.equals(addGetSuppliesCommand));"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"     * Generates a new AddEntryCommand with the details of the given calendar event."},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    private AddEntryCommand getAddEntryCommandForCalendarEvent(CalendarEntry calEvent, Model model) {"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        AddEntryCommand command \u003d new AddEntryCommand(calEvent);"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        return command;"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"    private class ModelStub implements Model {"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlyCalendarManager newCalendarData) {"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicatePersonException {"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEventList() {"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        public Calendar getCalendar() {"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateOrder(Order target, Order editedOrder)"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"                throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"                throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateFilteredCalendarEventList(Predicate\u003cCalendarEntry\u003e predicate) {"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"        public void deleteGroup(Group targetGroup) throws GroupNotFoundException {"},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"        public void deletePreference(Preference targetPreference) throws PreferenceNotFoundException {"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"SuxianAlicia"},"content":"        public void addOrderToOrderList(Order orderToAdd) {"},{"lineNumber":210,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":211,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":213,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"        public void deleteOrder(Order targetOrder) throws OrderNotFoundException {"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"        public void addCalendarEntry(CalendarEntry toAdd)"},{"lineNumber":220,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateCalendarEntryException {"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"SuxianAlicia"},"content":"        public void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException {"},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":"     * A Model stub that always throws a DuplicateCalendarEntryException when trying to add a calendar event."},{"lineNumber":232,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"    private class ModelStubThrowingDuplicateCalendarEventException extends ModelStub {"},{"lineNumber":234,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"SuxianAlicia"},"content":"        public void addCalendarEntry(CalendarEntry toAdd)"},{"lineNumber":237,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateCalendarEntryException {"},{"lineNumber":238,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":239,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DuplicateCalendarEntryException();"},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"            return new AddressBook();"},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":247,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":248,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":249,"author":{"gitID":"SuxianAlicia"},"content":"            return new CalendarManager();"},{"lineNumber":250,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":253,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":254,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"SuxianAlicia"},"content":"     * A Model stub that always accepts the calendarEvent being added."},{"lineNumber":256,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"SuxianAlicia"},"content":"    private class ModelStubAcceptingCalendarEventAdded extends ModelStub {"},{"lineNumber":258,"author":{"gitID":"SuxianAlicia"},"content":"        final ArrayList\u003cCalendarEntry\u003e calendarEventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":259,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":260,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":261,"author":{"gitID":"SuxianAlicia"},"content":"        public void addCalendarEntry(CalendarEntry calendarEntry)"},{"lineNumber":262,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateCalendarEntryException {"},{"lineNumber":263,"author":{"gitID":"SuxianAlicia"},"content":"            requireNonNull(calendarEntry);"},{"lineNumber":264,"author":{"gitID":"SuxianAlicia"},"content":"            calendarEventsAdded.add(calendarEntry);"},{"lineNumber":265,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":267,"author":{"gitID":"SuxianAlicia"},"content":"        /* To fix later on */"},{"lineNumber":268,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":269,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEventList() {"},{"lineNumber":270,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":271,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":273,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":274,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":275,"author":{"gitID":"SuxianAlicia"},"content":"            return new AddressBook();"},{"lineNumber":276,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":278,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":279,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":280,"author":{"gitID":"SuxianAlicia"},"content":"            return new CalendarManager();"},{"lineNumber":281,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":254,"-":29}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_GROUP \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_PREFERENCE \u003d \"#shoes\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_GROUP \u003d \"friends\"; // A valid group that BENSON has."},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    private static final List\u003cXmlAdaptedGroup\u003e VALID_GROUPS \u003d BENSON.getGroupTags().stream()"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            .map(XmlAdaptedGroup::new)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_PREFERENCE \u003d \"computers\"; // A valid preference that BENSON has."},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    private static final List\u003cXmlAdaptedPreference\u003e VALID_PREFERENCES \u003d BENSON.getPreferenceTags().stream()"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            .map(XmlAdaptedPreference::new)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidGroupName_throwsIllegalValueException() {"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cXmlAdaptedGroup\u003e invalidGroups \u003d new ArrayList\u003c\u003e(VALID_GROUPS);"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        invalidGroups.add(new XmlAdaptedGroup(INVALID_GROUP));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"                        invalidGroups, VALID_PREFERENCES);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_duplicateGroups_throwsIllegalValueException() {"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cXmlAdaptedGroup\u003e invalidGroups \u003d new ArrayList\u003c\u003e(VALID_GROUPS);"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        invalidGroups.add(new XmlAdaptedGroup(VALID_GROUP));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"                        invalidGroups, VALID_PREFERENCES);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidPreferenceName_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cXmlAdaptedPreference\u003e invalidPreferences \u003d new ArrayList\u003c\u003e(VALID_PREFERENCES);"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        invalidPreferences.add(new XmlAdaptedPreference(INVALID_PREFERENCE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, invalidPreferences);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_duplicatePreferences_throwsIllegalValueException() {"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cXmlAdaptedPreference\u003e invalidPreferences \u003d new ArrayList\u003c\u003e(VALID_PREFERENCES);"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        invalidPreferences.add(new XmlAdaptedPreference(VALID_PREFERENCE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"                        VALID_GROUPS, invalidPreferences);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":47,"-":111}},{"path":"src/test/java/seedu/address/logic/commands/FindGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommandTest {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"                new GroupsContainKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"                new GroupsContainKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand findGroupFirstCommand \u003d new FindGroupCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand findGroupSecondCommand \u003d new FindGroupCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(findGroupFirstCommand.equals(findGroupFirstCommand));"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand findGroupFirstCommandCopy \u003d new FindGroupCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(findGroupFirstCommand.equals(findGroupFirstCommandCopy));"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findGroupFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findGroupFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        // different person -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findGroupFirstCommand.equals(findGroupSecondCommand));"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand command \u003d prepareCommand(\" \");"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand command \u003d prepareCommand(\"Neighbours twitter\");"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, ELLE));"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code userInput} into a {@code FindGroupCommand}."},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    private FindGroupCommand prepareCommand(String userInput) {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand command \u003d"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"                new FindGroupCommand(new GroupsContainKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        return command;"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(FindGroupCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":74,"-":22}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedOrderTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.storage.XmlAdaptedOrder.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.BOOKS;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"public class XmlAdaptedOrderTest {"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    private static final String INVALID_ORDER_INFORMATION \u003d \"Choc0l@t3s\";"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    private static final String INVALID_PRICE \u003d \"25.00.99\";"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    private static final String INVALID_QUANTITY \u003d \"-2\";"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    private static final String INVALID_DELIVERY_DATE \u003d \"50-12-2010\";"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    private static final String VALID_ORDER_INFORMATION \u003d BOOKS.getOrderInformation().toString();"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    private static final String VALID_PRICE \u003d BOOKS.getPrice().toString();"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    private static final String VALID_QUANTITY \u003d BOOKS.getQuantity().toString();"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    private static final String VALID_DELIVERY_DATE \u003d BOOKS.getDeliveryDate().toString();"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public void toModelType_validOrderDetails_returnsOrder() throws Exception {"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(BOOKS);"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        assertEquals(BOOKS, order.toModelType());"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidOrderInformation_throwsIllegalValueException() {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(INVALID_ORDER_INFORMATION, VALID_PRICE,"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    public void toModelType_nullOrderInformation_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(null, VALID_PRICE,"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OrderInformation.class.getSimpleName());"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidPrice_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, INVALID_PRICE,"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d Price.MESSAGE_PRICE_CONSTRAINTS;"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    public void toModelType_nullPrice_throwsIllegalValueException() {"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, null,"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidQuantity_throwsIllegalValueException() {"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_PRICE,"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"                INVALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d Quantity.MESSAGE_QUANTITY_CONSTRAINTS;"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    public void toModelType_nullQuantity_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_PRICE,"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"                null, VALID_DELIVERY_DATE);"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidDeliveryDate_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_PRICE,"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, INVALID_DELIVERY_DATE);"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS;"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"    public void toModelType_nullDeliveryDate_throwsIllegalValueException() {"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_PRICE,"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, null);"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DeliveryDate.class.getSimpleName());"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":97}},{"path":"src/test/java/seedu/address/storage/XmlSerializableCalendarManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.TypicalCalendarEntries;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlSerializableCalendarManagerTest {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            FileUtil.getPath(\"src/test/data/XmlSerializableCalendarManagerTest/\");"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private static final File TYPICAL_EVENTS_FILE \u003d"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            new File(TEST_DATA_FOLDER + \"typicalEntriesCalendarManager.xml\");"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private static final File INVALID_EVENT_FILE \u003d"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            new File(TEST_DATA_FOLDER + \"invalidEntriesCalendarManager.xml\");"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_typicalEntriesFile_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_EVENTS_FILE,"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"                XmlSerializableCalendarManager.class);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager calendarManagerFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager typicalCalendarEntriesCalendarManager \u003d"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"                TypicalCalendarEntries.getTypicalCalendarManagerWithEntries();"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(calendarManagerFromFile, typicalCalendarEntriesCalendarManager);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidEventsFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EVENT_FILE,"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"                XmlSerializableCalendarManager.class);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        dataFromFile.toModelType();"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":47}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        XmlCalendarManagerStorage calendarManagerStorage \u003d"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlCalendarManagerStorage(getTempFilePath(\"cm\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, calendarManagerStorage, userPrefsStorage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":53,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":54,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    public void calendarManagerReadSave() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":78,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"         * {@link XmlCalendarManagerStorage} class."},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlCalendarManagerStorageTest} class."},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager original \u003d getTypicalCalendarManagerWithEntries();"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        storageManager.saveCalendarManager(original);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        ReadOnlyCalendarManager retrieved \u003d storageManager.readCalendarManager().get();"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(original, new CalendarManager(retrieved));"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    public void getCalendarManagerFilePath() {"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        assertNotNull(storageManager.getCalendarManagerFilePath());"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"                                             new XmlCalendarManagerStorage(\"dummy\"),"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":23,"-":102}},{"path":"src/test/java/seedu/address/storage/XmlCalendarManagerStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.WORKSHOP;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlCalendarManagerStorageTest {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            FileUtil.getPath(\"./src/test/data/XmlCalendarManagerStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public void readCalendarManager_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        readCalendarManager(null);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    private java.util.Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        return new XmlCalendarManagerStorage(filePath).readCalendarManager(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(readCalendarManager(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        readCalendarManager(\"NotXmlFormatCalendarManager.xml\");"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    public void readCalendarManager_invalidCalendarManager_throwDataConversionException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        readCalendarManager(\"invalidCalendarManager.xml\");"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    public void readCalendarManager_invalidAndValidCalendarManager_throwDataConversionException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        readCalendarManager(\"invalidAndValidCalendarManager.xml\");"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    public void readAndSaveCalendarManager_allInOrder_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager original \u003d getTypicalCalendarManagerWithEntries();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        XmlCalendarManagerStorage xmlCalendarManagerStorage \u003d new XmlCalendarManagerStorage(filePath);"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        //Save in new file and read back"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        xmlCalendarManagerStorage.saveCalendarManager(original, filePath);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        ReadOnlyCalendarManager readBack \u003d xmlCalendarManagerStorage.readCalendarManager(filePath).get();"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(original, new CalendarManager(readBack));"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        original.deleteCalendarEntry(WORKSHOP);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        xmlCalendarManagerStorage.saveCalendarManager(original, filePath);"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        readBack \u003d xmlCalendarManagerStorage.readCalendarManager(filePath).get();"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(original, new CalendarManager(readBack));"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        //Save and read without specifying file path"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        original.addCalendarEntry(WORKSHOP);"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        xmlCalendarManagerStorage.saveCalendarManager(original); //file path not specified"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        readBack \u003d xmlCalendarManagerStorage.readCalendarManager().get(); //file path not specified"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(original, new CalendarManager(readBack));"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        saveCalendarManager(null, \"SomeFile.xml\");"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"     * Saves {@code calendarManager} at the specified {@code filePath}."},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"    private void saveCalendarManager(ReadOnlyCalendarManager calendarManager, String filePath) {"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"            new XmlCalendarManagerStorage(filePath)"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"                    .saveCalendarManager(calendarManager, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        saveCalendarManager(new CalendarManager(), null);"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":107,"-":14}},{"path":"src/test/java/seedu/address/model/order/OrderInformationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class OrderInformationTest {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new OrderInformation(null));"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidOrderInformation_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        String invalidOrderInformation \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OrderInformation(invalidOrderInformation));"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public void isValidOrderInformation() {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        // null order information"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e OrderInformation.isValidOrderInformation(null));"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        // invalid order information"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        assertFalse(OrderInformation.isValidOrderInformation(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        assertFalse(OrderInformation.isValidOrderInformation(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        // valid order information"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertTrue(OrderInformation.isValidOrderInformation(\"Books\"));"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertTrue(OrderInformation.isValidOrderInformation(\"Facial Cleanser\"));"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        assertTrue(OrderInformation.isValidOrderInformation(\"Confectionery Boxes\"));"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":38}},{"path":"src/test/java/seedu/address/model/order/OrderTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"public class OrderTest {"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Order(null, null, null, null));"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":14}},{"path":"src/test/java/seedu/address/logic/commands/DeleteEntryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalAddressBookWithOrders;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":" * {@code  DeleteEntryCommand}."},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteEntryCommandTest {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBookWithOrders(),"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            getTypicalCalendarManagerWithEntries(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry entryToDelete \u003d model.getFilteredCalendarEventList().get(INDEX_FIRST_ENTRY.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d prepareCommand(INDEX_FIRST_ENTRY);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(DeleteEntryCommand.MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(),"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"                model.getCalendarManager(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deleteCalendarEntry(entryToDelete);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(deleteEntryCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deleteEntryCommand, model, Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry entryToDelete \u003d model.getFilteredCalendarEventList().get(INDEX_FIRST_ENTRY.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d prepareCommand(INDEX_FIRST_ENTRY);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        // delete -\u003e first order deleted"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        deleteEntryCommand.execute();"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        undoRedoStack.push(deleteEntryCommand);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        // undo -\u003e reverts address book back to previous state and order list to show all calendar entries"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        // redo -\u003e same first order deleted again"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deleteCalendarEntry(entryToDelete);"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCalendarEventList().size() + 1);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        // execution failed -\u003e deleteEntryCommand not pushed into undoRedoStack"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deleteEntryCommand, model, Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() throws Exception {"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteFirstEntryCommand \u003d prepareCommand(INDEX_FIRST_ENTRY);"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteSecondEntryCommand \u003d prepareCommand(INDEX_SECOND_ENTRY);"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteFirstEntryCommand.equals(deleteFirstEntryCommand));"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteFirstEntryCommandCopy \u003d prepareCommand(INDEX_FIRST_ENTRY);"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteFirstEntryCommand.equals(deleteFirstEntryCommandCopy));"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        deleteFirstEntryCommandCopy.preprocessUndoableCommand();"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstEntryCommand.equals(deleteFirstEntryCommandCopy));"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstEntryCommand.equals(1));"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstEntryCommand.equals(null));"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        // different order -\u003e returns false"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstEntryCommand.equals(deleteSecondEntryCommand));"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns a {@code DeleteEntryCommand} with the parameter {@code index}."},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"    private DeleteEntryCommand prepareCommand(Index index) {"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d new DeleteEntryCommand(index);"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        deleteEntryCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        return deleteEntryCommand;"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":105,"-":22}},{"path":"src/test/java/seedu/address/model/order/QuantityTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class QuantityTest {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        String invalidQuantity \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public void isValidQuantity() {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        // null quantity"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        // invalid quantity"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"sj)\")); // non numeric characters"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"2.3\")); // decimal"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"-1\")); // negative integer"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"0\")); // zero"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"+9\")); // plus sign"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        // valid quantity"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        assertTrue(Quantity.isValidQuantity(\"10\")); // positive integer"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertTrue(Quantity.isValidQuantity(\"0500\")); // leading zero"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":42}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalOrders;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_ORDERS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalOrdersAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private static final File INVALID_GROUP_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidGroupAddressBook.xml\");"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private static final File INVALID_PREFERENCE_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPreferenceAddressBook.xml\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final File INVALID_ORDER_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidOrderAddressBook.xml\");"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public void toModelType_typicalOrdersFile_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ORDERS_FILE,"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        AddressBook typicalOrdersAddressBook \u003d TypicalOrders.getTypicalAddressBookWithOrders();"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        assertEquals(addressBookFromFile, typicalOrdersAddressBook);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidGroupFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_GROUP_FILE,"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidPreferenceFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PREFERENCE_FILE,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidOrderFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_ORDER_FILE,"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        dataFromFile.toModelType();"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":9,"-":59,"amad-person":19}},{"path":"src/test/java/seedu/address/model/order/DeliveryDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class DeliveryDateTest {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new DeliveryDate(null));"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidDeliveryDate_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        String invalidDeliveryDate \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DeliveryDate(invalidDeliveryDate));"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public void isValidDeliveryDate() {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        // null delivery date"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e DeliveryDate.isValidDeliveryDate(null));"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        // invalid delivery date"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"wejo*21\")); // invalid string"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"12/12/2012\")); // invalid format"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"0-1-98\")); // invalid date"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"50-12-1998\")); // invalid day"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"10-15-2013\")); // invalid month"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"09-08-10000\")); // invalid year"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        // valid delivery date"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"01-01-2001\")); // valid date"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"29-02-2000\")); // leap year"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":43}},{"path":"src/test/java/seedu/address/model/order/PriceTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class PriceTest {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Price(null));"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidPrice_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        String invalidPrice \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public void isValidPrice() {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        // null price"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        // invalid price"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"sj)\")); // non numeric characters"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"2.3.20\")); // more than one decimal place"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"10.1234\")); // more than two digits after decimal point"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"10,00,000\")); // commas"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"-1.0\")); // negative"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"+10.0\")); // plus sign"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        // valid price"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertTrue(Price.isValidPrice(\"10.0\")); // one digit after decimal point"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        assertTrue(Price.isValidPrice(\"500.75\")); // two digits after decimal point"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        assertTrue(Price.isValidPrice(\"015.50\")); // leading zero"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":44}},{"path":"src/test/java/seedu/address/model/UniquePreferenceListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.SHOES;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPreferences.VIDEO_GAMES;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.UniquePreferenceList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class UniquePreferenceListTest {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public void equals() throws UniquePreferenceList.DuplicatePreferenceException {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        UniquePreferenceList firstPrefList \u003d new UniquePreferenceList();"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        firstPrefList.add(VIDEO_GAMES);"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        UniquePreferenceList secondPrefList \u003d new UniquePreferenceList();"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        secondPrefList.add(COMPUTERS);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e true"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstPrefList.equals(firstPrefList));"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstPrefList.equals(1));"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        // different objects, same type -\u003e false"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstPrefList.equals(secondPrefList));"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void asOrderInsensitiveList_compareListsWithSameItemsInDiffOrder_assertEqual()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throws UniquePreferenceList.DuplicatePreferenceException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UniquePreferenceList firstPrefList \u003d new UniquePreferenceList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        firstPrefList.add(VIDEO_GAMES);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        firstPrefList.add(COMPUTERS);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        UniquePreferenceList secondPrefList \u003d new UniquePreferenceList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        secondPrefList.add(COMPUTERS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        secondPrefList.add(VIDEO_GAMES);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(firstPrefList.equalsOrderInsensitive(secondPrefList));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        UniquePreferenceList uniquePreferenceList \u003d new UniquePreferenceList();"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        uniquePreferenceList.asObservableList().remove(0);"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    public void asUniqueList_addDuplicatePref_throwsDuplicatePreferenceException()"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"            throws UniquePreferenceList.DuplicatePreferenceException {"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        UniquePreferenceList uniquePrefList \u003d new UniquePreferenceList();"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UniquePreferenceList.DuplicatePreferenceException.class);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        uniquePrefList.add(SHOES);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        uniquePrefList.add(SHOES);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":8,"-":26,"amad-person":35}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedCalendarEntryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.storage.XmlAdaptedCalendarEntry.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.MEETING_BOSS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndDate;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndTime;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EntryTitle;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartDate;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartTime;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlAdaptedCalendarEntryTest {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_EVENT_TITLE \u003d \"M\u0026\u0026ting wi$h b@ss\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_START_DATE \u003d \"30-02-2019\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_END_DATE \u003d \"31-02-2019\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_START_TIME \u003d \"24:60\";"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_END_TIME \u003d \"25:100\";"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_EVENT_TITLE \u003d MEETING_BOSS.getEntryTitle().toString();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_START_DATE \u003d MEETING_BOSS.getStartDate().toString();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_END_DATE \u003d MEETING_BOSS.getEndDate().toString();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_START_TIME \u003d MEETING_BOSS.getStartTime().toString();"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_END_TIME \u003d MEETING_BOSS.getEndTime().toString();"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_validCalendarEventDetails_returnsCalendarEvent() throws Exception {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(MEETING_BOSS);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(MEETING_BOSS, calEvent.toModelType());"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidEventTitle_throwsIllegalValueException() {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(INVALID_EVENT_TITLE, VALID_START_DATE,"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullEventTitle_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(null, VALID_START_DATE,"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EntryTitle.class.getSimpleName());"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidStartDate_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_EVENT_TITLE, INVALID_START_DATE,"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d StartDate.MESSAGE_START_DATE_CONSTRAINTS;"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullStartDate_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_EVENT_TITLE, null,"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartDate.class.getSimpleName());"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidEndDate_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_EVENT_TITLE, VALID_START_DATE,"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"                INVALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d EndDate.MESSAGE_END_DATE_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullEndDate_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_EVENT_TITLE, VALID_START_DATE,"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"                null, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndDate.class.getSimpleName());"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_EVENT_TITLE, VALID_START_DATE,"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, INVALID_START_TIME, VALID_END_TIME);"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d StartTime.MESSAGE_START_TIME_CONSTRAINTS;"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_EVENT_TITLE, VALID_START_DATE,"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, null, VALID_END_TIME);"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartTime.class.getSimpleName());"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_EVENT_TITLE, VALID_START_DATE,"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, INVALID_END_TIME);"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d EndTime.MESSAGE_END_TIME_CONSTRAINTS;"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_EVENT_TITLE, VALID_START_DATE,"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, null);"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName());"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":109,"-":7}},{"path":"src/test/java/seedu/address/model/UniqueGroupListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalGroups.COLLEAGUES;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.UniqueGroupList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class UniqueGroupListTest {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public void equals() throws UniqueGroupList.DuplicateGroupException {"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        UniqueGroupList firstGroupList \u003d new UniqueGroupList();"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        firstGroupList.add(FRIENDS);"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        UniqueGroupList secondGroupList \u003d new UniqueGroupList();"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        secondGroupList.add(COLLEAGUES);"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e true"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstGroupList.equals(firstGroupList));"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstGroupList.equals(1));"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        // different objects, same type -\u003e false"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstGroupList.equals(secondGroupList));"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void asOrderInsensitiveList_compareListsWithSameItemsInDiffOrder_assertEqual()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throws UniqueGroupList.DuplicateGroupException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UniqueGroupList firstGroupList \u003d new UniqueGroupList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        firstGroupList.add(FRIENDS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        firstGroupList.add(COLLEAGUES);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        UniqueGroupList secondGroupList \u003d new UniqueGroupList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        secondGroupList.add(COLLEAGUES);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        secondGroupList.add(FRIENDS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(firstGroupList.equalsOrderInsensitive(secondGroupList));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        uniqueGroupList.asObservableList().remove(0);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public void asUniqueList_addDuplicateGroup_throwsDuplicateGroupException()"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"            throws UniqueGroupList.DuplicateGroupException {"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UniqueGroupList.DuplicateGroupException.class);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        uniqueGroupList.add(FRIENDS);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        uniqueGroupList.add(FRIENDS);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":7,"-":26,"amad-person":35}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FAMILY;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.SHOES;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(Collections.emptyList(), addressBook.getGroupList());"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPreferenceList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cGroup\u003e newGroups \u003d new ArrayList\u003c\u003e(ALICE.getGroupTags());"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cPreference\u003e newPreferences \u003d new ArrayList\u003c\u003e(ALICE.getPreferenceTags());"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newGroups, newPreferences);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    public void getGroupList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        addressBook.getGroupList().remove(0);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    public void getPreferenceList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        addressBook.getPreferenceList().remove(0);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    public void removeGroup_removeNonExistentGroup_throwsGroupNotFoundException() {"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(GroupNotFoundException.class, () -\u003e testAddressBook.removeGroup(FAMILY));"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"    public void removeGroup_removeExistingGroup_addressBookNotEqual() {"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"            testAddressBook.removeGroup(FRIENDS);"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (GroupNotFoundException e) {"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"Group \" + FRIENDS.toString() + \" should exist in testAddressBook.\");"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        assertNotEquals(testAddressBook, expectedAddressBook);"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    public void removeUnusedGroup_removeNonExistentGroupsWhenPersonIsDeleted_addressBookEqual() {"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        // When person with groups unique to him is deleted, such groups should not exist anymore in master group list."},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"            testAddressBook.removePerson(BENSON);"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"Person \" + BENSON.getName() + \" should exist in testAddressBook.\");"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(testAddressBook, expectedAddressBook);"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"    public void removeUnusedGroups_removeNonExistentGroupsWhenPersonIsUpdated_addressBookEqual() {"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        Person editedAlice \u003d new PersonBuilder().withGroups().build();"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(editedAlice).build();"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        // When removing groups while updating a person, such groups should not exist anymore in master group list."},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"            testAddressBook.updatePerson(ALICE, editedAlice);"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"Person \" + ALICE.getName() + \" should exist in testAddressBook.\");"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"Duplicate Persons should not exist in testAddressBook.\");"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(testAddressBook, expectedAddressBook);"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"    public void removePreference_removeNonExistentPreference_throwsPreferenceNotFoundException() {"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(PreferenceNotFoundException.class, () -\u003e testAddressBook.removePreference(COMPUTERS));"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"    public void removePreference_removeExistingPreference_addressBookNotEqual() {"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"            testAddressBook.removePreference(SHOES);"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (PreferenceNotFoundException e) {"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"Preference \" + SHOES.toString() + \" should exist in testAddressBook.\");"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        assertNotEquals(testAddressBook, expectedAddressBook);"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"    public void removeUnusedPreferences_removeNonExistentPreferencesWhenPersonIsDeleted_addressBookEqual() {"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"        // When person with preferences unique to him is deleted,"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"        // such preferences should not exist anymore in master preference list."},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"            testAddressBook.removePerson(BENSON);"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"Person \" + BENSON.getName() + \" should exist in testAddressBook.\");"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(testAddressBook, expectedAddressBook);"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"    public void removeUnusedPreferences_removeNonExistentPreferencesWhenPersonIsUpdated_addressBookEqual() {"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"        Person editedAlice \u003d new PersonBuilder().withPreferences().build();"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(editedAlice).build();"},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        // When removing preferences while updating a person,"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        // such preferences should not exist anymore in master preference list."},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"            testAddressBook.updatePerson(ALICE, editedAlice);"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"Person \" + ALICE.getName() + \" should exist in testAddressBook.\");"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"Duplicate Persons should not exist in testAddressBook.\");"},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(testAddressBook, expectedAddressBook);"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":"     * A stub ReadOnlyAddressBook whose persons, groups and preferences lists can violate interface constraints."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"        private final ObservableList\u003cGroup\u003e groupTags \u003d FXCollections.observableArrayList();"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"        private final ObservableList\u003cPreference\u003e prefTags \u003d FXCollections.observableArrayList();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cOrder\u003e orders \u003d FXCollections.observableArrayList();"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Group\u003e groups,"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"                        Collection\u003c? extends Preference\u003e preferences) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":"            this.groupTags.setAll(groups);"},{"lineNumber":209,"author":{"gitID":"SuxianAlicia"},"content":"            this.prefTags.setAll(preferences);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cGroup\u003e getGroupList() {"},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"            return groupTags;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cPreference\u003e getPreferenceList() {"},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"            return prefTags;"},{"lineNumber":225,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public ObservableList\u003cOrder\u003e getOrderList() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return orders;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":143,"-":89}},{"path":"src/test/java/seedu/address/model/CalendarManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.MEETING_BOSS;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarManagerTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarManager calendarManager \u003d new CalendarManager();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor() {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(Collections.emptyList(), calendarManager.getCalendarEntryList());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.resetData(null);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public void resetData_withValidReadOnlyCalendarManager_replacesData() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager newData \u003d getTypicalCalendarManagerWithEntries();"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.resetData(newData);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(newData, calendarManager);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cCalendarEntry\u003e newEntries \u003d Arrays.asList(MEETING_BOSS, MEETING_BOSS);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManagerStub newData \u003d new CalendarManagerStub(newEntries);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.resetData(newData);"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    public void getCalendarEntryList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.getCalendarEntryList().remove(0);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    private static class CalendarManagerStub implements ReadOnlyCalendarManager {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        private final ObservableList\u003cCalendarEntry\u003e calendarEntries \u003d FXCollections.observableArrayList();"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManagerStub(Collection\u003cCalendarEntry\u003e calendarEntries) {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"            this.calendarEntries.setAll(calendarEntries);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cCalendarEntry\u003e getCalendarEntryList() {"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"            return calendarEntries;"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":29}},{"path":"src/test/java/seedu/address/model/person/PreferencesContainKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.NECKLACES;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.SHOES;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.VIDEO_GAMES;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public class PreferencesContainKeywordsPredicateTest {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(VIDEO_GAMES.tagName, SHOES.tagName);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Collections.singletonList(NECKLACES.tagName);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate firstPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate secondPredicate \u003d"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    public void test_preferencesContainsKeywords_returnsTrue() {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate predicate;"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        // One keyword"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Collections.singletonList(VIDEO_GAMES.tagName));"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPreferences(VIDEO_GAMES.tagName).build()));"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        // Multiple keywords"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Arrays.asList(NECKLACES.tagName, SHOES.tagName));"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPreferences(NECKLACES.tagName, SHOES.tagName).build()));"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        // Only one matching keyword"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Arrays.asList(NECKLACES.tagName, SHOES.tagName));"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPreferences(VIDEO_GAMES.tagName, SHOES.tagName).build()));"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        // Mixed-case keywords"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Arrays.asList(\"NeCkLaCes\", \"ShoES\"));"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPreferences(NECKLACES.tagName, SHOES.tagName).build()));"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public void test_preferencesDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        // Zero keywords"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate predicate \u003d"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(Collections.emptyList());"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPreferences(VIDEO_GAMES.tagName).build()));"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        // Non-matching keyword"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Collections.singletonList(VIDEO_GAMES.tagName));"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPreferences(SHOES.tagName, NECKLACES.tagName).build()));"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":31}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.MEETING_BOSS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.ROAD_SHOW;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.CalendarManagerBuilder;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager calendarManager \u003d new CalendarManagerBuilder()"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntry(MEETING_BOSS).withEntry(ROAD_SHOW).build();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager differentCalendarManager \u003d new CalendarManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, calendarManager, userPrefs);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, calendarManager, userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, calendarManager, userPrefs)));"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        // different calendarManager -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentCalendarManager, userPrefs)));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, calendarManager, userPrefs)));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, calendarManager, differentUserPrefs)));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":14,"-":60}},{"path":"src/test/java/seedu/address/model/person/GroupsContainKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.BUDDIES;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.COLLEAGUES;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"public class GroupsContainKeywordsPredicateTest {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(COLLEAGUES.tagName, BUDDIES.tagName);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Collections.singletonList(FRIENDS.tagName);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate firstPredicate \u003d new GroupsContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate secondPredicate \u003d new GroupsContainKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"                new GroupsContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    public void test_groupsContainsKeywords_returnsTrue() {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate predicate;"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        // One keyword"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Collections.singletonList(COLLEAGUES.tagName));"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withGroups(COLLEAGUES.tagName).build()));"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        // Multiple keywords"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Arrays.asList(COLLEAGUES.tagName, BUDDIES.tagName));"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withGroups(COLLEAGUES.tagName, BUDDIES.tagName).build()));"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        // Only one matching keyword"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Arrays.asList(FRIENDS.tagName, BUDDIES.tagName));"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withGroups(COLLEAGUES.tagName, BUDDIES.tagName).build()));"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        // Mixed-case keywords"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Arrays.asList(\"COlleAGUES\", \"BUDDIes\"));"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withGroups(COLLEAGUES.tagName, BUDDIES.tagName).build()));"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public void test_groupsDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        // Zero keywords"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate predicate \u003d"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"                new GroupsContainKeywordsPredicate(Collections.emptyList());"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(predicate.test(new PersonBuilder().withGroups(BUDDIES.tagName).build()));"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        // Non-matching keyword"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Collections.singletonList(COLLEAGUES.tagName));"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(predicate.test(new PersonBuilder().withGroups(BUDDIES.tagName, FRIENDS.tagName).build()));"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":31}},{"path":"src/test/java/seedu/address/model/theme/ThemeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.theme;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"public class ThemeTest {"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Theme(null));"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidTheme_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        String invalidTheme \u003d \"39dhks\";"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Theme(invalidTheme));"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        Theme firstTheme \u003d new Theme(\"dark\");"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        // same theme object -\u003e true"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstTheme.equals(firstTheme));"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        // same theme value -\u003e true"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        Theme firstThemeCopy \u003d new Theme(\"dark\");"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstTheme.equals(firstThemeCopy));"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstTheme.equals(1));"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        // null -\u003e false"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstTheme.equals(null));"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public void isValidTheme() {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        // null theme"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Theme.isValidTheme(null));"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        // invalid theme"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        assertFalse(Theme.isValidTheme(\"\")); // empty string"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        assertFalse(Theme.isValidTheme(\" \")); // spaces only"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        assertFalse(Theme.isValidTheme(\"djwe398\")); // invalid keywords for theme"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        // valid theme"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        assertTrue(Theme.isValidTheme(\"dark\")); // dark theme"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        assertTrue(Theme.isValidTheme(\"light\")); // light theme"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    public void setTheme_switchBetweenThemes() {"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        // change to \u0027dark\u0027 -\u003e changed successfully"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        String theme \u003d \"dark\";"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        Theme.setCurrentTheme(theme);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        assertEquals(Theme.getCurrentTheme(), theme);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        // change to \u0027light\u0027 -\u003e changed successfully"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        theme \u003d \"light\";"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        Theme.setCurrentTheme(theme);"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        assertEquals(Theme.getCurrentTheme(), theme);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        // change to \u0027day\u0027 (doesn\u0027t exist) -\u003e not changed from previous theme"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        theme \u003d \"day\";"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        Theme.setCurrentTheme(theme);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        assertFalse(Theme.getCurrentTheme().equals(theme));"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        assertEquals(Theme.getCurrentTheme(), \"light\");"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":76}},{"path":"src/test/java/seedu/address/model/event/StartTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class StartTimeTest {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new StartTime(null));"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidStartTime_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidStartTime \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StartTime(invalidStartTime));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidStartTime() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // null start time"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TimeUtil.isValidTime(null));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid start time"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"wejo*21\")); // invalid string"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"12-01\")); // invalid format"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"24:01\")); // invalid Hour"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"00:79\")); // invalid Minute"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"101:04\")); // invalid Hour"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"00:100\")); // invalid Minute"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // valid start time"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(TimeUtil.isValidTime(\"10:00\")); // valid date"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(TimeUtil.isValidTime(\"18:55\")); // valid date (24Hr Format)"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":38,"-":5}},{"path":"src/test/java/seedu/address/model/event/StartDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class StartDateTest {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new StartDate(null));"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidStartDate_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidStartDate \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StartDate(invalidStartDate));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidStartDate() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // null start date"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e DateUtil.isValidDate(null));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid start date"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"wejo*21\")); // invalid string"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"12/12/2012\")); // invalid format"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"0-1-98\")); // invalid date"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"50-12-1998\")); // invalid day"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"10-15-2013\")); // invalid month"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"09-08-10000\")); // invalid year"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // valid start date"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DateUtil.isValidDate(\"01-01-2001\")); // valid date"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DateUtil.isValidDate(\"29-02-2000\")); // leap year"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":38,"-":5}},{"path":"src/test/java/seedu/address/model/event/EntryTitleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class EntryTitleTest {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new EntryTitle(null));"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidEventTitle_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidEventTitle \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EntryTitle(invalidEventTitle));"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidEventTitle() {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        // null event title"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e EntryTitle.isValidEntryTitle(null));"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid event title"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(EntryTitle.isValidEntryTitle(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(EntryTitle.isValidEntryTitle(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // valid event title"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(EntryTitle.isValidEntryTitle(\"Meet with bosses\"));"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(EntryTitle.isValidEntryTitle(\"Meet Client for stocks\"));"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(EntryTitle.isValidEntryTitle(\"Confectionery Boxes Order\"));"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":30,"-":7}},{"path":"src/test/java/seedu/address/model/event/CalendarEntryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryTest {"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"                new CalendarEntry(null, null, null, null, null));"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":11,"-":5}},{"path":"src/test/java/seedu/address/model/event/EndTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class EndTimeTest {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new EndTime(null));"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidEndTime_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidEndTime \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EndTime(invalidEndTime));"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidEndTime() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        // null end time"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TimeUtil.isValidTime(null));"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid end time"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"wejo*21\")); // invalid string"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"12-01\")); // invalid format"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"24:01\")); // invalid Hour"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"00:79\")); // invalid Minute"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"101:04\")); // invalid Hour"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"00:100\")); // invalid Minute"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        // valid end time"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(TimeUtil.isValidTime(\"10:00\")); // valid date"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(TimeUtil.isValidTime(\"18:55\")); // valid date (24Hr Format)"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":39,"-":5}},{"path":"src/test/java/seedu/address/model/tag/PreferenceTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"public class PreferenceTest {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Preference(null));"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidPreferenceName_throwsIllegalArgumentException() {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidPreferenceName \u003d \"\";"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Preference(invalidPreferenceName));"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidPreferenceName() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        // null preference name"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Preference.isValidTagName(null));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":16,"-":7}},{"path":"src/test/java/seedu/address/testutil/OrderBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":" * A utility class to help with building Order objects."},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"public class OrderBuilder {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    public static final String DEFAULT_ORDER_INFORMATION \u003d \"Books\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public static final String DEFAULT_PRICE \u003d \"15.00\";"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public static final String DEFAULT_QUANTITY \u003d \"5\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final String DEFAULT_DELIVERY_DATE \u003d \"10-05-2018\";"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    private OrderInformation orderInformation;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    private Price price;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    private Quantity quantity;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    private DeliveryDate deliveryDate;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder() {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        orderInformation \u003d new OrderInformation(DEFAULT_ORDER_INFORMATION);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        quantity \u003d new Quantity(DEFAULT_QUANTITY);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        deliveryDate \u003d new DeliveryDate(DEFAULT_DELIVERY_DATE);"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"     * Initializes the OrderBuilder with the data of {@code orderToCopy}."},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder(Order orderToCopy) {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        orderInformation \u003d orderToCopy.getOrderInformation();"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        price \u003d orderToCopy.getPrice();"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        quantity \u003d orderToCopy.getQuantity();"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        deliveryDate \u003d orderToCopy.getDeliveryDate();"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code OrderInformation} of the {@code Order} that we are building."},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder withOrderInformation(String orderInformation) {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        this.orderInformation \u003d new OrderInformation(orderInformation);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code Price} of the {@code Order} that we are building."},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder withPrice(String price) {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code Quantity} of the {@code Order} that we are building."},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder withQuantity(String quantity) {"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        this.quantity \u003d new Quantity(quantity);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code DeliveryDate} of the {@code Order} that we are building."},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder withDeliveryDate(String deliveryDate) {"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        this.deliveryDate \u003d new DeliveryDate(deliveryDate);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    public Order build() {"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        return new Order(orderInformation, price, quantity, deliveryDate);"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":77}},{"path":"src/test/java/seedu/address/model/UniqueCalendarEntryListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.GET_STOCKS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.MEETING_BOSS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.UniqueCalendarEntryList;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class UniqueCalendarEntryListTest {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() throws DuplicateCalendarEntryException {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList firstEntriesList \u003d  new UniqueCalendarEntryList();"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        firstEntriesList.add(MEETING_BOSS);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList secondEntriesList \u003d new UniqueCalendarEntryList();"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        secondEntriesList.add(GET_STOCKS);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        // Same object -\u003e True"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(firstEntriesList.equals(firstEntriesList));"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        // different type -\u003e false"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstEntriesList.equals(1));"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        // different objects, same type -\u003e false"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstEntriesList.equals(secondEntriesList));"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public void asOrderInsensitiveList_compareListsWithSameItemsInDiffOrder_assertEqual()"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            throws DuplicateCalendarEntryException {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList firstEntriesList \u003d  new UniqueCalendarEntryList();"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        firstEntriesList.add(MEETING_BOSS);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        firstEntriesList.add(GET_STOCKS);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList secondEntries \u003d new UniqueCalendarEntryList();"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        secondEntries.add(GET_STOCKS);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        secondEntries.add(MEETING_BOSS);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(firstEntriesList.equalsOrderInsensitive(secondEntries));"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList calendarEntriesList \u003d new UniqueCalendarEntryList();"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntriesList.asObservableList().remove(0);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    public void asUniqueList_addDuplicateCalendarEvents_throwsDuplicateCalendarEventException()"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"            throws DuplicateCalendarEntryException {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList calendarEntriesList \u003d new UniqueCalendarEntryList();"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DuplicateCalendarEntryException.class);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntriesList.add(MEETING_BOSS);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntriesList.add(MEETING_BOSS);"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":59,"-":8}},{"path":"src/test/java/seedu/address/model/event/EndDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class EndDateTest {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new EndDate(null));"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidEndDate_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidEndDate \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EndDate(invalidEndDate));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidEndDate() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // null end date"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e DateUtil.isValidDate(null));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid end date"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"wejo*21\")); // invalid string"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"12/12/2012\")); // invalid format"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"0-1-98\")); // invalid date"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"50-12-1998\")); // invalid day"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"10-15-2013\")); // invalid month"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"09-08-10000\")); // invalid year"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // valid end date"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DateUtil.isValidDate(\"01-01-2001\")); // valid date"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DateUtil.isValidDate(\"29-02-2000\")); // leap year"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":38,"-":5}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setGroupTags(person.getGroupTags());"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setPreferenceTags(person.getPreferenceTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the {@code groups} into a {@code Set\u003cGroup\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    public EditPersonDescriptorBuilder withGroups(String... groups) {"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cGroup\u003e groupSet \u003d Stream.of(groups).map(Group::new).collect(Collectors.toSet());"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setGroupTags(groupSet);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the {@code preferences} into a {@code Set\u003cPreference\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"     * that we are building."},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    public EditPersonDescriptorBuilder withPreferences(String... preferences) {"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cPreference\u003e preferenceSet \u003d Stream.of(preferences).map(Preference::new).collect(Collectors.toSet());"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setPreferenceTags(preferenceSet);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":18,"-":81}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withGroups(\"Friend\").build();}"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code groupName} into a {@code Group} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public AddressBookBuilder withGroup(String groupName) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            addressBook.addGroup(new Group(groupName));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"groupName is expected to be valid.\");"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code prefName} into a {@code Preference} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public AddressBookBuilder withPreference(String prefName) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            addressBook.addPreference(new Preference(prefName));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"prefName is expected to be valid.\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":18,"-":48}},{"path":"src/test/java/seedu/address/model/tag/GroupTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"public class GroupTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Group(null));"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidGroupName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidGroupName \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Group(invalidGroupName));"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidGroupName() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        // null group name"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Group.isValidTagName(null));"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":17,"-":9}},{"path":"src/test/java/seedu/address/testutil/TypicalPreferences.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class containing a list of {@code Preference} Objects to be used in tests."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class TypicalPreferences {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Preference SHOES \u003d new Preference(\"shoes\");"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Preference COMPUTERS \u003d new Preference(\"computers\");"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Preference VIDEO_GAMES \u003d new Preference(\"videoGames\");"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Preference NECKLACES \u003d new Preference(\"necklaces\");"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    private TypicalPreferences() {}"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":18}},{"path":"src/test/java/seedu/address/testutil/TypicalGroups.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class containing a list of {@code Group} Objects to be used in tests."},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public class TypicalGroups {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group FRIENDS \u003d new Group(\"friends\");"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group COLLEAGUES \u003d new Group(\"colleagues\");"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group BUDDIES \u003d new Group(\"buddies\");"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group FAMILY \u003d new Group(\"family\");"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group TWITTER \u003d new Group(\"twitter\");"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group NEIGHBOURS \u003d new Group(\"neighbours\");"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    private TypicalGroups() {}"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":20}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_ORDER \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_ORDER \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_ORDER \u003d Index.fromOneBased(3);"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Index INDEX_FIRST_ENTRY \u003d Index.fromOneBased(1);"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Index INDEX_SECOND_ENTRY \u003d Index.fromOneBased(2);"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Index INDEX_THIRD_ENTRY \u003d Index.fromOneBased(3);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":4,"-":16}},{"path":"src/test/java/seedu/address/testutil/EditOrderDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand.EditOrderDescriptor;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * A utility class to help with building EditOrderDescriptor objects."},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class EditOrderDescriptorBuilder {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    private EditOrderDescriptor descriptor;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder() {"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"        descriptor \u003d new EditOrderDescriptor();"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder(EditOrderDescriptor descriptor) {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        this.descriptor \u003d new EditOrderDescriptor(descriptor);"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder(Order order) {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        descriptor \u003d new EditOrderDescriptor();"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        descriptor.setOrderInformation(order.getOrderInformation());"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        descriptor.setPrice(order.getPrice());"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        descriptor.setQuantity(order.getQuantity());"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        descriptor.setDeliveryDate(order.getDeliveryDate());"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code OrderInformation} of the {@code EditOrderDescriptor} that we are building."},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder withOrderInformation(String orderInformation) {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        descriptor.setOrderInformation(new OrderInformation(orderInformation));"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code Price} of the {@code EditOrderDescriptor} that we are building."},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder withPrice(String price) {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        descriptor.setPrice(new Price(price));"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code Quantity} of the {@code EditOrderDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder withQuantity(String quantity) {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        descriptor.setQuantity(new Quantity(quantity));"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code DeliveryDate} of the {@code EditOrderDescriptor} that we are building."},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder withDeliveryDate(String deliveryDate) {"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        descriptor.setDeliveryDate(new DeliveryDate(deliveryDate));"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptor build() {"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        return descriptor;"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":69}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PREFERENCE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        person.getGroupTags().stream().forEach("},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            s -\u003e sb.append(PREFIX_GROUP + s.tagName + \" \")"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        );"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        person.getPreferenceTags().stream().forEach("},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            s -\u003e sb.append(PREFIX_PREFERENCE + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":7,"-":35}},{"path":"src/test/java/seedu/address/testutil/CalendarManagerBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class to help with building CalendarManager objects."},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" *     {@code CalendarManager cm \u003d new CalendarManagerBuilder().withEntries(\"Meet Boss\", \"Get Stocks\").build();}"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarManagerBuilder {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarManager calendarManager;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManagerBuilder() {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager \u003d new CalendarManager();"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManagerBuilder(CalendarManager calendarManager) {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarManager \u003d calendarManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManagerBuilder withEntry(CalendarEntry calendarEntry) {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            calendarManager.addCalendarEntry(calendarEntry);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DuplicateCalendarEntryException dcee) {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"Entry is expected to be unique.\");"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManager build() {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManager;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"}"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""}],"authorContributionMap":{"SuxianAlicia":34,"-":5}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size() / 2);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"     * Returns the middle index of the order in the {@code model}\u0027s order list."},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public static Index getMidOrderIndex(Model model) {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        return Index.fromOneBased(model.getAddressBook().getOrderList().size() / 2);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"     * Returns the last index of the order in the {@code model}\u0027s order list."},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public static Index getLastOrderIndex(Model model) {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        return Index.fromOneBased(model.getAddressBook().getOrderList().size());"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    public static Person getPerson(Model model, Index index) {"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        return model.getAddressBook().getPersonList().get(index.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"     * Returns the order in the {@code model}\u0027s order list at {@code index}."},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    public static Order getOrder(Model model, Index index) {"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        return model.getAddressBook().getOrderList().get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":49,"amad-person":31}},{"path":"src/test/java/seedu/address/model/UniqueOrderListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.BOOKS;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.CHOCOLATES;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"public class UniqueOrderListTest {"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public void equals() throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList firstOrderList \u003d new UniqueOrderList();"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        firstOrderList.add(BOOKS);"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList secondOrderList \u003d new UniqueOrderList();"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        secondOrderList.add(CHOCOLATES);"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e true"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstOrderList.equals(firstOrderList));"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstOrderList.equals(1));"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        // different objects, same type -\u003e false"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstOrderList.equals(secondOrderList));"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public void asOrderInsensitiveList_compareListsWithSameItemsInDiffOrder_assertEqual()"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList firstOrderList \u003d new UniqueOrderList();"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        firstOrderList.add(BOOKS);"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        firstOrderList.add(CHOCOLATES);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList secondOrderList \u003d new UniqueOrderList();"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        secondOrderList.add(CHOCOLATES);"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        secondOrderList.add(BOOKS);"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstOrderList.equalsOrderInsensitive(secondOrderList));"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList uniqueOrderList \u003d new UniqueOrderList();"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        uniqueOrderList.asObservableList().remove(0);"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    public void asUniqueList_addDuplicateOrder_throwsDuplicateOrderException()"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"            throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList uniqueOrderList \u003d new UniqueOrderList();"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UniqueOrderList.DuplicateOrderException.class);"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        uniqueOrderList.add(BOOKS);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        uniqueOrderList.add(BOOKS);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":64}},{"path":"src/test/java/seedu/address/testutil/OrderUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" * A utility class for Order."},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"public class OrderUtil {"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"     * Returns an add order command string for adding the {@code order}."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static String getAddOrderCommand(int index, Order order) {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        return AddOrderCommand.COMMAND_WORD + \" \" + index + \" \" + getOrderDetails(order);"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"     * Returns the part of command string for the given {@code orders}\u0027s details."},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public static String getOrderDetails(Order order) {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        sb.append(PREFIX_ORDER_INFORMATION + order.getOrderInformation().toString() + \" \");"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        sb.append(PREFIX_PRICE + order.getPrice().toString() + \" \");"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        sb.append(PREFIX_QUANTITY + order.getQuantity().toString() + \" \");"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        sb.append(PREFIX_DELIVERY_DATE + order.getDeliveryDate().toString());"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        return sb.toString();"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":35}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_COLLEAGUES;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_FRIEND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_COMPUTERS;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PREFERENCE_SHOES;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            .withGroups(\"friends\").withPreferences(\"shoes\", \"necklaces\").build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            .withGroups(\"twitter\", \"friends\").withPreferences(\"videoGames\", \"computers\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withGroups().withPreferences().build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withGroups().withPreferences().build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withGroups(\"neighbours\", \"twitter\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withPreferences(\"videoGames\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withGroups(VALID_GROUP_FRIEND)"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"            .withPreferences(VALID_PREFERENCE_SHOES).build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"            .withGroups(VALID_GROUP_COLLEAGUES, VALID_GROUP_FRIEND).withPreferences(VALID_PREFERENCE_COMPUTERS).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String KEYWORD_MATCHING_TWITTER \u003d \"twitter\"; // A keyword that matches TWITTER"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String KEYWORD_MATCHING_VIDEOGAMES \u003d \"videoGames\"; // A keyword that matches VIDEOGAMES"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":15,"-":71}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_GROUPS \u003d \"friends\";"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_PREFERENCES \u003d \"computers\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private Set\u003cGroup\u003e groupTags;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private Set\u003cPreference\u003e prefTags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        groupTags \u003d SampleDataUtil.getGroupSet(DEFAULT_GROUPS);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        prefTags \u003d SampleDataUtil.getPreferenceSet(DEFAULT_PREFERENCES);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        groupTags \u003d new HashSet\u003c\u003e(personToCopy.getGroupTags());"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        prefTags \u003d new HashSet\u003c\u003e(personToCopy.getPreferenceTags());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the {@code groups} into a {@code Set\u003cGroup\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    public PersonBuilder withGroups(String ... groups) {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupTags \u003d SampleDataUtil.getGroupSet(groups);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the {@code preferences} into a {@code Set\u003cPreference\u003e}"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"     * and set it to the {@code Person} that we are building."},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    public PersonBuilder withPreferences(String ... preferences) {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        this.prefTags \u003d SampleDataUtil.getPreferenceSet(preferences);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        return new Person(name, phone, email, address, groupTags, prefTags);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":23,"-":85}},{"path":"src/test/java/seedu/address/testutil/TypicalOrders.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_BOOKS;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_CHOC;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_COMPUTER;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_BOOKS;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_CHOC;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOOKS;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHOC;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_COMPUTER;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOOKS;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_CHOC;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_COMPUTER;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":" * A utility class containing a list of {@code Order} objects to be used in tests."},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"public class TypicalOrders {"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    public static final Order SHOES \u003d new OrderBuilder()"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(\"Shoes\")"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"            .withPrice(\"129.99\")"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"            .withQuantity(\"3\")"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(\"10-09-2018\")"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    public static final Order FACEWASH \u003d new OrderBuilder()"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(\"Face Wash\")"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"            .withPrice(\"24.75\")"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"            .withQuantity(\"1\")"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(\"05-11-2018\")"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    public static final Order BOOKS \u003d new OrderBuilder()"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(VALID_ORDER_INFORMATION_BOOKS)"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"            .withPrice(VALID_PRICE_BOOKS)"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"            .withQuantity(VALID_QUANTITY_BOOKS)"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(VALID_DELIVERY_DATE_BOOKS)"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public static final Order CHOCOLATES \u003d new OrderBuilder()"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(VALID_ORDER_INFORMATION_CHOC)"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"            .withPrice(VALID_PRICE_CHOC)"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"            .withQuantity(VALID_QUANTITY_CHOC)"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(VALID_DELIVERY_DATE_CHOC)"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public static final Order COMPUTER \u003d new OrderBuilder()"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"            .withPrice(VALID_PRICE_COMPUTER)"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"            .withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER)"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    public static final Order COMICBOOK \u003d new OrderBuilder()"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(\"Comic Book\")"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"            .withPrice(\"17.99\")"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"            .withQuantity(\"1\")"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(\"01-01-2018\")"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    private TypicalOrders() {} // prevents instantiation"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"     * Returns an {@code AddressBook} with one person and all typical orders."},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    public static AddressBook getTypicalAddressBookWithOrders() {"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"            ab.addPerson(ALICE);"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"not possible\");"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        for (Order order : getTypicalOrders()) {"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"            try {"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"                ab.addOrderToOrderList(order);"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"            } catch (UniqueOrderList.DuplicateOrderException doe) {"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        return ab;"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"    public static List\u003cOrder\u003e getTypicalOrders() {"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(SHOES, FACEWASH, BOOKS, CHOCOLATES));"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":101}},{"path":"src/test/java/seedu/address/testutil/CalendarEntryUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_TITLE;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class for {@code CalendarEntry}."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryUtil {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * returns part of command string for the given {@code calEvent}\u0027s details."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public static String getCalendarEventDetails(CalendarEntry calEvent) {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_ENTRY_TITLE + calEvent.getEntryTitle().toString() + \" \");"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_START_DATE + calEvent.getStartDate().toString() + \" \");"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_END_DATE + calEvent.getEndDate().toString() + \" \");"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_START_TIME + calEvent.getStartTime().toString() + \" \");"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_END_TIME + calEvent.getEndTime().toString());"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        return sb.toString();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":28}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.util.CalendarFxUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * A handler for {@code CentrePanel} of the Ui."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cStackPane\u003e {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String CALENDAR_PANEL_ID \u003d \"#calendarPanelholder\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    private Calendar calendar;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarSource calendarSource;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarView calendarView;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    protected CalendarPanelHandle(StackPane rootNode) {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        super(rootNode);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView \u003d CalendarFxUtil.returnModifiedCalendarView();"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        calendarSource \u003d new CalendarSource();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        calendar \u003d new Calendar();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.setReadOnly(true);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        calendarSource.getCalendars().addAll(calendar);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.getCalendarSources().setAll(calendarSource);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        getRootNode().getChildren().add(calendarView);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":33}},{"path":"src/test/java/guitests/guihandles/OrderCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import javafx.scene.Node;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Provides a handle to an order card in the order list panel."},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"public class OrderCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    private static final String ORDER_INFORMATION_ID \u003d \"#orderInformation\";"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    private static final String PRICE_AND_QUANTITY_ID \u003d \"#priceAndQuantity\";"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    private static final String TOTAL_PRICE_ID \u003d \"#totalPrice\";"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    private static final String DELIVERY_DATE_ID \u003d \"#deliveryDate\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    private final Label idLabel;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    private final Label orderInformationLabel;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    private final Label priceAndQuantityLabel;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    private final Label totalPriceLabel;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    private final Label deliveryDateLabel;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    public OrderCardHandle(Node cardNode) {"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        super(cardNode);"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        this.orderInformationLabel \u003d getChildNode(ORDER_INFORMATION_ID);"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        this.priceAndQuantityLabel \u003d getChildNode(PRICE_AND_QUANTITY_ID);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        this.totalPriceLabel \u003d getChildNode(TOTAL_PRICE_ID);"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        this.deliveryDateLabel \u003d getChildNode(DELIVERY_DATE_ID);"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    public String getId() {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        return idLabel.getText();"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public String getOrderInformation() {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        return orderInformationLabel.getText();"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    public String getPriceAndQuantity() {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        return priceAndQuantityLabel.getText();"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public String getTotalPrice() {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        return totalPriceLabel.getText();"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    public String getDeliveryDate() {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        return deliveryDateLabel.getText();"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":52}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private final PersonPanelHandle personPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        personPanel \u003d new PersonPanelHandle(getChildNode(PersonPanelHandle.PERSON_PANEL_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public PersonPanelHandle getPersonPanel() {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        return personPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":3,"-":49}},{"path":"src/test/java/seedu/address/testutil/TypicalCalendarEntries.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class containing a list of {@code CalendarEntry} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class TypicalCalendarEntries {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry MEETING_BOSS \u003d new CalendarEntryBuilder()"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(\"Meeting with boss\")"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(\"06-06-2018\")"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(\"06-06-2018\")"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(\"10:00\")"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(\"12:00\").build();"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry GET_STOCKS \u003d new CalendarEntryBuilder()"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(\"Get stocks from supplier\")"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(\"01-07-2018\")"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(\"01-07-2018\")"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(\"08:00\")"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(\"12:30\").build();"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry ROAD_SHOW \u003d new CalendarEntryBuilder()"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(\"Road Show at Orchard\")"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(\"02-05-2018\")"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(\"06-05-2018\")"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(\"09:00\")"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(\"19:00\").build();"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry WORKSHOP \u003d new CalendarEntryBuilder()"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(\"Workshop\")"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(\"28-05-2018\")"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(\"29-05-2018\")"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(\"10:00\")"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(\"15:00\").build();"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    private TypicalCalendarEntries() {} // prevents instantiation"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    public static CalendarManager getTypicalCalendarManagerWithEntries() {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager cm \u003d new CalendarManager();"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        for (CalendarEntry calEvent : getTypicalCalendarEntries()) {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            try {"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                cm.addCalendarEntry(calEvent);"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"            } catch (DuplicateCalendarEntryException dcee) {"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        return cm;"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    public static List\u003cCalendarEntry\u003e getTypicalCalendarEntries() {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEETING_BOSS, GET_STOCKS, ROAD_SHOW, WORKSHOP));"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":63}},{"path":"src/test/java/seedu/address/testutil/CalendarEntryBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndDate;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndTime;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EntryTitle;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartDate;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartTime;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class to help with building CalendarEntry objects."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryBuilder {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_EVENT_TITLE \u003d \"Meeting with boss\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_START_DATE \u003d \"10-10-2018\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_END_DATE \u003d \"10-10-2018\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_START_TIME \u003d \"10:00\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_END_TIME \u003d \"12:00\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private EntryTitle entryTitle;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private StartDate startDate;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private EndDate endDate;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private StartTime startTime;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private EndTime endTime;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder() {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        entryTitle \u003d new EntryTitle(DEFAULT_EVENT_TITLE);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        startDate \u003d new StartDate(DEFAULT_START_DATE);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        endDate \u003d new EndDate(DEFAULT_END_DATE);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        startTime \u003d new StartTime(DEFAULT_START_TIME);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        endTime \u003d new EndTime(DEFAULT_END_TIME);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     * Initializes the CalendarEntryBuilder with the data of {@code entryToCopy}."},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder(CalendarEntry entryToCopy) {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        entryTitle \u003d entryToCopy.getEntryTitle();"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        startDate \u003d entryToCopy.getStartDate();"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        endDate \u003d entryToCopy.getEndDate();"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        startTime \u003d entryToCopy.getStartTime();"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        endTime \u003d entryToCopy.getEndTime();"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code EntryTitle} of the {@code CalendarEntry} that we are building."},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withEntryTitle(String eventTitle) {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitle \u003d new EntryTitle(eventTitle);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code StartDate} of the {@code CalendarEntry} that we are building."},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withStartDate(String startDate) {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        this.startDate \u003d new StartDate(startDate);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code EndDate} of the {@code CalendarEntry} that we are building."},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withEndDate(String endDate) {"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        this.endDate \u003d new EndDate(endDate);"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code StartTime} of the {@code CalendarEntry} that we are building."},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withStartTime(String startTime) {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        this.startTime \u003d new StartTime(startTime);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code EndTime} of the {@code CalendarEntry} that we are building."},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withEndTime(String endTime) {"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        this.endTime \u003d new EndTime(endTime);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntry build() {"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        return new CalendarEntry(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":89}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String GROUPS_FIELD_ID \u003d \"#groups\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String PREFERENCES_FIELD_ID \u003d \"#preferences\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    private final List\u003cLabel\u003e groupLabels;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private final List\u003cLabel\u003e preferenceLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        Region groupsContainer \u003d getChildNode(GROUPS_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupLabels \u003d groupsContainer"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        Region preferencesContainer \u003d getChildNode(PREFERENCES_FIELD_ID);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        this.preferenceLabels \u003d preferencesContainer"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    public List\u003cString\u003e getGroups() {"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        return groupLabels"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    public List\u003cString\u003e getPreferences() {"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        return preferenceLabels"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":14,"-":73}},{"path":"src/test/java/guitests/guihandles/CalendarEntryListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.CalendarEntryCard;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Provides a handle for {@code CalendarEntryListPanel} containing the list of {@code CalendarEntryCard}."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryListPanelHandle extends NodeHandle\u003cListView\u003cCalendarEntryCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String CALENDAR_ENTRY_LIST_VIEW_ID \u003d \"#calendarEntryCardListView\";"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryListPanelHandle(ListView\u003cCalendarEntryCard\u003e rootNode) {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        super(rootNode);"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     * Navigates the listview to display and select the calendar entry."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public void navigateToCard(CalendarEntry calendarEntry) {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cCalendarEntryCard\u003e entryCards \u003d getRootNode().getItems();"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        Optional\u003cCalendarEntryCard\u003e matchingCard \u003d entryCards.stream()"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                .filter(entryCard -\u003e entryCard.calendarEntry.equals(calendarEntry)).findFirst();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            throw  new IllegalArgumentException(\"Calendar Entry does not exist.\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the calendar entry card handle of an calendar entry associated with the {@code index} in the list."},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryCardHandle getCalendarEntryCardHandle (int index) {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        return getCalendarEntryCardHandle(getRootNode().getItems().get(index).calendarEntry);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the calendar entry card handle of an calendar entry"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"     * associated with the {@code calendarEntry} in the list."},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarEntryCardHandle getCalendarEntryCardHandle(CalendarEntry calendarEntry) {"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        Optional\u003cCalendarEntryCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"                .filter(entryCard -\u003e entryCard.calendarEntry.equals(calendarEntry))"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                .map(orderCard -\u003e new CalendarEntryCardHandle(orderCard.getRoot()))"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"                .findFirst();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Calendar Entry does not exist.\"));"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":17}},{"path":"src/test/java/guitests/guihandles/PersonPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"AJZ1995"},"content":"//@@author AJZ1995"},{"lineNumber":2,"author":{"gitID":"AJZ1995"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":4,"author":{"gitID":"AJZ1995"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"AJZ1995"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":7,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":10,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":12,"author":{"gitID":"AJZ1995"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"AJZ1995"},"content":" * Provides a handle to the Person Panel."},{"lineNumber":14,"author":{"gitID":"AJZ1995"},"content":" */"},{"lineNumber":15,"author":{"gitID":"AJZ1995"},"content":"public class PersonPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":16,"author":{"gitID":"AJZ1995"},"content":"    public static final String PERSON_PANEL_ID \u003d \"#personPanel\";"},{"lineNumber":17,"author":{"gitID":"AJZ1995"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":18,"author":{"gitID":"AJZ1995"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":19,"author":{"gitID":"AJZ1995"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":20,"author":{"gitID":"AJZ1995"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":21,"author":{"gitID":"AJZ1995"},"content":"    private static final String GROUPS_FIELD_ID \u003d \"#groups\";"},{"lineNumber":22,"author":{"gitID":"AJZ1995"},"content":"    private static final String PREFERENCES_FIELD_ID \u003d \"#preferences\";"},{"lineNumber":23,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":24,"author":{"gitID":"AJZ1995"},"content":"    private Label name;"},{"lineNumber":25,"author":{"gitID":"AJZ1995"},"content":"    private Label phone;"},{"lineNumber":26,"author":{"gitID":"AJZ1995"},"content":"    private Label address;"},{"lineNumber":27,"author":{"gitID":"AJZ1995"},"content":"    private Label email;"},{"lineNumber":28,"author":{"gitID":"AJZ1995"},"content":"    private List\u003cLabel\u003e groupLabels;"},{"lineNumber":29,"author":{"gitID":"AJZ1995"},"content":"    private List\u003cLabel\u003e preferenceLabels;"},{"lineNumber":30,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":31,"author":{"gitID":"AJZ1995"},"content":"    public PersonPanelHandle(Node personPanelNode) {"},{"lineNumber":32,"author":{"gitID":"AJZ1995"},"content":"        super(personPanelNode);"},{"lineNumber":33,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":34,"author":{"gitID":"AJZ1995"},"content":"        this.name \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"AJZ1995"},"content":"        this.phone \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"AJZ1995"},"content":"        this.address \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"AJZ1995"},"content":"        this.email \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":40,"author":{"gitID":"AJZ1995"},"content":"    public String getName() {"},{"lineNumber":41,"author":{"gitID":"AJZ1995"},"content":"        return name.getText();"},{"lineNumber":42,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":44,"author":{"gitID":"AJZ1995"},"content":"    public String getPhone() {"},{"lineNumber":45,"author":{"gitID":"AJZ1995"},"content":"        return phone.getText();"},{"lineNumber":46,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":48,"author":{"gitID":"AJZ1995"},"content":"    public String getEmail() {"},{"lineNumber":49,"author":{"gitID":"AJZ1995"},"content":"        return email.getText();"},{"lineNumber":50,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":52,"author":{"gitID":"AJZ1995"},"content":"    public String getAddress() {"},{"lineNumber":53,"author":{"gitID":"AJZ1995"},"content":"        return address.getText();"},{"lineNumber":54,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":56,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"AJZ1995"},"content":"    * Update groups of each person"},{"lineNumber":58,"author":{"gitID":"AJZ1995"},"content":"    */"},{"lineNumber":59,"author":{"gitID":"AJZ1995"},"content":"    public void updateGroups() {"},{"lineNumber":60,"author":{"gitID":"AJZ1995"},"content":"        Region groupsContainer \u003d getChildNode(GROUPS_FIELD_ID);"},{"lineNumber":61,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":62,"author":{"gitID":"AJZ1995"},"content":"        this.groupLabels \u003d groupsContainer"},{"lineNumber":63,"author":{"gitID":"AJZ1995"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":64,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":65,"author":{"gitID":"AJZ1995"},"content":"                .map(Label.class::cast)"},{"lineNumber":66,"author":{"gitID":"AJZ1995"},"content":"                .collect(Collectors.toList());"},{"lineNumber":67,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":69,"author":{"gitID":"AJZ1995"},"content":"    public List\u003cString\u003e getGroups() {"},{"lineNumber":70,"author":{"gitID":"AJZ1995"},"content":"        return groupLabels"},{"lineNumber":71,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":72,"author":{"gitID":"AJZ1995"},"content":"                .map(Label::getText)"},{"lineNumber":73,"author":{"gitID":"AJZ1995"},"content":"                .collect(Collectors.toList());"},{"lineNumber":74,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":76,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"AJZ1995"},"content":"     * Update preferences of each person"},{"lineNumber":78,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"AJZ1995"},"content":"    public void updatePreferences() {"},{"lineNumber":80,"author":{"gitID":"AJZ1995"},"content":"        Region preferenceContainer \u003d getChildNode(PREFERENCES_FIELD_ID);"},{"lineNumber":81,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":82,"author":{"gitID":"AJZ1995"},"content":"        this.preferenceLabels \u003d preferenceContainer"},{"lineNumber":83,"author":{"gitID":"AJZ1995"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":84,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":85,"author":{"gitID":"AJZ1995"},"content":"                .map(Label.class::cast)"},{"lineNumber":86,"author":{"gitID":"AJZ1995"},"content":"                .collect(Collectors.toList());"},{"lineNumber":87,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":89,"author":{"gitID":"AJZ1995"},"content":"    public List\u003cString\u003e getPreferences() {"},{"lineNumber":90,"author":{"gitID":"AJZ1995"},"content":"        return preferenceLabels"},{"lineNumber":91,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":92,"author":{"gitID":"AJZ1995"},"content":"                .map(Label::getText)"},{"lineNumber":93,"author":{"gitID":"AJZ1995"},"content":"                .collect(Collectors.toList());"},{"lineNumber":94,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"AJZ1995"},"content":"}"}],"authorContributionMap":{"AJZ1995":95}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandSyntaxListUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":41,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case TAB:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            autocompleteCommand(commandTextField.getText());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"     * Handles the Tab button pressed event by updating {@code CommandBox}\u0027s text"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"     * field with the full command syntax based on {@code text} entered so far."},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"    private void autocompleteCommand(String text) {"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        ArrayList\u003cString\u003e commandSyntaxList \u003d CommandSyntaxListUtil.getCommandSyntaxList();"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        // get list of matches of the input entered so far"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        List\u003cString\u003e autocompleteCommandList \u003d commandSyntaxList.stream()"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"                .filter(s -\u003e s.startsWith(text))"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"                .collect(Collectors.toList());"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"        // replace input in text field with first match"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        if (!(autocompleteCommandList.isEmpty())) {"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"            replaceText(autocompleteCommandList.get(0));"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":155,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":159,"amad-person":19}},{"path":"src/main/java/seedu/address/ui/util/CalendarFxUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.ui.util;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.page.DayPage;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Contains methods to initialise Calendar such that unused functions are not displayed, and mouse events are not"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * listened to."},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarFxUtil {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns modified CalendarView such that unnecessary buttons and features are not shown."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static CalendarView returnModifiedCalendarView() {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarView calendarView \u003d new CalendarView();"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowPageToolBarControls(false);"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowSourceTray(false);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowSourceTrayButton(false);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowPageSwitcher(false);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowSearchResultsTray(false);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowToolBar(false);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.getDayPage().setDayPageLayout(DayPage.DayPageLayout.DAY_ONLY);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        //calendarView.getDayPage().setDisable(true);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarView;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":33}},{"path":"src/test/java/guitests/guihandles/OrderListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.ui.OrderCard;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * Provides a handle for {@code OrderListPanel} containing the list of {@code OrderCard}."},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class OrderListPanelHandle extends NodeHandle\u003cListView\u003cOrderCard\u003e\u003e {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    public static final String ORDER_LIST_VIEW_ID \u003d \"#orderListView\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public OrderListPanelHandle(ListView\u003cOrderCard\u003e orderListPanelNode) {"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"        super(orderListPanelNode);"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"     * Navigates the listview to display and select the order."},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    public void navigateToCard(Order order) {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        List\u003cOrderCard\u003e orderCards \u003d getRootNode().getItems();"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        Optional\u003cOrderCard\u003e matchingCard \u003d orderCards.stream()"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"                .filter(orderCard -\u003e orderCard.order.equals(order)).findFirst();"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"            throw  new IllegalArgumentException(\"Order does not exist.\");"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        });"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"     * Returns the order card handle of an order associated with the {@code index} in the list."},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public OrderCardHandle getOrderCardHandle(int index) {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        return getOrderCardHandle(getRootNode().getItems().get(index).order);"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"     * Returns the order card handle of an order associated with the {@code order} in the list."},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    private OrderCardHandle getOrderCardHandle(Order order) {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        Optional\u003cOrderCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"                .filter(orderCard -\u003e orderCard.order.equals(order))"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"                .map(orderCard -\u003e new OrderCardHandle(orderCard.getRoot()))"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"                .findFirst();"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Order does not exist.\"));"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":58}},{"path":"src/test/java/guitests/guihandles/CalendarEntryCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Provides a handle to a calendar entry card in the calendar entry list panel."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String ENTRY_TITLE_ID \u003d \"#entryTitle\";"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String START_DATE_ID \u003d \"#startDate\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String END_DATE_ID \u003d \"#endDate\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String TIME_DURATION_ID \u003d \"#timeDuration\";"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label idLabel;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label entryTitleLabel;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label startDateLabel;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label endDateLabel;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label timeDurationLabel;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryCardHandle(Node cardNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitleLabel \u003d getChildNode(ENTRY_TITLE_ID);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        this.startDateLabel \u003d getChildNode(START_DATE_ID);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        this.endDateLabel \u003d getChildNode(END_DATE_ID);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        this.timeDurationLabel \u003d getChildNode(TIME_DURATION_ID);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public String getId() {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        return idLabel.getText();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public String getEntryTitle() {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        return entryTitleLabel.getText();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    public String getStartDate() {"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        return startDateLabel.getText();"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public String getEndDate() {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return endDateLabel.getText();"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public String getTimeDuration() {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        return timeDurationLabel.getText();"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":9}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarRequestEvent;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.util.CalendarFxUtil;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":" * Calendar Panel displaying calendar."},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":" * ContactSails implements CalendarFX to display Calendar."},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DAY_VIEW \u003d \"Day\";"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MONTH_VIEW \u003d \"Month\";"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String WEEK_VIEW \u003d \"Week\";"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarView calendarView;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarSource calendarSource;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    private StackPane calendarPanelholder;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarPanel(Calendar calendar) {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView \u003d CalendarFxUtil.returnModifiedCalendarView();"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        calendarSource \u003d new CalendarSource();"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        initialiseCalendar(calendar);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        createTimeThread();"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * Adapted from CalendarFX developer manual QuickStart section."},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     * http://dlsc.com/wp-content/html/calendarfx/manual.html#_quick_start"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    private void createTimeThread() {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        Thread updateTimeThread \u003d new Thread(\"Calendar: Update Time Thread\") {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            @Override"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            public void run() {"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"                while (true) {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"                    Platform.runLater(() -\u003e {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"                        calendarView.setToday(LocalDate.now());"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"                        calendarView.setTime(LocalTime.now());"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"                    });"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"                    try {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"                        // update every 10 seconds"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"                        sleep(10000);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"                    } catch (InterruptedException e) {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"                        e.printStackTrace();"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"                    }"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"                }"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"            };"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        };"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        updateTimeThread.setPriority(Thread.MIN_PRIORITY);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        updateTimeThread.setDaemon(true);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        updateTimeThread.start();"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets up CalendarFX."},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    public void initialiseCalendar(Calendar calendar) {"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        calendarSource.getCalendars().addAll(calendar);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.getCalendarSources().setAll(calendarSource);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        calendarPanelholder.getChildren().setAll(calendarView);"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleDisplayCalendarRequestEvent(DisplayCalendarRequestEvent event) {"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        String view \u003d event.getView();"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        if (view !\u003d null) {"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"            if (view.equalsIgnoreCase(MONTH_VIEW)) {"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"                calendarView.showMonthPage();"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"            } else if (view.equalsIgnoreCase(DAY_VIEW)) {"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"                calendarView.showDayPage();"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"            } else if (view.equalsIgnoreCase(WEEK_VIEW)) {"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"                calendarView.showWeekPage();"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":106}},{"path":"src/main/java/seedu/address/ui/CalendarEntryCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * An UI component that displays information of a {@code CalendarEntry}."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"CalendarEntryCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public final CalendarEntry calendarEntry;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private Label entryTitle;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    private Label id;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private Label startDate;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private Label endDate;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    private Label timeDuration;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryCard(CalendarEntry calendarEntry, int displayedIndex) {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarEntry \u003d calendarEntry;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        entryTitle.setText(calendarEntry.getEntryTitle().toString());"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        startDate.setText(\"From: \" + calendarEntry.getStartDate().toString());"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        endDate.setText(\"To: \" + calendarEntry.getEndDate().toString());"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        timeDuration.setText(\"Between \" + calendarEntry.getStartTime().toString()"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"                + \" and \" + calendarEntry.getEndTime().toString());"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof CalendarEntryCard)) {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        // state check"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCard card \u003d (CalendarEntryCard) other;"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 calendarEntry.equals(card.calendarEntry);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":60,"-":6}},{"path":"src/main/java/seedu/address/ui/OrderCard.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":" * A UI component that displays information of an {@code Order}."},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"public class OrderCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    private static final String FXML \u003d \"OrderListCard.fxml\";"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public final Order order;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(OrderCard.class);"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    private HBox cardPane;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    private Label orderInformation;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    private Label orderStatus;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    private Label priceAndQuantity;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    private Label totalPrice;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    private Label deliveryDate;"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    public OrderCard(Order order, int displayedIndex) {"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        this.order \u003d order;"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        orderInformation.setText(order.getOrderInformation().toString());"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        orderStatus.setText(order.getOrderStatus().getCurrentOrderStatus().toUpperCase());"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        priceAndQuantity.setText(\"S$\" + order.getPrice().toString() + \" X \" + order.getQuantity().toString());"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        totalPrice.setText(\"Total: S$\" + getTotalPrice(order.getPrice(), order.getQuantity()));"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        deliveryDate.setText(\"Deliver By: \" + order.getDeliveryDate().toString());"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    private String getTotalPrice(Price price, Quantity quantity) {"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        double priceValue \u003d Double.valueOf(price.toString());"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        int quantityValue \u003d Integer.valueOf(quantity.toString());"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        return String.valueOf(priceValue * quantityValue);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        if (!(other instanceof OrderCard)) {"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        // state check"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        OrderCard card \u003d (OrderCard) other;"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 order.equals(card.order);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":81}},{"path":"src/main/java/seedu/address/ui/RightPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarEntryListEvent;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" * The Right Panel of the App that can switch between Order List Panel and CalendarEntry List Panel"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class RightPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"RightPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private OrderListPanel orderListPanel;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarEntryListPanel calendarEntryListPanel;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private StackPane rightPlaceholder;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public RightPanel(ObservableList\u003cOrder\u003e orderList, ObservableList\u003cCalendarEntry\u003e calendarEntryList) {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        orderListPanel \u003d new OrderListPanel(orderList);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryListPanel \u003d new CalendarEntryListPanel(calendarEntryList);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        // Displays Order List by default."},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        displayOrderListPanel();"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     * Displays the OrderList Panel."},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    private void displayOrderListPanel() {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        if (!rightPlaceholder.getChildren().contains(orderListPanel.getRoot())) {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            rightPlaceholder.getChildren().clear();"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"            rightPlaceholder.getChildren().add(orderListPanel.getRoot());"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * Displays the CalendarEntryList Panel."},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    private void displayCalendarEntryListPanel() {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        if (!rightPlaceholder.getChildren().contains(calendarEntryListPanel.getRoot())) {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"            rightPlaceholder.getChildren().clear();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            rightPlaceholder.getChildren().add(calendarEntryListPanel.getRoot());"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleDisplayOrderListEvent(DisplayOrderListEvent event) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        displayOrderListPanel();"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleDisplayCalendarEntryListEvent(DisplayCalendarEntryListEvent event) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        displayCalendarEntryListPanel();"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":62,"-":11}},{"path":"src/main/java/seedu/address/ui/CalendarEntryListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.CalendarEntryPanelSelectionChangedEvent;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * Panel containing calendar entries present in calendar."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"CalendarEntryListPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CalendarEntryListPanel.class);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    private ListView\u003cCalendarEntryCard\u003e calendarEntryCardListView;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryListPanel(ObservableList\u003cCalendarEntry\u003e calendarEntries) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        setConnections(calendarEntries);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    private void setConnections(ObservableList\u003cCalendarEntry\u003e calendarEntryList) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        ObservableList\u003cCalendarEntryCard\u003e mappedList \u003d EasyBind.map(calendarEntryList, (calendarEntry) -\u003e"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"                        new CalendarEntryCard(calendarEntry, calendarEntryList.indexOf(calendarEntry) + 1));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryCardListView.setItems(mappedList);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryCardListView.setCellFactory(listView -\u003e new CalendarEntryListPanel.CalendarEntryListViewCell());"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryCardListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"                        logger.fine(\"Selection in calendar entry list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"                        raise(new CalendarEntryPanelSelectionChangedEvent(newValue));"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"                    }"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"                });"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code CalendarEntryCard}."},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    class CalendarEntryListViewCell extends ListCell\u003cCalendarEntryCard\u003e {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        protected void updateItem(CalendarEntryCard calendarEntry, boolean empty) {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            super.updateItem(calendarEntry, empty);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"            if (empty || calendarEntry \u003d\u003d null) {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"                setGraphic(null);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"                setText(null);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"                setGraphic(calendarEntry.getRoot());"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":58,"-":12}},{"path":"src/main/java/seedu/address/ui/OrderListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.model.ChangeOrderStatusEvent;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.OrderPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":" * Panel containing orders to be managed by the salesperson."},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"public class OrderListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    private static final String FXML \u003d \"OrderListPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    private ListView\u003cOrderCard\u003e orderListView;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        setConnections(orderList);"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    private void setConnections(ObservableList\u003cOrder\u003e orderList) {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        ObservableList\u003cOrderCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"                orderList, (order) -\u003e new OrderCard(order, orderList.indexOf(order) + 1));"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        orderListView.setItems(mappedList);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        orderListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"                        logger.fine(\"Selection in order list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"                        raise(new OrderPanelSelectionChangedEvent(newValue));"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"                    }"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"                });"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"     * Scrolls to the {@code OrderCard} at {@code index} and selects it."},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"     * @param index index of order card to be scrolled to."},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    private void scrollTo(int index) {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"            orderListView.scrollTo(index);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"            orderListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        });"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    private void handleChangeOrderStatus(ChangeOrderStatusEvent event) {"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        // TODO: change background of listcell based on order status change"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    @Subscribe"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    private void handleChangeOrderStatusEvent(ChangeOrderStatusEvent event) {"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        handleChangeOrderStatus(event);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code OrderCard}."},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"    class OrderListViewCell extends ListCell\u003cOrderCard\u003e {"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        protected void updateItem(OrderCard order, boolean empty) {"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"            super.updateItem(order, empty);"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"            if (empty || order \u003d\u003d null) {"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                setGraphic(null);"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"                setText(null);"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"            } else {"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"                setGraphic(order.getRoot());"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    private CentrePanel centrePanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    private RightPanel rightPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    private StackPane centrePlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    private StackPane rightPanelPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setTheme();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":103,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":109,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        centrePanel \u003d new CentrePanel(logic.getCalendar());"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        centrePlaceholder.getChildren().add(centrePanel.getRoot());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        rightPanel \u003d new RightPanel(logic.getFilteredOrderList(), logic.getFilteredCalendarEntryList());"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        rightPanelPlaceholder.getChildren().add(rightPanel.getRoot());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"    private void setTheme() {"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"        Theme.changeTheme(primaryStage, Theme.DARK_THEME_KEYWORD);"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"     * Changes the theme of the application."},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":"    public void handleChangeTheme(ChangeThemeEvent event) {"},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"        Theme.changeTheme(primaryStage, event.getTheme());"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"    public RightPanel getRightPanel() {"},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":"        return this.rightPanel;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"    @Subscribe"},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":"    private void handleChangeThemeEvent(ChangeThemeEvent event) {"},{"lineNumber":230,"author":{"gitID":"amad-person"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":231,"author":{"gitID":"amad-person"},"content":"        handleChangeTheme(event);"},{"lineNumber":232,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":234,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":12,"-":201,"amad-person":21}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.model.CalendarManagerChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleCalendarManagerChangedEvent(CalendarManagerChangedEvent cmce) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(cmce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":5,"-":85}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private FlowPane groups;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    private FlowPane preferences;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        person.getGroupTags().forEach(group -\u003e groups.getChildren().add(new Label(group.tagName)));"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        person.getPreferenceTags().forEach(pref -\u003e preferences.getChildren().add(new Label(pref.tagName)));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":6,"-":60}},{"path":"src/main/java/seedu/address/ui/PersonPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"AJZ1995"},"content":"//@@author AJZ1995"},{"lineNumber":2,"author":{"gitID":"AJZ1995"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":4,"author":{"gitID":"AJZ1995"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":6,"author":{"gitID":"AJZ1995"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":8,"author":{"gitID":"AJZ1995"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":10,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":12,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":15,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":19,"author":{"gitID":"AJZ1995"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"AJZ1995"},"content":" *  Displays the contact details of a selected person"},{"lineNumber":21,"author":{"gitID":"AJZ1995"},"content":" */"},{"lineNumber":22,"author":{"gitID":"AJZ1995"},"content":"public class PersonPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":24,"author":{"gitID":"AJZ1995"},"content":"    private static final String FXML \u003d \"PersonPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"AJZ1995"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":26,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":27,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"AJZ1995"},"content":"    private VBox panel;"},{"lineNumber":29,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"AJZ1995"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"AJZ1995"},"content":"    private Label phone;"},{"lineNumber":33,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"AJZ1995"},"content":"    private Label address;"},{"lineNumber":35,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"AJZ1995"},"content":"    private Label email;"},{"lineNumber":37,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"AJZ1995"},"content":"    private FlowPane groups;"},{"lineNumber":39,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"AJZ1995"},"content":"    private FlowPane preferences;"},{"lineNumber":41,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":42,"author":{"gitID":"AJZ1995"},"content":"    public PersonPanel() {"},{"lineNumber":43,"author":{"gitID":"AJZ1995"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"AJZ1995"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":45,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":47,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"AJZ1995"},"content":"     * Frees resources allocated to the person panel."},{"lineNumber":49,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"AJZ1995"},"content":"    public void freeResources() {"},{"lineNumber":51,"author":{"gitID":"AJZ1995"},"content":"        panel \u003d null;"},{"lineNumber":52,"author":{"gitID":"AJZ1995"},"content":"        name \u003d null;"},{"lineNumber":53,"author":{"gitID":"AJZ1995"},"content":"        phone \u003d null;"},{"lineNumber":54,"author":{"gitID":"AJZ1995"},"content":"        address \u003d null;"},{"lineNumber":55,"author":{"gitID":"AJZ1995"},"content":"        email \u003d null;"},{"lineNumber":56,"author":{"gitID":"AJZ1995"},"content":"        groups \u003d null;"},{"lineNumber":57,"author":{"gitID":"AJZ1995"},"content":"        preferences \u003d null;"},{"lineNumber":58,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":60,"author":{"gitID":"AJZ1995"},"content":"    @Subscribe"},{"lineNumber":61,"author":{"gitID":"AJZ1995"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":62,"author":{"gitID":"AJZ1995"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":63,"author":{"gitID":"AJZ1995"},"content":"        phone.setText(person.getPhone().toString());"},{"lineNumber":64,"author":{"gitID":"AJZ1995"},"content":"        address.setText(person.getAddress().toString());"},{"lineNumber":65,"author":{"gitID":"AJZ1995"},"content":"        email.setText(person.getEmail().toString());"},{"lineNumber":66,"author":{"gitID":"AJZ1995"},"content":"        person.getGroupTags().forEach(group -\u003e groups.getChildren().add(new Label(group.tagName)));"},{"lineNumber":67,"author":{"gitID":"AJZ1995"},"content":"        person.getPreferenceTags().forEach(pref -\u003e preferences.getChildren().add(new Label(pref.tagName)));"},{"lineNumber":68,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":70,"author":{"gitID":"AJZ1995"},"content":"    @Subscribe"},{"lineNumber":71,"author":{"gitID":"AJZ1995"},"content":"    public void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":72,"author":{"gitID":"AJZ1995"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":73,"author":{"gitID":"AJZ1995"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":74,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"AJZ1995"},"content":"}"}],"authorContributionMap":{"AJZ1995":75}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX \u003d \"The entry index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":1,"-":14}},{"path":"src/main/java/seedu/address/ui/CentrePanel.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarRequestEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The Centre Panel of the App that can switch between Person Panel and Calendar Panel"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"public class CentrePanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"CentrePanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private PersonPanel personPanel;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    private ObservableList\u003cCalendarEntry\u003e calendarEvents;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private StackPane centrePlaceholder;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public CentrePanel(Calendar calendar) {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        calendarPanel \u003d new CalendarPanel(calendar);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarEvents \u003d calendarEvents;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        displayPersonPanel();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     * Displays the Person Panel."},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public void displayPersonPanel() {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        personPanel \u003d new PersonPanel();"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        centrePlaceholder.getChildren().add(personPanel.getRoot());"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"     * Provides a method to access PersonPanel\u0027s method."},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    public void freeResources() {"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        personPanel.freeResources();"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"     * Displays the Calendar Panel."},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    public void displayCalendarPanel() {"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        centrePlaceholder.getChildren().clear();"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        centrePlaceholder.getChildren().add(calendarPanel.getRoot());"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    private void handleDisplayCalendarRequestEvent(DisplayCalendarRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        displayCalendarPanel();"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        calendarPanel.handleDisplayCalendarRequestEvent(event);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        displayPersonPanel();"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        personPanel.handlePersonPanelSelectionChangedEvent(event);"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":71,"-":4}},{"path":"src/test/java/guitests/AddressBookGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.TestName;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.TypicalCalendarEntries;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * A GUI Test class for AddressBook."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Copied from CS2103T AddressBook of AY17/18 S1"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public abstract class AddressBookGuiTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /* The TestName Rule makes the current test name available inside test methods */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public TestName name \u003d new TestName();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    protected Stage stage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    protected MainWindowHandle mainWindowHandle;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static void setupOnce() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setup() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            this.stage \u003d stage;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        FxToolkit.setupApplication(() -\u003e new TestApp(this::getInitialAbData, this::getInitialCmData,"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"                getAbDataFileLocation(), getCmDataFileLocation()));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        FxToolkit.showStage();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        mainWindowHandle.focus();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"     * Override this in child classes to set the initial local data of address book."},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"     * Return null to use the data in the file specified in {@link #getAbDataFileLocation()}"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    protected AddressBook getInitialAbData() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"     * Override this in child classes to set the initial local data of calendar manager."},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"     * Return null to use the data in the file specified in {@link #getAbDataFileLocation()}"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    protected CalendarManager getInitialCmData() {"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        return TypicalCalendarEntries.getTypicalCalendarManagerWithEntries();"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    protected CommandBoxHandle getCommandBox() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    protected PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected MainMenuHandle getMainMenu() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    protected PersonPanelHandle getPersonPanel() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonPanel();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    protected StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    protected ResultDisplayHandle getResultDisplay() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Runs {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * @return true if the command was executed successfully."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    protected boolean runCommand(String command) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"     * Override this in child classes to set the Address book data file location."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    protected String getAbDataFileLocation() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"     * Override this in child classes to set the Calendar Manager data file location."},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    protected String getCmDataFileLocation() {"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        return TestApp.SAVE_LOCATION_FOR_CALENDAR_TESTING;"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void cleanup() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        FxToolkit.cleanupStages();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":25,"-":109}},{"path":"src/main/java/seedu/address/commons/util/CalendarUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":" * Provides utilities to convert between {@code Entry} used in CalendarFX and its Model Version, {@code CalendarEntry}."},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarUtil {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts {@code CalendarEntry} to {@code Entry} used in CalendarFX."},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public static Entry\u003cString\u003e convertToEntry(CalendarEntry calEntry) {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(calEntry);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        Interval entryInterval \u003d new Interval(calEntry.getStartDate().getLocalDate(),"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                calEntry.getStartTime().getLocalTime(),"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"                calEntry.getEndDate().getLocalDate(),"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"                calEntry.getEndTime().getLocalTime());"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        return new Entry\u003c\u003e(calEntry.getEntryTitle().toString(), entryInterval);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts given list of calendarEntries to {@code Entry} used in CalendarFX and return list of {@code Entry}."},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public static List\u003cEntry\u003c?\u003e\u003e convertEntireListToEntries(ObservableList\u003cCalendarEntry\u003e calendarEntries) {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cEntry\u003c?\u003e\u003e convertedEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        for (CalendarEntry ce: calendarEntries) {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            convertedEntries.add(CalendarUtil.convertToEntry(ce));"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        return convertedEntries;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":38,"-":7}},{"path":"src/main/java/seedu/address/commons/events/ui/DisplayCalendarEntryListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Indicates request to display calendar entry list."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class DisplayCalendarEntryListEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":9,"-":5}},{"path":"src/main/java/seedu/address/commons/events/ui/OrderPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import seedu.address.ui.OrderCard;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Represents a selection change in the Order List Panel"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"public class OrderPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    private final OrderCard newSelection;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    public OrderPanelSelectionChangedEvent(OrderCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    public OrderCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":26}},{"path":"src/main/java/seedu/address/commons/util/TimeUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * Helper functions for handling strings representing Time."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Ensures that strings conform to a given Time Format."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class TimeUtil {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"\\\\d{2}:\\\\d{2}\"; // format"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String TIME_VALIDATION_FORMAT \u003d \"HH:mm\"; // legal dates"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String TIME_PATTERN \u003d \"HH:mm\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if given string is a valid time."},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(TIME_VALIDATION_FORMAT);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        simpleDateFormat.setLenient(false);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            simpleDateFormat.parse(test);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (ParseException e) {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return test.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts given string to a {@code LocalTime}."},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public static LocalTime convertStringToTime(String time) throws DateTimeParseException {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(TIME_PATTERN);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        LocalTime convertedTime \u003d LocalTime.parse(time, format);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        return convertedTime;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":40,"-":3}},{"path":"src/main/java/seedu/address/commons/util/DateUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * Helper functions for handling Date related operations."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Ensures that strings conform to a given Date Format."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class DateUtil {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"; // format"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DATE_VALIDATION_FORMAT \u003d \"dd-MM-yyyy\"; // legal dates"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DATE_PATTERN \u003d \"dd-MM-yyyy\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if given string is a valid date."},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(DATE_VALIDATION_FORMAT);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        simpleDateFormat.setLenient(false);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            simpleDateFormat.parse(test);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (ParseException e) {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts given string to a {@code LocalDate}."},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     * @param date"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"     * @return"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public static LocalDate convertStringToDate(String date) throws DateTimeParseException {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        LocalDate convertedDate \u003d LocalDate.parse(date, format);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        return convertedDate;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":43,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/DisplayOrderListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Indicates request to display order list."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class DisplayOrderListEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":10,"-":5}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        return \"number of persons \" + data.getPersonList().size()"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"                + \", number of groups \" + data.getGroupList().size()"},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \", number of preferences \" + data.getPreferenceList().size()"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                + \", number of orders \" + data.getOrderList().size();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":2,"-":20}},{"path":"src/main/java/seedu/address/commons/events/ui/CalendarEntryPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.CalendarEntryCard;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a selection change in the Calendar Entry List Panel"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarEntryCard newSelection;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryPanelSelectionChangedEvent(CalendarEntryCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":23,"-":3}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    /** Returns an unmodifiable view of the filtered list of orders */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ObservableList\u003cOrder\u003e getFilteredOrderList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    /** Returns an unmodifiable view of the filtered list of calendar entries */"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    /** Returns Calendar. */"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    Calendar getCalendar();"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":10,"-":30}},{"path":"src/main/java/seedu/address/commons/events/ui/DisplayCalendarRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * Indicates request to display calendar."},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class DisplayCalendarRequestEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    private final Optional\u003cString\u003e calendarView;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public DisplayCalendarRequestEvent(Optional\u003cString\u003e calendarView) {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"        if (calendarView.isPresent()) {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"            this.calendarView \u003d calendarView;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"            this.calendarView \u003d null;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public String getView() {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarView.isPresent() ? calendarView.get() : null;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":30,"-":1}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeThemeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":" * Represents a request to change the theme of the application."},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"public class ChangeThemeEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"    private String theme;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    public ChangeThemeEvent(String theme) {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"        this.theme \u003d theme;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public String getTheme() {"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"        return this.theme;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":25}},{"path":"src/main/java/seedu/address/commons/events/model/CalendarManagerChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/** Indicates the CalendarManager in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarManagerChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    public final ReadOnlyCalendarManager data;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManagerChangedEvent(ReadOnlyCalendarManager data) {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"        this.data \u003d data;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        return \"number of calendar entries \" + data.getCalendarEntryList().size();"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":18,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PREFERENCE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                        PREFIX_GROUP, PREFIX_PREFERENCE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"            Set\u003cGroup\u003e groupList \u003d ParserUtil.parseGroups(argMultimap.getAllValues(PREFIX_GROUP));"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            Set\u003cPreference\u003e preferenceList \u003d ParserUtil.parsePreferences(argMultimap.getAllValues(PREFIX_PREFERENCE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"            Person person \u003d new Person(name, phone, email, address, groupList, preferenceList);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":9,"-":60}},{"path":"src/main/java/seedu/address/commons/events/model/ChangeOrderStatusEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" * Represents a request to change the order status of an existing order in the application."},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class ChangeOrderStatusEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    private Index index;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    private Order targetOrder;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    private String orderStatus;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public ChangeOrderStatusEvent(Index index, Order targetOrder, String orderStatus) {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"        this.index \u003d index;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"        this.targetOrder \u003d targetOrder;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d orderStatus;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public Index getIndexOrderForStatusChange() {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        return this.index;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public Order getOrderForStatusChange() {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        return this.targetOrder;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    public String getOrderStatus() {"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        return this.orderStatus;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":38}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.AddEntryCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeOrderStatusCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteEntryCommand;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditOrderCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.ListCalendarEntryCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.ListOrderCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.ViewCalendarCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        case AddEntryCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        case AddEntryCommand.COMMAND_ALIAS:"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"            return new AddEventCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case AddOrderCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case AddOrderCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new AddOrderCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case ChangeOrderStatusCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case ChangeOrderStatusCommand.COMMAND_ALIAS:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new ChangeOrderStatusCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case ChangeThemeCommand.COMMAND_ALIAS:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case EditOrderCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case EditOrderCommand.COMMAND_ALIAS:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new EditOrderCommandParser().parse(arguments);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        case DeleteEntryCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        case DeleteEntryCommand.COMMAND_ALIAS:"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"            return new DeleteEntryCommandParser().parse(arguments);"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        case DeleteGroupCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        case DeleteGroupCommand.COMMAND_ALIAS:"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"            return new DeleteGroupCommandParser().parse(arguments);"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case DeleteOrderCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case DeleteOrderCommand.COMMAND_ALIAS:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new DeleteOrderCommandParser().parse(arguments);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        case DeletePreferenceCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        case DeletePreferenceCommand.COMMAND_ALIAS:"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"            return new DeletePreferenceCommandParser().parse(arguments);"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        case FindGroupCommand.COMMAND_WORD:"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        case FindGroupCommand.COMMAND_ALIAS:"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"            return new FindGroupCommandParser().parse(arguments);"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        case FindPreferenceCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"        case FindPreferenceCommand.COMMAND_ALIAS:"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"            return new FindPreferenceCommandParser().parse(arguments);"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        case ListOrderCommand.COMMAND_WORD:"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        case ListOrderCommand.COMMAND_ALIAS:"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"            return new ListOrderCommand();"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        case ListCalendarEntryCommand.COMMAND_WORD:"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        case ListCalendarEntryCommand.COMMAND_ALIAS:"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"            return new ListCalendarEntryCommand();"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        case ViewCalendarCommand.COMMAND_WORD:"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"        case ViewCalendarCommand.COMMAND_ALIAS:"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"            return new ViewCalendarCommand(arguments);"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":45,"-":129}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Prefix PREFIX_PREFERENCE \u003d new Prefix(\"pr/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ORDER_INFORMATION \u003d new Prefix(\"i/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ORDER_STATUS \u003d new Prefix(\"os/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"pr/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_DELIVERY_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Prefix PREFIX_ENTRY_TITLE \u003d new Prefix(\"t/\");"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":8,"-":18}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndDate;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndTime;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EntryTitle;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartDate;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartTime;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.order.OrderStatus;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":35,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses a {@code String group} into a {@code Group}."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IllegalValueException if the given {@code group} is invalid."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"    public static Group parseGroup(String group) throws IllegalValueException {"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(group);"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        String trimmedGroup \u003d group.trim();"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        if (!Tag.isValidTagName(trimmedGroup)) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"        return new Group(trimmedGroup);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code Collection\u003cString\u003e groups} into a {@code Set\u003cGroup\u003e}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"    public static Set\u003cGroup\u003e parseGroups(Collection\u003cString\u003e groups) throws IllegalValueException {"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(groups);"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"        final Set\u003cGroup\u003e groupSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"        for (String groupName : groups) {"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"            groupSet.add(parseGroup(groupName));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"        return groupSet;"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses a {@code String pref} into a {@code Preference}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IllegalValueException if the given {@code preference} is invalid."},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"    public static Preference parsePreference(String pref) throws IllegalValueException {"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(pref);"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"        String trimmedPreference \u003d pref.trim();"},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"        if (!Tag.isValidTagName(trimmedPreference)) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"        return new Preference(trimmedPreference);"},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code Collection\u003cString\u003e preferences} into a {@code Set\u003cPerference\u003e}."},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"    public static Set\u003cPreference\u003e parsePreferences(Collection\u003cString\u003e preferences) throws IllegalValueException {"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(preferences);"},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        final Set\u003cPreference\u003e preferenceSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"        for (String prefName : preferences) {"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"            preferenceSet.add(parsePreference(prefName));"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":"        return preferenceSet;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String orderInformation} into a {@code OrderInformation}."},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code orderInformation} is invalid."},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"amad-person"},"content":"    public static OrderInformation parseOrderInformation(String orderInformation) throws IllegalValueException {"},{"lineNumber":218,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderInformation);"},{"lineNumber":219,"author":{"gitID":"amad-person"},"content":"        String trimmedOrderInformation \u003d orderInformation.trim();"},{"lineNumber":220,"author":{"gitID":"amad-person"},"content":"        if (!OrderInformation.isValidOrderInformation(trimmedOrderInformation)) {"},{"lineNumber":221,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":222,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"amad-person"},"content":"        return new OrderInformation(trimmedOrderInformation);"},{"lineNumber":224,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":226,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e orderInformation} into an {@code Optional\u003cOrderInformation\u003e}"},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"     * if {@code orderInformation} is present."},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":230,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cOrderInformation\u003e parseOrderInformation(Optional\u003cString\u003e orderInformation)"},{"lineNumber":232,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":233,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderInformation);"},{"lineNumber":234,"author":{"gitID":"amad-person"},"content":"        return orderInformation.isPresent()"},{"lineNumber":235,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseOrderInformation(orderInformation.get()))"},{"lineNumber":236,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":237,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":239,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String orderStatus} into a {@code OrderStatus}."},{"lineNumber":241,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":242,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":243,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code orderStatus} is invalid."},{"lineNumber":244,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"amad-person"},"content":"    public static OrderStatus parseOrderStatus(String orderStatus) throws IllegalValueException {"},{"lineNumber":246,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":247,"author":{"gitID":"amad-person"},"content":"        String trimmedOrderStatus \u003d orderStatus.trim();"},{"lineNumber":248,"author":{"gitID":"amad-person"},"content":"        if (!OrderStatus.isValidOrderStatus(trimmedOrderStatus)) {"},{"lineNumber":249,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(OrderStatus.MESSAGE_ORDER_STATUS_CONSTRAINTS);"},{"lineNumber":250,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"amad-person"},"content":"        return new OrderStatus(trimmedOrderStatus);"},{"lineNumber":252,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":254,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e orderStatus} into an {@code Optional\u003cOrderStatus\u003e}"},{"lineNumber":256,"author":{"gitID":"amad-person"},"content":"     * if {@code orderStatus} is present."},{"lineNumber":257,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":258,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cOrderStatus\u003e parseOrderStatus(Optional\u003cString\u003e orderStatus)"},{"lineNumber":260,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":261,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":262,"author":{"gitID":"amad-person"},"content":"        return orderStatus.isPresent()"},{"lineNumber":263,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseOrderStatus(orderStatus.get()))"},{"lineNumber":264,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":265,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":267,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String price} into a {@code Price}."},{"lineNumber":269,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":270,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":271,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code price} is invalid."},{"lineNumber":272,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"amad-person"},"content":"    public static Price parsePrice(String price) throws IllegalValueException {"},{"lineNumber":274,"author":{"gitID":"amad-person"},"content":"        requireNonNull(price);"},{"lineNumber":275,"author":{"gitID":"amad-person"},"content":"        String trimmedPrice \u003d price.trim();"},{"lineNumber":276,"author":{"gitID":"amad-person"},"content":"        if (!Price.isValidPrice(trimmedPrice)) {"},{"lineNumber":277,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":278,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"amad-person"},"content":"        return new Price(trimmedPrice);"},{"lineNumber":280,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":282,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cPrice\u003e}"},{"lineNumber":284,"author":{"gitID":"amad-person"},"content":"     * if {@code price} is present."},{"lineNumber":285,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":286,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cPrice\u003e parsePrice(Optional\u003cString\u003e price)"},{"lineNumber":288,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":289,"author":{"gitID":"amad-person"},"content":"        requireNonNull(price);"},{"lineNumber":290,"author":{"gitID":"amad-person"},"content":"        return price.isPresent()"},{"lineNumber":291,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parsePrice(price.get()))"},{"lineNumber":292,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":293,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":295,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":296,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String quantity} into a {@code Quantity}."},{"lineNumber":297,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":298,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":299,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code quantity} is invalid."},{"lineNumber":300,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"amad-person"},"content":"    public static Quantity parseQuantity(String quantity) throws IllegalValueException {"},{"lineNumber":302,"author":{"gitID":"amad-person"},"content":"        requireNonNull(quantity);"},{"lineNumber":303,"author":{"gitID":"amad-person"},"content":"        String trimmedQuantity \u003d quantity.trim();"},{"lineNumber":304,"author":{"gitID":"amad-person"},"content":"        if (!Quantity.isValidQuantity(trimmedQuantity)) {"},{"lineNumber":305,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":306,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":307,"author":{"gitID":"amad-person"},"content":"        return new Quantity(trimmedQuantity);"},{"lineNumber":308,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":310,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":311,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e quantity} into an {@code Optional\u003cQuantity\u003e}"},{"lineNumber":312,"author":{"gitID":"amad-person"},"content":"     * if {@code quantity} is present."},{"lineNumber":313,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":314,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":315,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cQuantity\u003e parseQuantity(Optional\u003cString\u003e quantity)"},{"lineNumber":316,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":317,"author":{"gitID":"amad-person"},"content":"        requireNonNull(quantity);"},{"lineNumber":318,"author":{"gitID":"amad-person"},"content":"        return quantity.isPresent()"},{"lineNumber":319,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseQuantity(quantity.get()))"},{"lineNumber":320,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":321,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":323,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":324,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String deliveryDate} into a {@code DeliveryDate}."},{"lineNumber":325,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":326,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":327,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code deliveryDate} is invalid."},{"lineNumber":328,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":329,"author":{"gitID":"amad-person"},"content":"    public static DeliveryDate parseDeliveryDate(String deliveryDate) throws IllegalValueException {"},{"lineNumber":330,"author":{"gitID":"amad-person"},"content":"        requireNonNull(deliveryDate);"},{"lineNumber":331,"author":{"gitID":"amad-person"},"content":"        String trimmedDeliveryDate \u003d deliveryDate.trim();"},{"lineNumber":332,"author":{"gitID":"amad-person"},"content":"        if (!DeliveryDate.isValidDeliveryDate(trimmedDeliveryDate)) {"},{"lineNumber":333,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":334,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":335,"author":{"gitID":"amad-person"},"content":"        return new DeliveryDate(trimmedDeliveryDate);"},{"lineNumber":336,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":338,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":339,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e deliveryDate} into an {@code Optional\u003cDeliveryDate\u003e}"},{"lineNumber":340,"author":{"gitID":"amad-person"},"content":"     * if {@code deliveryDate} is present."},{"lineNumber":341,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":342,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":343,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cDeliveryDate\u003e parseDeliveryDate(Optional\u003cString\u003e deliveryDate)"},{"lineNumber":344,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":345,"author":{"gitID":"amad-person"},"content":"        requireNonNull(deliveryDate);"},{"lineNumber":346,"author":{"gitID":"amad-person"},"content":"        return deliveryDate.isPresent()"},{"lineNumber":347,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseDeliveryDate(deliveryDate.get()))"},{"lineNumber":348,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":349,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"amad-person"},"content":"    //@@ author"},{"lineNumber":351,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":352,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":353,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String eventTitle} into a {@code EntryTitle}."},{"lineNumber":354,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":355,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":356,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code eventTitle} is invalid."},{"lineNumber":357,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":358,"author":{"gitID":"amad-person"},"content":"    public static EntryTitle parseEventTitle(String eventTitle) throws IllegalValueException {"},{"lineNumber":359,"author":{"gitID":"amad-person"},"content":"        requireNonNull(eventTitle);"},{"lineNumber":360,"author":{"gitID":"amad-person"},"content":"        String trimmedEventTitle \u003d eventTitle.trim();"},{"lineNumber":361,"author":{"gitID":"amad-person"},"content":"        if (!EntryTitle.isValidEntryTitle(trimmedEventTitle)) {"},{"lineNumber":362,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS);"},{"lineNumber":363,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":364,"author":{"gitID":"amad-person"},"content":"        return new EntryTitle(trimmedEventTitle);"},{"lineNumber":365,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":366,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":367,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":368,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e eventTitle} into an {@code Optional\u003cEntryTitle\u003e}"},{"lineNumber":369,"author":{"gitID":"amad-person"},"content":"     * if {@code eventTitle} is present."},{"lineNumber":370,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":371,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":372,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cEntryTitle\u003e parseEventTitle(Optional\u003cString\u003e eventTitle)"},{"lineNumber":373,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":374,"author":{"gitID":"amad-person"},"content":"        requireNonNull(eventTitle);"},{"lineNumber":375,"author":{"gitID":"amad-person"},"content":"        return eventTitle.isPresent()"},{"lineNumber":376,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseEventTitle(eventTitle.get()))"},{"lineNumber":377,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":378,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":379,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":380,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":381,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String startDate} into a {@code StartDate}."},{"lineNumber":382,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":383,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":384,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code startDate} is invalid."},{"lineNumber":385,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":386,"author":{"gitID":"amad-person"},"content":"    public static StartDate parseStartDate(String startDate) throws IllegalValueException {"},{"lineNumber":387,"author":{"gitID":"amad-person"},"content":"        requireNonNull(startDate);"},{"lineNumber":388,"author":{"gitID":"amad-person"},"content":"        String trimmedStartDate \u003d startDate.trim();"},{"lineNumber":389,"author":{"gitID":"amad-person"},"content":"        if (!DateUtil.isValidDate(trimmedStartDate)) {"},{"lineNumber":390,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(StartDate.MESSAGE_START_DATE_CONSTRAINTS);"},{"lineNumber":391,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":392,"author":{"gitID":"amad-person"},"content":"        return new StartDate(trimmedStartDate);"},{"lineNumber":393,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":394,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":395,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":396,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e startDate} into an {@code Optional\u003cStartDate\u003e}"},{"lineNumber":397,"author":{"gitID":"amad-person"},"content":"     * if {@code startDate} is present."},{"lineNumber":398,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":399,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":400,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cStartDate\u003e parseStartDate(Optional\u003cString\u003e startDate)"},{"lineNumber":401,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":402,"author":{"gitID":"amad-person"},"content":"        requireNonNull(startDate);"},{"lineNumber":403,"author":{"gitID":"amad-person"},"content":"        return startDate.isPresent()"},{"lineNumber":404,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseStartDate(startDate.get()))"},{"lineNumber":405,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":406,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":407,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":408,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":409,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String endDate} into a {@code EndDate}."},{"lineNumber":410,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":411,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":412,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code endDate} is invalid."},{"lineNumber":413,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":414,"author":{"gitID":"amad-person"},"content":"    public static EndDate parseEndDate(String endDate) throws IllegalValueException {"},{"lineNumber":415,"author":{"gitID":"amad-person"},"content":"        requireNonNull(endDate);"},{"lineNumber":416,"author":{"gitID":"amad-person"},"content":"        String trimmedEndDate \u003d endDate.trim();"},{"lineNumber":417,"author":{"gitID":"amad-person"},"content":"        if (!DateUtil.isValidDate(trimmedEndDate)) {"},{"lineNumber":418,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(EndDate.MESSAGE_END_DATE_CONSTRAINTS);"},{"lineNumber":419,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":420,"author":{"gitID":"amad-person"},"content":"        return new EndDate(trimmedEndDate);"},{"lineNumber":421,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":422,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":423,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":424,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e endDate} into an {@code Optional\u003cEndDate\u003e}"},{"lineNumber":425,"author":{"gitID":"amad-person"},"content":"     * if {@code endDate} is present."},{"lineNumber":426,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":427,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":428,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cEndDate\u003e parseEndDate(Optional\u003cString\u003e endDate)"},{"lineNumber":429,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":430,"author":{"gitID":"amad-person"},"content":"        requireNonNull(endDate);"},{"lineNumber":431,"author":{"gitID":"amad-person"},"content":"        return endDate.isPresent()"},{"lineNumber":432,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseEndDate(endDate.get()))"},{"lineNumber":433,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":434,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":435,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":436,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":437,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String startTime} into a {@code StartTime}."},{"lineNumber":438,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":439,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":440,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code startTime} is invalid."},{"lineNumber":441,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":442,"author":{"gitID":"amad-person"},"content":"    public static StartTime parseStartTime(String startTime) throws IllegalValueException {"},{"lineNumber":443,"author":{"gitID":"amad-person"},"content":"        requireNonNull(startTime);"},{"lineNumber":444,"author":{"gitID":"amad-person"},"content":"        String trimmedStartTime \u003d startTime.trim();"},{"lineNumber":445,"author":{"gitID":"amad-person"},"content":"        if (!TimeUtil.isValidTime(trimmedStartTime)) {"},{"lineNumber":446,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(StartTime.MESSAGE_START_TIME_CONSTRAINTS);"},{"lineNumber":447,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":448,"author":{"gitID":"amad-person"},"content":"        return new StartTime(trimmedStartTime);"},{"lineNumber":449,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":450,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":451,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":452,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e startTime} into an {@code Optional\u003cStartTime\u003e}"},{"lineNumber":453,"author":{"gitID":"amad-person"},"content":"     * if {@code startTime} is present."},{"lineNumber":454,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":455,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":456,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cStartTime\u003e parseStartTime(Optional\u003cString\u003e startTime)"},{"lineNumber":457,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":458,"author":{"gitID":"amad-person"},"content":"        requireNonNull(startTime);"},{"lineNumber":459,"author":{"gitID":"amad-person"},"content":"        return startTime.isPresent()"},{"lineNumber":460,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseStartTime(startTime.get()))"},{"lineNumber":461,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":462,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":463,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":464,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":465,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String endTime} into a {@code EndTime}."},{"lineNumber":466,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":467,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":468,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code endTime} is invalid."},{"lineNumber":469,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":470,"author":{"gitID":"amad-person"},"content":"    public static EndTime parseEndTime(String endTime) throws IllegalValueException {"},{"lineNumber":471,"author":{"gitID":"amad-person"},"content":"        requireNonNull(endTime);"},{"lineNumber":472,"author":{"gitID":"amad-person"},"content":"        String trimmedEndTime \u003d endTime.trim();"},{"lineNumber":473,"author":{"gitID":"amad-person"},"content":"        if (!TimeUtil.isValidTime(trimmedEndTime)) {"},{"lineNumber":474,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(EndTime.MESSAGE_END_TIME_CONSTRAINTS);"},{"lineNumber":475,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":476,"author":{"gitID":"amad-person"},"content":"        return new EndTime(trimmedEndTime);"},{"lineNumber":477,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":478,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":479,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":480,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e endTime} into an {@code Optional\u003cEndTime\u003e}"},{"lineNumber":481,"author":{"gitID":"amad-person"},"content":"     * if {@code endTime} is present."},{"lineNumber":482,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":483,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":484,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cEndTime\u003e parseEndTime(Optional\u003cString\u003e endTime)"},{"lineNumber":485,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":486,"author":{"gitID":"amad-person"},"content":"        requireNonNull(endTime);"},{"lineNumber":487,"author":{"gitID":"amad-person"},"content":"        return endTime.isPresent()"},{"lineNumber":488,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseEndTime(endTime.get()))"},{"lineNumber":489,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":490,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":491,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":163,"amad-person":282}},{"path":"src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Parses the given {@code String} of arguments in the context of the DeleteGroupCommand"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * and returns an DeleteGroupCommand object for execution."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public DeleteGroupCommand parse(String userInput) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            Group group \u003d ParserUtil.parseGroup(userInput);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            return new DeleteGroupCommand(group);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":20,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/FindPreferenceCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new FindPreferenceCommand object"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommandParser implements Parser\u003cFindPreferenceCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPreferenceCommand"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an FindPreferenceCommand object for execution."},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public FindPreferenceCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPreferenceCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        String[] preferenceKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        return new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(Arrays.asList(preferenceKeywords)));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":26,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/EditOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand.EditOrderDescriptor;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":" * Parses input arguments and creates a new EditOrderCommand object."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"public class EditOrderCommandParser implements Parser\u003cEditOrderCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     * Parses the given {@code String} of arguments in the context of the EditOrderCommand"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"     * and returns an EditOrderCommand object for execution."},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public EditOrderCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ORDER_INFORMATION, PREFIX_PRICE, PREFIX_QUANTITY,"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"                        PREFIX_DELIVERY_DATE);"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        Index index;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand.EditOrderDescriptor editOrderDescriptor \u003d new EditOrderDescriptor();"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"            ParserUtil.parseOrderInformation(argMultimap.getValue(PREFIX_ORDER_INFORMATION))"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"                    .ifPresent(editOrderDescriptor::setOrderInformation);"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).ifPresent(editOrderDescriptor::setPrice);"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"            ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY)).ifPresent(editOrderDescriptor::setQuantity);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"            ParserUtil.parseDeliveryDate(argMultimap.getValue(PREFIX_DELIVERY_DATE))"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"                    .ifPresent(editOrderDescriptor::setDeliveryDate);"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        if (!editOrderDescriptor.isAnyFieldEdited()) {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(EditOrderCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        return new EditOrderCommand(index, editOrderDescriptor);"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":59}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object."},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeThemeCommand"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"     * and returns an ChangeThemeCommand object for execution."},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        return new ChangeThemeCommand(trimmedArgs);"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":29}},{"path":"src/main/java/seedu/address/logic/parser/DeleteOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * Parses input arguments and creates a new DeleteOrderCommand object"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class DeleteOrderCommandParser implements Parser\u003cDeleteOrderCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteOrderCommand"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"     * and returns an DeleteOrderCommand object for execution."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public DeleteOrderCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"            return new DeleteOrderCommand(index);"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteOrderCommand.MESSAGE_USAGE)"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"            );"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":31}},{"path":"src/main/java/seedu/address/logic/parser/DeleteEntryCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteEntryCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new DeleteEntryCommand object"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteEntryCommandParser implements Parser\u003cDeleteEntryCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEntryCommand"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an DeleteEntryCommand object for execution."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public DeleteEntryCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            return new DeleteEntryCommand(index);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEntryCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":20,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.time.temporal.ChronoUnit.MINUTES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_TITLE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.AddEntryCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndDate;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndTime;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EntryTitle;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartDate;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartTime;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new AddEntryCommand object"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"public class AddEventCommandParser implements Parser\u003cAddEntryCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String EVENT_DURATION_CONSTRAINTS \u003d"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"            \"Event must last at least 15 minutes if ending in same day.\"; //Constraint of CalendarFX entries"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String STANDARD_START_TIME \u003d \"00:00\"; //Start Time of event if StartTime not given"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_AND_END_DATE_CONSTRAINTS \u003d \"Start Date cannot be later than End Date.\";"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_AND_END_TIME_CONSTRAINTS \u003d"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            \"Start Time cannot be later than End Time if Event ends on same date.\";"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    private static final int MINIMAL_DURATION \u003d 15; //Constraint of CalendarFX entries"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEntryCommand"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an AddEntryCommand object for execution."},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public AddEntryCommand parse(String userInput) throws ParseException {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_ENTRY_TITLE, PREFIX_START_DATE, PREFIX_END_DATE,"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"                        PREFIX_START_TIME, PREFIX_END_TIME);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ENTRY_TITLE, PREFIX_END_DATE, PREFIX_END_TIME)"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEntryCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            EntryTitle entryTitle \u003d ParserUtil.parseEventTitle(argMultimap.getValue(PREFIX_ENTRY_TITLE)).get();"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"            EndDate endDate \u003d ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_END_DATE)).get();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            StartDate startDate;"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"            // If no Start Date is given, Start Date will be the same date as End Date"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"            if (!argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"                startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_END_DATE)).get();"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"            } else {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"                startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_START_DATE)).get();"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"            if (startDateLaterThanEndDate(startDate, endDate)) {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"                throw new IllegalValueException(START_AND_END_DATE_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"            EndTime endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"            StartTime startTime;"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"            // If no Start Time is given, Start Time will be 00:00"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"            if (!argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"                startTime \u003d ParserUtil.parseStartTime(STANDARD_START_TIME);"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"            } else {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"                startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_START_TIME)).get();"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"            if (startDate.toString().equals(endDate.toString()) \u0026\u0026 startTimeLaterThanEndTime(startTime, endTime)) {"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"                throw new IllegalValueException(START_AND_END_TIME_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"            if (startDate.toString().equals(endDate.toString())"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"                    \u0026\u0026 eventIsShorterThanFifteenMinutes(startTime, endTime)) {"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                throw new IllegalValueException(EVENT_DURATION_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"            CalendarEntry calendarEntry \u003d new CalendarEntry(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"            return new AddEntryCommand(calendarEntry);"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if duration between start time and end time is less than 15 minutes."},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"     * This is a constraint that CalendarFX has. Event duration must last at least 15 minutes."},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"    private boolean eventIsShorterThanFifteenMinutes(StartTime startTime, EndTime endTime) {"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        if (MINUTES.between(startTime.getLocalTime(), endTime.getLocalTime()) \u003c MINIMAL_DURATION) {"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        return false;"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if given start time is later than end time."},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"     * Start time cannot be later than End time if event ends on the same date."},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"    private boolean startTimeLaterThanEndTime(StartTime startTime, EndTime endTime) {"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        return startTime.getLocalTime().isAfter(endTime.getLocalTime());"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if given start date is later than end date."},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"     * Start Date cannot be later than End Date as it violates the meaning of the terms."},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"    private static boolean startDateLaterThanEndDate(StartDate startDate, EndDate endDate) {"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        return startDate.getLocalDate().isAfter(endDate.getLocalDate());"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":128,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/FindGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new FindGroupCommand object"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommandParser implements Parser\u003cFindGroupCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the FindGroupCommand"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an FindGroupCommand object for execution."},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public FindGroupCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindGroupCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        String[] groupKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        return new FindGroupCommand(new GroupsContainKeywordsPredicate(Arrays.asList(groupKeywords)));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":25,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PREFERENCE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                        PREFIX_GROUP, PREFIX_PREFERENCE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"            parseGroupsForEdit(argMultimap.getAllValues(PREFIX_GROUP)).ifPresent(editPersonDescriptor::setGroupTags);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            parsePreferencesForEdit(argMultimap.getAllValues(PREFIX_PREFERENCE))"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"                    .ifPresent(editPersonDescriptor::setPreferenceTags);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code Collection\u003cString\u003e groups} into a {@code Set\u003cGroup\u003e} if {@code groups} is non-empty."},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"     * If {@code groups} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code Set\u003cGroup\u003e} containing zero groups."},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    private Optional\u003cSet\u003cGroup\u003e\u003e parseGroupsForEdit(Collection\u003cString\u003e groups) throws IllegalValueException {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        assert groups !\u003d null;"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        if (groups.isEmpty()) {"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"            return Optional.empty();"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        Collection\u003cString\u003e groupSet \u003d groups.size() \u003d\u003d 1 \u0026\u0026 groups.contains(\"\") ? Collections.emptySet() : groups;"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        return Optional.of(ParserUtil.parseGroups(groupSet));"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code Collection\u003cString\u003e prefs} into a {@code Set\u003cPreference\u003e} if {@code prefs} is non-empty."},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"     * If {@code prefs} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code Set\u003cPreference\u003e} containing zero preferences."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    private Optional\u003cSet\u003cPreference\u003e\u003e parsePreferencesForEdit(Collection\u003cString\u003e prefs) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        assert prefs !\u003d null;"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        if (prefs.isEmpty()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        Collection\u003cString\u003e preferenceSet \u003d prefs.size() \u003d\u003d 1 \u0026\u0026 prefs.contains(\"\") ? Collections.emptySet() : prefs;"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        return Optional.of(ParserUtil.parsePreferences(preferenceSet));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":33,"-":66}},{"path":"src/main/java/seedu/address/logic/parser/AddOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":" * Parses input arguments and creates a new AddOrderCommand object"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"     * Parses the given {@code String} of arguments in the context of the AddOrderCommand"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"     * and returns an AddOrderCommand object for execution."},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    public AddOrderCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ORDER_INFORMATION, PREFIX_PRICE,"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"                        PREFIX_QUANTITY, PREFIX_DELIVERY_DATE);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        Index index;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ORDER_INFORMATION, PREFIX_PRICE,"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"                PREFIX_QUANTITY, PREFIX_DELIVERY_DATE)) {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"            OrderInformation orderInformation \u003d ParserUtil.parseOrderInformation(argMultimap"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"                    .getValue(PREFIX_ORDER_INFORMATION)).get();"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"            Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).get();"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"            Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY)).get();"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"            DeliveryDate deliveryDate \u003d ParserUtil.parseDeliveryDate(argMultimap.getValue(PREFIX_DELIVERY_DATE)).get();"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"            Order order \u003d new Order(orderInformation, price, quantity, deliveryDate);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"            return new AddOrderCommand(index, order);"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":74}},{"path":"src/main/java/seedu/address/logic/commands/ListOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" * List and display all orders in the address book to the user."},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class ListOrderCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"orderlist\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"ol\";"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all orders\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new DisplayOrderListEvent());"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":23,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/DeletePreferenceCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Parses the given {@code String} of arguments in the context of the DeletePreferenceCommand"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * and returns an DeletePreferenceCommand object for execution."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class DeletePreferenceCommandParser implements Parser\u003cDeletePreferenceCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public DeletePreferenceCommand parse(String userInput) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            Preference preference \u003d ParserUtil.parsePreference(userInput);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            return new DeletePreferenceCommand(preference);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePreferenceCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":19,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Deletes a group specified by user from address book."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteGroupCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"groupdelete\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"gd\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Deletes the specified group from all persons in address book.\\n\""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: GROUP_NAME (must be alphanumeric)\\n\""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends\";"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Deleted GROUP: %1$s\";"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_GROUP_NOT_FOUND \u003d \"Group does not exist in address book.\";"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private Group groupToDelete;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public DeleteGroupCommand(Group targetGroup) {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupToDelete \u003d targetGroup;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(groupToDelete);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            model.deleteGroup(groupToDelete);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete));"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (GroupNotFoundException e) {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CommandException(MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof DeleteGroupCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(this.groupToDelete, ((DeleteGroupCommand) other).groupToDelete)); // state check"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":47,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/AddOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"// import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":" * Adds an order to a person in the address book."},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"public class AddOrderCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"orderadd\";"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"oa\";"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"            + PREFIX_ORDER_INFORMATION + \"ORDER INFO \""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"            + PREFIX_PRICE + \"PRICE \""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"            + PREFIX_QUANTITY + \"QUANTITY \""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"            + PREFIX_DELIVERY_DATE + \"DELIVERY DATE \";"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an order to the selected person in the \""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"            + \"address book.\\n\""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            + PREFIX_ORDER_INFORMATION + \"ORDER INFO \""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"            + PREFIX_PRICE + \"PRICE \""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"            + PREFIX_QUANTITY + \"QUANTITY \""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"            + PREFIX_DELIVERY_DATE + \"DELIVERY DATE\\n\""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"            + PREFIX_ORDER_INFORMATION + \"Books \""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"            + PREFIX_PRICE + \"10.00 \""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            + PREFIX_QUANTITY + \"2 \""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"            + PREFIX_DELIVERY_DATE + \"12/12/2018\\n\";"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ADD_ORDER_SUCCESS \u003d \"Added order to %1$s:\\n[%2$s]\";"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ORDER_NOT_ADDED \u003d \"Could not add order to Person.\";"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    private final Index index;"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    private final Order orderToAdd;"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    private Person person;"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"     * @param orderToAdd order to be added to person"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public AddOrderCommand(Index index, Order orderToAdd) {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        requireNonNull(index);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderToAdd);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        this.index \u003d index;"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        this.orderToAdd \u003d orderToAdd;"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        requireNonNull(model);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"            // TODO: update model"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"            // model.addOrderToPerson(person, orderToAdd);"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"            model.addOrderToOrderList(orderToAdd);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        // } catch (PersonNotFoundException pnfe) {"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"            // throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        } catch (Exception e) { // TODO: define more specific exception"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(MESSAGE_ORDER_NOT_ADDED);"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new DisplayOrderListEvent());"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_ORDER_SUCCESS, person.getName(), orderToAdd));"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        person \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"                || (other instanceof AddOrderCommand // instanceof handles nulls"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 orderToAdd.equals(((AddOrderCommand) other).orderToAdd));"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":103}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        model.resetData(new AddressBook(), new CalendarManager());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":2,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PREFERENCE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_GROUP + \"TAG]\""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_PREFERENCE + \"PREFERENCE]...\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_GROUP + \"TAG]...\\n\""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_GROUP + \"friends \""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_GROUP + \"twitter \""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_PREFERENCE + \"cameras \""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_PREFERENCE + \"computers\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":9,"-":69}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.MESSAGE_THEME_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.isValidTheme;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":" * Changes the theme of the application."},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"            + \": Changes the theme of the application.\\n\""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: THEME\\n\""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" light\";"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_THEME_CHANGED_SUCCESS \u003d \"Theme changed to %1$s.\";"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_INVALID_THEME \u003d \"Theme %1$s not supported.\\n\" + MESSAGE_THEME_CONSTRAINTS;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    private final String themeVersion;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    public ChangeThemeCommand(String themeVersion) {"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        requireNonNull(themeVersion);"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        this.themeVersion \u003d themeVersion;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        if (!isValidTheme(themeVersion)) {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_THEME, themeVersion));"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        Theme.setCurrentTheme(themeVersion);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new ChangeThemeEvent(themeVersion));"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_THEME_CHANGED_SUCCESS, themeVersion));"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.themeVersion.equals(((ChangeThemeCommand) other).themeVersion)); // state check"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":53}},{"path":"src/main/java/seedu/address/logic/commands/DeleteEntryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarEntryListEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * Deletes a calendar entry identified using it\u0027s last displayed index from the address book."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteEntryCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"entrydelete\";"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"ed\";"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Deletes the calendar entry identified by the index number used in the entry listing.\\n\""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Calendar Entry: %1$s\";"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarEntry entryToDelete;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public DeleteEntryCommand(Index targetIndex) {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(entryToDelete);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            model.deleteCalendarEntry(entryToDelete);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (CalendarEntryNotFoundException cenfe) {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"The target calendar entry cannot be missing\");"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new DisplayCalendarEntryListEvent());"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cCalendarEntry\u003e lastShownList \u003d model.getFilteredCalendarEventList();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof DeleteEntryCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteEntryCommand) other).targetIndex) // state check"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(this.entryToDelete, ((DeleteEntryCommand) other).entryToDelete));"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":62,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CALENDAR_ENTRIES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private ReadOnlyCalendarManager previousCalendarManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     * Stores the current state of {@code model#addressBook} and {@code model#calendarManager}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        this.previousCalendarManager \u003d new CalendarManager(model.getCalendarManager());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     * Reverts the AddressBook and CalendarManager to the state before this command"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(model, previousAddressBook, previousCalendarManager);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        model.resetData(previousAddressBook, previousCalendarManager);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredCalendarEventList(PREDICATE_SHOW_ALL_CALENDAR_ENTRIES);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":62,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredCalendarEventList(PREDICATE_SHOW_ALL_CALENDAR_ENTRIES);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":11,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PREFERENCE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"INDEX \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]\""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_PREFERENCE + \"PREFERENCE]...\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]\""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_PREFERENCE + \"PREFERENCE]...\\n\""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing.\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d editPersonDescriptor.getGroupTags().orElse(personToEdit.getGroupTags());"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cPreference\u003e updatedPreferences \u003d editPersonDescriptor.getPreferenceTags()"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"                .orElse(personToEdit.getPreferenceTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedGroups, updatedPreferences);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        private Set\u003cGroup\u003e groupTags;"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        private Set\u003cPreference\u003e prefTags;"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":163,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":164,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"            setGroupTags(toCopy.groupTags);"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"            setPreferenceTags(toCopy.prefTags);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":176,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"                    this.groupTags, this.prefTags);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"         * Sets {@code groups} to this object\u0027s {@code groupTags}."},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"         * A defensive copy of {@code groupTags} is used internally."},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":"        public void setGroupTags(Set\u003cGroup\u003e groups) {"},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"            this.groupTags \u003d (groups !\u003d null) ? new HashSet\u003c\u003e(groups) : null;"},{"lineNumber":220,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":"        /**"},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"         * Sets {@code preferences} to this object\u0027s {@code prefTags}."},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"         * A defensive copy of {@code prefTags} is used internally."},{"lineNumber":225,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":"        public void setPreferenceTags(Set\u003cPreference\u003e preferences) {"},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":"            this.prefTags \u003d (preferences !\u003d null) ? new HashSet\u003c\u003e(preferences) : null;"},{"lineNumber":228,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"        /**"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":"         * Returns an unmodifiable group set, which throws {@code UnsupportedOperationException}"},{"lineNumber":232,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"         * Returns {@code Optional#empty()} if {@code groupTags} is null."},{"lineNumber":234,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":"        public Optional\u003cSet\u003cGroup\u003e\u003e getGroupTags() {"},{"lineNumber":236,"author":{"gitID":"SuxianAlicia"},"content":"            return (groupTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(groupTags)) : Optional.empty();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":"         * Returns an unmodifiable preference set, which throws {@code UnsupportedOperationException}"},{"lineNumber":241,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"         * Returns {@code Optional#empty()} if {@code prefTags} is null."},{"lineNumber":243,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"        public Optional\u003cSet\u003cPreference\u003e\u003e getPreferenceTags() {"},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":"            return (prefTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(prefTags)) : Optional.empty();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":264,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":266,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":267,"author":{"gitID":"SuxianAlicia"},"content":"                    \u0026\u0026 getGroupTags().equals(e.getGroupTags())"},{"lineNumber":268,"author":{"gitID":"SuxianAlicia"},"content":"                    \u0026\u0026 getPreferenceTags().equals(e.getPreferenceTags());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":44,"-":227}},{"path":"src/main/java/seedu/address/logic/commands/FindPreferenceCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Finds and lists all persons in address book whose preferences contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Keyword matching is case insensitive."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"preffind\";"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"pf\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"            + \"KEYWORD \""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[MORE KEYWORDS]\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose preferences contain any of \""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" shoes computers videoGames\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private final PreferencesContainKeywordsPredicate preferencesContainKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public FindPreferenceCommand(PreferencesContainKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        this.preferencesContainKeywordsPredicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredPersonList(preferencesContainKeywordsPredicate);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof FindPreferenceCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.preferencesContainKeywordsPredicate.equals"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                (((FindPreferenceCommand) other).preferencesContainKeywordsPredicate)); // state check"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42}},{"path":"src/main/java/seedu/address/logic/commands/ListCalendarEntryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarEntryListEvent;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * List and display all calendar entries in the address book to the user."},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class ListCalendarEntryCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"entrylist\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"el\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all calendar entries\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredCalendarEventList(Model.PREDICATE_SHOW_ALL_CALENDAR_ENTRIES);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new DisplayCalendarEntryListEvent());"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":22,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/ChangeOrderStatusCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.EditOrderCommand.MESSAGE_DUPLICATE_ORDER;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_STATUS;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.order.OrderStatus.MESSAGE_ORDER_STATUS_CONSTRAINTS;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.order.OrderStatus.isValidOrderStatus;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.model.ChangeOrderStatusEvent;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":" * Changes the order status of an existing order in the address book."},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"public class ChangeOrderStatusCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"orderstatus\";"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"os\";"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" INDEX \" + PREFIX_ORDER_STATUS + \" ORDER STATUS\";"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"            + \": Changes the order status of the order identified by the index number used in the last order listing.\\n\""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"            + PREFIX_ORDER_STATUS + \"ORDER STATUS\\n\""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_ORDER_STATUS + \"done\";"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ORDER_STATUS_CHANGED_SUCCESS \u003d \"Order status of order %1$s changed to %2$s.\";"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_INVALID_ORDER_STATUS \u003d \"Order status %1$s is invalid.\\n\""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"            + MESSAGE_ORDER_STATUS_CONSTRAINTS;"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    private final Index targetIndex;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    private final String orderStatus;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    private Order orderForChangeStatus;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public ChangeOrderStatusCommand(Index targetIndex, String orderStatus) {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d orderStatus;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        if (!isValidOrderStatus(orderStatus)) {"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_ORDER_STATUS, orderStatus));"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"            model.updateOrderStatus(orderForChangeStatus, orderStatus);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        } catch (UniqueOrderList.DuplicateOrderException doe) {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"The target order cannot be missing.\");"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new ChangeOrderStatusEvent(targetIndex, orderForChangeStatus, orderStatus));"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_ORDER_STATUS_CHANGED_SUCCESS,"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"                targetIndex.getOneBased(), orderStatus));"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        orderForChangeStatus \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                || (other instanceof ChangeOrderStatusCommand // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.targetIndex.equals(((ChangeOrderStatusCommand) other).targetIndex)"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.orderStatus.equals(((ChangeOrderStatusCommand) other).orderStatus));"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":89}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Keyword matching is case insensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"KEYWORD \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"[MORE KEYWORDS]\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":2,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/FindGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Finds and lists all persons in address book whose groups contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Keyword matching is case insensitive."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"groupfind\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"gf\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"            + \"KEYWORD \""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[MORE KEYWORDS]\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose groups contain any of \""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends colleagues neighbours\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private final GroupsContainKeywordsPredicate groupsContainKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public FindGroupCommand(GroupsContainKeywordsPredicate predicate) {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupsContainKeywordsPredicate \u003d predicate;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredPersonList(groupsContainKeywordsPredicate);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof FindGroupCommand // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.groupsContainKeywordsPredicate.equals"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"                (((FindGroupCommand) other).groupsContainKeywordsPredicate)); // state check"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42}},{"path":"src/main/java/seedu/address/logic/commands/ViewCalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Displays Calendar in App."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewCalendarCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"cal\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[VIEW_FORMAT]\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Displays Calendar in a specified format.\\n\""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: [VIEW_FORMAT] (must be either \\\"day\\\", \\\"week\\\" or \\\"month\\\" without captions)\\n\""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"            + \"If no parameters are given or given parameter does not follow the required keywords,\""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            + \" calendar will display in Day-View.\\n\""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" day\";"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_SHOW_CALENDAR_SUCCESS \u003d \"Display Calendar in %1$s-View.\";"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MONTH_VIEW \u003d \"Month\";"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DAY_VIEW \u003d \"Day\";"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String WEEK_VIEW \u003d \"Week\";"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    private final String view;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    public ViewCalendarCommand(String view) {"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        String trimmedView \u003d view.trim();"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(trimmedView);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        if (trimmedView.equalsIgnoreCase(MONTH_VIEW)) {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"            this.view \u003d MONTH_VIEW;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        } else if (trimmedView.equalsIgnoreCase(WEEK_VIEW)) {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            this.view \u003d WEEK_VIEW;"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        } else { //If user input is equal to DAY_VIEW or input does not conform to any of the required keywords"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"            this.view \u003d DAY_VIEW;"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(view);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        Optional\u003cString\u003e selectedView \u003d Optional.of(view); //Guaranteed that view cannot be null"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new DisplayCalendarRequestEvent(selectedView));"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(String.format(MESSAGE_SHOW_CALENDAR_SUCCESS, view));"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof ViewCalendarCommand); // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":65,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/DeleteOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":" * Deletes an order identified using its last displayed index from the address book."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"public class DeleteOrderCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"orderdelete\";"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"od\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"            + \": Deletes the order identified by the index number used in the last order listing.\\n\""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    private Order orderToDelete;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public DeleteOrderCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderToDelete);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"            model.deleteOrder(orderToDelete);"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"The target order cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new DisplayOrderListEvent());"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete));"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        orderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"                || (other instanceof DeleteOrderCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteOrderCommand) other).targetIndex) // state check"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(this.orderToDelete, ((DeleteOrderCommand) other).orderToDelete));"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":70}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return model.getFilteredOrderList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList() {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        return model.getFilteredCalendarEventList();"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    public Calendar getCalendar() {"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        return model.getCalendar();"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":13,"-":63}},{"path":"src/main/java/seedu/address/logic/commands/AddEntryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_TITLE;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarEntryListEvent;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarRequestEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":" * Adds a calendar entry to the address book."},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"public class AddEntryCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"entryadd\";"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"ea\";"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_ENTRY_TITLE + \"ENTRY_TITLE \""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_START_DATE + \"[START_DATE] \""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_DATE + \"END_DATE \""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_START_TIME + \"[START_TIME] \""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_TIME + \"END_TIME\";"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event entry to the calendar.\\n\""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: \""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_ENTRY_TITLE + \"ENTRY_TITLE \""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_START_DATE + \"START_DATE] \""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_DATE + \"END_DATE \""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_START_TIME + \"START_TIME] \""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_TIME + \"END_TIME\\n\""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_ENTRY_TITLE + \"Meeting with Boss \""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_START_DATE + \"05-05-2018 \""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_DATE + \"05-05-2018 \""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_START_TIME + \"10:00 \""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_TIME + \"12:30\";"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_ADD_ENTRY_SUCCESS \u003d \"Added Entry [%1$s]\";"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This entry already exists in calendar.\";"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarEntry calEntryToAdd;"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     * Creates an AddEntryCommand to add specified {@code CalendarEntry}."},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public AddEntryCommand(CalendarEntry calEntry) {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(calEntry);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        this.calEntryToAdd \u003d calEntry;"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(model);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"            model.addCalendarEntry(calEntryToAdd);"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"            EventsCenter.getInstance().post(new DisplayCalendarRequestEvent(Optional.empty()));"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"            EventsCenter.getInstance().post(new DisplayCalendarEntryListEvent());"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"            return new CommandResult(String.format(MESSAGE_ADD_ENTRY_SUCCESS, calEntryToAdd));"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DuplicateCalendarEntryException dcee) {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof AddEntryCommand // instanceof handles nulls"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 calEntryToAdd.equals(((AddEntryCommand) other).calEntryToAdd));"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":75,"-":5}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.model.CalendarManagerChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public interface Storage extends AddressBookStorage, CalendarManagerStorage, UserPrefsStorage {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    String getCalendarManagerFilePath();"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager() throws DataConversionException, IOException;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    void saveCalendarManager(ReadOnlyCalendarManager calendarManager) throws IOException;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"     * Saves the current version of the Calendar Manager to the hard disk."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    void handleCalendarManagerChangedEvent(CalendarManagerChangedEvent cmce);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":16,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/DeletePreferenceCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Deletes a preference specified by user from address book."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class DeletePreferenceCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"prefdelete\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"pd\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Deletes the specified preference from all persons in address book.\\n\""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: PREFERENCE_NAME (must be alphanumeric)\\n\""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" computers\";"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_DELETE_PREFERENCE_SUCCESS \u003d \"Deleted PREFERENCE: %1$s\";"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_PREFERENCE_NOT_FOUND \u003d \"Preference does not exist in address book.\";"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private Preference prefToDelete;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public DeletePreferenceCommand(Preference targetPref) {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        this.prefToDelete \u003d targetPref;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(prefToDelete);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            model.deletePreference(prefToDelete);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_PREFERENCE_SUCCESS, prefToDelete));"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (PreferenceNotFoundException e) {"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CommandException(MESSAGE_PREFERENCE_NOT_FOUND);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof DeletePreferenceCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(this.prefToDelete, ((DeletePreferenceCommand) other).prefToDelete)); // state check"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":5}},{"path":"src/main/java/seedu/address/storage/XmlSerializableCalendarManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":" * An Immutable CalendarManager that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"@XmlRootElement(name \u003d \"calendarmanager\")"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlSerializableCalendarManager {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private List\u003cXmlAdaptedCalendarEntry\u003e calendarEntries;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Creates an empty XmlSerializableCalendarManager."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlSerializableCalendarManager() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"     * Conversion"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlSerializableCalendarManager(ReadOnlyCalendarManager src) {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        this();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntries.addAll(src.getCalendarEntryList().stream().map(XmlAdaptedCalendarEntry::new)"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts this calendarManager into the model\u0027s {@code CalendarManager} object."},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code XmlAdaptedCalendarEntry}."},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManager toModelType() throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager calendarManager \u003d new CalendarManager();"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        for (XmlAdaptedCalendarEntry entry: calendarEntries) {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"            calendarManager.addCalendarEntry(entry.toModelType());"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManager;"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof XmlSerializableCalendarManager)) {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager otherCm \u003d (XmlSerializableCalendarManager) other;"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarEntries.equals(otherCm.calendarEntries);"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":57,"-":10}},{"path":"src/main/java/seedu/address/logic/commands/EditOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":" * Edits the details of an existing order in the address book."},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"public class EditOrderCommand extends UndoableCommand {"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"orderedit\";"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"oe\";"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"            + \"INDEX \""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_ORDER_INFORMATION + \"ORDER INFORMATION] \""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_PRICE + \"PRICE] \""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_DELIVERY_DATE + \"DELIVERY DATE] \";"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the order identified \""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"            + \"by the index number used in the last order listing. \""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_ORDER_INFORMATION + \"ORDER INFORMATION] \""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_PRICE + \"PRICE] \""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_DELIVERY_DATE + \"DELIVERY DATE]\\n\""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"            + PREFIX_PRICE + \"15.00 \""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"            + PREFIX_DELIVERY_DATE + \"18-09-2018\";"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_EDIT_ORDER_SUCCESS \u003d \"Edited Order: %1$s\";"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the address book.\";"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    private final Index index;"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    private final EditOrderDescriptor editOrderDescriptor;"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    private Order orderToEdit;"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    private Order editedOrder;"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"     * @param index of the order in the filtered order list to edit"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"     * @param editOrderDescriptor details to edit the order with"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    public EditOrderCommand(Index index, EditOrderDescriptor editOrderDescriptor) {"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        requireNonNull(index);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        requireNonNull(editOrderDescriptor);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        this.index \u003d index;"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        this.editOrderDescriptor \u003d new EditOrderDescriptor(editOrderDescriptor);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"            model.updateOrder(orderToEdit, editedOrder);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        } catch (UniqueOrderList.DuplicateOrderException doe) {"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"The target order cannot be missing.\");"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new DisplayOrderListEvent());"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ORDER_SUCCESS, editedOrder));"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        List\u003cOrder\u003e lastShownOrderList \u003d model.getFilteredOrderList();"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownOrderList.size()) {"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        orderToEdit \u003d lastShownOrderList.get(index.getZeroBased());"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        editedOrder \u003d createEditedOrder(orderToEdit, editOrderDescriptor);"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"     * Creates and returns a {@code Order} with the details of {@code orderToEdit}"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"     * edited with {@code editOrderDescriptor}."},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"    private static Order createEditedOrder(Order orderToEdit, EditOrderDescriptor editOrderDescriptor) {"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        assert orderToEdit !\u003d null;"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        OrderInformation updatedOrderInformation \u003d editOrderDescriptor.getOrderInformation()"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"                .orElse(orderToEdit.getOrderInformation());"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        Price updatedPrice \u003d editOrderDescriptor.getPrice().orElse(orderToEdit.getPrice());"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        Quantity updatedQuantity \u003d editOrderDescriptor.getQuantity().orElse(orderToEdit.getQuantity());"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        DeliveryDate updatedDeliveryDate \u003d editOrderDescriptor.getDeliveryDate().orElse(orderToEdit.getDeliveryDate());"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"        return new Order(updatedOrderInformation, updatedPrice, updatedQuantity, updatedDeliveryDate);"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        // short circuit if same object"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"        // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"        if (!(other instanceof EditOrderCommand)) {"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        // state check"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand eo \u003d (EditOrderCommand) other;"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"        return index.equals(eo.index)"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 editOrderDescriptor.equals(eo.editOrderDescriptor)"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(orderToEdit, eo.orderToEdit);"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"     * Stores the details to edit the order with. Each non-empty field value will replace the"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"     * corresponding field value of the order."},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"    public static class EditOrderDescriptor {"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        private OrderInformation orderInformation;"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        private Price price;"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        private Quantity quantity;"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        private DeliveryDate deliveryDate;"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"        public EditOrderDescriptor() {}"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"        /**"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"         * Copy constructor."},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"         */"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"        public EditOrderDescriptor(EditOrderDescriptor toCopy) {"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"            setOrderInformation(toCopy.orderInformation);"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"            setPrice(toCopy.price);"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"            setQuantity(toCopy.quantity);"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"            setDeliveryDate(toCopy.deliveryDate);"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        /**"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"         */"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"            return CollectionUtil.isAnyNonNull(this.orderInformation, this.price, this.quantity, this.deliveryDate);"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"        public void setOrderInformation(OrderInformation orderInformation) {"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"            this.orderInformation \u003d orderInformation;"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"        public Optional\u003cOrderInformation\u003e getOrderInformation() {"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"            return Optional.ofNullable(orderInformation);"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"        public void setPrice(Price price) {"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"            this.price \u003d price;"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"        public Optional\u003cPrice\u003e getPrice() {"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"            return Optional.ofNullable(price);"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"        public void setQuantity(Quantity quantity) {"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"            this.quantity \u003d quantity;"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"        public Optional\u003cQuantity\u003e getQuantity() {"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":"            return Optional.ofNullable(quantity);"},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"        public void setDeliveryDate(DeliveryDate deliveryDate) {"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"            this.deliveryDate \u003d deliveryDate;"},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"        public Optional\u003cDeliveryDate\u003e getDeliveryDate() {"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"            return Optional.ofNullable(deliveryDate);"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"        public boolean equals(Object other) {"},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"            // short circuit if same object"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":"                return true;"},{"lineNumber":205,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":206,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":"            // instanceof handles nulls"},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":"            if (!(other instanceof EditOrderDescriptor)) {"},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":"                return false;"},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"            // state check"},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"            EditOrderDescriptor eo \u003d (EditOrderDescriptor) other;"},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"            return getOrderInformation().equals(eo.getOrderInformation())"},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":"                    \u0026\u0026 getPrice().equals(eo.getPrice())"},{"lineNumber":217,"author":{"gitID":"amad-person"},"content":"                    \u0026\u0026 getQuantity().equals(eo.getQuantity())"},{"lineNumber":218,"author":{"gitID":"amad-person"},"content":"                    \u0026\u0026 getDeliveryDate().equals(eo.getDeliveryDate());"},{"lineNumber":219,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":221}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.model.CalendarManagerChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarManagerStorage calendarManagerStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, CalendarManagerStorage calendarManagerStorage,"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"                          UserPrefsStorage userPrefsStorage) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarManagerStorage \u003d calendarManagerStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CalendarManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    public String getCalendarManagerFilePath() {"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManagerStorage.getCalendarManagerFilePath();"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    public Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager() throws DataConversionException, IOException {"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        return readCalendarManager(calendarManagerStorage.getCalendarManagerFilePath());"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    public Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager(String filePath)"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        logger.fine(\"Attempting to read calendar data from file: \" + filePath);"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManagerStorage.readCalendarManager(filePath);"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager(ReadOnlyCalendarManager calendarManager) throws IOException {"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        saveCalendarManager(calendarManager, calendarManagerStorage.getCalendarManagerFilePath());"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager(ReadOnlyCalendarManager calendarManager, String filePath) throws IOException {"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        logger.fine(\"Attempting to write to calendar data file: \" + filePath);"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManagerStorage.saveCalendarManager(calendarManager, filePath);"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleCalendarManagerChangedEvent(CalendarManagerChangedEvent event) {"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        logger.info(LogsCenter"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"                .getEventHandlingLogMessage(event, \"Local calendar data changed, saving to file\"));"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"            saveCalendarManager(event.data);"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IOException e) {"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":53,"-":91}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadAddressBookDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        XmlFileStorage.saveAddressBookDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":2,"-":80}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPreference.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * JAXB-friendly adapted version of the Preference."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlAdaptedPreference {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    private String preferenceName;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs an XmlAdaptedPreference."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedPreference() {}"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs a {@code XmlAdaptedPreference} with the given {@code prefName}."},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedPreference(String prefName) {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        this.preferenceName \u003d prefName;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts a given Preference into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedPreference(Preference source) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        preferenceName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts this jaxb-friendly adapted preference object into the model\u0027s Preference object."},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted preference"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    public Preference toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        if (!Tag.isValidTagName(preferenceName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        return new Preference(preferenceName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof XmlAdaptedPreference)) {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        return preferenceName.equals(((XmlAdaptedPreference) other).preferenceName);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":41,"-":19}},{"path":"src/main/java/seedu/address/storage/CalendarManagerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a storage for {@link seedu.address.model.CalendarManager}."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public interface CalendarManagerStorage {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    String getCalendarManagerFilePath();"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns CalendarManager data as a {@link ReadOnlyCalendarManager}."},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     * @see #getCalendarManagerFilePath()"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"     * Saves the given {@link ReadOnlyCalendarManager} to the storage."},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"     * @param calendarManager cannot be null."},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    void saveCalendarManager(ReadOnlyCalendarManager calendarManager) throws IOException;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     * @see #saveCalendarManager(ReadOnlyCalendarManager)"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    void saveCalendarManager(ReadOnlyCalendarManager calendarManager, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":38,"-":6}},{"path":"src/main/java/seedu/address/logic/CommandSyntaxListUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddEntryCommand;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ChangeOrderStatusCommand;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteEntryCommand;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ListCalendarEntryCommand;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ListOrderCommand;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ViewCalendarCommand;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":" * Returns the syntax list of existing commands."},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"public final class CommandSyntaxListUtil {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    private static ArrayList\u003cString\u003e commandSyntaxList;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    public static ArrayList\u003cString\u003e getCommandSyntaxList() {"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        setCommandSyntaxList();"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        return commandSyntaxList;"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"     * Constructs commandSyntaxList for existing commands."},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    private static void setCommandSyntaxList() {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(AddCommand.COMMAND_SYNTAX);"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(AddEntryCommand.COMMAND_SYNTAX);"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(AddOrderCommand.COMMAND_SYNTAX);"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ChangeThemeCommand.COMMAND_WORD);"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ChangeOrderStatusCommand.COMMAND_SYNTAX);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ClearCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeleteCommand.COMMAND_WORD);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeleteEntryCommand.COMMAND_WORD);"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeleteGroupCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeleteOrderCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeletePreferenceCommand.COMMAND_WORD);"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(EditCommand.COMMAND_SYNTAX);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(EditOrderCommand.COMMAND_SYNTAX);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(FindCommand.COMMAND_SYNTAX);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(FindGroupCommand.COMMAND_SYNTAX);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(FindPreferenceCommand.COMMAND_SYNTAX);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(HistoryCommand.COMMAND_WORD);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ListCommand.COMMAND_WORD);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ListCalendarEntryCommand.COMMAND_WORD);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ListOrderCommand.COMMAND_WORD);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(RedoCommand.COMMAND_WORD);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(SelectCommand.COMMAND_SYNTAX);"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ViewCalendarCommand.COMMAND_WORD);"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        sortCommandList();"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"     * Sorts commandSyntaxList in lexicographical order."},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    private static void sortCommandList() {"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        Collections.sort(commandSyntaxList);"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":86}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DUPLICATE_GROUPS_MESSAGE_FORMAT \u003d \"Person has duplicate groups!\";"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DUPLICATE_PREFERENCES_MESSAGE_FORMAT \u003d \"Person has duplicate preferences!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    private List\u003cXmlAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    private List\u003cXmlAdaptedPreference\u003e preferences \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedGroup\u003e groups,"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"                            List\u003cXmlAdaptedPreference\u003e preferences) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        if (groups !\u003d null) {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            this.groups \u003d new ArrayList\u003c\u003e(groups);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        if (preferences !\u003d null) {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"            this.preferences \u003d new ArrayList\u003c\u003e(preferences);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        groups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        for (Group group : source.getGroupTags()) {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"            groups.add(new XmlAdaptedGroup(group));"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        preferences \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        for (Preference pref : source.getPreferenceTags()) {"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"            preferences.add(new XmlAdaptedPreference(pref));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        final List\u003cGroup\u003e personGroups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        for (XmlAdaptedGroup group : groups) {"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"            Group groupToAdd \u003d group.toModelType();"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"            if (personGroups.contains(groupToAdd)) {"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"                throw new IllegalValueException(DUPLICATE_GROUPS_MESSAGE_FORMAT);"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"            personGroups.add(groupToAdd);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        final List\u003cPreference\u003e personPreferences \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        for (XmlAdaptedPreference pref: preferences) {"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"            Preference prefToAdd \u003d pref.toModelType();"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"            if (personPreferences.contains(prefToAdd)) {"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"                throw new IllegalValueException(DUPLICATE_PREFERENCES_MESSAGE_FORMAT);"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"            personPreferences.add(prefToAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        final Set\u003cGroup\u003e groups \u003d new HashSet\u003c\u003e(personGroups);"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        final Set\u003cPreference\u003e preferences \u003d new HashSet\u003c\u003e(personPreferences);"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        return new Person(name, phone, email, address, groups, preferences);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 groups.equals(otherPerson.groups);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":123}},{"path":"src/main/java/seedu/address/storage/XmlCalendarManagerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * A class to access CalendarManager data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlCalendarManagerStorage implements CalendarManagerStorage {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlCalendarManagerStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public String getCalendarManagerFilePath() {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        return readCalendarManager(filePath);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     * Similar to {@link #readCalendarManager()}"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager(String filePath)"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        File calendarManagerFile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        if (!calendarManagerFile.exists()) {"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"            logger.info(\"CalendarManager file \"  + calendarManagerFile + \" not found\");"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager xmlCalManager \u003d"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"                XmlFileStorage.loadCalendarManagerDataFromSaveFile(new File(filePath));"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"            return Optional.of(xmlCalManager.toModelType());"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"            logger.info(\"Illegal values found in \" + calendarManagerFile + \": \" + ive.getMessage());"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager(ReadOnlyCalendarManager calendarManager) throws IOException {"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        saveCalendarManager(calendarManager, filePath);"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager(ReadOnlyCalendarManager calendarManager, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(calendarManager);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        XmlFileStorage.saveCalendarManagerDataToFile(file, new XmlSerializableCalendarManager(calendarManager));"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":68,"-":13}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Stores addressbook data and calendar data in separate XML file."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static void saveAddressBookDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public static XmlSerializableAddressBook loadAddressBookDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     * Saves the given calendarManager data to the specified file."},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    public static void saveCalendarManagerDataToFile(File file, XmlSerializableCalendarManager calendarManager)"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            throws FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            XmlUtil.saveDataToFile(file, calendarManager);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (JAXBException e) {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns calendar manager data in the file or an empty address book"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    public static XmlSerializableCalendarManager loadCalendarManagerDataFromSaveFile(File file)"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            throws DataConversionException, FileNotFoundException {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableCalendarManager.class);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (JAXBException e) {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DataConversionException(e);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":29,"-":36}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private List\u003cXmlAdaptedGroup\u003e groups;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private List\u003cXmlAdaptedPreference\u003e preferences;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedOrder\u003e orders;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        groups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        preferences \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        orders \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        groups.addAll(src.getGroupList().stream().map(XmlAdaptedGroup::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        preferences.addAll(src.getPreferenceList().stream().map(XmlAdaptedPreference::new)"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        orders.addAll(src.getOrderList().stream().map(XmlAdaptedOrder::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code XmlAdaptedPerson}, {@code XmlAdaptedGroup},"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code XmlAdaptedPreference} or {@code XmlAdaptedCalendarEntry}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        for (XmlAdaptedGroup g: groups) {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"            addressBook.addGroup(g.toModelType());"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        for (XmlAdaptedPreference pref: preferences) {"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"            addressBook.addPreference(pref.toModelType());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        for (XmlAdaptedOrder o : orders) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            addressBook.addOrderToOrderList(o.toModelType());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                \u0026\u0026 groups.equals(otherAb.groups)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                \u0026\u0026 preferences.equals(otherAb.preferences)"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 orders.equals(otherAb.orders);"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":19,"-":78}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedGroup.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * JAXB-friendly adapted version of the Group."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlAdaptedGroup {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlValue"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private String groupName;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs an XmlAdaptedGroup."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedGroup() {}"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs a {@code XmlAdaptedGroup} with the given {@code groupName}."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedGroup(String groupName) {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupName \u003d groupName;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts a given Group into this class for JAXB use."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedGroup(Group source) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        groupName \u003d source.tagName;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts this jaxb-friendly adapted group object into the model\u0027s Group object."},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted group"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public Group toModelType() throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        if (!Tag.isValidTagName(groupName)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        return new Group(groupName);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof XmlAdaptedGroup)) {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        return groupName.equals(((XmlAdaptedGroup) other).groupName);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":19}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.storage.CalendarManagerStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.storage.XmlCalendarManagerStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManagerStorage calendarManagerStorage \u003d"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"                new XmlCalendarManagerStorage(userPrefs.getCalendarManagerFilePath());"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        storage \u003d new StorageManager(addressBookStorage, calendarManagerStorage, userPrefsStorage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        Optional \u003cReadOnlyCalendarManager\u003e calendarManagerOptional;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        ReadOnlyCalendarManager initialCalendarData;"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"            calendarManagerOptional \u003d storage.readCalendarManager();"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"            if (!calendarManagerOptional.isPresent()) {"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"                logger.info(\"Data file not found. Will be starting with a sample CalendarManager\");"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"            initialCalendarData \u003d calendarManagerOptional.orElseGet(SampleDataUtil::getSampleCalendarManager);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty CalendarManager\");"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"            initialCalendarData \u003d new CalendarManager();"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IOException e) {"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty CalendarManager\");"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"            initialCalendarData \u003d new CalendarManager();"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"        return new ModelManager(initialData, initialCalendarData, userPrefs);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":158,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":186,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":24,"-":211}},{"path":"src/main/java/seedu/address/model/order/Price.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"        import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s price in the address book."},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class Price {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"            \"Price should only contain numeric characters, one decimal \""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"                    + \"and at most two numeric characters after the decimal, \""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"                    + \"and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public static final String PRICE_VALIDATION_REGEX \u003d \"[0-9]+([.][0-9]{1,2})?\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    private final String price;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code Price}."},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"     * @param price A valid price."},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public Price(String price) {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        requireNonNull(price);"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        this.price \u003d price;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is a valid price."},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidPrice(String test) {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        return test.matches(PRICE_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        return price;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"                || (other instanceof Price // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.price.equals(((Price) other).price)); // state check"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        return price.hashCode();"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":56}},{"path":"src/main/java/seedu/address/model/order/OrderStatus.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s status in the address book."},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidOrderStatus(String)}"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class OrderStatus {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    public static final String ORDER_STATUS_ONGOING \u003d \"ongoing\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public static final String ORDER_STATUS_DONE \u003d \"done\";"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final ArrayList\u003cString\u003e VALID_ORDER_STATUS \u003d new ArrayList\u003c\u003e("},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"            Arrays.asList(ORDER_STATUS_ONGOING, ORDER_STATUS_DONE));"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ORDER_STATUS_CONSTRAINTS \u003d \"Order status can only be \""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"            + ORDER_STATUS_ONGOING + \" or \" + ORDER_STATUS_DONE + \".\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    private String orderStatus;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code OrderStatus}"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"     * @param orderStatus a valid order status."},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    public OrderStatus(String orderStatus) {"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidOrderStatus(orderStatus), MESSAGE_ORDER_STATUS_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d orderStatus;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is a valid order status."},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidOrderStatus(String test) {"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        return VALID_ORDER_STATUS.contains(test);"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"     * Returns the current order status."},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public String getCurrentOrderStatus() {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return this.orderStatus;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"     * Sets the current order status."},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    public void setCurrentOrderStatus(String newOrderStatus) {"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        requireNonNull(newOrderStatus);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        if (isValidOrderStatus(newOrderStatus)) {"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"            this.orderStatus \u003d newOrderStatus;"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        return orderStatus;"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"                || (other instanceof OrderStatus // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.getCurrentOrderStatus().equals(((OrderStatus) other).getCurrentOrderStatus())); // state check"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        return orderStatus.hashCode();"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":78}},{"path":"src/main/java/seedu/address/model/order/Quantity.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s quantity in the address book."},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class Quantity {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_QUANTITY_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"            \"Quantity should only contain numeric characters, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    // Only positive integers are allowed"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public static final String QUANTITY_VALIDATION_REGEX \u003d \"^[0-9]*[1-9][0-9]*$\";"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    private final String quantity;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code Quantity}."},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     * @param quantity A valid quantity."},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public Quantity(String quantity) {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        requireNonNull(quantity);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidQuantity(quantity), MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        this.quantity \u003d quantity;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is a valid price."},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidQuantity(String test) {"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        return test.matches(QUANTITY_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        return quantity;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"                || (other instanceof Quantity // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.quantity.equals(((Quantity) other).quantity)); // state check"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        return quantity.hashCode();"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"}"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""}],"authorContributionMap":{"amad-person":56}},{"path":"src/main/java/seedu/address/model/order/exceptions/OrderNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order.exceptions;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":" * Signals that the operation is unable to find the specified Order."},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"public class OrderNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"}"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""}],"authorContributionMap":{"amad-person":9}},{"path":"src/main/java/seedu/address/model/order/Order.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.order.OrderStatus.ORDER_STATUS_ONGOING;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" * Represents an Order in the address book."},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"public class Order {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    private final OrderInformation orderInformation;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    private final OrderStatus orderStatus;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    private final Price price;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    private final Quantity quantity;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    private final DeliveryDate deliveryDate;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"     * Every field must be present and not null."},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    public Order(OrderInformation orderInformation, Price price, Quantity quantity, DeliveryDate deliveryDate) {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        requireAllNonNull(orderInformation, price, quantity, deliveryDate);"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        this.orderInformation \u003d orderInformation;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d new OrderStatus(ORDER_STATUS_ONGOING); // default value is ongoing"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        this.price \u003d price;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        this.quantity \u003d quantity;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        this.deliveryDate \u003d deliveryDate;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    public OrderInformation getOrderInformation() {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        return orderInformation;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public OrderStatus getOrderStatus() {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        return orderStatus;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    public Price getPrice() {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        return price;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public Quantity getQuantity() {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        return quantity;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    public DeliveryDate getDeliveryDate() {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        return deliveryDate;"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        if (!(other instanceof Order)) {"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        // TODO: orders can have the same information (just the person associated with them can be diff)"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        Order otherOrder \u003d (Order) other;"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        return otherOrder.getOrderInformation().equals(this.getOrderInformation())"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 otherOrder.getOrderStatus().equals(this.getOrderStatus())"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 otherOrder.getPrice().equals(this.getPrice())"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 otherOrder.getQuantity().equals(this.getQuantity())"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 otherOrder.getDeliveryDate().equals(this.getDeliveryDate());"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        return Objects.hash(orderInformation, orderStatus, price, quantity, deliveryDate);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        builder.append(getOrderInformation())"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"                .append(\" Status: \")"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"                .append(getOrderStatus())"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"                .append(\" Price: \")"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"                .append(getPrice())"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                .append(\" Quantity: \")"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"                .append(getQuantity())"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"                .append(\" Delivery Date: \")"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"                .append(getDeliveryDate());"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        return builder.toString();"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":91}},{"path":"src/main/java/seedu/address/model/order/DeliveryDate.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.text.ParseException;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s delivery date in the address book."},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDeliveryDate(String)}"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class DeliveryDate {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_DELIVERY_DATE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"            \"Date should be DD-MM-YYYY, and it should not be blank\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public static final String DELIVERY_DATE_VALIDATION_REGEX \u003d \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"; // format"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static final String DELIVERY_DATE_VALIDATION_DATE_FORMAT \u003d \"dd-MM-yyyy\"; // legal dates"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    private final String deliveryDate;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code DeliveryDate}."},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"     * @param date A valid Date."},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public DeliveryDate(String date) {"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        requireNonNull(date);"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidDeliveryDate(date), MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        this.deliveryDate \u003d date;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidDeliveryDate(String test) {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(DELIVERY_DATE_VALIDATION_DATE_FORMAT);"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        simpleDateFormat.setLenient(false);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"            simpleDateFormat.parse(test);"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        } catch (ParseException e) {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return test.matches(DELIVERY_DATE_VALIDATION_REGEX);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        return deliveryDate;"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"                || (other instanceof DeliveryDate // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.deliveryDate.equals(((DeliveryDate) other).deliveryDate)); // state check"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        return deliveryDate.hashCode();"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"}"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""}],"authorContributionMap":{"amad-person":69}},{"path":"src/main/java/seedu/address/model/order/OrderInformation.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s information in the address book."},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidOrderInformation(String)}"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class OrderInformation {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ORDER_INFORMATION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"            \"Order information should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    public static final String ORDER_INFORMATION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    private final String orderInformation;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"     * Constructs {@code OrderInformation}."},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"     * @param orderInfo Valid order information."},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    public OrderInformation(String orderInfo) {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderInfo);"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidOrderInformation(orderInfo), MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        this.orderInformation \u003d orderInfo;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is valid order information."},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidOrderInformation(String test) {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        return test.matches(ORDER_INFORMATION_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        return orderInformation;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"                || (other instanceof OrderInformation // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.orderInformation.equals(((OrderInformation) other).orderInformation)); // state check"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        return orderInformation.hashCode();"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":54}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"                getGroupSet(\"friends\"), getPreferenceSet(\"videoGames\")),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"                getGroupSet(\"colleagues\", \"friends\"), getPreferenceSet(\"cosmetics\", \"shoes\")),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"                getGroupSet(\"neighbours\"), getPreferenceSet(\"skirts\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"                getGroupSet(\"family\"), getPreferenceSet(\"shoes\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                getGroupSet(\"classmates\"), getPreferenceSet(\"videoGames\", \"computers\")),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"                getGroupSet(\"colleagues\"), getPreferenceSet(\"photobooks\", \"notebooks\"))"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns a group set containing the list of strings given."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"    public static Set\u003cGroup\u003e getGroupSet(String... strings) {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        HashSet\u003cGroup\u003e groupTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"            groupTags.add(new Group(s));"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        return groupTags;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    public static Set\u003cPreference\u003e getPreferenceSet(String... strings) {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        HashSet\u003cPreference\u003e prefTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        for (String s : strings) {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"            prefTags.add(new Preference(s));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        return prefTags;"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    public static ReadOnlyCalendarManager getSampleCalendarManager() {"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager sampleCm \u003d new CalendarManager();"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        return sampleCm;"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":28,"-":58}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedOrder.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":" * JAXB-friendly version of an Order."},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"public class XmlAdaptedOrder {"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    private String orderInformation;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    private String price;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    private String quantity;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    private String deliveryDate;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"     * Constructs an XmlAdaptedOrder."},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    public XmlAdaptedOrder() {}"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"     * Constructs an {@code XmlAdaptedOrder} with the given order details."},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    public XmlAdaptedOrder(String orderInformation, String price, String quantity, String deliveryDate) {"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        this.orderInformation \u003d orderInformation;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        this.price \u003d price;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        this.quantity \u003d quantity;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        this.deliveryDate \u003d deliveryDate;"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"     * Converts a given Order into this class for JAXB use."},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedOrder"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    public XmlAdaptedOrder(Order source) {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        orderInformation \u003d source.getOrderInformation().toString();"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        price \u003d source.getPrice().toString();"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        quantity \u003d source.getQuantity().toString();"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        deliveryDate \u003d source.getDeliveryDate().toString();"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     * Converts the jaxb-friendly adapted order object into the model\u0027s Order object."},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if any data constraints are violated in the adapted order\u0027s fields."},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    public Order toModelType() throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        if (this.orderInformation \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"                    OrderInformation.class.getSimpleName()));"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        if (!OrderInformation.isValidOrderInformation(this.orderInformation)) {"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        final OrderInformation orderInformation \u003d new OrderInformation(this.orderInformation);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        if (this.price \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        if (!Price.isValidPrice(this.price)) {"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        final Price price \u003d new Price(this.price);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        if (this.quantity \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"                    Quantity.class.getSimpleName()));"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        if (!Quantity.isValidQuantity(this.quantity)) {"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        final Quantity quantity \u003d new Quantity(this.quantity);"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        if (this.deliveryDate \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                    DeliveryDate.class.getSimpleName()));"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        if (!DeliveryDate.isValidDeliveryDate(this.deliveryDate)) {"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        final DeliveryDate deliveryDate \u003d new DeliveryDate(this.deliveryDate);"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"        return new Order(orderInformation, price, quantity, deliveryDate);"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        if (!(other instanceof XmlAdaptedOrder)) {"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder otherOrder \u003d (XmlAdaptedOrder) other;"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"        return Objects.equals(orderInformation, otherOrder.orderInformation)"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(price, otherOrder.price)"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(quantity, otherOrder.quantity)"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(deliveryDate, otherOrder.deliveryDate);"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":121}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitID":"-"},"content":" *"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cPerson\u003e getInternalList() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return internalList;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes specified group from all persons who have the group."},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"    public void removeGroupFromAllPersons (Group toRemove) {"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        for (Person p: internalList) {"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"            Set\u003cGroup\u003e newGroups \u003d new HashSet\u003c\u003e(p.getGroupTags());"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"            if (!newGroups.remove(toRemove)) {"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"                continue;"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"            Person newPerson \u003d new Person(p.getName(), p.getPhone(), p.getEmail(), p.getAddress(),"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"                    newGroups, p.getPreferenceTags());"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"            try {"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"                setPerson(p, newPerson);"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"                throw new AssertionError(\"There should not be any duplicates as only groups are edited.\");"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"            } catch (PersonNotFoundException e) {"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"                throw new AssertionError(\"Method is called only specified Group exists. internalList \""},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"                        + \"cannot be empty.\");"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes specified preference from all persons who have the preference."},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"    public void removePrefFromAllPersons(Preference toRemove) {"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        for (Person p: internalList) {"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"            Set\u003cPreference\u003e newPreferences \u003d new HashSet\u003c\u003e(p.getPreferenceTags());"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"            if (!newPreferences.remove(toRemove)) {"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"                continue;"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"            Person newPerson \u003d new Person(p.getName(), p.getPhone(), p.getEmail(), p.getAddress(),"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"                    p.getGroupTags(), newPreferences);"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"            try {"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"                setPerson(p, newPerson);"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"                throw new AssertionError(\"There should not be any duplicates as only preferences\""},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"                        + \" are edited.\");"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"            } catch (PersonNotFoundException e) {"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"                throw new AssertionError(\"Method is called only specified Preference exists. \""},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"                        + \"internalList cannot be empty.\");"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":57,"-":120}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.UniqueGroupList;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.UniquePreferenceList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private final UniqueGroupList groupTags;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private final UniquePreferenceList prefTags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniqueOrderList orders;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public Person(Name name, Phone phone, Email email, Address address,"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"                  Set\u003cGroup\u003e groupTags, Set\u003cPreference\u003e prefTags) {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(name, phone, email, address, groupTags, prefTags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // protect internal groups from changes in the arg list"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupTags \u003d new UniqueGroupList(groupTags);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // protect internal preferences from changes in the arg list"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        this.prefTags \u003d new UniquePreferenceList(prefTags);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // protect internal orders from changes in the arg list"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.orders \u003d new UniqueOrderList();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cGroup\u003e groupTags,"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                  Set\u003cPreference\u003e prefTags, Set\u003cOrder\u003e orders) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, groupTags, prefTags, orders);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // protect internal groups from changes in the arg list"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupTags \u003d new UniqueGroupList(groupTags);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // protect internal preferences from changes in the arg list"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        this.prefTags \u003d new UniquePreferenceList(prefTags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // protect internal orders from changes in the arg list"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.orders \u003d new UniqueOrderList(orders);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns an immutable group set, which throws {@code UnsupportedOperationException}"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    public Set\u003cGroup\u003e getGroupTags() {"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        return Collections.unmodifiableSet(groupTags.toSet());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns an immutable preference set, which throws {@code UnsupportedOperationException}"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    public Set\u003cPreference\u003e getPreferenceTags() {"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        return Collections.unmodifiableSet(prefTags.toSet());"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns an immutable order set, which throws {@code UnsupportedOperationException}"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public Set\u003cOrder\u003e getOrders() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(orders.toSet());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Removes given order if found in order set."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void removeOrder(Order orderToRemove) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        orders.remove(orderToRemove);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        return Objects.hash(name, phone, email, address, groupTags, prefTags);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"                .append(\" Groups: \");"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        getGroupTags().forEach(builder::append);"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        builder.append(\" Preferences: \");"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        getPreferenceTags().forEach(builder::append);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":27,"-":125}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns an unmodifiable view of the groups list."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     * This list will not contain any duplicate groups."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    ObservableList\u003cGroup\u003e getGroupList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns an unmodifiable view of the preferences list."},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     * This list will not contain any duplicate preferences."},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    ObservableList\u003cPreference\u003e getPreferenceList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the orders list."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate orders."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    ObservableList\u003cOrder\u003e getOrderList();"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":11,"-":27}},{"path":"src/main/java/seedu/address/model/person/GroupsContainKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Tests that a {@code Person} \u0027s {@code Group}s\u0027 names matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class GroupsContainKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public GroupsContainKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean test(Person person) {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        return keywords.stream()"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"                .anyMatch(keyword -\u003e personGroupsMatchesKeyword(person, keyword));"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     * Checks if person contains group with group tag names matching given keyword."},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"     * Matching is case-insensitive."},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private boolean personGroupsMatchesKeyword(Person person, String keyword) {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cString\u003e groupNames \u003d person.getGroupTags().stream().map(group -\u003e group.tagName).collect(Collectors.toSet());"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        for (String groupName: groupNames) {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            if (StringUtil.containsWordIgnoreCase(groupName, keyword)) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"                return true;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        return false;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof GroupsContainKeywordsPredicate // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.keywords.equals(((GroupsContainKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":44,"-":3}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_THEME \u003d \"dark\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    private String calendarManagerFilePath \u003d \"data/calendarmanager.xml\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private String calendarManagerName \u003d \"MyCalendarManager\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0, DEFAULT_THEME);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y, Theme.getCurrentTheme());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y, String theme) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y, theme);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public String getCalendarManagerFilePath() {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManagerFilePath;"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    public void setCalendarManagerFilePath(String calendarManagerFilePath) {"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarManagerFilePath \u003d calendarManagerFilePath;"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"    public String getCalendarManagerName() {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManagerName;"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public void setCalendarManagerName(String calendarManagerName) {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarManagerName \u003d calendarManagerName;"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":19,"-":84}},{"path":"src/main/java/seedu/address/model/person/PreferencesContainKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Tests that a {@code Person} \u0027s {@code Preference}s\u0027 names matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class PreferencesContainKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public PreferencesContainKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean test(Person person) {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        return keywords.stream()"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"                .anyMatch(keyword -\u003e personGroupsMatchesKeyword(person, keyword));"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     * Checks if person contains preferences with  preference tag names matching given keyword."},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"     * Matching is case-insensitive."},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private boolean personGroupsMatchesKeyword(Person person, String keyword) {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cString\u003e prefNames \u003d person.getPreferenceTags().stream().map(pref -\u003e pref.tagName)"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        for (String prefName: prefNames) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            if (StringUtil.containsWordIgnoreCase(prefName, keyword)) {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                return true;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return false;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof PreferencesContainKeywordsPredicate // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.keywords.equals(((PreferencesContainKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":3}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.UniqueGroupList;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.UniquePreferenceList;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    private final UniquePreferenceList prefTags;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    private final UniqueGroupList groupTags;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final UniqueOrderList orders;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        prefTags \u003d new UniquePreferenceList();"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        groupTags \u003d new UniqueGroupList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        orders \u003d new UniqueOrderList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    public void setGroupTags(Set\u003cGroup\u003e groupTags) {"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupTags.setTags(groupTags);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    public void setPreferenceTags(Set\u003cPreference\u003e prefTags) {"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        this.prefTags.setTags(prefTags);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void setOrders(Set\u003cOrder\u003e orders) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.orders.setOrders(orders);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        setGroupTags(new HashSet\u003c\u003e(newData.getGroupList()));"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        setPreferenceTags(new HashSet\u003c\u003e(newData.getPreferenceList()));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setOrders(new HashSet\u003c\u003e(newData.getOrderList()));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"     * Also checks the new person\u0027s groups and preferences and updates {@link #groupTags} and {@link #prefTags}"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"     * with any new groups and preferences found,"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"     * and updates the Group and Preference objects in the person to point to those in"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"     * {@link #groupTags} and {@link #prefTags} respectively."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBook}\u0027s group list and preference list will be updated"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"     * with the groups and preferences of {@code editedPerson}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        removeUnusedGroups();"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        removeUnusedPreferences();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"     * Replaces the given order {@code target} in the list with {@code editedOrder}."},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"    public void updateOrder(Order target, Order editedOrder)"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        requireNonNull(editedOrder);"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        orders.setOrder(target, editedOrder);"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Updates the order status of the given order {@code target}"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Order editedOrder \u003d new Order(target.getOrderInformation(), target.getPrice(),"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                target.getQuantity(), target.getDeliveryDate());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        editedOrder.getOrderStatus().setCurrentOrderStatus(orderStatus);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        orders.setOrder(target, editedOrder);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"     *  Updates the master group list and master preference list to include groups and preferences"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"     *  in {@code person} that are not in the lists."},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"     *  @return a copy of this {@code person} such that every group and every preference in this person"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"     *  points to a Group object and Preference in the respective master list."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"        final UniqueGroupList personGroups \u003d new UniqueGroupList(person.getGroupTags());"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"        final UniquePreferenceList personPreferences \u003d new UniquePreferenceList(person.getPreferenceTags());"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"        groupTags.mergeFrom(personGroups);"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"        prefTags.mergeFrom(personPreferences);"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"        // Create map with values \u003d group object references in the master list"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"        // used for checking person group references"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"        final Map\u003cGroup, Group\u003e masterGroupObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"        groupTags.forEach(group -\u003e masterGroupObjects.put(group, group));"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":"        // Create map with values \u003d preference object references in the master list"},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"        // used for checking person preference references"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        final Map\u003cPreference, Preference\u003e masterPreferenceObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        prefTags.forEach(pref -\u003e masterPreferenceObjects.put(pref, pref));"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"        // Rebuild the list of person groups and preferences to point to the relevant groups in the master group list"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"        // and relevant preferences in the master preference list."},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"        final Set\u003cGroup\u003e correctGroupReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"        final Set\u003cPreference\u003e correctPreferenceReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"        personGroups.forEach(group -\u003e correctGroupReferences.add(masterGroupObjects.get(group)));"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"        personPreferences.forEach(pref -\u003e correctPreferenceReferences.add(masterPreferenceObjects.get(pref)));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"                correctGroupReferences, correctPreferenceReferences);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"            removeUnusedGroups();"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"            removeUnusedPreferences();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"    public void addGroup(Group g) throws UniqueGroupList.DuplicateGroupException {"},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"        groupTags.add(g);"},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"    public void addPreference(Preference p) throws UniquePreferenceList.DuplicatePreferenceException {"},{"lineNumber":220,"author":{"gitID":"SuxianAlicia"},"content":"        prefTags.add(p);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes group from all persons who has the group"},{"lineNumber":225,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws GroupNotFoundException if the {@code toRemove} is not in this {@code AddressBook}."},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":"    public void removeGroup(Group toRemove) throws GroupNotFoundException {"},{"lineNumber":228,"author":{"gitID":"SuxianAlicia"},"content":"        if (groupTags.contains(toRemove)) {"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":"            persons.removeGroupFromAllPersons(toRemove);"},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"            groupTags.remove(toRemove);"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":232,"author":{"gitID":"SuxianAlicia"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":236,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes preference from all persons who has the preference"},{"lineNumber":238,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws PreferenceNotFoundException if the {@code toRemove} is not in this {@code AddressBook}."},{"lineNumber":239,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":"    public void removePreference(Preference toRemove) throws PreferenceNotFoundException {"},{"lineNumber":241,"author":{"gitID":"SuxianAlicia"},"content":"        if (prefTags.contains(toRemove)) {"},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"            persons.removePrefFromAllPersons(toRemove);"},{"lineNumber":243,"author":{"gitID":"SuxianAlicia"},"content":"            prefTags.remove(toRemove);"},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":"            throw new PreferenceNotFoundException();"},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":249,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"SuxianAlicia"},"content":"     * Solution below adapted from"},{"lineNumber":251,"author":{"gitID":"SuxianAlicia"},"content":"     * https://github.com/se-edu/addressbook-level4/pull/790/commits/48ba8e95de5d7eae883504d40e6795c857dae3c2"},{"lineNumber":252,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes unused groups in groupTags."},{"lineNumber":253,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"SuxianAlicia"},"content":"    private void removeUnusedGroups() {"},{"lineNumber":255,"author":{"gitID":"SuxianAlicia"},"content":"        ObservableList\u003cPerson\u003e list \u003d persons.getInternalList();"},{"lineNumber":256,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueGroupList newList \u003d new UniqueGroupList();"},{"lineNumber":257,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":258,"author":{"gitID":"SuxianAlicia"},"content":"        for (Person p: list) {"},{"lineNumber":259,"author":{"gitID":"SuxianAlicia"},"content":"            newList.mergeFrom(new UniqueGroupList(p.getGroupTags()));"},{"lineNumber":260,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"SuxianAlicia"},"content":"        setGroupTags(newList.toSet());"},{"lineNumber":262,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":264,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"SuxianAlicia"},"content":"     * Solution below adapted from"},{"lineNumber":266,"author":{"gitID":"SuxianAlicia"},"content":"     * https://github.com/se-edu/addressbook-level4/pull/790/commits/48ba8e95de5d7eae883504d40e6795c857dae3c2"},{"lineNumber":267,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes unused preferences in prefTags."},{"lineNumber":268,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"SuxianAlicia"},"content":"    private void removeUnusedPreferences() {"},{"lineNumber":270,"author":{"gitID":"SuxianAlicia"},"content":"        ObservableList\u003cPerson\u003e list \u003d persons.getInternalList();"},{"lineNumber":271,"author":{"gitID":"SuxianAlicia"},"content":"        UniquePreferenceList newList \u003d new UniquePreferenceList();"},{"lineNumber":272,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":273,"author":{"gitID":"SuxianAlicia"},"content":"        for (Person p: list) {"},{"lineNumber":274,"author":{"gitID":"SuxianAlicia"},"content":"            newList.mergeFrom(new UniquePreferenceList(p.getPreferenceTags()));"},{"lineNumber":275,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"SuxianAlicia"},"content":"        setPreferenceTags(newList.toSet());"},{"lineNumber":277,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":279,"author":{"gitID":"amad-person"},"content":"    //// order-level operations"},{"lineNumber":280,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":281,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"amad-person"},"content":"     * Adds order to list of orders."},{"lineNumber":283,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"amad-person"},"content":"    public void addOrderToOrderList(Order orderToAdd) throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":285,"author":{"gitID":"amad-person"},"content":"        orders.add(orderToAdd);"},{"lineNumber":286,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":288,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"amad-person"},"content":"     * Removes order from list of orders."},{"lineNumber":290,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"amad-person"},"content":"    public void deleteOrder(Order targetOrder) throws OrderNotFoundException {"},{"lineNumber":292,"author":{"gitID":"amad-person"},"content":"        orders.remove(targetOrder);"},{"lineNumber":293,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":300,"author":{"gitID":"SuxianAlicia"},"content":"        return persons.asObservableList().size() + \" persons, \" + groupTags.asObservableList().size() +  \" groups, \""},{"lineNumber":301,"author":{"gitID":"-"},"content":"                + prefTags.asObservableList().size() + \" preferences, \" + orders.asObservableList().size() + \" orders\";"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":310,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cGroup\u003e getGroupList() {"},{"lineNumber":311,"author":{"gitID":"SuxianAlicia"},"content":"        return groupTags.asObservableList();"},{"lineNumber":312,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":314,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":315,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cPreference\u003e getPreferenceList() {"},{"lineNumber":316,"author":{"gitID":"SuxianAlicia"},"content":"        return prefTags.asObservableList();"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":320,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":321,"author":{"gitID":"amad-person"},"content":"    public ObservableList\u003cOrder\u003e getOrderList() {"},{"lineNumber":322,"author":{"gitID":"amad-person"},"content":"        return orders.asObservableList();"},{"lineNumber":323,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":329,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":330,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":331,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.groupTags.equalsOrderInsensitive(((AddressBook) other).groupTags)"},{"lineNumber":332,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.prefTags.equalsOrderInsensitive(((AddressBook) other).prefTags));"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":338,"author":{"gitID":"SuxianAlicia"},"content":"        return Objects.hash(persons, groupTags, prefTags);"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":129,"-":177,"amad-person":34}},{"path":"src/main/java/seedu/address/model/ReadOnlyCalendarManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Unmodifiable view of an calendar manager."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public interface ReadOnlyCalendarManager {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns an unmodifiable view of the calendar entry list."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"     * This list will not contain any duplicate calendar entries."},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    ObservableList\u003cCalendarEntry\u003e getCalendarEntryList();"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":14,"-":3}},{"path":"src/main/java/seedu/address/model/order/UniqueOrderList.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":" * A list of orders that enforces no nulls and uniqueness between its elements."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":" *"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":" *"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":" * @see Order#equals(Object)"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"public class UniqueOrderList implements Iterable\u003cOrder\u003e {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"     * Constructs empty OrderList."},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    public UniqueOrderList() {}"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"     * Creates a UniqueOrderList using given orders."},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"     * Enforces no nulls."},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public UniqueOrderList(Set\u003cOrder\u003e orders) {"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        requireAllNonNull(orders);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        internalList.addAll(orders);"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"     * Returns all orders in this list as a Set."},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    public Set\u003cOrder\u003e toSet() {"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"     * Replaces the order {@code target} in the list with {@code editedOrder}."},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"     * @throws DuplicateOrderException if the replacement is equivalent to another existing order in the list."},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"     * @throws OrderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    public void setOrder(Order target, Order editedOrder)"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"            throws DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        requireNonNull(editedOrder);"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"            throw new OrderNotFoundException();"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        if (!target.equals(editedOrder) \u0026\u0026 internalList.contains(editedOrder)) {"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"            throw new DuplicateOrderException();"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        internalList.set(index, editedOrder);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"     * Replaces the Orders in this list with those in the argument order list."},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    public void setOrders(Set\u003cOrder\u003e orders) {"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        requireAllNonNull(orders);"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        internalList.setAll(orders);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"     * Ensures every order in the argument list exists in this object."},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    public void mergeFrom(UniqueOrderList from) {"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        final Set\u003cOrder\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        from.internalList.stream()"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"                .filter(order -\u003e !alreadyInside.contains(order))"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"                .forEach(internalList::add);"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"     * Returns true if the list contains an equivalent Order as the given argument."},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"    public boolean contains(Order toCheck) {"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        requireNonNull(toCheck);"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"     * Adds an Order to the list."},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"     * @throws DuplicateOrderException if the Order to add is a duplicate of an existing Order in the list."},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"    public void add(Order toAdd) throws DuplicateOrderException {"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        requireNonNull(toAdd);"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        if (contains(toAdd)) {"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"            throw new DuplicateOrderException();"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        internalList.add(toAdd);"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"     * Removes Order from list if it exists."},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"    public void remove(Order toRemove) {"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        requireNonNull(toRemove);"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"        if (contains(toRemove)) {"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"            internalList.remove(toRemove);"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"    public Iterator\u003cOrder\u003e iterator() {"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        return internalList.iterator();"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"    public ObservableList\u003cOrder\u003e asObservableList() {"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"                || (other instanceof UniqueOrderList // instanceof handles nulls"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueOrderList) other).internalList));"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"    public boolean equalsOrderInsensitive(UniqueOrderList other) {"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        return internalList.hashCode();"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"    public static class DuplicateOrderException extends DuplicateDataException {"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"        public DuplicateOrderException() {"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"            super(\"Operation would result in duplicate orders\");"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":175}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.model.CalendarManagerChangedEvent;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":34,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cOrder\u003e filteredOrders;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    private final FilteredList\u003cCalendarEntry\u003e filteredEvents;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarManager calendarManager;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyCalendarManager calendarManager, UserPrefs userPrefs) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(addressBook, calendarManager, userPrefs);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarManager \u003d new CalendarManager(calendarManager);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        filteredOrders \u003d new FilteredList\u003c\u003e(this.addressBook.getOrderList());"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.calendarManager.getCalendarEntryList());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        this(new AddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    public void resetData(ReadOnlyAddressBook newData, ReadOnlyCalendarManager newCalendarData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.resetData(newCalendarData);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        indicateCalendarManagerChanged();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManager;"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    private void indicateCalendarManagerChanged() {"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        raise(new CalendarManagerChangedEvent(calendarManager));"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    public void deleteGroup(Group targetGroup) throws GroupNotFoundException {"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        addressBook.removeGroup(targetGroup);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"    public void deletePreference(Preference targetPreference) throws PreferenceNotFoundException {"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        addressBook.removePreference(targetPreference);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"    public void addOrderToOrderList(Order orderToAdd) throws UniqueOrderList.DuplicateOrderException {"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"        addressBook.addOrderToOrderList(orderToAdd);"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        indicateAddressBookChanged();"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"    public void deleteOrder(Order targetOrder) throws OrderNotFoundException {"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"        addressBook.deleteOrder(targetOrder);"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        indicateAddressBookChanged();"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"    public void addCalendarEntry(CalendarEntry toAdd) throws DuplicateCalendarEntryException {"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.addCalendarEntry(toAdd);"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        updateFilteredCalendarEventList(PREDICATE_SHOW_ALL_CALENDAR_ENTRIES);"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        indicateCalendarManagerChanged();"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"    public void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException {"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.deleteCalendarEntry(entryToDelete);"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        updateFilteredCalendarEventList(PREDICATE_SHOW_ALL_CALENDAR_ENTRIES);"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"        indicateCalendarManagerChanged();"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"    public void updateOrder(Order target, Order editedOrder)"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"        requireAllNonNull(target, editedOrder);"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"        addressBook.updateOrder(target, editedOrder);"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"        indicateAddressBookChanged();"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        addressBook.updateOrderStatus(target, orderStatus);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Order List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"     * Returns an unmodifiable view of the list of {@code Order} backed by the internal list of"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":"     * {@code addressBook}"},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":"        return FXCollections.unmodifiableObservableList(filteredOrders);"},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":206,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":"    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":"        requireNonNull(predicate);"},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"        filteredOrders.setPredicate(predicate);"},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Calendar Entry List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEventList() {"},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":"        return FXCollections.unmodifiableObservableList(filteredEvents);"},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":"    public void updateFilteredCalendarEventList(Predicate\u003cCalendarEntry\u003e predicate) {"},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(predicate);"},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"        filteredEvents.setPredicate(predicate);"},{"lineNumber":225,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"SuxianAlicia"},"content":"    public Calendar getCalendar() {"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManager.getCalendar();"},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":232,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":248,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 calendarManager.equals(other.calendarManager)"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":78,"-":132,"amad-person":42}},{"path":"src/main/java/seedu/address/model/CalendarManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.CalendarUtil;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.UniqueCalendarEntryList;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":" * Manages {@code Calendar} as defined in CalendarFX and its related data."},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarManager implements ReadOnlyCalendarManager {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private final Calendar calendar;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private final UniqueCalendarEntryList calendarEntryList;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManager() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryList \u003d new UniqueCalendarEntryList();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        calendar \u003d new Calendar();"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.setReadOnly(true);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.setStyle(Calendar.Style.STYLE1);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManager(ReadOnlyCalendarManager toBeCopied) {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        this();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        resetData(toBeCopied);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"     * Resets the existing data of this {@code CalendarManager} with {@code newData}."},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    public void resetData(ReadOnlyCalendarManager newData) {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(newData);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cCalendarEntry\u003e calEntries \u003d new ArrayList\u003c\u003e(newData.getCalendarEntryList());"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            setCalendarEntries(calEntries);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DuplicateCalendarEntryException dcee) {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Calendar Manager should not have duplicate calendar entries.\");"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        updateCalendar();"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"     * Updates Calendar with entries converted from {@code calendarEntryList}."},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    private void updateCalendar() {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.clear();"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.addEntries(CalendarUtil.convertEntireListToEntries(calendarEntryList.asObservableList()));"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets {@code calendarEntryList} to match the given list of calendar entries."},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    private void setCalendarEntries(List\u003cCalendarEntry\u003e calEntries)"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"            throws DuplicateCalendarEntryException {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryList.setCalEntryList(calEntries);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cCalendarEntry\u003e getCalendarEntryList() {"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarEntryList.asObservableList();"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    public Calendar getCalendar() {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        return calendar;"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    // Managing CalendarEntries operations"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"     * Adds a calendar entries to list of calendar entries in calendar manager."},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DuplicateCalendarEntryException"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"     * if there exist an equivalent calendar entry in calendar manager."},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"    public void addCalendarEntry(CalendarEntry toAdd) throws DuplicateCalendarEntryException {"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryList.add(toAdd);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        updateCalendar();"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes an existing calendar entry in list of calendar entries and from the calendar itself."},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws CalendarEntryNotFoundException"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"     * if given calendar entry does not exist in list of calendar entry"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    public void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException {"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        if (!calendarEntryList.remove(entryToDelete)) {"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CalendarEntryNotFoundException();"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"            updateCalendar();"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof CalendarManager // instanceof handles nulls"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.calendarEntryList.equals(((CalendarManager) other).calendarEntryList));"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        return Objects.hash(calendar, calendarEntryList);"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":113,"-":6}},{"path":"src/main/java/seedu/address/model/theme/Theme.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.theme;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import javafx.scene.Scene;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":" * Represents the current theme of the address book."},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"public class Theme {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public static final String DARK_THEME_KEYWORD \u003d \"dark\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final String LIGHT_THEME_KEYWORD \u003d \"light\";"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static final ArrayList\u003cString\u003e VALID_THEMES \u003d new ArrayList\u003c\u003e("},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"            Arrays.asList(DARK_THEME_KEYWORD, LIGHT_THEME_KEYWORD));"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_THEME_CONSTRAINTS \u003d \"Theme can only be \""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"            + DARK_THEME_KEYWORD + \" or \" + LIGHT_THEME_KEYWORD + \".\";"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public static final String DARK_THEME_CSS_FILE_PATH \u003d \"view/DarkTheme.css\";"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public static final String LIGHT_THEME_CSS_FILE_PATH \u003d \"view/LightTheme.css\";"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    private static String currentTheme;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code currentTheme}."},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"     * @param currentTheme a valid theme."},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public Theme(String currentTheme) {"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        requireNonNull(currentTheme);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidTheme(currentTheme), MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        this.currentTheme \u003d currentTheme;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"     * Returns true if the given string is a valid theme."},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidTheme(String test) {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        return VALID_THEMES.contains(test);"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"     * Returns the current theme."},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public static String getCurrentTheme() {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        return currentTheme;"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"     * Sets the current theme to the newTheme."},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public static void setCurrentTheme(String newTheme) {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        requireNonNull(newTheme);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        if (isValidTheme(newTheme)) {"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"            currentTheme \u003d newTheme;"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        return currentTheme;"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"                || (other instanceof Theme); // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        return currentTheme.hashCode();"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"     * Changes the current theme of the address book."},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    public static void changeTheme(Stage primaryStage, String newTheme) {"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        if (isValidTheme(newTheme)) {"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"            Scene scene \u003d primaryStage.getScene();"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"            // clear current styles"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"            scene.getStylesheets().clear();"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"            // new theme file path"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"            String newThemeCssFilePath;"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"            switch (newTheme) {"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"            case DARK_THEME_KEYWORD:"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"                newThemeCssFilePath \u003d DARK_THEME_CSS_FILE_PATH;"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"                break;"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"            case LIGHT_THEME_KEYWORD:"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"                newThemeCssFilePath \u003d LIGHT_THEME_CSS_FILE_PATH;"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"                break;"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"            default:"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"                newThemeCssFilePath \u003d DARK_THEME_CSS_FILE_PATH;"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"            scene.getStylesheets().add(newThemeCssFilePath);"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"            primaryStage.setScene(scene);"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":113}},{"path":"src/main/java/seedu/address/model/event/EndDate.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.DateUtil.convertStringToDate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.DateUtil.isValidDate;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Represents Ending Date of a {@code CalendarEntry}."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link seedu.address.commons.util.DateUtil#isValidDate(String)}"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class EndDate {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_END_DATE_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            \"End Date should be DD-MM-YYYY, and it should not be blank\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private final String endDateString;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalDate endDate;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code EndDate}."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     * @param endDate Valid end date."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public EndDate(String endDate) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(endDate);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidDate(endDate), MESSAGE_END_DATE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            this.endDate \u003d convertStringToDate(endDate);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            this.endDateString \u003d endDate;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Given End date should be valid for conversion.\");"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getLocalDate() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return endDate;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return endDateString;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof EndDate // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.endDate.equals(((EndDate) other).endDate)); // state check"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        return endDate.hashCode();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":56,"-":3}},{"path":"src/main/java/seedu/address/model/event/StartDate.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.DateUtil.convertStringToDate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.DateUtil.isValidDate;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Represents Starting Date of a {@code CalendarEntry}."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link seedu.address.commons.util.DateUtil#isValidDate(String)}"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class StartDate {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_START_DATE_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            \"Start Date should be DD-MM-YYYY, and it should not be blank\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private final String startDateString;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalDate startDate;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code StartDate}."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     * @param startDate Valid start date."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public StartDate(String startDate) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(startDate);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidDate(startDate), MESSAGE_START_DATE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            this.startDate \u003d convertStringToDate(startDate);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            this.startDateString \u003d startDate;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Given Start date should be valid for conversion.\");"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getLocalDate() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return startDate;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return startDateString;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof StartDate // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.startDate.equals(((StartDate) other).startDate)); // state check"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        return startDate.hashCode();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":56,"-":3}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedCalendarEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.time.temporal.ChronoUnit.MINUTES;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndDate;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EndTime;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.EntryTitle;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartDate;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.StartTime;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":" * JAXB-friendly version of a CalendarEntry."},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlAdaptedCalendarEntry {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CalendarEntry\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_AND_END_DATE_CONSTRAINTS \u003d \"Start Date cannot be later than End Date.\";"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_AND_END_TIME_CONSTRAINTS \u003d"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            \"Start Time cannot be later than End Time if Event ends on same date.\";"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String EVENT_DURATION_CONSTRAINTS \u003d"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"            \"Event must last at least 15 minutes if ending in same day.\"; //Constraint of CalendarFX entries"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private static final int MINIMAL_DURATION \u003d 15; //Constraint of CalendarFX entries"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    private String entryTitle;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    private String startDate;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    private String endDate;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    private String startTime;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    private String endTime;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs an XmlAdaptedCalendarEntry."},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedCalendarEntry() {}"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs an {@code XmlAdaptedCalendarEntry} with the given calendar event details."},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedCalendarEntry(String entryTitle, String startDate, String endDate,"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                                   String startTime, String endTime) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitle \u003d entryTitle;"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts a given Order into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedCalendarEntry"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedCalendarEntry(CalendarEntry source) {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        entryTitle \u003d source.getEntryTitle().toString();"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        startDate \u003d source.getStartDate().toString();"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        endDate \u003d source.getEndDate().toString();"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        startTime \u003d source.getStartTime().toString();"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        endTime \u003d source.getEndTime().toString();"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts the jaxb-friendly adapted calendar event object into the model\u0027s CalendarEntry object."},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IllegalValueException if any data constraints are violated in the adapted calendar event\u0027s fields."},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntry toModelType() throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.entryTitle \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"                    EntryTitle.class.getSimpleName()));"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        if (!EntryTitle.isValidEntryTitle(this.entryTitle)) {"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        final EntryTitle entryTitle \u003d new EntryTitle(this.entryTitle);"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.startDate \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"                    StartDate.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        if (!DateUtil.isValidDate(this.startDate)) {"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(StartDate.MESSAGE_START_DATE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        final StartDate startDate \u003d new StartDate(this.startDate);"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.endDate \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"                    EndDate.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        if (!DateUtil.isValidDate(this.endDate)) {"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(EndDate.MESSAGE_END_DATE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        final EndDate endDate \u003d new EndDate(this.endDate);"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.startTime \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"                    StartTime.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        if (!TimeUtil.isValidTime(this.startTime)) {"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(StartTime.MESSAGE_START_TIME_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        final StartTime startTime \u003d new StartTime(this.startTime);"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.endTime \u003d\u003d null) {"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"                    EndTime.class.getSimpleName()));"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        if (!TimeUtil.isValidTime(this.endTime)) {"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(EndTime.MESSAGE_END_TIME_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        final EndTime endTime \u003d new EndTime(this.endTime);"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        // Exception thrown if Start Date is later than End Date"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        if (startDate.getLocalDate().isAfter(endDate.getLocalDate())) {"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(START_AND_END_DATE_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        // Check for cases when Start Date is equal to End Date"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        if (startDate.getLocalDate().equals(endDate.getLocalDate())) {"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"            // Check if start time is later than end time"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"            if (startTime.getLocalTime().isAfter(endTime.getLocalTime())) {"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"                throw new IllegalValueException(START_AND_END_TIME_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"            // Check if duration of event is less than 15 minutes"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"            if (MINUTES.between(startTime.getLocalTime(), endTime.getLocalTime()) \u003c MINIMAL_DURATION) {"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"                throw new IllegalValueException(EVENT_DURATION_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        return new CalendarEntry(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof XmlAdaptedCalendarEntry)) {"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry otherCalEvent \u003d (XmlAdaptedCalendarEntry) other;"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        return Objects.equals(entryTitle, otherCalEvent.entryTitle)"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(startDate, otherCalEvent.startDate)"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(endDate, otherCalEvent.endDate)"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(startTime, otherCalEvent.startTime)"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(endTime, otherCalEvent.endTime);"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":166,"-":5}},{"path":"src/main/java/seedu/address/model/event/exceptions/CalendarEntryNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":" * Signals that the operation is unable to find the specified CalendarEntry."},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":8}},{"path":"src/main/java/seedu/address/model/event/exceptions/DuplicateCalendarEntryException.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class DuplicateCalendarEntryException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public DuplicateCalendarEntryException() {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"        super(\"Operation would result in duplicate events\");"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":9,"-":5}},{"path":"src/main/java/seedu/address/model/event/EndTime.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.TimeUtil.convertStringToTime;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.TimeUtil.isValidTime;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Represents ending Time of a {@code CalendarEntry}."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link seedu.address.commons.util.TimeUtil#isValidTime(String)}"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class EndTime {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_END_TIME_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"            \"End Time should be HH:mm (24Hour Format), and it should not be blank\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final String endTimeString;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalTime endTime;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code EndTime}."},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     * @param endTime Valid end time."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public EndTime (String endTime) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(endTime);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidTime(endTime), MESSAGE_END_TIME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            this.endTime \u003d convertStringToTime(endTime);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            this.endTimeString \u003d endTime;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Given start time should be valid for conversion.\");"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalTime getLocalTime() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return endTime;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return endTimeString;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof EndTime // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.endTime.equals(((EndTime) other).endTime)); // state check"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        return endTime.hashCode();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":56,"-":3}},{"path":"src/main/java/seedu/address/model/event/StartTime.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.TimeUtil.convertStringToTime;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.TimeUtil.isValidTime;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Represents starting Time of a {@code CalendarEntry}."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link seedu.address.commons.util.TimeUtil#isValidTime(String)}"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class StartTime {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_START_TIME_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            \"Start Time should be HH:mm (24Hour Format), and it should not be blank\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private final String startTimeString;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalTime startTime;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code StartTime}."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     * @param startTime Valid start time."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public StartTime (String startTime) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(startTime);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidTime(startTime), MESSAGE_START_TIME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            this.startTime \u003d convertStringToTime(startTime);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            this.startTimeString \u003d startTime;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Given start time should be valid for conversion.\");"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalTime getLocalTime() {"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        return startTime;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        return startTimeString;"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof StartTime // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.startTime.equals(((StartTime) other).startTime)); // state check"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        return startTime.hashCode();"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":57,"-":3}},{"path":"src/main/java/seedu/address/model/tag/Preference.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a Preference in the address book."},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)} in parent class."},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"public class Preference extends Tag {"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"    public Preference(String preferenceTagName) {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"        super(preferenceTagName);"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":12}},{"path":"src/main/java/seedu/address/model/tag/Group.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a Group in the address book."},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)} in parent class."},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"public class Group extends Tag {"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"    public Group(String groupTagName) {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"        super(groupTagName);"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":12}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public abstract class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":1,"-":53}},{"path":"src/main/java/seedu/address/model/event/CalendarEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a Calendar Event in address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntry {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    private final EntryTitle entryTitle;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private final StartDate startDate;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    private final EndDate endDate;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    private final StartTime startTime;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    private final EndTime endTime;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     * Every field must be present, and not null."},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntry(EntryTitle entryTitle, StartDate startDate, EndDate endDate,"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"                         StartTime startTime, EndTime endTime) {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitle \u003d entryTitle;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public EntryTitle getEntryTitle() {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        return entryTitle;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public StartDate getStartDate() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return startDate;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    public EndDate getEndDate() {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        return endDate;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    public StartTime getStartTime() {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        return startTime;"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    public EndTime getEndTime() {"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        return endTime;"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof CalendarEntry)) {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry otherCalEvent \u003d (CalendarEntry) other;"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        return otherCalEvent.getEntryTitle().equals(this.getEntryTitle())"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 otherCalEvent.getStartDate().equals(this.getStartDate())"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 otherCalEvent.getEndDate().equals(this.getEndDate())"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 otherCalEvent.getStartTime().equals(this.getStartTime())"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 otherCalEvent.getEndTime().equals(this.getEndTime());"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        return Objects.hash(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        builder.append(getEntryTitle())"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"                .append(\" Start Date: \")"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"                .append(getStartDate())"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"                .append(\" End Date: \")"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"                .append(getEndDate())"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"                .append(\" Start Time: \")"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                .append(getStartTime())"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"                .append(\" End Time: \")"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"                .append(getEndTime());"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        return builder.toString();"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":84,"-":8}},{"path":"src/main/java/seedu/address/model/tag/exceptions/GroupNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":" * Signals that the operation is unable to find the specified Group."},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"public class GroupNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":7}},{"path":"src/main/java/seedu/address/model/tag/exceptions/PreferenceNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":" * Signals that the operation is unable to find the specified Preference."},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"public class PreferenceNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":7}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.CalendarEntry;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDERS \u003d unused -\u003e true;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    Predicate\u003cCalendarEntry\u003e PREDICATE_SHOW_ALL_CALENDAR_ENTRIES \u003d unused -\u003e true;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    void resetData(ReadOnlyAddressBook newData, ReadOnlyCalendarManager newCalendarData);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    void updateFilteredCalendarEventList(Predicate\u003cCalendarEntry\u003e predicate);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered order list to filter by the given {@code predicate}."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered order list */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    ObservableList\u003cOrder\u003e getFilteredOrderList();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Deletes given Order"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    void deleteOrder(Order targetOrder) throws OrderNotFoundException;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"     * Deletes given Group"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws GroupNotFoundException if {@code targetGroup} could not be found in group list."},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    void deleteGroup(Group targetGroup) throws GroupNotFoundException;"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"     * Deletes given Preference"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws PreferenceNotFoundException if {@code targetPreference} could not be found in preference list."},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    void deletePreference(Preference targetPreference) throws PreferenceNotFoundException;"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Adds order to list of orders."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    void addOrderToOrderList(Order orderToAdd) throws UniqueOrderList.DuplicateOrderException;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"     * Adds event to list of calendar events."},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    void addCalendarEntry(CalendarEntry toAdd) throws DuplicateCalendarEntryException;"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"     * Deletes given calendar entry from calendar."},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException;"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    /** Returns an unmodifiable view of the filtered order list */"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"    ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEventList();"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    /** Returns Calendar stored in Model. */"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    Calendar getCalendar();"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    /** Returns the CalendarManager */"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"    ReadOnlyCalendarManager getCalendarManager();"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Replaces the given order {@code target} with {@code editedOrder}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws UniqueOrderList.DuplicateOrderException if updating the order\u0027s details causes the order to be"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  equivalent to another existing order in the list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @throws OrderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    void updateOrder(Order target, Order editedOrder)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException;"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Updates the order status of {@code target} with {@code orderStatus}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throws UniqueOrderList.DuplicateOrderException, OrderNotFoundException;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":47,"-":84}},{"path":"src/main/java/seedu/address/model/event/EntryTitle.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Represents Title of a {@code CalendarEntry} in Event list of Address Book."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEntryTitle(String)}"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class EntryTitle {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_ENTRY_TITLE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"            \"Event title should only contain alphanumeric characters and spaces\""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"                    + \"and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String ENTRY_TITLE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    private final String entryTitle;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code EntryTitle}."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     * @param entryTitle Valid event title."},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public EntryTitle(String entryTitle) {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(entryTitle);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidEntryTitle(entryTitle), MESSAGE_ENTRY_TITLE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitle \u003d entryTitle;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if a given string is a valid event title."},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    public static boolean isValidEntryTitle(String test) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        return test.matches(ENTRY_TITLE_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        return entryTitle;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"     * entryTitle matching is non case-sensitive"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof EntryTitle // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.entryTitle.equalsIgnoreCase(((EntryTitle) other).entryTitle)); // state check"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        return entryTitle.hashCode();"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":54,"-":4}},{"path":"src/main/java/seedu/address/model/event/UniqueCalendarEntryList.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.event.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * A list of {@code CalendarEntry} that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":" * @see CalendarEntry#equals(Object)"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"public class UniqueCalendarEntryList implements Iterable\u003cCalendarEntry\u003e {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private final ObservableList\u003cCalendarEntry\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs empty UniqueCalendarEntryList."},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public UniqueCalendarEntryList() {}"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"     * Creates a UniqueCalendarEntryList using given calendar events."},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"     * Enforces no nulls."},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public UniqueCalendarEntryList(Set\u003cCalendarEntry\u003e calendarEntries) {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(calendarEntries);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.addAll(calendarEntries);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns all calendar entries in this list as a Set."},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    public Set\u003cCalendarEntry\u003e toSet() {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * Replaces the CalendarEntries in internal list with those in the argument calendar entry list."},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    public void setCalEntryList(List\u003cCalendarEntry\u003e calendarEntries) throws DuplicateCalendarEntryException {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(calendarEntries);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        final UniqueCalendarEntryList replacement \u003d new UniqueCalendarEntryList();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        for (CalendarEntry ce: calendarEntries) {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            replacement.add(ce);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        setCalendarEntries(replacement);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    public void setCalendarEntries(UniqueCalendarEntryList replacement) {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"     * Ensures every calendar event in the argument list exists in this object."},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    public void mergeFrom(UniqueCalendarEntryList from) {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        final Set\u003cCalendarEntry\u003e existingEvents \u003d this.toSet();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        from.internalList.stream()"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"                .filter(calEvent -\u003e !existingEvents.contains(calEvent))"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"                .forEach(internalList::add);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if the list contains an equivalent {@code CalendarEntry} as the given argument."},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean contains(CalendarEntry toCheck) {"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(toCheck);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"     * Adds an CalendarEntry to the list."},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DuplicateCalendarEntryException if the CalendarEntry to add"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"     * is a duplicate of an existing CalendarEntry in the list."},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    public void add(CalendarEntry toAdd) throws DuplicateCalendarEntryException {"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(toAdd);"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        if (contains(toAdd)) {"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DuplicateCalendarEntryException();"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.add(toAdd);"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes CalendarEntry from list if it exists."},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean remove(CalendarEntry toRemove) {"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(toRemove);"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        if (contains(toRemove)) {"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"            internalList.remove(toRemove);"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"    public Iterator\u003cCalendarEntry\u003e iterator() {"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        return internalList.iterator();"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cCalendarEntry\u003e asObservableList() {"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof UniqueCalendarEntryList // instanceof handles nulls"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueCalendarEntryList) other).internalList));"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equalsOrderInsensitive(UniqueCalendarEntryList other) {"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        return internalList.hashCode();"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":143,"-":14}},{"path":"src/main/java/seedu/address/model/tag/UniquePreferenceList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" * A list of preference tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":" * @see Preference#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"public class UniquePreferenceList implements Iterable\u003cPreference\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private final ObservableList\u003cPreference\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs empty PreferenceList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public UniquePreferenceList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"     * Creates a UniquePreferenceList using given preference tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public UniquePreferenceList(Set\u003cPreference\u003e preferenceTags) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(preferenceTags);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.addAll(preferenceTags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns all preference tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public Set\u003cPreference\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     * Replaces the Preferences in this list with those in the argument preference tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public void setTags(Set\u003cPreference\u003e preferenceTags) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(preferenceTags);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.setAll(preferenceTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"     * Ensures every preference in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    public void mergeFrom(UniquePreferenceList from) {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        final Set\u003cPreference\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"                .filter(preferenceTag -\u003e !alreadyInside.contains(preferenceTag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if the list contains an equivalent Preference as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean contains(Preference toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"     * Adds a Preference to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DuplicatePreferenceException if the Preference to add is a duplicate of an"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"     * existing Preference in the list."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"    public void add(Preference toAdd) throws DuplicatePreferenceException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DuplicatePreferenceException();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes preference from list if it exists"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    public void remove(Preference toRemove) {"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(toRemove);"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        if (contains(toRemove)) {"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"            internalList.remove(toRemove);"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"    public Iterator\u003cPreference\u003e iterator() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cPreference\u003e asObservableList() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof UniquePreferenceList // instanceof handles nulls"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePreferenceList) other).internalList));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equalsOrderInsensitive(UniquePreferenceList other) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"    public static class DuplicatePreferenceException extends DuplicateDataException {"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        protected DuplicatePreferenceException() {"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"            super(\"Operation would result in duplicate preferences\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":45,"-":107}},{"path":"src/main/java/seedu/address/model/tag/UniqueGroupList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" * A list of group tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":" * @see Group#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"public class UniqueGroupList implements Iterable\u003cGroup\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs empty GroupList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public UniqueGroupList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"     * Creates a UniqueGroupList using given group tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public UniqueGroupList(Set\u003cGroup\u003e groupTags) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(groupTags);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.addAll(groupTags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns all group tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public Set\u003cGroup\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     * Replaces the Groups in this list with those in the argument group list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public void setTags(Set\u003cGroup\u003e groupTags) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(groupTags);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.setAll(groupTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"     * Ensures every group in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    public void mergeFrom(UniqueGroupList from) {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        final Set\u003cGroup\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"                .filter(groupTag -\u003e !alreadyInside.contains(groupTag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if the list contains an equivalent Group as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean contains(Group toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"     * Adds a Group to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DuplicateGroupException if the Group to add is a duplicate of an existing Group in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    public void add(Group toAdd) throws DuplicateGroupException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes group from list if it exists."},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    public void remove(Group toRemove) {"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(toRemove);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        if (contains(toRemove)) {"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"            internalList.remove(toRemove);"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    public Iterator\u003cGroup\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cGroup\u003e asObservableList() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof UniqueGroupList // instanceof handles nulls"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueGroupList) other).internalList));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equalsOrderInsensitive(UniqueGroupList other) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"    public static class DuplicateGroupException extends DuplicateDataException {"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        public DuplicateGroupException() {"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"            super(\"Operation would result in duplicate groups\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":44,"-":107}}]
