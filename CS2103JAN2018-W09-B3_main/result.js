var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"* *Email us* : You can also reach us at `tanweihao [at] comp.nus.edu.sg`"}],"authorContributionMap":{"demitycho":1,"-":5}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"EducateBook was developed by the https://github.com/nus-cs2103-AY1718S2/[W09-B3] team. +"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Samuel Loh Jie Wei"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"image::samuelloh.jpeg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"{empty}[https://github.com/samuelloh[github]]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"Role: Deliverables and deadlines, In charge of UI"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Tan Chee Wee"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"image::chweeee.jpeg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"{empty}[https://github.com/chweeee[github]]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"Role: Integration, In charge of Logic"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Tan Wei Hao"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"image::demitycho.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"{empty}[https://github.com/demitycho[github]]"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"Role: Scheduling and tracking, In charge of Model"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Yap Ni"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"image::yapni.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"{empty}[http://github.com/yapni[github]]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"Role: Documentation, In charge of Storage"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"yapni":18,"-":24}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"\u003d Codeducator"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W09-B3/main[image:https://travis-ci.org/CS2103JAN2018-W09-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/CS2103JAN2018-W09-B3/main[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W09-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W09-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/CS2103JAN2018-W09-B3/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103JAN2018-W09-B3/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"* Codeducator is a desktop address book application for private programming language tutors."},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"* As a programming language tutor, managing your student contacts and tracking their progress may be too much of a hassle. Codeducator helps alleviate your problems by providing features that make this tracking process more convenient, so that you can just focus on teaching your students."},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"* Codeducator has a GUI but the user input is done using a CLI (Command Line Interface)."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"* This project is forked from AddressBook-Level4, a project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"demitycho":5,"-":31}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"\u003d EducateBook - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"By: `Team W09-B3`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"EducateBook (EB) is for teachers/ tutors who *prefer to use a desktop app for managing the contacts of students/parents*. More importantly, EB is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, EB can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Adding a student: `add`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"Adds a student to the address book +"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SUBJECT [t/TAG]...`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"A student can have any number of tags (including 0)"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/English`"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 s/CompSci t/criminal t/NoLife`"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Listing all students : `list`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"Shows a list of all students in the address book. +"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"Format: `list [-f]`"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":""},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"[TIP]"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"Use the -f flag to view all student in favourites"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"Examples:"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"* `list -f` +"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"List only all student that you added to favourites"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"List all students"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Editing a student : `edit`"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"Edits an existing student in the address book. +"},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SUBJECT] [t/TAG]...`"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"****"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"* Edits the student at the specified `INDEX`. The index refers to the index number shown in the last student listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":98,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":99,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"* When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"* You can remove all the student\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":102,"author":{"gitID":"-"},"content":"****"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"Edits the phone number and email address of the 1st student to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":108,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Adding a student to favourites : `fav`"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":""},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"Adds an existing student in the address book to your favourites. +"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"Format: `fav INDEX`"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":""},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"* Add the student at the specified `INDEX` to your favourites."},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"* The index refers to the index number in the most recent listing."},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":""},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"Examples:"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":""},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"`fav 2` +"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"Adds the 2nd student in the address book to favourites."},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"* `find Betsey` +"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"`fav 1` +"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"Adds the 1st student in the results of the `find` command to favourites"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":""},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Remove a student from favourites : `unfav`"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":""},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"Removes an existing student in the address book from your favourites. +"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"Format: `unfav INDEX`"},{"lineNumber":134,"author":{"gitID":"yapni"},"content":""},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"* Removes the student at specified `INDEX` from your favourites."},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"* The index referes to the index number in the most recent listing."},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":""},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"Examples:"},{"lineNumber":141,"author":{"gitID":"yapni"},"content":""},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"`unfav 2` +"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"Removes the 2nd student in the address book from favourites."},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"* `find Betsey` +"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"`unfav 1` +"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"Removes the 1st student in the results of the `find` command from favourites"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":""},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Locating students by name: `find`"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"Finds students whose names contain any of the given keywords. +"},{"lineNumber":152,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"****"},{"lineNumber":155,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":156,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":157,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":158,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":159,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":160,"author":{"gitID":"-"},"content":"****"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":165,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":166,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":167,"author":{"gitID":"yapni"},"content":"Returns any student having names `Betsy`, `Tim`, or `John`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Locating students by tags: `findTag`"},{"lineNumber":170,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":171,"author":{"gitID":"yapni"},"content":"Finds students whose labels contain any of the given keywords. +"},{"lineNumber":172,"author":{"gitID":"demitycho"},"content":"Format: `findTag KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":173,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":174,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":175,"author":{"gitID":"demitycho"},"content":"* The search is case insensitive. e.g `Friends` will match `friends`"},{"lineNumber":176,"author":{"gitID":"demitycho"},"content":"* The order of the keywords does not matter. e.g. ` friends owesMoney` will match `owesMoney friends`"},{"lineNumber":177,"author":{"gitID":"demitycho"},"content":"* Only the tag is searched."},{"lineNumber":178,"author":{"gitID":"demitycho"},"content":"* Only full words will be matched e.g. `friend` will not match `friends`"},{"lineNumber":179,"author":{"gitID":"demitycho"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `friends owesMoney` will return `friends rich`, `owesMoney poor`"},{"lineNumber":180,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":181,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":182,"author":{"gitID":"demitycho"},"content":"Examples:"},{"lineNumber":183,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":184,"author":{"gitID":"yapni"},"content":"When your AddressBook has a student named John Doe, which you have tagged t/friends and t/owesMoney, and a student named Betsy which you have tagged t/owesMoney and t/poor,"},{"lineNumber":185,"author":{"gitID":"demitycho"},"content":"* `findTag friends` +"},{"lineNumber":186,"author":{"gitID":"demitycho"},"content":"Returns `John Doe`"},{"lineNumber":187,"author":{"gitID":"demitycho"},"content":"* `findTag friends owesMoney` +"},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"Returns any student having tags `friends`, `owesMoney`, i.e. `John Doe` and `Betsy`"},{"lineNumber":189,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":190,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Deleting a student : `delete`"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"yapni"},"content":"Deletes the specified student from the address book. +"},{"lineNumber":193,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"****"},{"lineNumber":196,"author":{"gitID":"yapni"},"content":"* Deletes the student at the specified `INDEX`."},{"lineNumber":197,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":198,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":199,"author":{"gitID":"-"},"content":"****"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":205,"author":{"gitID":"yapni"},"content":"Deletes the 2nd student in the address book."},{"lineNumber":206,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":208,"author":{"gitID":"yapni"},"content":"Deletes the 1st student in the results of the `find` command."},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Selecting a student : `select`"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"yapni"},"content":"Selects the student identified by the index number used in the last student listing, and display their address on google maps. +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"****"},{"lineNumber":216,"author":{"gitID":"yapni"},"content":"* Selects the student at the specified `INDEX` and loads their location on Google Maps."},{"lineNumber":217,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":218,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":219,"author":{"gitID":"-"},"content":"****"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":225,"author":{"gitID":"yapni"},"content":"Selects the 2nd student in the address book."},{"lineNumber":226,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":228,"author":{"gitID":"yapni"},"content":"Selects the 1st student in the results of the `find` command."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Viewing your schedule : `schedule`"},{"lineNumber":231,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":232,"author":{"gitID":"demitycho"},"content":"Shows your weekly schedule as a list of lessons. +"},{"lineNumber":233,"author":{"gitID":"demitycho"},"content":"Format: `schedule`"},{"lineNumber":234,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":235,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Adding a lesson to your schedule: `addLesson`"},{"lineNumber":236,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":237,"author":{"gitID":"demitycho"},"content":"Adds a lesson to your schedule for a student identified by the index number in the last student listing. +"},{"lineNumber":238,"author":{"gitID":"demitycho"},"content":"Format: `addLesson INDEX [d/DAY] [st/START_TIME] [et/END_TIME]`"},{"lineNumber":239,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":240,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":241,"author":{"gitID":"demitycho"},"content":"* Adds a lesson for the student at the specified `INDEX`. The index refers to the index number shown in the last student listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":242,"author":{"gitID":"demitycho"},"content":"* The day for the input is the first three letters (non-case sensitive) of the name of day, i.e. `mon` for Monday, `fri` for Friday."},{"lineNumber":243,"author":{"gitID":"demitycho"},"content":"* The time input must be in the format `HH:MM`, seperated by a colon \u0027`:`\u0027"},{"lineNumber":244,"author":{"gitID":"demitycho"},"content":"* The time input must be a valid time within the range of `00:00` to `23:59`"},{"lineNumber":245,"author":{"gitID":"demitycho"},"content":"* Input lesson cannot clash with existing lessons already in the schedule."},{"lineNumber":246,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":247,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":248,"author":{"gitID":"demitycho"},"content":"Examples:"},{"lineNumber":249,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":250,"author":{"gitID":"demitycho"},"content":"* `addLesson 1 d/mon st/10:00 et/10:30` +"},{"lineNumber":251,"author":{"gitID":"demitycho"},"content":"Adds a lesson for the 1st student. Lesson time will be on `mon` and starting time will be `10:00` and ending time will be `10:30`."},{"lineNumber":252,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":256,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":260,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":270,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":271,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":277,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":278,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":281,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":282,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":283,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":287,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":293,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":298,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":299,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":303,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":306,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":307,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":308,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":309,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":310,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":311,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":316,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":321,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":329,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":332,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"samuelloh"},"content":"// tag::studentmoredetails"},{"lineNumber":335,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Full information page for each student : `moreInfo` `[coming in v2.0]`"},{"lineNumber":336,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":337,"author":{"gitID":"samuelloh"},"content":"_{Explain command to obtain full information page for each student}"},{"lineNumber":338,"author":{"gitID":"samuelloh"},"content":"// end::studentmoredetails"},{"lineNumber":339,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":343,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"samuelloh"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SUBJECT [t/TAG]...` +"},{"lineNumber":348,"author":{"gitID":"samuelloh"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 s/Math t/friend t/1stYear`"},{"lineNumber":349,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":350,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":351,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":352,"author":{"gitID":"samuelloh"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/SUBJECT] [t/TAG]...` +"},{"lineNumber":353,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":354,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":355,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":356,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":357,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":358,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":359,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":360,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":361,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":362,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"yapni":78,"samuelloh":16,"demitycho":40,"-":228}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        Student[] expectedList \u003d SampleDataUtil.getSampleStudents();"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assertListMatching(getStudentListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"-":48}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TestUtil.getStudent;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        /* Case: delete the first student in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_STUDENT.getOneBased()"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"                + \"       \";"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        Student deletedStudent \u003d removeStudent(expectedModel, INDEX_FIRST_STUDENT);"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        /* Case: delete the last student in the list -\u003e deleted */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        Index lastStudentIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(lastStudentIndex);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        /* Case: undo deleting the last student in the list -\u003e last student restored */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        /* Case: redo deleting the last student in the list -\u003e last student deleted again */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        removeStudent(modelBeforeDeletingLast, lastStudentIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        /* Case: delete the middle student in the list -\u003e deleted */"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        Index middleStudentIndex \u003d getMidIndex(getModel());"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(middleStudentIndex);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, delete index within bounds of address book and student list -\u003e deleted */"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        Index index \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, delete index within bounds of address book but out of bounds of student list"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        /* --------------------- Performing delete operation while a student card is selected ----------------------- */"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        /* Case: delete the selected student -\u003e student list panel selects the student before the deleted student */"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        showAllStudents();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        selectStudent(selectedIndex);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        deletedStudent \u003d removeStudent(expectedModel, selectedIndex);"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"                getModel().getAddressBook().getStudentList().size() + 1);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Student} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"     * @return the removed student"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"    private Student removeStudent(Model model, Index index) {"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d getStudent(model, index);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"            model.deleteStudent(targetStudent);"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"targetStudent is retrieved from model.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"        return targetStudent;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"     * Deletes the student at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"        Student deletedStudent \u003d removeStudent(expectedModel, toDelete);"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"                expectedResultMessage);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"           // assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":50,"-":152}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"//import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        getStudentListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        assertListMatching(getStudentListPanel(), getModel().getFilteredStudentList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"-":91}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        /* Case: selects first card in student list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        selectStudent(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        /* Case: filters the student list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"-":96}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROGRAMMING_LANGUAGE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.AMY;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BOB;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.CARL;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.HOON;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.IDA;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentUtil;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        /* Case: add a student without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        Student toAdd \u003d AMY;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"                + \" \";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        model.addStudent(toAdd);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with all fields same as another student in the address book except name -\u003e added */"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with all fields same as another student in the address book except phone -\u003e added */"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with all fields same as another student in the address book except email -\u003e added */"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with all fields same as another student in the address book except address -\u003e added */"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        deleteAllStudents();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with tags, command with parameters in random order -\u003e added */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        /* Case: add a student, missing tags -\u003e added */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"        /* Case: filters the student list before adding -\u003e added */"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"        /* ------------------------ Perform add operation while a student card is selected -------------------------- */"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"        /* Case: selects first card in the student list, add a student -\u003e added, card selection remains unchanged */"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        selectStudent(Index.fromOneBased(1));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"        /* Case: add a duplicate student -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"        command \u003d StudentUtil.getAddCommand(HOON);"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        /* Case: add a duplicate student except with different tags -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalStudents#ALICE"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"        // AddressBook#addStudent(Student)"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"        command \u003d StudentUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":153,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"yapni"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":158,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"yapni"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":163,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"yapni"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":168,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"yapni"},"content":"        command \u003d \"adds \" + StudentUtil.getStudentDetails(toAdd);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":177,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":182,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"samuelloh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":187,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"samuelloh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":192,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":197,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"yapni"},"content":"     * 4. {@code Model}, {@code Storage} and {@code StudentListPanel} equal to the corresponding components in"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(Student toAdd) {"},{"lineNumber":216,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(StudentUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"yapni"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Student)}. Executes {@code command}"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":222,"author":{"gitID":"yapni"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Student)"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(String command, Student toAdd) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":227,"author":{"gitID":"yapni"},"content":"            expectedModel.addStudent(toAdd);"},{"lineNumber":228,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException dpe) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"yapni"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Student)} except asserts that"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"yapni"},"content":"     * 2. {@code Model}, {@code Storage} and {@code StudentListPanel} equal to the corresponding components in"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"yapni"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Student)"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"yapni"},"content":"     * 4. {@code Model}, {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":77,"samuelloh":4,"-":191}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentListPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.TypicalStudents;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        return TypicalStudents.getTypicalAddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    public StudentListPanelHandle getStudentListPanel() {"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        return mainWindowHandle.getStudentListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"     * Displays all students in the address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"    protected void showAllStudents() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        assertEquals(getModel().getAddressBook().getStudentList().size(), getModel().getFilteredStudentList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"     * Displays all students with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"yapni"},"content":"    protected void showStudentsWithName(String keyword) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"        assertTrue(getModel().getFilteredStudentList().size() \u003c getModel().getAddressBook().getStudentList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"     * Selects the student at {@code index} of the displayed list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"yapni"},"content":"    protected void selectStudent(Index index) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":160,"author":{"gitID":"yapni"},"content":"        assertEquals(index.getZeroBased(), getStudentListPanel().getSelectedCardIndex());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"yapni"},"content":"     * Deletes all students in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"    protected void deleteAllStudents() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":168,"author":{"gitID":"yapni"},"content":"        assertEquals(0, getModel().getAddressBook().getStudentList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":173,"author":{"gitID":"yapni"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same student objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"yapni"},"content":"     * and the student list panel displays the students in the model correctly."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"yapni"},"content":"        assertListMatching(getStudentListPanel(), expectedModel.getFilteredStudentList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"     * Calls {@code BrowserPanelHandle}, {@code StudentListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"yapni"},"content":"        getStudentListPanel().rememberSelectedStudentCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"yapni"},"content":"     * of the previously selected student."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"        assertFalse(getStudentListPanel().isAnyCardSelected());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"yapni"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the student in the student list panel at"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"yapni"},"content":"     * @see StudentListPanelHandle#isSelectedStudentCardChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":214,"author":{"gitID":"yapni"},"content":"        String selectedCardName \u003d getStudentListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getStudentListPanel().getSelectedCardIndex());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"yapni"},"content":"     * Asserts that the browser\u0027s url and the selected card in the student list panel remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":229,"author":{"gitID":"yapni"},"content":"     * @see StudentListPanelHandle#isSelectedStudentCardChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":233,"author":{"gitID":"yapni"},"content":"        assertFalse(getStudentListPanel().isSelectedStudentCardChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":278,"author":{"gitID":"yapni"},"content":"            assertListMatching(getStudentListPanel(), getModel().getFilteredStudentList());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":32,"-":261}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"\u003d Codeducator - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W09-B3/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team W09-B3`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"image::SDforDeleteStudent.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"image::SDforDeleteStudentEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"demitycho"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"demitycho"},"content":".  The command execution can affect the `Model` (e.g. adding a student) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"demitycho"},"content":"image::DeleteStudentSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"demitycho"},"content":"* exposes an unmodifiable `ObservableList\u003cStudent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"demitycho"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th student in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"demitycho"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new student."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"demitycho"},"content":"The user now decides that adding the student was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"demitycho"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the student being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"yapni"},"content":"// tag::favourites[]"},{"lineNumber":369,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Favourites feature"},{"lineNumber":370,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"yapni"},"content":"To facilitate the favourite/unfavourite feature, a `Favourite` attribute is added to the `Student` class:"},{"lineNumber":373,"author":{"gitID":"yapni"},"content":""},{"lineNumber":374,"author":{"gitID":"yapni"},"content":"image::StudentClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":375,"author":{"gitID":"yapni"},"content":""},{"lineNumber":376,"author":{"gitID":"yapni"},"content":"Since the implementation of the favourite and unfavourite command are similar, we will talk about the implementation of the favourite command only."},{"lineNumber":377,"author":{"gitID":"yapni"},"content":""},{"lineNumber":378,"author":{"gitID":"yapni"},"content":"The logic part of the favourite command will be executed by the `FavouriteCommand` class."},{"lineNumber":379,"author":{"gitID":"yapni"},"content":"To mark a `Student` object called \"studentToFavourite\" as favourite:"},{"lineNumber":380,"author":{"gitID":"yapni"},"content":""},{"lineNumber":381,"author":{"gitID":"yapni"},"content":"* A Student object called \"editedStudent\" will be created by `FavouriteCommand.createEditedStudent(Student)`, which is implemented as such:"},{"lineNumber":382,"author":{"gitID":"yapni"},"content":"[source, java]"},{"lineNumber":383,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":384,"author":{"gitID":"yapni"},"content":"    private static Student createEditedStudent(Student target) {"},{"lineNumber":385,"author":{"gitID":"yapni"},"content":"        assert target !\u003d null;"},{"lineNumber":386,"author":{"gitID":"yapni"},"content":""},{"lineNumber":387,"author":{"gitID":"yapni"},"content":"        Name name \u003d target.getName();"},{"lineNumber":388,"author":{"gitID":"yapni"},"content":"        Phone phone \u003d target.getPhone();"},{"lineNumber":389,"author":{"gitID":"yapni"},"content":"        // ... get the rest of the target\u0027s attributes ..."},{"lineNumber":390,"author":{"gitID":"yapni"},"content":"        Favourite fav \u003d new Favourite(true);"},{"lineNumber":391,"author":{"gitID":"yapni"},"content":""},{"lineNumber":392,"author":{"gitID":"yapni"},"content":"        return new Student(name, phone, email, address, programmingLanguage, tags, fav, dashboard);"},{"lineNumber":393,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":394,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":395,"author":{"gitID":"yapni"},"content":""},{"lineNumber":396,"author":{"gitID":"yapni"},"content":"* editedStudent will have the attributes of studentToFavourite, except that its `Favourite` attribute will be set to \"true\""},{"lineNumber":397,"author":{"gitID":"yapni"},"content":"* `Model.updateStudent(Student, Student)` is used to replace studentToFavourite with editedStudent in the Address Book in-memory"},{"lineNumber":398,"author":{"gitID":"yapni"},"content":""},{"lineNumber":399,"author":{"gitID":"yapni"},"content":"[NOTE]"},{"lineNumber":400,"author":{"gitID":"yapni"},"content":"If you have a future implementation that requires the addition of a new attribute in the `Student` class, you must take note of updating the `FavouriteCommand.createEditedStudent(Student)` method to reflect the new attribute."},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of \u0027FavouriteCommand\u0027"},{"lineNumber":405,"author":{"gitID":"yapni"},"content":"* *Alternative 1 (current choice)*: Add a `Favourite` attribute to `Student`"},{"lineNumber":406,"author":{"gitID":"yapni"},"content":"** Pro: It is easy to mark a student as favourite since we can make use of the current `Model.updateStudent(Student, Student)` method by creating a copy of the target `Student` object, with the value of its `Favourite` attribute set to \"true\""},{"lineNumber":407,"author":{"gitID":"yapni"},"content":"** Con: Creating a copy of the `Student` object can be inefficient"},{"lineNumber":408,"author":{"gitID":"yapni"},"content":"* *Alternative 2*: Create a new `UniqueFavouriteStudentsList` that contains the list of students in favourites and store this list in the Address Book"},{"lineNumber":409,"author":{"gitID":"yapni"},"content":"** Pro: Students that are currently in favourites can be managed more easily since there is a direct overview of which student is in favourites"},{"lineNumber":410,"author":{"gitID":"yapni"},"content":"** Con: Students in the `UniqueFavouriteStudentsList` have to be synced with the `UniqueStudentsList`. For example, we have to ensure that deleting a student in the `UniqueStudentList` deletes the student in the `UniqueFavouriteStudentsList` too"},{"lineNumber":411,"author":{"gitID":"yapni"},"content":""},{"lineNumber":412,"author":{"gitID":"yapni"},"content":"// end::favourites[]"},{"lineNumber":413,"author":{"gitID":"yapni"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"// tag::location[]"},{"lineNumber":415,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Location feature"},{"lineNumber":416,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":417,"author":{"gitID":"-"},"content":"Selecting a student using the `select` command will render their location on google maps."},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"The address of the student is extracted and converted in a string to be appended to the end of the `SEARCH_PAGE_URL` in the following function"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"----"},{"lineNumber":422,"author":{"gitID":"-"},"content":"    private void loadStudentPage(Student student) {"},{"lineNumber":423,"author":{"gitID":"-"},"content":"        Address location \u003d student.getAddress();"},{"lineNumber":424,"author":{"gitID":"-"},"content":"        String append \u003d location.urlstyle();"},{"lineNumber":425,"author":{"gitID":"-"},"content":"        loadPage(SEARCH_PAGE_URL + append);"},{"lineNumber":426,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":427,"author":{"gitID":"-"},"content":"----"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"An example is provided below when `select 1` is entered as a command:"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"image::location_screenshot.png[width\u003d\"300\"]"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of displaying student locations"},{"lineNumber":436,"author":{"gitID":"-"},"content":"* *Alternative 1 (current choice)*: display it on the embedded browser"},{"lineNumber":437,"author":{"gitID":"-"},"content":"** Pros: Easy to implement, simply alter the default webpage"},{"lineNumber":438,"author":{"gitID":"-"},"content":"** Cons: Might not be able to display student information and location simultaneously"},{"lineNumber":439,"author":{"gitID":"-"},"content":"* *Alternative 2*: creating a new window to display the location"},{"lineNumber":440,"author":{"gitID":"-"},"content":"** Pros: This would allow concurrent display of locations of many students"},{"lineNumber":441,"author":{"gitID":"-"},"content":"** Cons: the UI would be messy and user has to navigate between 2 different windows"},{"lineNumber":442,"author":{"gitID":"-"},"content":"// end::location[]"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"samuelloh"},"content":"// tag::programmingLanguage[]"},{"lineNumber":445,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Programming Language Feature"},{"lineNumber":446,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":447,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":448,"author":{"gitID":"samuelloh"},"content":"The programming language feature involves having an additional class to the student model called `ProgrammingLanguage`."},{"lineNumber":449,"author":{"gitID":"samuelloh"},"content":"It stores the name of the programming language currently being taught to each student as a string."},{"lineNumber":450,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":451,"author":{"gitID":"samuelloh"},"content":"[NOTE]"},{"lineNumber":452,"author":{"gitID":"samuelloh"},"content":"The string for `ProgrammingLanguage` must contain visible characters."},{"lineNumber":453,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":454,"author":{"gitID":"samuelloh"},"content":"image::ModelWithPLFeature.png[width\u003d\"800\"]"},{"lineNumber":455,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":456,"author":{"gitID":"samuelloh"},"content":"As can be seen from the diagram, the field `ProgrammingLanuage` has been added to the student model."},{"lineNumber":457,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":458,"author":{"gitID":"samuelloh"},"content":"Concerning the Logic component, when the `add` command or `edit` command is called,"},{"lineNumber":459,"author":{"gitID":"samuelloh"},"content":"a `Student` object with attributes including `ProgrammingLanguage` will be created/edited depending on which command was entered."},{"lineNumber":460,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":461,"author":{"gitID":"samuelloh"},"content":"For example, adding a student would have the command string parsed for arguments in such a way:"},{"lineNumber":462,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":463,"author":{"gitID":"samuelloh"},"content":"[source, java]"},{"lineNumber":464,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":465,"author":{"gitID":"samuelloh"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":466,"author":{"gitID":"samuelloh"},"content":"        // ...Tokenize the String Input..."},{"lineNumber":467,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":468,"author":{"gitID":"samuelloh"},"content":"        // ...Check if prefixes are present..."},{"lineNumber":469,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":470,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":471,"author":{"gitID":"samuelloh"},"content":"            // ...Parses the other fields required of a Student..."},{"lineNumber":472,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":473,"author":{"gitID":"samuelloh"},"content":"            ProgrammingLanguage programmingLanguage \u003d ParserUtil.parseSubject(argMultimap"},{"lineNumber":474,"author":{"gitID":"samuelloh"},"content":"                    .getValue(PREFIX_PROGRAMMING_LANGUAGE)).get();"},{"lineNumber":475,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":476,"author":{"gitID":"samuelloh"},"content":"            Student student \u003d new Student(name, phone, email, address, programmingLanguage, tagList);"},{"lineNumber":477,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":478,"author":{"gitID":"samuelloh"},"content":"            return new AddCommand(student);"},{"lineNumber":479,"author":{"gitID":"samuelloh"},"content":"\t\t} catch (IllegalValueException ive) {"},{"lineNumber":480,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":481,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":482,"author":{"gitID":"samuelloh"},"content":"\t}"},{"lineNumber":483,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":484,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":485,"author":{"gitID":"samuelloh"},"content":"A new student would then be added. On the other hand, editing a student\u0027s programming language will be done by creating an edited student in such a way:"},{"lineNumber":486,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":487,"author":{"gitID":"samuelloh"},"content":"[source, java]"},{"lineNumber":488,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":489,"author":{"gitID":"samuelloh"},"content":"\tprivate static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"},{"lineNumber":490,"author":{"gitID":"samuelloh"},"content":"        assert studentToEdit !\u003d null;"},{"lineNumber":491,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":492,"author":{"gitID":"samuelloh"},"content":"        // ...Set other attributes of the prospective newly edited student..."},{"lineNumber":493,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":494,"author":{"gitID":"samuelloh"},"content":"        ProgrammingLanguage updatedProgrammingLanguage \u003d editStudentDescriptor.getProgrammingLanguage();"},{"lineNumber":495,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":496,"author":{"gitID":"samuelloh"},"content":"        return new Student(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedProgrammingLanguage,"},{"lineNumber":497,"author":{"gitID":"samuelloh"},"content":"                updatedTags);"},{"lineNumber":498,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":499,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":500,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":501,"author":{"gitID":"samuelloh"},"content":"The editedStudent will have the new programming language attribute and will hence be used to replace in the Address Book in-memory."},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to store `ProgrammingLanguage` for a `Student`"},{"lineNumber":506,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":507,"author":{"gitID":"samuelloh"},"content":"* **Alternative 1 (current choice):** Store as an attribute of Student."},{"lineNumber":508,"author":{"gitID":"samuelloh"},"content":"** Pros: Easy to keep track of as well as modify."},{"lineNumber":509,"author":{"gitID":"samuelloh"},"content":"** Cons: Coupling increases as more classes (`ProgrammingLanguage` and `Student`) are associated with each other."},{"lineNumber":510,"author":{"gitID":"samuelloh"},"content":"* **Alternative 2:** Store as a separate list and have each student index in the UniqueStudentsList be mapped to each item in the list."},{"lineNumber":511,"author":{"gitID":"samuelloh"},"content":"** Pros: Less coupling so less need to refactor code"},{"lineNumber":512,"author":{"gitID":"samuelloh"},"content":"** Cons: Might be messier to implement, especially if the UniqueStudentsList have it\u0027s students swapping indexes."},{"lineNumber":513,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":514,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: What command to add `ProgrammingLanguage` to `Student`"},{"lineNumber":515,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":516,"author":{"gitID":"samuelloh"},"content":"* **Alternative 1 (current choice):** Implement it through the existing `add` command."},{"lineNumber":517,"author":{"gitID":"samuelloh"},"content":"** Pros: Intuitive and the user does not have to learn an additional command"},{"lineNumber":518,"author":{"gitID":"samuelloh"},"content":"** Cons: User will have to type a longer string for add command to include the programming language used by the student."},{"lineNumber":519,"author":{"gitID":"samuelloh"},"content":"* **Alternative 2:** Implement it as a new command."},{"lineNumber":520,"author":{"gitID":"samuelloh"},"content":"** Pros: User will be able to add or modify `ProgrammingLanguage` one or possibly even a few students at their own discretion."},{"lineNumber":521,"author":{"gitID":"samuelloh"},"content":"** Cons: User will have to learn a new specific command and might also be slightly difficult to implement."},{"lineNumber":522,"author":{"gitID":"samuelloh"},"content":"// end::programmingLanguage[]"},{"lineNumber":523,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":529,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":530,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":535,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":536,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":537,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":540,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":549,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":554,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":567,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":568,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":569,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":572,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":575,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":582,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":587,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":594,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":607,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":608,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":609,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":610,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":611,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":612,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":613,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":614,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":615,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":619,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":622,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":639,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":646,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":647,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":648,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":653,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":654,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":657,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":658,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":667,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":672,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":677,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"demitycho"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all students in the list."},{"lineNumber":680,"author":{"gitID":"-"},"content":"+"},{"lineNumber":681,"author":{"gitID":"-"},"content":"****"},{"lineNumber":682,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":683,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":684,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":685,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":686,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":687,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":688,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":689,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":690,"author":{"gitID":"-"},"content":"****"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":693,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":698,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":701,"author":{"gitID":"-"},"content":"+"},{"lineNumber":702,"author":{"gitID":"-"},"content":"****"},{"lineNumber":703,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":704,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":705,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":706,"author":{"gitID":"yapni"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/student/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a student, and link:{repoURL}/src/main/java/seedu/address/model/student/Person.java[`Person`] allows you to update the tags."},{"lineNumber":707,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":708,"author":{"gitID":"demitycho"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each student, and remove the `tag` from each student."},{"lineNumber":709,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":710,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":711,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":712,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":713,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":714,"author":{"gitID":"-"},"content":"****"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":717,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"yapni"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last student in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":722,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"demitycho"},"content":". Use different colors for different tags inside student cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":725,"author":{"gitID":"-"},"content":"+"},{"lineNumber":726,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":727,"author":{"gitID":"-"},"content":"+"},{"lineNumber":728,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":729,"author":{"gitID":"-"},"content":"+"},{"lineNumber":730,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":731,"author":{"gitID":"-"},"content":"+"},{"lineNumber":732,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":733,"author":{"gitID":"-"},"content":"+"},{"lineNumber":734,"author":{"gitID":"-"},"content":"****"},{"lineNumber":735,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":736,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":737,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":738,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":739,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":740,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":741,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":742,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":743,"author":{"gitID":"-"},"content":"****"},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":746,"author":{"gitID":"-"},"content":"+"},{"lineNumber":747,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":748,"author":{"gitID":"-"},"content":"+"},{"lineNumber":749,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":750,"author":{"gitID":"-"},"content":"+"},{"lineNumber":751,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":752,"author":{"gitID":"-"},"content":"+"},{"lineNumber":753,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":754,"author":{"gitID":"-"},"content":"+"},{"lineNumber":755,"author":{"gitID":"-"},"content":"****"},{"lineNumber":756,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":757,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":758,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":759,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":760,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":761,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":762,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":763,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":764,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":765,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":766,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":767,"author":{"gitID":"-"},"content":"****"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":770,"author":{"gitID":"-"},"content":"+"},{"lineNumber":771,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":772,"author":{"gitID":"-"},"content":"+"},{"lineNumber":773,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":774,"author":{"gitID":"-"},"content":"+"},{"lineNumber":775,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":776,"author":{"gitID":"-"},"content":"+"},{"lineNumber":777,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":778,"author":{"gitID":"-"},"content":"+"},{"lineNumber":779,"author":{"gitID":"-"},"content":"****"},{"lineNumber":780,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":781,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":782,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":783,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":784,"author":{"gitID":"yapni"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of students when the application just started."},{"lineNumber":785,"author":{"gitID":"yapni"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of students whenever there are new changes to the addressbook."},{"lineNumber":786,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":787,"author":{"gitID":"yapni"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of students status bar."},{"lineNumber":788,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":789,"author":{"gitID":"-"},"content":"****"},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":792,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":797,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":800,"author":{"gitID":"-"},"content":"+"},{"lineNumber":801,"author":{"gitID":"-"},"content":"****"},{"lineNumber":802,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":803,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":804,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":805,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":806,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":807,"author":{"gitID":"-"},"content":"****"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":810,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":817,"author":{"gitID":"yapni"},"content":"Edits the remark for a student specified in the `INDEX`. +"},{"lineNumber":818,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":823,"author":{"gitID":"yapni"},"content":"Edits the remark for the first student to `Likes to drink coffee.`"},{"lineNumber":824,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":825,"author":{"gitID":"yapni"},"content":"Removes the remark for the first student."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":830,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":835,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":840,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":843,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":848,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":849,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":854,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":855,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":856,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":859,"author":{"gitID":"yapni"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each student later."},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":864,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":871,"author":{"gitID":"yapni"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/student/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"yapni"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/student/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":876,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":883,"author":{"gitID":"yapni"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/student/Person.java[`Person`]."},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"yapni"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/student/Person.java[`Person`]."},{"lineNumber":888,"author":{"gitID":"yapni"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the student will be created without a remark)."},{"lineNumber":889,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":892,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":903,"author":{"gitID":"yapni"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/student/Person.java[`Person`]."},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"yapni"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the student that it is currently building."},{"lineNumber":908,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":911,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":922,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"yapni"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a student."},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":937,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"* has a need to plan tuition slots for large number of students"},{"lineNumber":942,"author":{"gitID":"samuelloh"},"content":"* wants to store students\u0027 profile information and pictures"},{"lineNumber":943,"author":{"gitID":"samuelloh"},"content":"* wants to keep a progress log for students"},{"lineNumber":944,"author":{"gitID":"samuelloh"},"content":"* is able to reference common important student details like contact number"},{"lineNumber":945,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":946,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":947,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":948,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"*Value proposition*: improve the planning process for scheduling time slots for all tutees"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":954,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":955,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":956,"author":{"gitID":"samuelloh"},"content":"*Samuel Loh:*"},{"lineNumber":957,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":958,"author":{"gitID":"samuelloh"},"content":"* *(Minor)* Added programmingLanguage field to student model and modified add/edit commands to fit enhancement"},{"lineNumber":959,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor to identify what programming language is being used by each student to learn coding."},{"lineNumber":960,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":961,"author":{"gitID":"samuelloh"},"content":"* *(Major)* Create a \"more information\" page storing other important details of the students including an optional profile picture."},{"lineNumber":962,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor store more information about students, which are not referenced as often, in another portion and thus are not displayed on the student card."},{"lineNumber":963,"author":{"gitID":"samuelloh"},"content":"E.g. emergency contact and an optional profile picture"},{"lineNumber":964,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":965,"author":{"gitID":"samuelloh"},"content":"*Tan Wei Hao:*"},{"lineNumber":966,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":967,"author":{"gitID":"samuelloh"},"content":"* *(Minor)* Added a findTag command"},{"lineNumber":968,"author":{"gitID":"samuelloh"},"content":"** This allows the tutor to find a student by tag labels."},{"lineNumber":969,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":970,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":971,"author":{"gitID":"samuelloh"},"content":"* *(Major)* Syncing timetable with Google calendar"},{"lineNumber":972,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor keep track of lessons better by syncing with his Google calendar. It also allows the use of Google calendar features."},{"lineNumber":973,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":974,"author":{"gitID":"samuelloh"},"content":"*Tan Chee Wee:*"},{"lineNumber":975,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":976,"author":{"gitID":"samuelloh"},"content":"* *(Minor)* Selecting a student via \u0027select\u0027 commands renders their location on google maps"},{"lineNumber":977,"author":{"gitID":"samuelloh"},"content":"** This allows the tutor to easily plan a route to the student\u0027s home."},{"lineNumber":978,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":979,"author":{"gitID":"samuelloh"},"content":"* *(Major)* Add a functionality that enables tutor to use free-form english to execute commands instead of conforming to the specific syntax"},{"lineNumber":980,"author":{"gitID":"samuelloh"},"content":"** This makes the app more user-friendly without the need to memorise the syntax of respective commands and able to execute them more intuitively."},{"lineNumber":981,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":982,"author":{"gitID":"samuelloh"},"content":"*Yap ni:*"},{"lineNumber":983,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":984,"author":{"gitID":"samuelloh"},"content":"* *(Minor)* Favourites feature where tutors can add or remove students from favourites and list students that are in their favourites"},{"lineNumber":985,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor to remember or view the list of prominent students they want to take note of easily."},{"lineNumber":986,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":987,"author":{"gitID":"samuelloh"},"content":"* *(Major)* Dashboard feature where each student has their own dashboard"},{"lineNumber":988,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor to better plan out lessons for each student and track their learning progress."},{"lineNumber":989,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":990,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":992,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"samuelloh"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":997,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":998,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":999,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new student |"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"demitycho"},"content":"|`* * *` |tutor |indicate a student\u0027s programming language when adding one |"},{"lineNumber":1005,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a student |remove entries that I no longer need"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"|`* * *` |user |find a student by name |locate details of students without having to go through the entire list"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"demitycho"},"content":"|`* * *` |user |find a student by programming language |locate details of students of a certain programming language"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"|`* * *` |user |view timetable of lessons by week |easily view my schedule"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"|`* * *` |user |add a lesson for a student |"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a lesson for a student |remove lessons that the student cancels"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"yapni"},"content":"|`* *` |user |edit a lesson for a student |keep track of timing changes"},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"|`* * *` |user with a filled timetable |check free slot |easily find a free timeslot to allocate to students"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"|`* * *` |user with a filled timetable |sync with cloud storage calenders |easily sync my timetable to my schedule"},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"demitycho"},"content":"|`* *` |tutor |sort the contact list by programming language | easily recognise which and how many students are taking a particular programming language"},{"lineNumber":1025,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1026,"author":{"gitID":"yapni"},"content":"|`* * *` |user |add a student to favourites |keep track of that student"},{"lineNumber":1027,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1028,"author":{"gitID":"yapni"},"content":"|`* * *` |user |list students added to favourites |view students I\u0027m keeping tack"},{"lineNumber":1029,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1030,"author":{"gitID":"yapni"},"content":"|`* * *` |user |search a student by label |"},{"lineNumber":1031,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1032,"author":{"gitID":"yapni"},"content":"|`* * *` |user |view the address of a student in the maps |know where the student lives"},{"lineNumber":1033,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1034,"author":{"gitID":"demitycho"},"content":"|`* * *` |user |add a programming language for a student |"},{"lineNumber":1035,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1036,"author":{"gitID":"demitycho"},"content":"|`* * *` |user |get an overview of my student\u0027s progress |so that I can see what they don\u0027t know and tutor them better"},{"lineNumber":1037,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1038,"author":{"gitID":"yapni"},"content":"|`* * *` |user |type little but get the command I want |to save time"},{"lineNumber":1039,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1040,"author":{"gitID":"demitycho"},"content":"|`*` |user |send emails to my student |to send reminders for upcoming lessons or payments owed"},{"lineNumber":1041,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1042,"author":{"gitID":"yapni"},"content":"|`*` |user |submit feedback to the developers |to improve my user experience"},{"lineNumber":1043,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"|`* *` |user |view hours spent teaching |see how much money I should collect"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"|`*` |user with many students in the address book |sort students by name |locate a student easily"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1052,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Scheduler` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete student"},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":"1.  User requests to list students"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"2.  Scheduler shows a list of students"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific student in the list"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"4.  Scheduler deletes the student"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1066,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1071,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1072,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1076,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1077,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1079,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete student"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"1.  User requests to add a lesson"},{"lineNumber":1088,"author":{"gitID":"-"},"content":"2.  Scheduler shows a list of free slots"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"3.  User requests to add a lesson to a slot"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"4.  Scheduler adds that lesson to that slot"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1097,"author":{"gitID":"-"},"content":"* 2a. The timetable is empty."},{"lineNumber":1098,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1100,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"* 2b. The timetable is full."},{"lineNumber":1102,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"** 3b1. Scheduler shows an error message."},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1106,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1107,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"** 3a1. Scheduler shows an error message."},{"lineNumber":1109,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1115,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1118,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1119,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1120,"author":{"gitID":"-"},"content":".  Should receive feedback after executing commands."},{"lineNumber":1121,"author":{"gitID":"-"},"content":".  Should have correct error handling and not crash from unexpected behavior."},{"lineNumber":1122,"author":{"gitID":"samuelloh"},"content":".  Should have its functions and commands easily understood and readable for first time users."},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"[[timetable]] Timetable::"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"A weekly timetable that shows status of all timeslots in one hour divisions"},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1145,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1150,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1165,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1171,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Deleting a student"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"demitycho"},"content":". Deleting a student while all students are listed"},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"demitycho"},"content":".. Prerequisites: List all students using the `list` command. Multiple students in the list."},{"lineNumber":1181,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1183,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1184,"author":{"gitID":"demitycho"},"content":"   Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1185,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"yapni":74,"samuelloh":124,"demitycho":24,"-":974}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private static final Predicate\u003cStudent\u003e PREDICATE_MATCHING_NO_STUDENTS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    public static void setFilteredList(Model model, List\u003cStudent\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        Optional\u003cPredicate\u003cStudent\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(predicate.orElse(PREDICATE_MATCHING_NO_STUDENTS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static void setFilteredList(Model model, Student... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"     * Returns a predicate that evaluates to true if this {@code Student} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    private static Predicate\u003cStudent\u003e getPredicateMatching(Student other) {"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        return student -\u003e student.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":9,"-":30}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.CARL;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.DANIEL;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"         * -\u003e 2 students found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        /* Case: repeat previous find command where student list is displaying the students we are finding"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"         * -\u003e 2 students found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        /* Case: find student where student list is not displaying the student we are finding -\u003e 1 student found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, 2 keywords -\u003e 2 students found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, 2 keywords in reversed order -\u003e 2 students found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, 2 keywords with 1 repeat -\u003e 2 students found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"         * -\u003e 2 students found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        /* Case: find same students in address book after deleting 1 of them -\u003e 1 student found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        assertFalse(getModel().getAddressBook().getStudentList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        /* Case: find student in address book, keyword is same as name but of different case -\u003e 1 student found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        /* Case: find student in address book, keyword is substring of name -\u003e 0 students found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        /* Case: find student in address book, name is substring of keyword -\u003e 0 students found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        /* Case: find student not in address book -\u003e 0 students found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        /* Case: find phone number of student in address book -\u003e 0 students found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        /* Case: find address of student in address book -\u003e 0 students found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        /* Case: find email of student in address book -\u003e 0 students found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"        /* Case: find tags of student in address book -\u003e 0 students found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        /* Case: find while a student is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        showAllStudents();"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"        selectStudent(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        assertFalse(getStudentListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        /* Case: find student in empty address book -\u003e 0 students found */"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        deleteAllStudents();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"yapni"},"content":"     * box displays {@code Messages#MESSAGE_STUDENT_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"yapni"},"content":"                MESSAGE_STUDENT_LISTED_OVERVIEW, expectedModel.getFilteredStudentList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":33,"-":162}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_STUDENT_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalStudents;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        /* Case: select the first card in the student list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, INDEX_FIRST_STUDENT);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        /* Case: select the last card in the student list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        Index studentCount \u003d Index.fromOneBased(getTypicalStudents().size());"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + studentCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, studentCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        /* Case: select the middle card in the student list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        Index middleIndex \u003d Index.fromOneBased(studentCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, select index within bounds of address book but out of bounds of student list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, select index within bounds of address book and student list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredStudentList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        deleteAllStudents();"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"     * {@code expectedSelectedCardIndex} of the selected student.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"     * 4. {@code Model}, {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"                MESSAGE_SELECT_STUDENT_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        int preExecutionSelectedCardIndex \u003d getStudentListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            //assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"     * 4. {@code Model}, {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":30,"-":123}},{"path":"src/test/java/seedu/address/ui/StudentCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStudent;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentCardHandle;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"public class StudentCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        Student studentWithNoTags \u003d new StudentBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        StudentCard studentCard \u003d new StudentCard(studentWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        uiPartRule.setUiPart(studentCard);"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        assertCardDisplay(studentCard, studentWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        Student studentWithTags \u003d new StudentBuilder().build();"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        studentCard \u003d new StudentCard(studentWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        uiPartRule.setUiPart(studentCard);"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        assertCardDisplay(studentCard, studentWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        Student student \u003d new StudentBuilder().build();"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        StudentCard studentCard \u003d new StudentCard(student, 0);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        // same student, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        StudentCard copy \u003d new StudentCard(student, 0);"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        assertTrue(studentCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        assertTrue(studentCard.equals(studentCard));"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        assertFalse(studentCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        assertFalse(studentCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        // different student, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        Student differentStudent \u003d new StudentBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        assertFalse(studentCard.equals(new StudentCard(differentStudent, 0)));"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        // same student, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        assertFalse(studentCard.equals(new StudentCard(student, 1)));"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"     * Asserts that {@code studentCard} displays the details of {@code expectedStudent} correctly and matches"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    private void assertCardDisplay(StudentCard studentCard, Student expectedStudent, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        StudentCardHandle studentCardHandle \u003d new StudentCardHandle(studentCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", studentCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        // verify student details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        assertCardDisplaysStudent(expectedStudent, studentCardHandle);"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":67,"-":5}},{"path":"src/test/java/systemtests/FindTagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.TAG_MATCHING_OWESMONEY;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"public class FindTagCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public void find() {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        /* Case: find a student in address book, command with leading spaces and trailing spaces"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"         * -\u003e 1 students found"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"         */"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"        String command \u003d \"   \" + FindTagCommand.COMMAND_WORD + \" \" + TAG_MATCHING_OWESMONEY + \"   \";"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON); // Benson\u0027s tag is \"owesMoney\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        /* Case: repeat previous find command where student list is displaying the tag we are finding"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"         * -\u003e 1 students found"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + TAG_MATCHING_OWESMONEY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        /* Case: find student in address book, tag is same as name but of different case -\u003e 1 student found */"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" oWesMOney\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        /* Case: find student in address book, keyword is substring of tag -\u003e 0 students found */"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" owe\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        /* Case: find student in address book, tag is substring of keyword -\u003e 0 students found */"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" owesMoneys\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        /* Case: find tag not in address book -\u003e 0 students found */"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" poor\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        /* Case: find phone number of student in address book -\u003e 0 students found */"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + BENSON.getPhone().value;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        /* Case: find address of student in address book -\u003e 0 students found */"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + BENSON.getAddress().value;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        /* Case: find email of student in address book -\u003e 0 students found */"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + BENSON.getEmail().value;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"        command \u003d \"FiNd owesMoney\";"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"     * box displays {@code Messages#MESSAGE_STUDENT_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"                MESSAGE_STUDENT_LISTED_OVERVIEW, expectedModel.getFilteredStudentList().size());"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":16,"demitycho":25,"-":84}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentCardHandle;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    public static void assertCardEquals(StudentCardHandle expectedCard, StudentCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"            assertEquals(expectedCard.getTagsColour(tag), actualCard.getTagsColour(tag)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedStudent}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public static void assertCardDisplaysStudent(Student expectedStudent, StudentCardHandle actualCard) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getName().fullName, actualCard.getName());"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getPhone().value, actualCard.getPhone());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getEmail().value, actualCard.getEmail());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getAddress().value, actualCard.getAddress());"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        assertTagEquals(expectedStudent, actualCard);"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"     * Checks if the tag colour matches the correct tag colour for {@code tagName}"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"     * @param expectedStudent"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"     * @param actualCard"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    private static void assertTagEquals(Student expectedStudent, StudentCardHandle actualCard) {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        List\u003cString\u003e expectedTags \u003d expectedStudent.getTags().stream()"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"                assertEquals(Arrays.asList(\"label\", getTagColourFor(tag)),"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"                        actualCard.getTagsColour(tag)));"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"    private static String getTagColourFor(String tagName) {"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"        switch(tagName) {"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"        case \"friends\":"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"            return \"cyan\";"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        case \"colleagues\":"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"        case \"neighbours\":"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"            return \"blue\";"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        case \"family\":"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"        case \"friend\":"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"            return \"yellow\";"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"        case \"classmates\":"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"        case \"owesMoney\":"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"            return \"teal\";"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"        case \"husband\":"},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"            return \"olive\";"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"        default :"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"            return \"\";"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"     * Asserts that the list in {@code studentListPanelHandle} displays the details of {@code students} correctly and"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    public static void assertListMatching(StudentListPanelHandle studentListPanelHandle, Student... students) {"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        for (int i \u003d 0; i \u003c students.length;"},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"             i++) {"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"            assertCardDisplaysStudent(students[i], studentListPanelHandle.getStudentCardHandle(i));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     * Asserts that the list in {@code studentListPanelHandle} displays the details of {@code students} correctly and"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    public static void assertListMatching(StudentListPanelHandle studentListPanelHandle, List\u003cStudent\u003e students) {"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        assertListMatching(studentListPanelHandle, students.toArray(new Student[0]));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"     * Asserts the size of the list in {@code studentListPanelHandle} equals to {@code size}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"    public static void assertListSize(StudentListPanelHandle studentListPanelHandle, int size) {"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        int numberOfPeople \u003d studentListPanelHandle.getListSize();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":25,"samuelloh":46,"-":52}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    private StudentPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        selectionChangedEventStub \u003d new StudentPanelSelectionChangedEvent(new StudentCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        // associated web page of a student"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        URL expectedStudentUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getAddress().urlstyle());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        //waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudentUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":41}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredStudentList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":122}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.AMY;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BOB;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        Index index \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, index, editedStudent);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        /* Case: undo editing the last student in the list -\u003e last student restored */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        /* Case: redo editing the last student in the list -\u003e last student edited again */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        model.updateStudent("},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"                getModel().getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()), editedStudent);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        /* Case: edit a student with new values same as existing values -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        index \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        Student studentToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(studentToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, index, editedStudent);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        index \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(studentToEdit).withTags().build();"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, index, editedStudent);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, edit index within bounds of address book and student list -\u003e edited */"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        index \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        studentToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(studentToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, index, editedStudent);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, edit index within bounds of address book but out of bounds of student list"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        /* --------------------- Performing edit operation while a student card is selected ------------------------- */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        /* Case: selects first card in the student list, edit a student -\u003e edited, card selection remains unchanged but"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        showAllStudents();"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"        index \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        selectStudent(index);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"        // browser\u0027s url is updated to reflect the new student\u0027s name"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased(),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"},{"lineNumber":158,"author":{"gitID":"yapni"},"content":"                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"},{"lineNumber":162,"author":{"gitID":"yapni"},"content":"                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"},{"lineNumber":170,"author":{"gitID":"yapni"},"content":"                        + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"},{"lineNumber":174,"author":{"gitID":"yapni"},"content":"                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"yapni"},"content":""},{"lineNumber":176,"author":{"gitID":"yapni"},"content":"        /* Case: edit a student with new values same as another student\u0027s values -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"yapni"},"content":"        executeCommand(StudentUtil.getAddCommand(BOB));"},{"lineNumber":178,"author":{"gitID":"yapni"},"content":"        assertTrue(getModel().getAddressBook().getStudentList().contains(BOB));"},{"lineNumber":179,"author":{"gitID":"yapni"},"content":"        index \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":180,"author":{"gitID":"yapni"},"content":"        assertFalse(getModel().getFilteredStudentList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":183,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"yapni"},"content":"        /* Case: edit a student with new values same as another student\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"yapni"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Student, Index)} except that"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":195,"author":{"gitID":"yapni"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Student, Index)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent) {"},{"lineNumber":198,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, toEdit, editedStudent, null);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"     * 2. Asserts that the model related components are updated to reflect the student at index {@code toEdit} being"},{"lineNumber":205,"author":{"gitID":"yapni"},"content":"     * updated to values specified {@code editedStudent}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent,"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"yapni"},"content":"            expectedModel.updateStudent("},{"lineNumber":214,"author":{"gitID":"yapni"},"content":"                    expectedModel.getFilteredStudentList().get(toEdit.getZeroBased()), editedStudent);"},{"lineNumber":215,"author":{"gitID":"yapni"},"content":"            expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":216,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException | StudentNotFoundException e) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":218,"author":{"gitID":"yapni"},"content":"                    \"editedStudent is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":222,"author":{"gitID":"yapni"},"content":"                String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent), expectedSelectedCardIndex);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":251,"author":{"gitID":"yapni"},"content":"        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            // assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":82,"-":200}},{"path":"src/test/java/seedu/address/ui/StudentListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalStudents;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStudent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentCardHandle;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class StudentListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    private static final ObservableList\u003cStudent\u003e TYPICAL_STUDENTS \u003d"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"            FXCollections.observableList(getTypicalStudents());"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_STUDENT);"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private StudentListPanelHandle studentListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        StudentListPanel studentListPanel \u003d new StudentListPanel(TYPICAL_STUDENTS);"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        uiPartRule.setUiPart(studentListPanel);"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        studentListPanelHandle \u003d new StudentListPanelHandle(getChildNode(studentListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"                StudentListPanelHandle.STUDENT_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_STUDENTS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            studentListPanelHandle.navigateToCard(TYPICAL_STUDENTS.get(i));"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            Student expectedStudent \u003d TYPICAL_STUDENTS.get(i);"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            StudentCardHandle actualCard \u003d studentListPanelHandle.getStudentCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            assertCardDisplaysStudent(expectedStudent, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        StudentCardHandle expectedCard \u003d studentListPanelHandle.getStudentCardHandle(INDEX_SECOND_STUDENT"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"                .getZeroBased());"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        StudentCardHandle selectedCard \u003d studentListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":35,"-":24}},{"path":"src/test/java/seedu/address/commons/core/index/IndexTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertCreateOneBasedFailure(0);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCreateZeroBasedFailure(-1);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidZeroBasedIndex, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidOneBasedIndex, false);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            if (isZeroBased) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                Index.fromZeroBased(invalidIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                Index.fromOneBased(invalidIndex);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            fail(\"The expected IndexOutOfBoundsException was not thrown.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException ie) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            // expected behaviour"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        assertFalse(fifthStudentIndex.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        assertFalse(fifthStudentIndex.equals(5.0f));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":86}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.storage.XmlAdaptedStudent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    private static final File MISSING_STUDENT_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingStudentField.xml\");"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    private static final File INVALID_STUDENT_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidStudentField.xml\");"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    private static final File VALID_STUDENT_FILE \u003d new File(TEST_DATA_FOLDER + \"validStudent.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    private static final String VALID_SUBJECT \u003d \"English\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        assertEquals(9, dataFromFile.getStudentList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    public void xmlAdaptedStudentFromFile_fileWithMissingStudentField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"                MISSING_STUDENT_FIELD_FILE, XmlAdaptedStudentWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent("},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent, actualStudent);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    public void xmlAdaptedStudentFromFile_fileWithInvalidStudentField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"                INVALID_STUDENT_FIELD_FILE, XmlAdaptedStudentWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent("},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent, actualStudent);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"    public void xmlAdaptedStudentFromFile_fileWithValidStudent_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"                VALID_STUDENT_FILE, XmlAdaptedStudentWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent("},{"lineNumber":102,"author":{"gitID":"samuelloh"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent, actualStudent);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"                builder.withStudent(new StudentBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedStudent}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"    @XmlRootElement(name \u003d \"student\")"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"    private static class XmlAdaptedStudentWithRootElement extends XmlAdaptedStudent {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":25,"samuelloh":4,"-":118}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_LIST_ALL, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public void getFilteredStudentsList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        logic.getFilteredStudentList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"-":119}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_STUDENT));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":2,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentUtil;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        Student student \u003d new StudentBuilder().build();"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assertEquals(new AddCommand(student), command);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        Student student \u003d new StudentBuilder().build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"                + StudentUtil.getStudentDetails(student));"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        assertEquals(new AddCommand(student), command);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_STUDENT), command);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        Student student \u003d new StudentBuilder().build();"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"                + INDEX_FIRST_STUDENT.getOneBased() + \" \" + StudentUtil.getStudentDetails(student));"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_STUDENT, descriptor), command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"    public void parseCommand_findTag() throws Exception {"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"owesMoney\");"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"        FindTagCommand command \u003d (FindTagCommand) parser.parseCommand("},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"                FindTagCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"        assertEquals(new FindTagCommand(new TagContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -f\") instanceof ListCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_STUDENT), command);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":21,"demitycho":10,"-":129}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_STUDENT));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_SECOND_STUDENT;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_THIRD_STUDENT;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"                .build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":163,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":170,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_FIRST_STUDENT;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":189,"author":{"gitID":"yapni"},"content":"                .build();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":196,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_THIRD_STUDENT;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":28,"-":184}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":239}},{"path":"src/test/java/seedu/address/logic/parser/FindTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"public class FindTagCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    private FindTagCommandParser parser \u003d new FindTagCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"        assertParseFailure("},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"                parser, \"     \","},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        FindTagCommand expectedFindTagCommand \u003d"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"owesMoney\")));"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        assertParseSuccess(parser, \"friends owesMoney\", expectedFindTagCommand);"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        assertParseSuccess(parser, \" \\n friends \\n \\t owesMoney  \\t\", expectedFindTagCommand);"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":25,"-":11}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROGRAMMING_LANGUAGE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROGRAMMING_LANGUAGE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROGRAMMING_LANGUAGE_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        Student expectedStudent \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        // multiple subjects - last programmingLanguage accepted"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"                new AddCommand(expectedStudent));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        Student expectedStudentMultipleTags \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"                .withProgrammingLanguage(VALID_PROGRAMMING_LANGUAGE_BOB)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"                new AddCommand(expectedStudentMultipleTags));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        Student expectedStudent \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY, new AddCommand(expectedStudent));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":107,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, expectedMessage);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":111,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, expectedMessage);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, expectedMessage);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, expectedMessage);"},{"lineNumber":121,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        // missing programmingLanguage prefix"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"                + VALID_PROGRAMMING_LANGUAGE_BOB, expectedMessage);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"                + VALID_PROGRAMMING_LANGUAGE_BOB, expectedMessage);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":154,"author":{"gitID":"yapni"},"content":"        // invalid programmingLanguage"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"                + INVALID_PROGRAMMING_LANGUAGE_DESC + TAG_DESC_HUSBAND + VALID_TAG_FRIEND,"},{"lineNumber":157,"author":{"gitID":"yapni"},"content":"                ProgrammingLanguage.MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":45,"samuelloh":10,"-":113}},{"path":"src/test/java/seedu/address/logic/commands/EditStudentDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"public class EditStudentDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"                .withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":10,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    private ListCommand listCommandAll;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    private ListCommand listCommandFavOnly;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        listCommandAll \u003d new ListCommand(false);"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        listCommandAll.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        listCommandFavOnly \u003d new ListCommand(true);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        listCommandFavOnly.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(listCommandAll, model, ListCommand.MESSAGE_SUCCESS_LIST_ALL, expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(listCommandAll, model, ListCommand.MESSAGE_SUCCESS_LIST_ALL, expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public void execute_listIsFilterd_showsFavouritesOnly() {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        expectedModel.updateFilteredStudentList(Model.PREDICATE_SHOW_FAVOURITE_STUDENTS);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(listCommandFavOnly, model, ListCommand.MESSAGE_SUCCESS_LIST_FAVOURITES, expectedModel);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":19,"-":36}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder().build();"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_STUDENT, descriptor);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedStudent);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastStudent, descriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(lastStudent, editedStudent);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_STUDENT, new EditStudentDescriptor());"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_STUDENT,"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedStudent);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateStudentUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_STUDENT, descriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateStudentFilteredList_failure() {"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        // edit student in filtered list into a duplicate in address book"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"        Student studentInList \u003d model.getAddressBook().getStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_STUDENT,"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"                new EditStudentDescriptorBuilder(studentInList).build());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"    public void execute_invalidStudentIndexUnfilteredList_failure() {"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"    public void execute_invalidStudentIndexFilteredList_failure() {"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder().build();"},{"lineNumber":159,"author":{"gitID":"yapni"},"content":"        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":160,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_STUDENT, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"yapni"},"content":"        // edit -\u003e first student edited"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"yapni"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"yapni"},"content":"        // redo -\u003e same first student edited again"},{"lineNumber":172,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":182,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"yapni"},"content":"     * 1. Edits a {@code Student} from a filtered list."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":196,"author":{"gitID":"yapni"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited student in the"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":198,"author":{"gitID":"yapni"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the student object regardless of indexing."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"yapni"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameStudentEdited() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":205,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder().build();"},{"lineNumber":206,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"},{"lineNumber":207,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_STUDENT, descriptor);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_SECOND_STUDENT);"},{"lineNumber":211,"author":{"gitID":"yapni"},"content":"        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":212,"author":{"gitID":"yapni"},"content":"        // edit -\u003e edits second student in unfiltered student list / first student in filtered student list"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"yapni"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":220,"author":{"gitID":"yapni"},"content":"        assertNotEquals(model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()), studentToEdit);"},{"lineNumber":221,"author":{"gitID":"yapni"},"content":"        // redo -\u003e edits same second student in unfiltered student list"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":227,"author":{"gitID":"yapni"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_STUDENT, DESC_AMY);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":230,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"},{"lineNumber":231,"author":{"gitID":"yapni"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_STUDENT, copyDescriptor);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"yapni"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_STUDENT, DESC_AMY)));"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":251,"author":{"gitID":"yapni"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_STUDENT, DESC_BOB)));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"yapni"},"content":"    private EditCommand prepareCommand(Index index, EditCommand.EditStudentDescriptor descriptor) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":84,"-":178}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        expectedModel.deleteStudent(studentToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        expectedModel.deleteStudent(studentToDelete);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        showNoStudent(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        // delete -\u003e first student deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all studentFs"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        // redo -\u003e same first student deleted again"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        expectedModel.deleteStudent(studentToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"     * 1. Deletes a {@code Student} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted student in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the student object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameStudentDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_SECOND_STUDENT);"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        // delete -\u003e deletes second student in unfiltered student list / first student in filtered student list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        expectedModel.deleteStudent(studentToDelete);"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"        assertNotEquals(studentToDelete, model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"        // redo -\u003e deletes same second student in unfiltered student list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":154,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_STUDENT);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"yapni"},"content":"    private void showNoStudent(Model model) {"},{"lineNumber":190,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"yapni"},"content":"        assertTrue(model.getFilteredStudentList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":48,"-":146}},{"path":"src/test/java/seedu/address/logic/commands/FavouriteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class FavouriteCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        Student favouritedTargetStudent \u003d new StudentBuilder(targetStudent).withFavourite(true).build();"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        FavouriteCommand favouriteCommand \u003d prepareCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(FavouriteCommand.MESSAGE_SUCCESS, favouritedTargetStudent);"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(targetStudent, favouritedTargetStudent);"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(favouriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        FavouriteCommand favouriteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(favouriteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    private FavouriteCommand prepareCommand(Index index) {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(index);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        favouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        return favouriteCommand;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":27,"-":24}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public void execute_newStudent_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        Student validStudent \u003d new StudentBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        expectedModel.addStudent(validStudent);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(validStudent, model), model,"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateStudent_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        Student studentInList \u003d model.getAddressBook().getStudentList().get(0);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(studentInList, model), model, AddCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code student} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    private AddCommand prepareCommand(Student student, Model model) {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        AddCommand command \u003d new AddCommand(student);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":14,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":6,"-":51}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public static final String VALID_PROGRAMMING_LANGUAGE_AMY \u003d \"Java\";"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public static final String VALID_PROGRAMMING_LANGUAGE_BOB \u003d \"Java\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a student"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    public static final String PROGRAMMING_LANGUAGE_DESC_AMY \u003d \" \" + PREFIX_PROGRAMMING_LANGUAGE"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"            + VALID_PROGRAMMING_LANGUAGE_AMY;"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    public static final String PROGRAMMING_LANGUAGE_DESC_BOB \u003d \" \" + PREFIX_PROGRAMMING_LANGUAGE"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"            + VALID_PROGRAMMING_LANGUAGE_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    public static final String INVALID_PROGRAMMING_LANGUAGE_DESC \u003d \" \""},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_PROGRAMMING_LANGUAGE + \"\\t\"; // \u0027\\t\u0027 not allowed in Programming Language"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"    public static final EditCommand.EditStudentDescriptor DESC_AMY;"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    public static final EditCommand.EditStudentDescriptor DESC_BOB;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"                .withProgrammingLanguage(VALID_PROGRAMMING_LANGUAGE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"                .withProgrammingLanguage(VALID_PROGRAMMING_LANGUAGE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"                .build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"     * - the address book and the filtered student list in the {@code actualModel} remain unchanged"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"    public static void showStudentAtIndex(Model model, Index targetIndex) {"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        assertEquals(1, model.getFilteredStudentList().size());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"     * Deletes the first student in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"    public static void deleteFirstStudent(Model model) {"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"        Student firstStudent \u003d model.getFilteredStudentList().get(0);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"            model.deleteStudent(firstStudent);"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Student in filtered list must exist in model.\", pnfe);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":36,"samuelloh":1,"-":130}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        // undo() should cause the model\u0027s filtered list to show all students"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        // redo() should cause the model\u0027s filtered list to show all students"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"     * Deletes the first student in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"            Student studentToDelete \u003d model.getFilteredStudentList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"                model.deleteStudent(studentToDelete);"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"            } catch (StudentNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"                fail(\"Impossible: studentToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":17,"-":51}},{"path":"src/test/java/seedu/address/logic/commands/UnfavouriteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class UnfavouriteCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        Student unfavouriteTargetStudent \u003d new StudentBuilder(targetStudent).withFavourite(false).build();"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d prepareCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(UnfavouriteCommand.MESSAGE_SUCCESS, unfavouriteTargetStudent);"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(targetStudent, unfavouriteTargetStudent);"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(unfavouriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(unfavouriteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    private UnfavouriteCommand prepareCommand(Index index) {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d new UnfavouriteCommand(index);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        unfavouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        return unfavouriteCommand;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":27,"-":23}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_STUDENT);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":8,"-":50}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.CARL;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ELLE;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.FIONA;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    public void execute_zeroKeywords_noStudentFound() {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(MESSAGE_STUDENT_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    public void execute_multipleKeywords_multipleStudentsFound() {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(MESSAGE_STUDENT_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"     *     - the {@code FilteredList\u003cStudent\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cStudent\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedList, model.getFilteredStudentList());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":15,"-":83}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        Index lastStudentIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        assertExecutionSuccess(INDEX_FIRST_STUDENT);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        assertExecutionSuccess(INDEX_THIRD_STUDENT);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        assertExecutionSuccess(lastStudentIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        assertExecutionSuccess(INDEX_FIRST_STUDENT);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_STUDENT;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_STUDENT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_STUDENT);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_STUDENT_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":22,"-":119}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":100}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public void constructor_nullStudent_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        Student validStudent \u003d new StudentBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        CommandResult commandResult \u003d getAddCommandForStudent(validStudent, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateStudent_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateStudentException();"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        Student validStudent \u003d new StudentBuilder().build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        getAddCommandForStudent(validStudent, modelStub).execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"     * Generates a new AddCommand with the details of the given student."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"    private AddCommand getAddCommandForStudent(Student student, Model model) {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        AddCommand command \u003d new AddCommand(student);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        public void addStudent(Student student) throws DuplicateStudentException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        public void deleteStudent(Student target) throws StudentNotFoundException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"        public void updateStudent(Student target, Student editedStudent)"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"                throws DuplicateStudentException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":""},{"lineNumber":147,"author":{"gitID":"samuelloh"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"samuelloh"},"content":"        public void displayStudentDetailsOnBrowserPanel(Student target) throws StudentNotFoundException {"},{"lineNumber":149,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":"        public void addLesson(Student student, Day day, Time start, Time end)"},{"lineNumber":154,"author":{"gitID":"demitycho"},"content":"                throws DuplicateLessonException, StudentNotFoundException, InvalidLessonTimeSlotException {"},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":158,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"demitycho"},"content":"        public Schedule getSchedule() {"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":161,"author":{"gitID":"demitycho"},"content":"            return null;"},{"lineNumber":162,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"     * A Model stub that always throw a DuplicateStudentException when trying to add a student."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"yapni"},"content":"    private class ModelStubThrowingDuplicateStudentException extends ModelStub {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"yapni"},"content":"        public void addStudent(Student student) throws DuplicateStudentException {"},{"lineNumber":171,"author":{"gitID":"yapni"},"content":"            throw new DuplicateStudentException();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"yapni"},"content":"     * A Model stub that always accept the student being added."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"yapni"},"content":"    private class ModelStubAcceptingStudentAdded extends ModelStub {"},{"lineNumber":184,"author":{"gitID":"yapni"},"content":"        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitID":"yapni"},"content":"        public void addStudent(Student student) throws DuplicateStudentException {"},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"            requireNonNull(student);"},{"lineNumber":189,"author":{"gitID":"yapni"},"content":"            studentsAdded.add(student);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":39,"samuelloh":7,"demitycho":14,"-":138}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.HOON;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.IDA;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    public void readAddressBook_invalidStudentAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        readAddressBook(\"invalidStudentAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    public void readAddressBook_invalidAndValidStudentAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        readAddressBook(\"invalidAndValidStudentAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        original.addStudent(HOON);"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        original.removeStudent(ALICE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        original.addStudent(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":11,"-":114}},{"path":"src/test/java/seedu/address/model/student/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":40}},{"path":"src/test/java/seedu/address/model/student/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":40}},{"path":"src/test/java/seedu/address/model/student/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":61}},{"path":"src/test/java/seedu/address/model/student/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":36}},{"path":"src/test/java/seedu/address/logic/commands/FindTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"public class FindTagCommandTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        FindTagCommand findFirstTagCommand \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        FindTagCommand findSecondTagCommand \u003d new FindTagCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        assertTrue(findFirstTagCommand.equals(findFirstTagCommand));"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"        FindTagCommand findFirstCommandCopy \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        assertTrue(findFirstTagCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"        assertFalse(findFirstTagCommand.equals(1));"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        assertFalse(findFirstTagCommand.equals(null));"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        assertFalse(findFirstTagCommand.equals(findSecondTagCommand));"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    public void execute_zeroKeywords_noStudentFound() {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(MESSAGE_STUDENT_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        FindTagCommand command \u003d prepareCommand(\" \");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    public void execute_multipleKeywords_multipleStudentsFound() {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(MESSAGE_STUDENT_LISTED_OVERVIEW, 1);"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"        FindTagCommand command \u003d prepareCommand(\"owesMoney\");"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"    private FindTagCommand prepareCommand(String userInput) {"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        FindTagCommand command \u003d"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"     *     - the {@code FilteredList\u003cStudent\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(FindTagCommand command, String expectedMessage, List\u003cStudent\u003e expectedList) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedList, model.getFilteredStudentList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":12,"demitycho":38,"-":46}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.TypicalStudents;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    private static final File TYPICAL_STUDENTS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalStudentAddressBook.xml\");"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    private static final File INVALID_STUDENT_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidStudentAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public void toModelType_typicalStudentsFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_STUDENTS_FILE,"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        AddressBook typicalStudentsAddressBook \u003d TypicalStudents.getTypicalAddressBook();"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        assertEquals(addressBookFromFile, typicalStudentsAddressBook);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_STUDENT_FILE,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":9,"-":42}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.AMY;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        modelManager.getFilteredStudentList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withStudent(AMY).withStudent(BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public void deleteTag_tagUsedByMultipleStudents_tagRemoved() throws Exception {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withStudent(AMY).withStudent(BOB).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        Student amyWithoutFriendTag \u003d new StudentBuilder(AMY).withTags().build();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        Student bobWithoutFriendTag \u003d new StudentBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withStudent(amyWithoutFriendTag)"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"                .withStudent(bobWithoutFriendTag).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withStudent(ALICE).withStudent(BENSON).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":20,"-":81}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.AMY;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BOB;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withStudent(BOB)"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"            .withStudent(AMY).build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        assertEquals(Collections.emptyList(), addressBook.getStudentList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    public void resetData_withDuplicateStudents_throwsAssertionError() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newStudents, newTags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        addressBook.getStudentList().remove(0);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"    public void updateStudent_detailsChanged_studentsAndTagsListUpdated() throws Exception {"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withStudent(BOB).build();"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        addressBookUpdatedToAmy.updateStudent(BOB, AMY);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withStudent(AMY).build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void removeTag_nonExistentTag_addressBookUnchanged() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withStudent(BOB).withStudent(AMY).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    public void removeTag_tagUsedByMultipleStudents_tagRemoved() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        Student amyWithoutFriendTag \u003d new StudentBuilder(AMY).withTags().build();"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        Student bobWithoutFriendTag \u003d new StudentBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withStudent(bobWithoutFriendTag)"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"                .withStudent(amyWithoutFriendTag).build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"     * A stub ReadOnlyAddressBook whose students and tags lists can violate interface constraints."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        AddressBookStub(Collection\u003cStudent\u003e students, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"            this.students.setAll(students);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        public ObservableList\u003cStudent\u003e getStudentList() {"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"            return students;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":30,"-":104}},{"path":"src/test/java/seedu/address/model/student/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":10,"-":65}},{"path":"src/test/java/seedu/address/model/UniqueStudentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.UniqueStudentList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class UniqueStudentListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"        uniqueStudentList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":15}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withStudent(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Student} to the {@code AddressBook} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public AddressBookBuilder withStudent(Student student) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"            addressBook.addStudent(student);"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException dpe) {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"            throw new IllegalArgumentException(\"student is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":8,"-":45}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"    public static final Index INDEX_FIRST_STUDENT \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    public static final Index INDEX_SECOND_STUDENT \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    public static final Index INDEX_THIRD_STUDENT \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/StudentUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":" * A utility class for Student."},{"lineNumber":15,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"public class StudentUtil {"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     * Returns an add command string for adding the {@code student}."},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public static String getAddCommand(Student student) {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     * Returns the part of command string for the given {@code student}\u0027s details."},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public static String getStudentDetails(Student student) {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_PHONE + student.getPhone().value + \" \");"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_ADDRESS + student.getAddress().value + \" \");"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_PROGRAMMING_LANGUAGE + student.getProgrammingLanguage().programmingLanguage + \" \");"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        student.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":26,"-":14}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * Returns the middle index of the student in the {@code model}\u0027s student list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        return Index.fromOneBased(model.getAddressBook().getStudentList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"     * Returns the last index of the student in the {@code model}\u0027s student list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        return Index.fromOneBased(model.getAddressBook().getStudentList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     * Returns the student in the {@code model}\u0027s student list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public static Student getStudent(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        return model.getAddressBook().getStudentList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":8,"-":46}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedStudentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.storage.XmlAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"public class XmlAdaptedStudentTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    private static final String INVALID_SUBJECT \u003d \" \";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    private static final String VALID_SUBJECT \u003d BENSON.getProgrammingLanguage().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(BENSON);"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        assertEquals(BENSON, student.toModelType());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"                new XmlAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"                VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"                new XmlAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"                VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"                VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":103,"author":{"gitID":"samuelloh"},"content":"                VALID_SUBJECT, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"samuelloh"},"content":"    public void toModelType_invalidSubject_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":112,"author":{"gitID":"samuelloh"},"content":"                        INVALID_SUBJECT, VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d ProgrammingLanguage.MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS;"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":117,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"    public void toModelType_nullSubject_throwsIllegalValueException() {"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":120,"author":{"gitID":"samuelloh"},"content":"                null, VALID_TAGS);"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ProgrammingLanguage.class.getSimpleName());"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":123,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, invalidTags);"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, student::toModelType);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":42,"samuelloh":15,"-":77}},{"path":"src/test/java/guitests/guihandles/StudentCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * Provides a handle to a student card in the student list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class StudentCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public StudentCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"    public List\u003cString\u003e getTagsColour(String tag) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"                .findFirst()"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"samuelloh":7,"-":70}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    private final StudentListPanelHandle studentListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        studentListPanel \u003d new StudentListPanelHandle(getChildNode(StudentListPanelHandle.STUDENT_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public StudentListPanelHandle getStudentListPanel() {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        return studentListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalStudents.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROGRAMMING_LANGUAGE_AMY;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROGRAMMING_LANGUAGE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":" * A utility class containing a list of {@code Student} objects to be used in tests."},{"lineNumber":26,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"public class TypicalStudents {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"            .withTags(\"friends\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"            .withTags(\"owesMoney\", \"friends\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    // Manually added"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            .withProgrammingLanguage((VALID_PROGRAMMING_LANGUAGE_AMY)).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"            .withProgrammingLanguage(VALID_PROGRAMMING_LANGUAGE_BOB).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches name MEIER"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"    public static final String TAG_MATCHING_OWESMONEY \u003d \"owesMoney\"; // A keyword that matches tag owesMoney"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    private TypicalStudents() {} // prevents instantiation"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"     * Returns an {@code AddressBook} with all the typical students."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        for (Student student : getTypicalStudents()) {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"            try {"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"                ab.addStudent(student);"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            } catch (DuplicateStudentException e) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    public static List\u003cStudent\u003e getTypicalStudents() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":46,"demitycho":2,"-":38}},{"path":"src/test/java/seedu/address/testutil/StudentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Student objects."},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"public class StudentBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    public static final String DEFAULT_PROGRAMMING_LANGUAGE \u003d \"Java\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public static final String DEFAULT_FAVOURITE \u003d \"false\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    private ProgrammingLanguage programmingLanguage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private Favourite favourite;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public StudentBuilder() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d new ProgrammingLanguage(DEFAULT_PROGRAMMING_LANGUAGE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        favourite \u003d new Favourite(DEFAULT_FAVOURITE);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     * Initializes the StudentBuilder with the data of {@code studentToCopy}."},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public StudentBuilder(Student studentToCopy) {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        name \u003d studentToCopy.getName();"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        phone \u003d studentToCopy.getPhone();"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        email \u003d studentToCopy.getEmail();"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        address \u003d studentToCopy.getAddress();"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d studentToCopy.getProgrammingLanguage();"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        favourite \u003d studentToCopy.getFavourite();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Name} of the {@code Student} that we are building."},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withName(String name) {"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withTags(String ... tags) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Address} of the {@code Student} that we are building."},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Phone} of the {@code Student} that we are building."},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withPhone(String phone) {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Email} of the {@code Student} that we are building."},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withEmail(String email) {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":""},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Favourite} of the {@code Student} that we are building."},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withFavourite(boolean val) {"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d new Favourite(val);"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":""},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"     * Sets the {@code programminglanguage} of the {@code Student} that we are building."},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withProgrammingLanguage(String progLang) {"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d new ProgrammingLanguage(progLang);"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":""},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"    public Student build() {"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        return new Student(name, phone, email, address, programmingLanguage, tags, favourite);"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":""},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":85,"-":35}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.model.StudentInfoDisplayEvent;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"    public static final String EXAMPLE_STUDENT_PAGE \u003d \"ExampleStudentPage.html\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            \"https://www.google.com.sg/maps/place/\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    private void loadStudentPage(Student student) {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        Address location \u003d student.getAddress();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String append \u003d location.urlstyle();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        loadPage(SEARCH_PAGE_URL + append);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"    private void loadStudentInfoPage(Student student) {"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"        URL exampleStudentPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + EXAMPLE_STUDENT_PAGE);"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"        loadPage(exampleStudentPage.toExternalForm());"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    private void handleStudentPanelSelectionChangedEvent(StudentPanelSelectionChangedEvent event) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        loadStudentPage(event.getNewSelection().student);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"    private void handleStudentInfoDisplayEvent(StudentInfoDisplayEvent event) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"        loadStudentInfoPage(event.getStudent());"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"samuelloh":14,"-":68}},{"path":"src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * A utility class to help with building EditStudentDescriptor objects."},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class EditStudentDescriptorBuilder {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    private EditCommand.EditStudentDescriptor descriptor;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditCommand.EditStudentDescriptor();"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        this.descriptor \u003d new EditCommand.EditStudentDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder(Student student) {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditCommand.EditStudentDescriptor();"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        descriptor.setName(student.getName());"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        descriptor.setPhone(student.getPhone());"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        descriptor.setEmail(student.getEmail());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        descriptor.setAddress(student.getAddress());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        descriptor.setProgrammingLanguage(student.getProgrammingLanguage());"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        descriptor.setTags(student.getTags());"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withName(String name) {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withPhone(String phone) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withEmail(String email) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Address} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withAddress(String address) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     * Sets the {@code programminglanguage} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withProgrammingLanguage(String progLanguage) {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        descriptor.setProgrammingLanguage(new ProgrammingLanguage(progLanguage));"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"     * that we are building."},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withTags(String... tags) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"    public EditCommand.EditStudentDescriptor build() {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        return descriptor;"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":71,"samuelloh":1,"-":26}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    private StudentListPanel studentListPanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    private StackPane studentListPanelPlaceholder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":94,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":95,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":96,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":102,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"yapni"},"content":"    public StudentListPanel getStudentListPanel() {"},{"lineNumber":185,"author":{"gitID":"yapni"},"content":"        return this.studentListPanel;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":6,"-":191}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_INVALID_MILESTONE_DISPLAYED_INDEX \u003d \"The milestone index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_STUDENT_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_INVALID_START_END_TIME \u003d \"End time cannot be chronologically \""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"                                                                    + \"smaller than the Start time!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"demitycho":2,"-":11}},{"path":"src/main/java/seedu/address/ui/StudentCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * An UI component that displays information of a {@code Student}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class StudentCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private static final String FXML \u003d \"StudentListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    private static final String[] TAG_COLOURS \u003d"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"        {\"teal\", \"red\", \"blue\", \"orange\", \"yellow\", \"cyan\", \"gold\", \"khaki\", \"green\", \"olive\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public final Student student;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    private Label programmingLanguage;"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    private Label dashboard;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public StudentCard(Student student, int displayedIndex) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        this.student \u003d student;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        name.setText(student.getName().fullName);"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        if (student.isFavourite()) {"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"            name.setStyle(\"-fx-text-fill: #f4b342\");"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        phone.setText(student.getPhone().value);"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        address.setText(student.getAddress().value);"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        email.setText(student.getEmail().value);"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        programmingLanguage.setText(student.getProgrammingLanguage().programmingLanguage);"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        dashboard.setText(student.getDashboard().toString());"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        setupTags(student);"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    private void setupTags(Student student) {"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        student.getTags().forEach(tag -\u003e {"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"            tagLabel.getStyleClass().add(getTagColourFor(tag.tagName));"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"     * @param tagName"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"     * @return colour for {@code tagName}\u0027s label"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"    private String getTagColourFor(String tagName) {"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"        return TAG_COLOURS[Math.abs(tagName.hashCode()) % TAG_COLOURS.length];"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        if (!(other instanceof StudentCard)) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        StudentCard card \u003d (StudentCard) other;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 student.equals(card.student);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":25,"samuelloh":21,"-":55}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Indicates a request to jump to the list of students"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public JumpToListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":21}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"        return \"number of students \" + data.getStudentList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":18}},{"path":"src/test/java/guitests/guihandles/StudentListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.ui.StudentCard;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * Provides a handle for {@code StudentListPanel} containing the list of {@code StudentCard}."},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class StudentListPanelHandle extends NodeHandle\u003cListView\u003cStudentCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public static final String STUDENT_LIST_VIEW_ID \u003d \"#studentListView\";"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    private Optional\u003cStudentCard\u003e lastRememberedSelectedStudentCard;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public StudentListPanelHandle(ListView\u003cStudentCard\u003e studentListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        super(studentListPanelNode);"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"     * Returns a handle to the selected {@code StudentCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public StudentCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e studentList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        if (studentList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Student list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        return new StudentCardHandle(studentList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"     * Navigates the listview to display and select the student."},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    public void navigateToCard(Student student) {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        Optional\u003cStudentCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.student.equals(student)).findFirst();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"            throw new IllegalArgumentException(\"Student does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"     * Returns the student card handle of a student associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    public StudentCardHandle getStudentCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        return getStudentCardHandle(getRootNode().getItems().get(index).student);"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"     * Returns the {@code StudentCardHandle} of the specified {@code student} in the list."},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    public StudentCardHandle getStudentCardHandle(Student student) {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        Optional\u003cStudentCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"                .filter(card -\u003e card.student.equals(student))"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"                .map(card -\u003e new StudentCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Student does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":""},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"     * Selects the {@code StudentCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"     * Remembers the selected {@code StudentCard} in the list."},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    public void rememberSelectedStudentCard() {"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":""},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"            lastRememberedSelectedStudentCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"            lastRememberedSelectedStudentCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":""},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"     * Returns true if the selected {@code StudentCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"     * {@code rememberSelectedStudentCard()} call."},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"    public boolean isSelectedStudentCardChanged() {"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":""},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"            return lastRememberedSelectedStudentCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"            return !lastRememberedSelectedStudentCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"                    || !lastRememberedSelectedStudentCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":77,"-":57}},{"path":"src/main/java/seedu/address/ui/StudentListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":" * Panel containing the list of students."},{"lineNumber":22,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"public class StudentListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    private static final String FXML \u003d \"StudentListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private ListView\u003cStudentCard\u003e studentListView;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        setConnections(studentList);"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    private void setConnections(ObservableList\u003cStudent\u003e studentList) {"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        ObservableList\u003cStudentCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"                studentList, (student) -\u003e new StudentCard(student, studentList.indexOf(student) + 1));"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        studentListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        studentListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"                        logger.fine(\"Selection in student list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"                        raise(new StudentPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"     * Scrolls to the {@code StudentCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"            studentListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"            studentListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code StudentCard}."},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"    class StudentListViewCell extends ListCell\u003cStudentCard\u003e {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        protected void updateItem(StudentCard student, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"            super.updateItem(student, empty);"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":""},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"            if (empty || student \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"                setGraphic(student.getRoot());"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":53,"-":35}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    /** Returns an unmodifiable view of the filtered list of students */"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    ObservableList\u003cStudent\u003e getFilteredStudentList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"-":24}},{"path":"src/main/java/seedu/address/commons/events/model/StudentInfoDisplayEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":" *"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"public class StudentInfoDisplayEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"    private final Student student;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    public StudentInfoDisplayEvent(Student student) {"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"        this.student \u003d student;"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"        return \"Displaying full information for \" + student.getName();"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    public Student getStudent() {"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"        return student;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"}"}],"authorContributionMap":{"samuelloh":23,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/StudentPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import seedu.address.ui.StudentCard;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a selection change in the Student List Panel"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class StudentPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    private final StudentCard newSelection;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public StudentPanelSelectionChangedEvent(StudentCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public StudentCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":15,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"                        PREFIX_PROGRAMMING_LANGUAGE, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"                PREFIX_PROGRAMMING_LANGUAGE) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            ProgrammingLanguage programmingLanguage \u003d ParserUtil.parseSubject(argMultimap"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"                    .getValue(PREFIX_PROGRAMMING_LANGUAGE)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"            Student student \u003d new Student(name, phone, email, address, programmingLanguage, tagList);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"            return new AddCommand(student);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":14,"samuelloh":1,"-":55}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.AddLessonCommand;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.AddMilestoneCommand;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.FavouriteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.MoreInfoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        case AddLessonCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"            return new AddLessonCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        case AddMilestoneCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"            return new AddMilestoneCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        case AddTaskCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"            return new AddTaskCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        case FavouriteCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"            return new FavouriteCommandParser().parse(arguments);"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"        case FindTagCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"            return new FindTagCommandParser().parse(arguments);"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"        case ScheduleCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"            return new ScheduleCommand();"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        case UnfavouriteCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"            return new UnfavouriteCommandParser().parse(arguments);"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":""},{"lineNumber":117,"author":{"gitID":"samuelloh"},"content":"        case MoreInfoCommand.COMMAND_WORD:"},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"            return new MoreInfoCommandParser().parse(arguments);"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":17,"samuelloh":4,"demitycho":12,"-":92}},{"path":"src/main/java/seedu/address/logic/parser/MoreInfoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.MoreInfoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":" * Parses input arguments and creates a new MoreInfoCommand object"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"public class MoreInfoCommandParser implements Parser\u003cMoreInfoCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"     * Parses the given {@code String} of arguments in the context of the MoreInfoCommand"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"     * and returns a MoreInfoCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    public MoreInfoCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"            return new MoreInfoCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoreInfoCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":""}],"authorContributionMap":{"samuelloh":18,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/AddMilestoneCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.AddMilestoneCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * Parses input arguments and create a new AddMilestoneCommand object"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class AddMilestoneCommandParser {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMilestoneCommand"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"     * and returns an AddMilestoneCommand object for execution."},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public AddMilestoneCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        assert args !\u003d null;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_DATE, PREFIX_DESCRIPTION);"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_INDEX, PREFIX_DATE, PREFIX_DESCRIPTION)"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMilestoneCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            Index index \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_INDEX).get());"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            Date date \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_DATE).get());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            String objective \u003d argMultiMap.getValue(PREFIX_DESCRIPTION).get();"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            Milestone milestone \u003d new Milestone(date, objective);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            return new AddMilestoneCommand(index, milestone);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":38,"-":19}},{"path":"src/main/java/seedu/address/logic/parser/AddLessonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.AddLessonCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":" * Parses input arguments and creates a new AddCommandCommand object"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"public class AddLessonCommandParser implements Parser\u003cAddLessonCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"     * Parses the given {@code String} of arguments in the context of the AddLessonCommand"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     * and returns an AddLessonCommand object for execution."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    public AddLessonCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DAY, PREFIX_START_TIME, PREFIX_END_TIME);"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        Index index;"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        Day day;"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"        Time startTime;"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"        Time endTime;"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"            day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY)).get();"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"            startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME)).get();"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"            endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        //day \u003d new Day(\"mon\");"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        return new AddLessonCommand(index, day, startTime, endTime);"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":50,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"    public static final Prefix PREFIX_PROGRAMMING_LANGUAGE \u003d new Prefix(\"pl/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    public static final Prefix PREFIX_DAY \u003d new Prefix(\"d/\");"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"o/\");"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public static final Prefix PREFIX_MILESTONE_INDEX \u003d new Prefix(\"m/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"samuelloh":1,"demitycho":3,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"     * Parses a {@code String programmingLanguage} into an {@code programminglanguage}."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if the given {@code programmingLanguage} is invalid."},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"    public static ProgrammingLanguage parseSubject(String subject) throws IllegalValueException {"},{"lineNumber":129,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(subject);"},{"lineNumber":130,"author":{"gitID":"samuelloh"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"        if (!ProgrammingLanguage.isValidProgrammingLanguage(trimmedSubject)) {"},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(ProgrammingLanguage.MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"        return new ProgrammingLanguage(trimmedSubject);"},{"lineNumber":135,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":137,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"     * Parses a {@code Optional\u003cString\u003e programmingLanguage} into an {@code Optional\u003cprogramminglanguage\u003e}"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"     * if {@code programmingLanguage} is present."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"    public static Optional\u003cProgrammingLanguage\u003e parseSubject(Optional\u003cString\u003e subject) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(subject);"},{"lineNumber":144,"author":{"gitID":"samuelloh"},"content":"        return subject.isPresent() ? Optional.of(parseSubject(subject.get())) : Optional.empty();"},{"lineNumber":145,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":198,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"demitycho"},"content":"     * Parses {@code String time} into a {@code Time}."},{"lineNumber":200,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"demitycho"},"content":"    public static Time parseTime(String time) throws IllegalValueException {"},{"lineNumber":202,"author":{"gitID":"demitycho"},"content":"        requireNonNull(time);"},{"lineNumber":203,"author":{"gitID":"demitycho"},"content":"        String trimmedSubject \u003d time.trim();"},{"lineNumber":204,"author":{"gitID":"demitycho"},"content":"        if (!Time.isValidTime(trimmedSubject)) {"},{"lineNumber":205,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"demitycho"},"content":"        return new Time(trimmedSubject);"},{"lineNumber":208,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":210,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"demitycho"},"content":"     * Parses a {@code Optional\u003cString\u003e time} into an {@code Optional\u003cTime\u003e} if {@code time} is present."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"demitycho"},"content":"    public static Optional\u003cTime\u003e parseTime(Optional\u003cString\u003e time) throws IllegalValueException {"},{"lineNumber":215,"author":{"gitID":"demitycho"},"content":"        requireNonNull(time);"},{"lineNumber":216,"author":{"gitID":"demitycho"},"content":"        return time.isPresent() ? Optional.of(parseTime(time.get())) : Optional.empty();"},{"lineNumber":217,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":219,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"demitycho"},"content":"     * Parses {@code String day} into a {@code Day}."},{"lineNumber":221,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"demitycho"},"content":"    public static Day parseDay(String day) throws IllegalValueException {"},{"lineNumber":223,"author":{"gitID":"demitycho"},"content":"        requireNonNull(day);"},{"lineNumber":224,"author":{"gitID":"demitycho"},"content":"        String trimmedDay \u003d day.trim();"},{"lineNumber":225,"author":{"gitID":"demitycho"},"content":"        if (!Day.isValidDay(trimmedDay)) {"},{"lineNumber":226,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(Day.MESSAGE_DAY_CONSTRAINTS);"},{"lineNumber":227,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"demitycho"},"content":"        return new Day(trimmedDay);"},{"lineNumber":229,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":231,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"demitycho"},"content":"     * Parses a {@code Optional\u003cString\u003e day} into an {@code Optional\u003cDay\u003e} if {@code day} is present."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"demitycho"},"content":"    public static Optional\u003cDay\u003e parseDay(Optional\u003cString\u003e day) throws IllegalValueException {"},{"lineNumber":236,"author":{"gitID":"demitycho"},"content":"        requireNonNull(day);"},{"lineNumber":237,"author":{"gitID":"demitycho"},"content":"        return day.isPresent() ? Optional.of(parseDay(day.get())) : Optional.empty();"},{"lineNumber":238,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"yapni"},"content":"     * Parses a {@code String date} into a {@code Date}."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":244,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":245,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"yapni"},"content":"    public static Date parseDate(String date) throws IllegalValueException {"},{"lineNumber":247,"author":{"gitID":"yapni"},"content":"        requireNonNull(date);"},{"lineNumber":248,"author":{"gitID":"yapni"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":249,"author":{"gitID":"yapni"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":250,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":251,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"yapni"},"content":"        return new Date(trimmedDate);"},{"lineNumber":253,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"yapni"},"content":""},{"lineNumber":255,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"yapni"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDate\u003e} if {@code date} is present."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"yapni"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":260,"author":{"gitID":"yapni"},"content":"        requireNonNull(date);"},{"lineNumber":261,"author":{"gitID":"yapni"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":262,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":34,"samuelloh":12,"demitycho":42,"-":176}},{"path":"src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * Parses input arguments and create a new AddTaskCommand object"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class AddTaskCommandParser {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"     * and returns an AddTaskCommand object for execution."},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public AddTaskCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        assert args !\u003d null;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"                PREFIX_INDEX, PREFIX_MILESTONE_INDEX, PREFIX_NAME, PREFIX_DESCRIPTION);"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        if (!arePrefixesPresent(argMultiMap,"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"                PREFIX_INDEX, PREFIX_MILESTONE_INDEX, PREFIX_NAME, PREFIX_DESCRIPTION)"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            Index studentIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_INDEX).get());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            Index milestoneIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_MILESTONE_INDEX).get());"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            String name \u003d argMultiMap.getValue(PREFIX_NAME).get();"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            String description \u003d argMultiMap.getValue(PREFIX_DESCRIPTION).get();"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"            Task task \u003d new Task(name, description);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"            return new AddTaskCommand(studentIndex, milestoneIndex, task);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":40,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * Parses input arguments and creates a new ListCommand object"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class ListCommandParser {"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"     * and returns an ListCommand object for execution."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        String[] keywords \u003d args.split(\" \");"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        if (keywords.length \u003d\u003d 1) {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"            return new ListCommand(false);"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        } else if (keywords[1].matches(\"-f\")) {"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"            return new ListCommand(true);"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":19,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":" * Deletes a student identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"            + \": Deletes the student identified by the index number used in the last student listing.\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    private Student studentToDelete;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        requireNonNull(studentToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            model.deleteStudent(studentToDelete);"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS,  studentToDelete));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(this.studentToDelete, ((DeleteCommand) other).studentToDelete));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":15,"-":52}},{"path":"src/main/java/seedu/address/logic/parser/FavouriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.FavouriteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * Parses input arguments and creates a new FavouriteCommand object"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class FavouriteCommandParser implements Parser\u003cFavouriteCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the FavouriteCommand"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"     * and returns an FavouriteCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    public FavouriteCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"            return new FavouriteCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":16,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_FAVOURITE_STUDENTS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Lists all students in the address book to the user."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" -f [optional]: \""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"            + \"List all students. Use -f flag to list favourite students only.\";"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS_LIST_ALL \u003d \"Listed all students\";"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS_LIST_FAVOURITES \u003d \"Listed all favourite students\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    private final boolean isFavOnly;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public ListCommand(boolean isFavOnly) {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        this.isFavOnly \u003d isFavOnly;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        return isFavOnly ? execute_list_favourites() : execute_list_all();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"     * Execute list command when -f flag is off, i.e. list all students"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public CommandResult execute_list_all() {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        return new CommandResult(MESSAGE_SUCCESS_LIST_ALL);"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     * Execute list command when -f flag is on, i.e. list favourite students only"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public CommandResult execute_list_favourites() {"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_FAVOURITE_STUDENTS);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        return new CommandResult(MESSAGE_SUCCESS_LIST_FAVOURITES);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":30,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/FindTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":" * Parses input arguments and creates a new FindTagCommand object"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"public class FindTagCommandParser implements Parser\u003cFindTagCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTagCommand"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"     * and returns an FindTagCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    public FindTagCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        return new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":21,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"                        PREFIX_PROGRAMMING_LANGUAGE, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editStudentDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editStudentDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editStudentDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editStudentDescriptor::setAddress);"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"            ParserUtil.parseSubject(argMultimap.getValue(PREFIX_PROGRAMMING_LANGUAGE)).ifPresent("},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"                    editStudentDescriptor::setProgrammingLanguage);"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        if (!editStudentDescriptor.isAnyFieldEdited()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        return new EditCommand(index, editStudentDescriptor);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":13,"samuelloh":1,"-":69}},{"path":"src/main/java/seedu/address/logic/parser/UnfavouriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * Parses input arguments and creates a new UnfavouriteCommand object"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class UnfavouriteCommandParser implements Parser\u003cUnfavouriteCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the UnfavouriteCommand"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"     * and returns an unFavouriteCommand object for execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public UnfavouriteCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"            return new UnfavouriteCommand(index);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":15,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of students."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"     * @return summary message for students displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public static String getMessageForStudentListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        return String.format(Messages.MESSAGE_STUDENT_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":" * Adds a student to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the address book. \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_PROGRAMMING_LANGUAGE + \"PROGRAMMING LANGUAGE \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_PROGRAMMING_LANGUAGE + \"HTML \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    private final Student toAdd;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"     * Creates an AddCommand to add the specified {@code Student}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public AddCommand(Student student) {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        requireNonNull(student);"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        toAdd \u003d student;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            model.addStudent(toAdd);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":15,"samuelloh":2,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/FindTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":" * Finds and lists all students in address book whose tag contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"public class FindTagCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"findTag\";"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose tag contain any of \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"            + \"Example: \" + COMMAND_WORD + \" friend family colleague\";"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    public FindTagCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(predicate);"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        return new CommandResult(getMessageForStudentListShownSummary(model.getFilteredStudentList().size()));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"                || (other instanceof FindTagCommand // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.predicate.equals(((FindTagCommand) other).predicate)); // state check"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":4,"demitycho":20,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/FavouriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":" * Add a student to favourites"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"public class FavouriteCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"fav\";"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a student to favourites. \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Student added to favourites: %1$s\";"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    private final Index targetIndex;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    private Student studentToFavourite;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public FavouriteCommand(Index targetIndex) {"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(studentToFavourite, editedStudent);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            model.updateStudent(studentToFavourite, editedStudent);"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedStudent));"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() || targetIndex.getZeroBased() \u003c 0) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        studentToFavourite \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d createEditedStudent(studentToFavourite);"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     * Create and return a copy of the target {@Code Student} to favourite with its\u0027 Favourite attribute set to true."},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    private static Student createEditedStudent(Student target) {"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        assert target !\u003d null;"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":""},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        Name name \u003d target.getName();"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        Phone phone \u003d target.getPhone();"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        Email email \u003d target.getEmail();"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        Address address \u003d target.getAddress();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e tags \u003d target.getTags();"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        ProgrammingLanguage programmingLanguage \u003d target.getProgrammingLanguage();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        Favourite fav \u003d new Favourite(true);"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        Dashboard dashboard \u003d target.getDashboard();"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":""},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        return new Student(name, phone, email, address, programmingLanguage, tags, fav, dashboard);"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":85,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/UnfavouriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":" * Remove a Student from favourites"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"public class UnfavouriteCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"unfav\";"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Remove a student from favourites. \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Student removed from favourites: %1$s\";"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    private final Index targetIndex;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    private Student studentToUnfavourite;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public UnfavouriteCommand(Index targetIndex) {"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(studentToUnfavourite, editedStudent);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            model.updateStudent(studentToUnfavourite, editedStudent);"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedStudent));"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() || targetIndex.getZeroBased() \u003c 0) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        studentToUnfavourite \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d createEditedStudent(studentToUnfavourite);"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     * Create and return a copy of the target {@Code Student} to favourite with its\u0027 Favourite attribute set to false."},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    private static Student createEditedStudent(Student target) {"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        assert target !\u003d null;"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":""},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        Name name \u003d target.getName();"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        Phone phone \u003d target.getPhone();"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        Email email \u003d target.getEmail();"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        Address address \u003d target.getAddress();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e tags \u003d target.getTags();"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        ProgrammingLanguage programmingLanguage \u003d target.getProgrammingLanguage();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        Favourite fav \u003d new Favourite(false);"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        Dashboard dashboard \u003d target.getDashboard();"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":""},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        return new Student(name, phone, email, address, programmingLanguage, tags, fav, dashboard);"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":85,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/ScheduleCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":" * Displays the user\u0027s schedule."},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"public class ScheduleCommand extends Command {"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"schedule\";"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"            + \": Views your weekly schedule\";"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Schedule displayed\";"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    public ScheduleCommand() {}"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public CommandResult execute() {"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"        model.getSchedule().print();"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":22}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * was executed and updates the filtered student list to"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"     * show all students."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"     * Executes the command and updates the filtered student"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"     * list to show all students."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":58}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":" * Selects a student identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"            + \": Selects the student identified by the index number used in the last student listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SELECT_STUDENT_SUCCESS \u003d \"Selected Student: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_STUDENT_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":45}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":" * Edits the details of an existing student in the address book."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            + \"by the index number used in the last student listing. \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"            + \"[\" + PREFIX_PROGRAMMING_LANGUAGE + \"PROGRAMMING LANGUAGE] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    private final EditStudentDescriptor editStudentDescriptor;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    private Student studentToEdit;"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"     * @param index of the student in the filtered student list to edit"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"     * @param editStudentDescriptor details to edit the student with"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        requireNonNull(editStudentDescriptor);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"            model.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException dpe) {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        studentToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"     * edited with {@code editStudentDescriptor}."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        assert studentToEdit !\u003d null;"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        Address updatedAddress \u003d editStudentDescriptor.getAddress().orElse(studentToEdit.getAddress());"},{"lineNumber":114,"author":{"gitID":"samuelloh"},"content":"        ProgrammingLanguage updatedProgrammingLanguage \u003d editStudentDescriptor.getProgrammingLanguage()"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"                .orElse(studentToEdit.getProgrammingLanguage());"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        Favourite isFavourite \u003d studentToEdit.getFavourite();"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        Dashboard dashboard \u003d studentToEdit.getDashboard();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"        return new Student(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedProgrammingLanguage,"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"                updatedTags, isFavourite, dashboard);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor)"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(studentToEdit, e.studentToEdit);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"     * Stores the details to edit the student with. Each non-empty field value will replace the"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"     * corresponding field value of the student."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"    public static class EditStudentDescriptor {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"        private ProgrammingLanguage programmingLanguage;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"yapni"},"content":"        public EditStudentDescriptor() {}"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":159,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":160,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"            setProgrammingLanguage(toCopy.programmingLanguage);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":172,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":175,"author":{"gitID":"yapni"},"content":"                    this.programmingLanguage, this.tags);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"        public Optional\u003cProgrammingLanguage\u003e getProgrammingLanguage() {"},{"lineNumber":199,"author":{"gitID":"samuelloh"},"content":"            return Optional.ofNullable(programmingLanguage);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"yapni"},"content":"        public void setProgrammingLanguage(ProgrammingLanguage programmingLanguage) {"},{"lineNumber":211,"author":{"gitID":"yapni"},"content":"            this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":220,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":221,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":228,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":229,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":230,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":243,"author":{"gitID":"yapni"},"content":"            if (!(other instanceof EditStudentDescriptor)) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":248,"author":{"gitID":"yapni"},"content":"            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":252,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":253,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":63,"samuelloh":6,"-":188}},{"path":"src/main/java/seedu/address/logic/commands/AddLessonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":" * Adds a lesson to the schedule for a student in the address book."},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"public class AddLessonCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"addLesson\";"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson to the schedule, \""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"            + \"for a student who is in the address book. \""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"            + \"Parameters: \""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"            + \"INDEX \" + PREFIX_DAY + \" DAY \""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"            + PREFIX_START_TIME + \"START_TIME \""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"            + PREFIX_END_TIME + \"END_TIME \\n\""},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"            + PREFIX_DAY + \"mon \""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"            + PREFIX_START_TIME + \"10:00 \""},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"            + PREFIX_END_TIME + \"10:30 \";"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New lesson added for %1$s\";"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in the schedule\";"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_INVALID_TIME_SLOT \u003d \"This lesson clashes with another lesson in the schedule\";"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    private final Index index;"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    private final Day day;"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    private final Time startTime;"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    private final Time endTime;"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"    private Student studentToAddLesson;"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"     * Creates an AddLessonCommand to add the specified {@code Lesson}"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    public AddLessonCommand(Index index, Day day, Time startTime, Time endTime) {"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        requireNonNull(index);"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        requireNonNull(day);"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        requireNonNull(startTime);"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        requireNonNull(endTime);"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"        this.index \u003d index;"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"        this.day \u003d day;"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"     * TODO add model.updateSchedule();"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"     * @throws CommandException"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"            model.addLesson(studentToAddLesson, day, startTime, endTime);"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"        } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(MESSAGE_INVALID_TIME_SLOT);"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"        } catch (DuplicateLessonException dle) {"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, studentToAddLesson.getName()));"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"        } else if (startTime.compareTo(endTime) \u003e\u003d 0) {"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_START_END_TIME);"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"        studentToAddLesson \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this; // short circuit if same object"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":1,"demitycho":91,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":" * Finds and lists all students in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(predicate);"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        return new CommandResult(getMessageForStudentListShownSummary(model.getFilteredStudentList().size()));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"-":31}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        return model.getFilteredStudentList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"-":54}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the fixed temporary storage."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":47}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted student"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":61}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":82}},{"path":"src/main/java/seedu/address/logic/commands/StudentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Student objects."},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"public class StudentBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    public static final String DEFAULT_PROGRAMMING_LANGUAGE \u003d \"Java\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public static final String DEFAULT_FAVOURITE \u003d \"false\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    private ProgrammingLanguage programmingLanguage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private Favourite favourite;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public StudentBuilder() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d new ProgrammingLanguage(DEFAULT_PROGRAMMING_LANGUAGE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        favourite \u003d new Favourite(DEFAULT_FAVOURITE);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     * Initializes the StudentBuilder with the data of {@code studentToCopy}."},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public StudentBuilder(Student studentToCopy) {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        name \u003d studentToCopy.getName();"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        phone \u003d studentToCopy.getPhone();"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        email \u003d studentToCopy.getEmail();"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        address \u003d studentToCopy.getAddress();"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d studentToCopy.getProgrammingLanguage();"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        favourite \u003d studentToCopy.getFavourite();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Name} of the {@code Student} that we are building."},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withName(String name) {"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withTags(String ... tags) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Address} of the {@code Student} that we are building."},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Phone} of the {@code Student} that we are building."},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withPhone(String phone) {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Email} of the {@code Student} that we are building."},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withEmail(String email) {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":""},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Favourite} of the {@code Student} that we are building."},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withFavourite(boolean val) {"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d new Favourite(val);"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":""},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"     * Sets the {@code programminglanguage} of the {@code Student} that we are building."},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withProgrammingLanguage(String progLang) {"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d new ProgrammingLanguage(progLang);"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":""},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"    public Student build() {"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        return new Student(name, phone, email, address, programmingLanguage, tags, favourite);"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":""},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":89,"demitycho":1,"-":30}},{"path":"src/main/java/seedu/address/logic/commands/MoreInfoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":" * Displays the full information of a student on the browser panel."},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"public class MoreInfoCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    public static final String COMMAND_WORD \u003d \"moreInfo\";"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the full information and particulars of \""},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"            + \"a student identified by the index number used\""},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"            + \" in the last student listing. Also includes his/her profile picture(if one exists).\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_MOREINFO_STUDENT_SUCCESS \u003d \"Displayed full information for student: %1$s\";"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"    private Student studentToGetInfoFrom;"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"    public MoreInfoCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"            preProcessStudent();"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"            model.displayStudentDetailsOnBrowserPanel(studentToGetInfoFrom);"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        } catch (StudentNotFoundException e) {"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"        return new CommandResult((String.format(MESSAGE_MOREINFO_STUDENT_SUCCESS, studentToGetInfoFrom.getName())));"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"     * This method is called before execution of {@code MoreInfoCommand}."},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"     * Finds the target student from the last shown list of students in the StudentListPanel by its index."},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"     * @throws CommandException"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"    public void preProcessStudent() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"        studentToGetInfoFrom \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"                || (other instanceof MoreInfoCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 this.targetIndex.equals(((MoreInfoCommand) other).targetIndex) // state check"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 Objects.equals(this.studentToGetInfoFrom, ((MoreInfoCommand) other).studentToGetInfoFrom));"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":""}],"authorContributionMap":{"yapni":4,"samuelloh":44,"-":28}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    private List\u003cXmlAdaptedStudent\u003e students;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        students \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        students.addAll(src.getStudentList().stream().map(XmlAdaptedStudent::new).collect(Collectors.toList()));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"     * {@code XmlAdaptedStudent} or {@code XmlAdaptedTag}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        for (XmlAdaptedStudent p : students) {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"            addressBook.addStudent(p.toModelType());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        return students.equals(otherAb.students) \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":66}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public static Student[] getSampleStudents() {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        return new Student[] {"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"            new Student(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new ProgrammingLanguage(\"C\"),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"            new Student(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new ProgrammingLanguage(\"Java\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"            new Student(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new ProgrammingLanguage(\"JavaScript\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"            new Student(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new ProgrammingLanguage(\"Python\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"            new Student(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new ProgrammingLanguage(\"Swift\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            new Student(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new ProgrammingLanguage(\"PHP\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"            for (Student sampleStudent : getSampleStudents()) {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"                sampleAb.addStudent(sampleStudent);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate students\", e);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":25,"-":43}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"     * Returns an unmodifiable view of the students list."},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"     * This list will not contain any duplicate students."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    ObservableList\u003cStudent\u003e getStudentList();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":20}},{"path":"src/main/java/seedu/address/model/student/Favourite.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represent Student\u0027s favourite attribute i.e. whether the Student is in Favourites"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class Favourite {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    private static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d \"Favourite should be \u0027true\u0027 or \u0027false\u0027 only\";"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    public final String value;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public Favourite(boolean isFav) {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        this.value \u003d Boolean.toString(isFav);"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public Favourite(String isFav) {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        requireNonNull(isFav);"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        checkArgument(isValidBoolean(isFav), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        this.value \u003d isFav;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     * Returns true if a given string is a valid boolean string."},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private static boolean isValidBoolean(String test) {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        return test.equals(\"true\") || test.equals(\"false\");"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        return value;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        return obj \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            || obj instanceof Favourite"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            \u0026\u0026 value.equals(((Favourite) obj).value);"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        return value.hashCode();"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":47}},{"path":"src/main/java/seedu/address/model/student/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s phone number in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     * Returns true if a given string is a valid student phone number."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"-":50}},{"path":"src/main/java/seedu/address/logic/commands/AddMilestoneCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Homework;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":" * Adds a Milestone to a Student\u0027s Dashboard"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"public class AddMilestoneCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"addMS\";"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a milestone to a Student\u0027s Dashboard.\""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            + \" Parameters: \""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"STUDENT\u0027S INDEX \""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"1 \""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            + PREFIX_DATE + \"17/05/2018 23:59 \""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"            + PREFIX_DESCRIPTION + \"Learn Arrays\";"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Milestone added to Student\u0027s Dashboard: %1$s\";"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    private final Milestone newMilestone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    private Student studentToEdit;"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    public AddMilestoneCommand(Index index, Milestone newMilestone) {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        requireNonNull(newMilestone);"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        this.newMilestone \u003d newMilestone;"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        this.index \u003d index;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(studentToEdit, editedStudent);"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"            model.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException e) {"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":""},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, newMilestone));"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    public void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":""},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size() || index.getZeroBased() \u003c 0) {"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        studentToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d createEditedStudent(studentToEdit, newMilestone);"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":""},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"     * Creates and return a copy of {@code Student} with the new Milestone added to its Dashboard."},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    private Student createEditedStudent(Student studentToEdit, Milestone newMilestone) {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        assert (studentToEdit !\u003d null) \u0026\u0026 (newMilestone !\u003d null);"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        /* Get all the attributes of the student */"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        Name name \u003d studentToEdit.getName();"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        Phone phone \u003d studentToEdit.getPhone();"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        Email email \u003d studentToEdit.getEmail();"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        Address address \u003d studentToEdit.getAddress();"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e tags \u003d studentToEdit.getTags();"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        ProgrammingLanguage programmingLanguage \u003d studentToEdit.getProgrammingLanguage();"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        Favourite fav \u003d studentToEdit.getFavourite();"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        List\u003cMilestone\u003e milestoneList \u003d studentToEdit.getDashboard().getMilestoneList().size() \u003e 0"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"                ? Milestone.copyMilestoneList(studentToEdit.getDashboard().getMilestoneList())"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        List\u003cHomework\u003e homeworkList \u003d studentToEdit.getDashboard().getHomeworkList().size() \u003e 0"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"                ? Homework.copyHomeworkList(studentToEdit.getDashboard().getHomeworkList())"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":""},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        milestoneList.add(newMilestone);"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        Dashboard dashboard \u003d new Dashboard(milestoneList, homeworkList);"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":""},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        return new Student(name, phone, email, address, programmingLanguage, tags, fav, dashboard);"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":""},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        return super.equals(obj);"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":100,"-":20}},{"path":"src/main/java/seedu/address/model/student/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s email in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Student emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"     * Returns if a given string is a valid student email."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":63}},{"path":"src/main/java/seedu/address/model/Schedule.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.LessonList;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":" * Wraps all data at the schedule level"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"public class Schedule implements ReadOnlySchedule {"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    private final LessonList lessons;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    {"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"        lessons \u003d new LessonList();"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"     * Adds lesson to schedule"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"     * @param lessonToBeAdded"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"     * @throws InvalidLessonTimeSlotException if invalid"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    public void addLesson(Lesson lessonToBeAdded) throws InvalidLessonTimeSlotException {"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        if (!isValidSlot(lessonToBeAdded)) {"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"            throw new InvalidLessonTimeSlotException();"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        lessons.add(lessonToBeAdded);"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"     * Checks if lesson clashes with other lessons in the schedule"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"     * @return true/false"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    private boolean isValidSlot(Lesson l) {"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        for (Lesson lesson : lessons) {"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"            if (l.clashesWith(lesson)) {"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"                return false;"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        return true;"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"     * Prints the schedule as a list"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    public void print() {"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        System.out.println(this.toString());"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        for (Lesson l : lessons) {"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"            System.out.println(l.toString());"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    //// util methods"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        return lessons.asObservableList().size() + \" lessons\";"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        // TODO: refine later"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"    public ObservableList\u003cLesson\u003e getSchedule() {"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"        return lessons.asObservableList();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"                || (other instanceof Schedule // instanceof handles nulls"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.lessons.equals(((Schedule) other).lessons));"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        return Objects.hash(lessons);"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":70,"-":11}},{"path":"src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.exceptions;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":" * Signals that the operation is unable to find the specified student."},{"lineNumber":5,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"public class StudentNotFoundException extends Exception {}"}],"authorContributionMap":{"yapni":6}},{"path":"src/main/java/seedu/address/model/student/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"            \"Student addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * Returns true if a given string is a valid student email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * returns the url form of the address"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String urlstyle() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String modified \u003d value.replaceAll(\" \" , \"+\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return modified;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":62}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedStudent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":" * JAXB-friendly version of the Student."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"public class XmlAdaptedStudent {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    private String programmingLanguage;"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"     * Constructs an XmlAdaptedStudent."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedStudent() {}"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     * Constructs an {@code XmlAdaptedStudent} with the given student details."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedStudent(String name, String phone, String email, String address,"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"                             String programmingLanguage, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"     * Converts a given Student into this class for JAXB use."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedStudent"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedStudent(Student source) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d source.getProgrammingLanguage().programmingLanguage;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"     * Converts this jaxb-friendly adapted student object into the model\u0027s Student object."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted student"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    public Student toModelType() throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"            studentTags.add(tag.toModelType());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        if (this.programmingLanguage \u003d\u003d null) {"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"                    ProgrammingLanguage.class.getSimpleName()));"},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"        if (!ProgrammingLanguage.isValidProgrammingLanguage(this.programmingLanguage)) {"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(ProgrammingLanguage.MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"        final ProgrammingLanguage programmingLanguage \u003d new ProgrammingLanguage(this.programmingLanguage);"},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(studentTags);"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"        return new Student(name, phone, email, address, programmingLanguage, tags);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"        if (!(other instanceof XmlAdaptedStudent)) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent otherStudent \u003d (XmlAdaptedStudent) other;"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"        return Objects.equals(name, otherStudent.name)"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(phone, otherStudent.phone)"},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(email, otherStudent.email)"},{"lineNumber":150,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(address, otherStudent.address)"},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 tagged.equals(otherStudent.tagged);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":40,"samuelloh":4,"-":109}},{"path":"src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.exceptions;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":" * Signals that the operation will result in duplicate Student objects."},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"public class DuplicateStudentException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"    public DuplicateStudentException() {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"        super(\"Operation would result in duplicate students\");"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":11,"-":1}},{"path":"src/main/java/seedu/address/model/student/dashboard/Progress.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":" * Represents a Milestone\u0027s progress"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Guarantees: details are present and not null, immutable."},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class Progress {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    private final int totalTasks;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    private final int numCompletedTasks;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    private final int progressValueInPercent;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    public Progress() {"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"        totalTasks \u003d 0;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"        numCompletedTasks \u003d 0;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"        progressValueInPercent \u003d 0;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public Progress(int totalTasks, int numCompletedTasks) {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        this.totalTasks \u003d totalTasks;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        this.numCompletedTasks \u003d numCompletedTasks;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        progressValueInPercent \u003d (totalTasks \u003d\u003d 0) ? 0 : ((numCompletedTasks / totalTasks) * 100);"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public int getTotalTasks() {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        return totalTasks;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public int getNumCompletedTasks() {"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        return numCompletedTasks;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    public int getProgressValueInPercent() {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        return progressValueInPercent;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        return obj \u003d\u003d this"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Progress"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.totalTasks \u003d\u003d ((Progress) obj).getTotalTasks()"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.numCompletedTasks \u003d\u003d ((Progress) obj).getNumCompletedTasks());"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        return progressValueInPercent + \"%\";"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        return Objects.hash(totalTasks, numCompletedTasks, progressValueInPercent);"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":56}},{"path":"src/main/java/seedu/address/model/student/dashboard/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":" * Represents a task in a milestone"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":" * Guarantees: details are present and not null, immutable."},{"lineNumber":6,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"    private final String name;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    private final String description;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    private final boolean isCompleted;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public Task(String name, String description) {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"        this.name \u003d name;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"        isCompleted \u003d false;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public Task(String name, String description, boolean isCompleted) {"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        this.name \u003d name;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        this.isCompleted \u003d isCompleted;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    public String getName() {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        return name;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public String getDescription() {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        return description;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public boolean isCompleted() {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        return isCompleted;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        return this \u003d\u003d obj // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Task // instanceof checks null"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.name.equals(((Task) obj).getName())"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.description.equals(((Task) obj).getDescription())"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.isCompleted \u003d\u003d ((Task) obj).isCompleted());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        builder.append(\"Name: \")"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"                .append(name)"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"                .append(\" ||\")"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"                .append(\" Desc: \")"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"                .append(description)"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"                .append(\" ||\")"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"                .append(\" Completed: \")"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"                .append(isCompleted);"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        return builder.toString();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":54,"-":5}},{"path":"src/main/java/seedu/address/model/student/dashboard/Dashboard.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s Dashboard"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" * Guarantees: details are present and not null, immutable."},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"public class Dashboard {"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    private final List\u003cMilestone\u003e milestoneList;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private final List\u003cHomework\u003e homeworkList;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"     * Constructs a {@code Dashboard}"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    public Dashboard() {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        milestoneList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        homeworkList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     * Constructs a {@code Dashboard}"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public Dashboard(List\u003cMilestone\u003e milestoneList, List\u003cHomework\u003e homeworkList) {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        this.milestoneList \u003d milestoneList;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        this.homeworkList \u003d homeworkList;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public List\u003cMilestone\u003e getMilestoneList() {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        return Collections.unmodifiableList(milestoneList);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public List\u003cHomework\u003e getHomeworkList() {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        return Collections.unmodifiableList(homeworkList);"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        return this \u003d\u003d obj // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Dashboard // instanceof handles null"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.milestoneList.equals(((Dashboard) obj).getMilestoneList())"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.homeworkList.equals(((Dashboard) obj).getHomeworkList()));"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        int index;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        builder.append(\"Milestones:\\n\");"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        index \u003d 1;"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        for (Milestone milestone : milestoneList) {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            builder.append(index++)"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"                    .append(\". \")"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"                    .append(milestone)"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"                    .append(\"\\n\");"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        builder.append(\"Homework List:\\n\");"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        index \u003d 1;"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        for (Homework homework : homeworkList) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"            builder.append(index++)"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"                    .append(\". \")"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"                    .append(homework)"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"                    .append(\"\\n\");"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        return builder.toString();"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":""},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        return Objects.hash(milestoneList, homeworkList);"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":78}},{"path":"src/main/java/seedu/address/model/student/dashboard/Homework.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" * Represents a homework in a Student\u0027s Dashboard"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * Guarantees: details are present and not null, immutable."},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class Homework {"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    private final String desc;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    private final Date dueDate;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private final boolean isCompleted;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    public Homework(String desc, Date dueDate) {"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"        this.desc \u003d desc;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        this.isCompleted \u003d false;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public Homework(String desc, Date dueDate, boolean isCompleted) {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        this.desc \u003d desc;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        this.isCompleted \u003d isCompleted;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     * Creates and return a deep copy of the {@code toCopy} Homework"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public static Homework copyHomework(Homework toCopy) {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        String copyDesc \u003d new String(toCopy.getDesc());"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        Date copyDate \u003d new Date(toCopy.getDueDate().getValue());"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        boolean copyIsCompleted \u003d toCopy.isCompleted();"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        return new Homework(copyDesc, copyDate, copyIsCompleted);"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"     * Creates and returns a deep copy of the list of Homework."},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    public static List\u003cHomework\u003e copyHomeworkList(List\u003cHomework\u003e listToCopy) {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        return listToCopy.stream().map(Homework::copyHomework).collect(Collectors.toList());"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    public String getDesc() {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        return desc;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public Date getDueDate() {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        return dueDate;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    public boolean isCompleted() {"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        return isCompleted;"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        return this \u003d\u003d obj // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Homework // instanceof handles null"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.desc.equals(((Homework) obj).getDesc())"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.dueDate.equals(((Homework) obj).getDueDate())"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.isCompleted \u003d\u003d ((Homework) obj).isCompleted());"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        return \"Desc: \" + desc + \" Due Date: \" + dueDate.toString() + \"Completed: \" + isCompleted;"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        return Objects.hash(desc, dueDate, isCompleted);"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":77}},{"path":"src/main/java/seedu/address/model/student/dashboard/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" * Represents a date in a Student\u0027s Dashboard"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * Guarantees: immutable."},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class Date {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date should be of the format dd/mm/yyyy hh:mm\""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"            + \"where dd must be between 01 and 31\""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"            + \", mm between 01 and 12\""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"            + \", yyyy between 0000 and 9999\""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"            + \", hh between 00 to 23\""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"            + \" and mm between 00 to 59.\""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"            + \" There must be a single space between the date and the time.\";"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    // Regex for the date format"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    private static final String DAY_PART_REGEX \u003d \"([0-9]{2})\";"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    private static final String MONTH_PART_REGEX \u003d \"([0-9]{2})\";"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private static final String YEAR_PART_REGEX \u003d \"([0-9]{4})\";"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private static final String HOUR_PART_REGEX \u003d \"([0-9]{2})\";"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private static final String MINUTE_PART_REGEX \u003d \"([0-9]{2})\";"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d DAY_PART_REGEX + \"/\" + MONTH_PART_REGEX + \"/\" + YEAR_PART_REGEX"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"            + \"\\\\s\" + HOUR_PART_REGEX + \":\" + MINUTE_PART_REGEX;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    private static final Pattern dateFormatPattern \u003d Pattern.compile(DATE_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    // Indexes of capturing group in the Date Matcher\u0027s Pattern"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_DAY \u003d 1;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_MONTH \u003d 2;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_YEAR \u003d 3;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_HOUR \u003d 4;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_MINUTE \u003d 5;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    private final LocalDateTime value;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    public Date(LocalDateTime value) {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        this.value \u003d LocalDateTime.of(value.getYear(), value.getMonth(), value.getDayOfMonth(),"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"                value.getHour(), value.getMinute());"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public Date(String date) {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assert date !\u003d null;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        Matcher matcher \u003d dateFormatPattern.matcher(date.trim());"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        matcher.matches();"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        int day \u003d Integer.parseInt(matcher.group(GROUP_DAY));"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        int month \u003d Integer.parseInt(matcher.group(GROUP_MONTH));"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        int year \u003d Integer.parseInt(matcher.group(GROUP_YEAR));"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        int hour \u003d Integer.parseInt(matcher.group(GROUP_HOUR));"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        int min \u003d Integer.parseInt(matcher.group(GROUP_MINUTE));"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        value \u003d LocalDateTime.of(year, month, day, hour, min);"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"     * Returns if a given string is a valid date"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    public static boolean isValidDate(String input) {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        Matcher matcher \u003d dateFormatPattern.matcher(input.trim());"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        if (!matcher.matches()) {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        int day \u003d Integer.parseInt(matcher.group(GROUP_DAY));"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        int month \u003d Integer.parseInt(matcher.group(GROUP_MONTH));"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        int year \u003d Integer.parseInt(matcher.group(GROUP_YEAR));"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        int hour \u003d Integer.parseInt(matcher.group(GROUP_HOUR));"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        int min \u003d Integer.parseInt(matcher.group(GROUP_MINUTE));"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":""},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        return (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 31) \u0026\u0026 (month \u003e\u003d 1 \u0026\u0026 month \u003c\u003d 12) \u0026\u0026 (year \u003e\u003d 1 \u0026\u0026 year \u003c\u003d 9999)"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 (hour \u003e\u003d 0 \u0026\u0026 hour \u003c\u003d 23) \u0026\u0026 (min \u003e\u003d 0 \u0026\u0026 min \u003c\u003d 59);"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    public LocalDateTime getValue() {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        return value;"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        return \"Date: \" + value.getDayOfMonth() + \" \" + value.getMonth() + \" \" + value.getYear()"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                + \" Time: \" + value.getHour() + \":\" + value.getMinute();"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        return this \u003d\u003d obj // short circuit if same object"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Date"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.value.equals(((Date) obj).getValue()));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":97,"-":6}},{"path":"src/main/java/seedu/address/model/student/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"            \"Student names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * Returns true if a given string is a valid student name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":55}},{"path":"src/main/java/seedu/address/model/student/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public boolean test(Student student) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"-":26}},{"path":"src/main/java/seedu/address/model/student/dashboard/Milestone.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * Represents a milestone in a Student\u0027s dashboard"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" * Guarantees: details are present and not null, immutable."},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"public class Milestone {"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    private final Date dueDate;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private final List\u003cTask\u003e taskList;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    private final Progress progress;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    private final String description;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public Milestone(Date dueDate, String description) {"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        progress \u003d new Progress();"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    public Milestone(Date dueDate, List\u003cTask\u003e taskList, Progress progress, String description) {"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        this.progress \u003d progress;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"     * Creates and return a deep copy of the {@code toCopy} Milestone"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    public static Milestone copyMilestone(Milestone toCopy) {"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        Date copyDueDate \u003d new Date(toCopy.getDueDate().getValue());"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        List\u003cTask\u003e copyTaskList \u003d toCopy.getTaskList().stream()"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"                .map(task -\u003e new Task(task.getName(), task.getDescription(), task.isCompleted()))"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"                .collect(Collectors.toList());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        Progress copyProgress \u003d new Progress(toCopy.getProgress().getTotalTasks(),"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"                toCopy.getProgress().getNumCompletedTasks());"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        String copyDescription \u003d new String(toCopy.getDescription());"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        return new Milestone(copyDueDate, copyTaskList, copyProgress, copyDescription);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     * Creates and returns a deep copy of the list of Milestone."},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public static List\u003cMilestone\u003e copyMilestoneList(List\u003cMilestone\u003e listToCopy) {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        return listToCopy.stream().map(Milestone::copyMilestone).collect(Collectors.toList());"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    public Date getDueDate() {"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        return dueDate;"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        return taskList;"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    public Progress getProgress() {"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        return progress;"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    public String getDescription() {"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        return description;"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        return this \u003d\u003d obj"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Milestone"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.dueDate.equals(((Milestone) obj).getDueDate())"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.taskList.equals(((Milestone) obj).getTaskList())"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.progress.equals(((Milestone) obj).getProgress())"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.description.equals(((Milestone) obj).getDescription()));"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":""},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        int index \u003d 1;"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        builder.append(\"Description: \")"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"                .append(description)"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"                .append(\" ||\")"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                .append(\" Due Date: \")"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"                .append(dueDate)"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"                .append(\" ||\")"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"                .append(\" Progress: \")"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"                .append(progress)"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"                .append(\"\\n\")"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"                .append(\"Tasks: \");"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        for (Task task : taskList) {"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"            builder.append(index++)"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"                    .append(\" - \")"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"                    .append(task)"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"                    .append(\"\\n\");"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        return builder.toString();"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        return Objects.hash(dueDate, taskList, progress, description);"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":106,"-":3}},{"path":"src/main/java/seedu/address/model/ReadOnlySchedule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" * Unmodifiable view of a schedule"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"public interface ReadOnlySchedule {"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"     * Returns an unmodifiable view of the schedule."},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"     * This list will not contain any duplicate lessons or lessons that clash."},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    ObservableList\u003cLesson\u003e getSchedule();"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":14,"-":3}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.UniqueStudentList;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private final UniqueStudentList students;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        students \u003d new UniqueStudentList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"     * Creates an AddressBook using the Students and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    public void setStudents(List\u003cStudent\u003e students) throws DuplicateStudentException {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        this.students.setStudents(students);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e syncedStudentList \u003d newData.getStudentList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"            setStudents(syncedStudentList);"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate students\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    //// student-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"     * Adds a student to the address book."},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"     * Also checks the new student\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"     * and updates the Tag objects in the student to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if an equivalent student already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    public void addStudent(Student p) throws DuplicateStudentException {"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        Student student \u003d syncWithMasterTagList(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any student"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        // in the student list."},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        students.add(student);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"     * Replaces the given student {@code target} in the list with {@code editedStudent}."},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedStudent}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if updating the student\u0027s details causes the student to be equivalent to"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"     *      another existing student in the list."},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"     * @see #syncWithMasterTagList(Student)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    public void updateStudent(Student target, Student editedStudent)"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"            throws DuplicateStudentException, StudentNotFoundException {"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        requireNonNull(editedStudent);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        Student syncedEditedStudent \u003d syncWithMasterTagList(editedStudent);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any student"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        // in the student list."},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        students.setStudent(target, syncedEditedStudent);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        removeUnusedTags();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Student} in this {@code AddressBook}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void removeUnusedTags() {"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e tagsInStudents \u003d students.asObservableList().stream()"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"                .map(Student::getTags)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .flatMap(Set::stream)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        tags.setTags(tagsInStudents);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"     *  Updates the master tag list to include tags in {@code student} that are not in the list."},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"     *  @return a copy of this {@code student} such that every tag in this student points to a Tag object in the master"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"    private Student syncWithMasterTagList(Student student) {"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        final UniqueTagList studentTags \u003d new UniqueTagList(student.getTags());"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        tags.mergeFrom(studentTags);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"        // used for checking student tag references"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"        // Rebuild the list of student tags to point to the relevant tags in the master tag list."},{"lineNumber":144,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        studentTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"        return new Student("},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"                student.getName(), student.getPhone(), student.getEmail(), student.getAddress(),"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"                student.getProgrammingLanguage(), correctTagReferences, student.getFavourite(), student.getDashboard());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":153,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"yapni"},"content":"    public boolean removeStudent(Student key) throws StudentNotFoundException {"},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"        if (students.remove(key)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":159,"author":{"gitID":"yapni"},"content":"            throw new StudentNotFoundException();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":"     * Checks for the existence of {@code key} in this {@code AddressBook}."},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":"    public boolean checkForStudentInAdressBook(Student key) throws StudentNotFoundException {"},{"lineNumber":168,"author":{"gitID":"samuelloh"},"content":"        if (students.contains(key)) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":171,"author":{"gitID":"yapni"},"content":"            throw new StudentNotFoundException();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"yapni"},"content":"     * Removes {@code tag} from {@code student} in this {@code AddressBook}."},{"lineNumber":183,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if the {@code student} is not in this {@code AddressBook}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"yapni"},"content":"    private void removeTagFromStudent(Tag tag, Student student) throws StudentNotFoundException {"},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(student.getTags());"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"yapni"},"content":"        Student newStudent \u003d"},{"lineNumber":193,"author":{"gitID":"yapni"},"content":"                new Student(student.getName(), student.getPhone(), student.getEmail(), student.getAddress(),"},{"lineNumber":194,"author":{"gitID":"yapni"},"content":"                        student.getProgrammingLanguage(), newTags);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":197,"author":{"gitID":"yapni"},"content":"            updateStudent(student, newStudent);"},{"lineNumber":198,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException dpe) {"},{"lineNumber":199,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Modifying a student\u0027s tags only should not result in a duplicate. \""},{"lineNumber":200,"author":{"gitID":"yapni"},"content":"                    + \"See Student#equals(Object).\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"yapni"},"content":"     * Removes {@code tag} from all students in this {@code AddressBook}."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"yapni"},"content":"            for (Student student : students) {"},{"lineNumber":210,"author":{"gitID":"yapni"},"content":"                removeTagFromStudent(tag, student);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":213,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Impossible: original student is obtained from the address book.\");"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":221,"author":{"gitID":"yapni"},"content":"        return students.asObservableList().size() + \" students, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":226,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cStudent\u003e getStudentList() {"},{"lineNumber":227,"author":{"gitID":"yapni"},"content":"        return students.asObservableList();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":238,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":239,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.students.equals(((AddressBook) other).students)"},{"lineNumber":240,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":246,"author":{"gitID":"yapni"},"content":"        return Objects.hash(students, tags);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":78,"samuelloh":4,"-":166}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.model.StudentInfoDisplayEvent;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    private final Schedule schedule;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private final FilteredList\u003cStudent\u003e filteredStudents;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        this.schedule \u003d new Schedule();"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        filteredStudents \u003d new FilteredList\u003c\u003e(this.addressBook.getStudentList());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    public synchronized void deleteStudent(Student target) throws StudentNotFoundException {"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        addressBook.removeStudent(target);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    public synchronized void addStudent(Student student) throws DuplicateStudentException {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        addressBook.addStudent(student);"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    public void updateStudent(Student target, Student editedStudent)"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"            throws DuplicateStudentException, StudentNotFoundException {"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(target, editedStudent);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        addressBook.updateStudent(target, editedStudent);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":""},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"    public void addLesson(Student studentToAddLesson, Day day, Time startTime, Time endTime)"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"            throws DuplicateLessonException, StudentNotFoundException, InvalidLessonTimeSlotException {"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(studentToAddLesson, day, startTime, endTime);"},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"        Lesson newLesson \u003d new Lesson(studentToAddLesson, day, startTime, endTime);"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"        schedule.addLesson(newLesson);"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"    public Schedule getSchedule() {"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"        return schedule;"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"     * Displays Student details on a browser panel in the UI"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"     * @param target"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"     * @throws StudentNotFoundException"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"samuelloh"},"content":"    public void displayStudentDetailsOnBrowserPanel(Student target) throws StudentNotFoundException {"},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"        addressBook.checkForStudentInAdressBook(target);"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":"        indicateBrowserPanelToDisplayStudent(target);"},{"lineNumber":120,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":122,"author":{"gitID":"samuelloh"},"content":"    /** Raises an event to indicate Browser Panel display changed to display student\u0027s information */"},{"lineNumber":123,"author":{"gitID":"samuelloh"},"content":"    private void indicateBrowserPanelToDisplayStudent(Student target) {"},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":"        raise(new StudentInfoDisplayEvent(target));"},{"lineNumber":125,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        return FXCollections.unmodifiableObservableList(filteredStudents);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"        filteredStudents.setPredicate(predicate);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":160,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":22,"samuelloh":13,"demitycho":27,"-":101}},{"path":"src/main/java/seedu/address/model/programminglanguage/ProgrammingLanguage.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.programminglanguage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s programming language in the address book."},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidProgrammingLanguage(String)}"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"public class ProgrammingLanguage {"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS \u003d \"Programming language should be a visibile \""},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"            + \"character\";"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    public static final String PROGRAMMING_LANGUAGE_VALIDATION_REGEX \u003d \"\\\\p{Graph}+\";"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    public final String programmingLanguage;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     * Constructs a {@code programminglanguage}."},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"     * Returns true if a given string is a valid programmingLanguage."},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public ProgrammingLanguage(String programmingLanguage) {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        requireNonNull(programmingLanguage);"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        checkArgument(isValidProgrammingLanguage(programmingLanguage), MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     * @param test"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"     * @return true if a given string is a valid programmingLanguage"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public static boolean isValidProgrammingLanguage(String test) {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        return test.matches(PROGRAMMING_LANGUAGE_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"                || (other instanceof ProgrammingLanguage // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.programmingLanguage.equals(((ProgrammingLanguage) other).programmingLanguage)); // state check"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        return programmingLanguage;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":33,"samuelloh":3,"-":16}},{"path":"src/main/java/seedu/address/model/student/Student.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":" * Represents a Student in the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"public class Student {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    private final ProgrammingLanguage programmingLanguage;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    private final Favourite favourite;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private final Dashboard dashboard;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public Student(Name name, Phone phone, Email email, Address address, ProgrammingLanguage programmingLanguage,"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"                   Set\u003cTag\u003e tags) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d new Favourite(false); // Default value"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new Dashboard();"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     * Every field must be present and not null."},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public Student(Name name, Phone phone, Email email, Address address, ProgrammingLanguage programmingLanguage,"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"                   Set\u003cTag\u003e tags, Favourite fav) {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, phone, email, address, tags, fav);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new Dashboard();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    public Student(Name name, Phone phone, Email email, Address address, ProgrammingLanguage programmingLanguage,"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"                   Set\u003cTag\u003e tags, Favourite fav, Dashboard dashboard) {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, phone, email, address, tags, fav);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d dashboard;"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"    public Favourite getFavourite() {"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        return favourite;"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":""},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    public Dashboard getDashboard() {"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        return dashboard;"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"     * Returns true if Student is in favourites, else returns false."},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    public boolean isFavourite() {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        if (favourite.value.equals(\"true\")) {"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"            return true;"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":""},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"    public ProgrammingLanguage getProgrammingLanguage() {"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        return programmingLanguage;"},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"        if (!(other instanceof Student)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        Student otherStudent \u003d (Student) other;"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"        return otherStudent.getName().equals(this.getName())"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 otherStudent.getPhone().equals(this.getPhone())"},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 otherStudent.getEmail().equals(this.getEmail())"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 otherStudent.getAddress().equals(this.getAddress())"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 otherStudent.getProgrammingLanguage().equals(this.getProgrammingLanguage())"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 otherStudent.getDashboard().equals(this.getDashboard());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":150,"author":{"gitID":"yapni"},"content":"        return Objects.hash(name, phone, email, address, tags, programmingLanguage, dashboard);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":163,"author":{"gitID":"yapni"},"content":"                .append(\" Programming Language: \")"},{"lineNumber":164,"author":{"gitID":"yapni"},"content":"                .append(getProgrammingLanguage())"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":167,"author":{"gitID":"yapni"},"content":"        builder.append(\" Favourite: \")"},{"lineNumber":168,"author":{"gitID":"yapni"},"content":"                .append(getFavourite())"},{"lineNumber":169,"author":{"gitID":"yapni"},"content":"                .append(\" Dashboard: \")"},{"lineNumber":170,"author":{"gitID":"yapni"},"content":"                .append(getDashboard());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":68,"samuelloh":2,"-":104}},{"path":"src/main/java/seedu/address/model/student/UniqueStudentList.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" * A list of students that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" *"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"yapni"},"content":" *"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":" * @see Student#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"public class UniqueStudentList implements Iterable\u003cStudent\u003e {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"     * Returns true if the list contains an equivalent student as the given argument."},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public boolean contains(Student toCheck) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"     * Adds a student to the list."},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if the student to add is a duplicate of an existing student in the list."},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public void add(Student toAdd) throws DuplicateStudentException {"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            throw new DuplicateStudentException();"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"     * Replaces the student {@code target} in the list with {@code editedStudent}."},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if the replacement is equivalent to another existing student in the list."},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    public void setStudent(Student target, Student editedStudent)"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"            throws DuplicateStudentException, StudentNotFoundException {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        requireNonNull(editedStudent);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"            throw new StudentNotFoundException();"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        if (!target.equals(editedStudent) \u0026\u0026 internalList.contains(editedStudent)) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"            throw new DuplicateStudentException();"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        internalList.set(index, editedStudent);"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"     * Removes the equivalent student from the list."},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if no such student could be found in the list."},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"    public boolean remove(Student toRemove) throws StudentNotFoundException {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        final boolean studentFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        if (!studentFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"            throw new StudentNotFoundException();"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        return studentFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    public void setStudents(UniqueStudentList replacement) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    public void setStudents(List\u003cStudent\u003e students) throws DuplicateStudentException {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(students);"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        final UniqueStudentList replacement \u003d new UniqueStudentList();"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        for (final Student student : students) {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"            replacement.add(student);"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        setStudents(replacement);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cStudent\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    public Iterator\u003cStudent\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"                || (other instanceof UniqueStudentList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueStudentList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":76,"-":45}},{"path":"src/main/java/seedu/address/logic/commands/AddTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MILESTONE_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Homework;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":" * Adds a Task to a Milestone"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"public class AddTaskCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"addTask\";"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Task to a Milestone in a Student\u0027s Dashboard.\""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            + \" Parameters: \""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"STUDENT\u0027S INDEX \""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"MILESTONE\u0027S INDEX \""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            + PREFIX_NAME + \"NAME OF TASK \""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"1 \""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"2 \""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"            + PREFIX_NAME + \"Learn syntax of arrays \""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"            + PREFIX_DESCRIPTION + \"Learn declaration and initialisation of arrays\";"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    private final Index studentIndex;"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    private final Index milestoneIndex;"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    private final Task newTask;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    private Student studentToEdit;"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    public AddTaskCommand(Index studentIndex, Index milestoneIndex, Task newTask) {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        this.studentIndex \u003d studentIndex;"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        this.milestoneIndex \u003d milestoneIndex;"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        this.newTask \u003d newTask;"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(studentToEdit, editedStudent);"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"            model.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException e) {"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":""},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, newTask));"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size() || studentIndex.getZeroBased() \u003c 0) {"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":""},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        List\u003cMilestone\u003e milestoneList \u003d"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"                lastShownList.get(studentIndex.getZeroBased()).getDashboard().getMilestoneList();"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        if (milestoneIndex.getZeroBased() \u003e\u003d milestoneList.size() || milestoneIndex.getZeroBased() \u003c 0) {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_INVALID_MILESTONE_DISPLAYED_INDEX);"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        studentToEdit \u003d lastShownList.get(studentIndex.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d createEditedStudent(studentToEdit, newTask);"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":""},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"     * Creates and return a copy of {@code Student} with the new task added to its targeted milestone in the Dashboard."},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    private Student createEditedStudent(Student studentToEdit, Task newTask) {"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        assert (studentToEdit !\u003d null) \u0026\u0026 (newTask !\u003d null);"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":""},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        /* Get all the attributes of the student */"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        Name name \u003d studentToEdit.getName();"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        Phone phone \u003d studentToEdit.getPhone();"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        Email email \u003d studentToEdit.getEmail();"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        Address address \u003d studentToEdit.getAddress();"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e tags \u003d studentToEdit.getTags();"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        ProgrammingLanguage programmingLanguage \u003d studentToEdit.getProgrammingLanguage();"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        Favourite fav \u003d studentToEdit.getFavourite();"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        List\u003cMilestone\u003e milestoneList \u003d studentToEdit.getDashboard().getMilestoneList().size() \u003e 0"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"                ? Milestone.copyMilestoneList(studentToEdit.getDashboard().getMilestoneList())"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        List\u003cHomework\u003e homeworkList \u003d studentToEdit.getDashboard().getHomeworkList().size() \u003e 0"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"                ? Homework.copyHomeworkList(studentToEdit.getDashboard().getHomeworkList())"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":""},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        milestoneList.get(milestoneIndex.getZeroBased()).getTaskList().add(newTask);"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        Dashboard dashboard \u003d new Dashboard(milestoneList, homeworkList);"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":""},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        return new Student(name, phone, email, address, programmingLanguage, tags, fav, dashboard);"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":""},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"        return super.equals(obj);"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":121,"-":10}},{"path":"src/main/java/seedu/address/model/lesson/Day.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" * Represents a Student\u0027s day in a lesson in the Schedule."},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDay String)}"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"public class Day {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_DAY_CONSTRAINTS \u003d \"Day should be of the format: first 3 letters of Day\""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"            + \"(not case sensitive) i,e.\\n\""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"            + \"mon, tue, wed, thu, fri, sat, sun\\\";\\n\\n\";"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    private static final String DAY_REGEX \u003d \"^(mon|tue|wed|thu|fri|sat|sun)\";"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"     * Constructs an {@code Day}."},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"     * @param day A valid day string."},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    public Day(String day) {"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"        requireNonNull(day);"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"        checkArgument(isValidDay(day), MESSAGE_DAY_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        this.value \u003d day;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"     * Returns if a given string is a valid student day."},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    public static boolean isValidDay(String test) {"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        return test.matches(DAY_REGEX);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"                || (other instanceof Day // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.value.equals(((Day) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":32,"-":21}},{"path":"src/main/java/seedu/address/model/lesson/exceptions/DuplicateLessonException.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson.exceptions;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":" * Signals that the operation will result in duplicate Lesson objects."},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"public class DuplicateLessonException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"    public DuplicateLessonException() {"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"        super(\"Operation would result in duplicate lessons\");"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":11,"-":1}},{"path":"src/main/java/seedu/address/model/lesson/Min.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":" * Represents the Hour value in the Time."},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":" *"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"public class Min implements Comparable\u003cMin\u003e {"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"    private int value;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"    public Min(String min) {"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"        this.value \u003d Integer.parseInt(min);"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"     * Get the integer value of the Hour string"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"     * @return value"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    public int getMin() {"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"        return this.value;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"     * Compares 2 Hour values and returns whether the comparison is larger than itself"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     * @return the compareTo value"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public int compareTo(Min other) {"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        return this.getMin() - other.getMin();"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":30}},{"path":"src/main/java/seedu/address/model/lesson/Time.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" * Represents a Student\u0027s time in a lesson in the Schedule."},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime String)}"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"public class Time implements Comparable\u003cTime\u003e {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time should be of the format HH:MM \""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"            + \"1. The hour HH should only contain numbers and be in range [00, 24] inclusive\\n\""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"            + \"2. This is followed by a \u0027:\u0027 and then minutes MM. \""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"            + \"3. The minutes MM should only contain numbers and be in range [00, 59] inclusive\\n\";"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    // Numeric characters in Hour or Minute ranges"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    private static final String HOUR_PART_REGEX \u003d \"([01]?[0-9]|2[0-3])\";"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    private static final String MINUTE_PART_REGEX \u003d \"([0-5][0-9])\";"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    private static final String TIME_DELIMITER \u003d \":\";"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d HOUR_PART_REGEX"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"            + TIME_DELIMITER"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"            + MINUTE_PART_REGEX;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    private static final int INDEX_HOUR \u003d 0;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    private static final int INDEX_MIN \u003d 1;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public final String value;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    private final Hour hour;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    private final Min min;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"     * Constructs an {@code Time}."},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"     * @param time A valid time string."},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    public Time(String time) {"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        requireNonNull(time);"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        this.value \u003d time;"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        this.hour \u003d new Hour(value.split(TIME_DELIMITER)[INDEX_HOUR]);"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        this.min \u003d new Min(value.split(TIME_DELIMITER)[INDEX_MIN]);"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"     * Returns if a given string is a valid student time."},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"        return test.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    public Hour getHour() {"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        return this.hour;"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    public Min getMin() {"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"        return this.min;"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"                || (other instanceof Time // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.value.equals(((Time) other).value)); // state check"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"    public int compareTo(Time other) {"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"        return this.getHour().compareTo(other.getHour()) !\u003d 0"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"                ? this.getHour().compareTo(other.getHour())"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"                : this.getMin().compareTo(other.getMin());"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"demitycho":64,"-":19}},{"path":"src/main/java/seedu/address/model/lesson/Lesson.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" * Represents a Student in the address book."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"public class Lesson {"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    private final Student student;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    private final Day day;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    private final Time startTime;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    private final Time endTime;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"     * Every field must be present and not null."},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    public Lesson(Student student, Day day, Time startTime, Time endTime) {"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(student, day, startTime, endTime);"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        this.student \u003d student;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        this.day \u003d day;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    public Student getStudent() {"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        return student;"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    public Day getDay() {"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        return day;"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    public Time getStartTime() {"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        return startTime;"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    public Time getEndTime() {"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        return endTime;"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"     * To check if a lesson will clash with another lesson on the same day"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"     * @return true/false"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    public boolean clashesWith(Lesson other) {"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        return (this.getStartTime().compareTo(other.getStartTime()) \u003e\u003d 0"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.getStartTime().compareTo(other.getEndTime()) \u003c\u003d 0)"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"                || (this.getEndTime().compareTo(other.getStartTime()) \u003e\u003d 0"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.getEndTime().compareTo(other.getEndTime()) \u003c\u003d 0);"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        if (!(other instanceof Lesson)) {"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        Lesson otherLesson \u003d (Lesson) other;"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"        return otherLesson.getStudent().equals(this.getStudent())"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 otherLesson.getDay().equals(this.getDay())"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 otherLesson.getStartTime().equals(this.getEndTime())"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 otherLesson.getEndTime().equals(this.getEndTime());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"        return Objects.hash(student, startTime, endTime);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"        builder.append(getStudent().getName())"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"                .append(\" programminglanguage: \")"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"                .append(getStudent().getProgrammingLanguage())"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"                .append(\" Day: \")"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"                .append(getDay())"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"                .append(\" Time: \")"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"                .append(getStartTime() + \" - \" + getEndTime());"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"        return builder.toString();"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":1,"demitycho":70,"-":22}},{"path":"src/main/java/seedu/address/model/lesson/Hour.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":" * Represents the Hour value in the Time."},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":" *"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"public class Hour implements Comparable\u003cHour\u003e {"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"    private int value;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"    public Hour(String hour) {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"        this.value \u003d Integer.parseInt(hour);"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"     * Get the integer value of the Hour string"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"     * @return value"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public int getHour() {"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"        return this.value;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"     * Compares 2 Hour values and returns whether the comparison is larger than itself"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"     * @return the compareTo value"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    public int compareTo(Hour other) {"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        return this.getHour() - other.getHour();"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":30}},{"path":"src/main/java/seedu/address/model/lesson/exceptions/InvalidLessonTimeSlotException.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":" * Signals that the operation will result in duplicate Lesson objects."},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"public class InvalidLessonTimeSlotException extends IllegalValueException {"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"    public InvalidLessonTimeSlotException() {"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"        super(\"Operation would result in duplicate lessons\");"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":10,"-":2}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    Predicate\u003cStudent\u003e PREDICATE_SHOW_FAVOURITE_STUDENTS \u003d Student::isFavourite;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    /** Deletes the given student. */"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    void deleteStudent(Student target) throws StudentNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    /** Adds the given student */"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    void addStudent(Student student) throws DuplicateStudentException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"     * Replaces the given student {@code target} with {@code editedStudent}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if updating the student\u0027s details causes the student to be equivalent to"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     *      another existing student in the list."},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    void updateStudent(Student target, Student editedStudent)"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            throws DuplicateStudentException, StudentNotFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    /** Returns an unmodifiable view of the filtered student list */"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    ObservableList\u003cStudent\u003e getFilteredStudentList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     * Updates the filter of the filtered student list to filter by the given {@code predicate}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    /** Removes the given {@code tag} from all {@code Student}s. */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"    void addLesson(Student student, Day day, Time startTime, Time endTime)"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"            throws DuplicateLessonException, StudentNotFoundException, InvalidLessonTimeSlotException;"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    Schedule getSchedule();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"    void displayStudentDetailsOnBrowserPanel(Student target) throws StudentNotFoundException;"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":19,"samuelloh":1,"demitycho":11,"-":33}},{"path":"src/main/java/seedu/address/model/tag/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * Tests that a {@code Student}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public boolean test(Student student) {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e tagList \u003d student.getTags();"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        for (Tag studentsTag: tagList) {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"            if (keywords.stream().anyMatch(keyword -\u003e"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"                    StringUtil.containsWordIgnoreCase(studentsTag.tagName, keyword))) {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"                return true;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        return false;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":8,"demitycho":23,"-":8}},{"path":"src/main/java/seedu/address/model/lesson/LessonList.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":" * A list of lessons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":" *"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":" * Supports a minimal set of list operations."},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":" *"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":" * @see Lesson#equals(Object)"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"public class LessonList implements Iterable\u003cLesson\u003e {"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     * Returns true if the list contains an equivalent student as the given argument."},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public boolean contains(Lesson toCheck) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"     * Adds a student to the list."},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"     * TODO: throw exception"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    public void add(Lesson toAdd) {"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        requireNonNull(toAdd);"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        if (!contains(toAdd)) {"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"            internalList.add(toAdd);"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    public ObservableList\u003cLesson\u003e asObservableList() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    public Iterator\u003cLesson\u003e iterator() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"                || (other instanceof LessonList // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"                        \u0026\u0026 this.internalList.equals(((LessonList) other).internalList));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":8,"demitycho":23,"-":35}}]
