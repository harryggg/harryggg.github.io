var resultJson = [{"path":"docs/team/hzxcaryn.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hzxcaryn"},"content":"\u003d Caryn Heng - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d PROJECT: Part-time Manager (PTMan)"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"PTMan is a desktop human resource application used for managing part-timer employees. +"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"PTMan aims to give part-time employees the freedom of choosing when they want to work by registering for the available time slots set by the employer. +"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":18,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":21,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":42,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"}],"authorContributionMap":{"hzxcaryn":2,"-":64}},{"path":"docs/team/koo1993.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hzxcaryn"},"content":"\u003d Koo Chin Chye - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d PROJECT: Part-time Manager (PTMan)"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"PTMan is a desktop human resource application used for managing part-timer employees. +"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"PTMan aims to give part-time employees the freedom of choosing when they want to work by registering for the available time slots set by the employer. +"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":18,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":21,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":42,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"}],"authorContributionMap":{"hzxcaryn":2,"-":64}},{"path":"docs/team/SunBangJie.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hzxcaryn"},"content":"\u003d Sun Bang Jie - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d PROJECT: Part-time Manager (PTMan)"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"PTMan is a desktop human resource application used for managing part-timer employees. +"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"PTMan aims to give part-time employees the freedom of choosing when they want to work by registering for the available time slots set by the employer. +"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":18,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":21,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":42,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"}],"authorContributionMap":{"hzxcaryn":2,"-":64}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"koo1993"},"content":"PTMan was developed by the CS2103T AY17/18 W14-B2 Team."},{"lineNumber":7,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Shannon Wong"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::shanwpf.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"{empty}[https://github.com/shanwpf[github]] [\u003c\u003cshannonwong#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"Role: Developer + Team Lead +"},{"lineNumber":17,"author":{"gitID":"koo1993"},"content":"Responsibilities: Storage + Deliverables and Deadlines + Documentation"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"koo1993"},"content":"\u003d\u003d\u003d Koo Chin Chye"},{"lineNumber":22,"author":{"gitID":"koo1993"},"content":"image::koo1993.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"koo1993"},"content":"{empty}[http://github.com/koo1993[github]] [\u003c\u003ckoo1993#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":"Role: Developer +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Responsibilities: Logic + Documentation + Integration"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"koo1993"},"content":"* Features Implemented : +"},{"lineNumber":29,"author":{"gitID":"koo1993"},"content":"** https://github.com/CS2103JAN2018-W14-B2/main/pull/32[Create Additional Salary Parameter]"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":33,"author":{"gitID":"koo1993"},"content":"* Other Contributions : +"},{"lineNumber":34,"author":{"gitID":"koo1993"},"content":"** https://github.com/CS2103JAN2018-W14-B2/main/pull/20[Password Class]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"koo1993"},"content":"\u003d\u003d\u003d Caryn Heng"},{"lineNumber":39,"author":{"gitID":"koo1993"},"content":"image::hzxcaryn.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"koo1993"},"content":"{empty}[http://github.com/hzxcaryn[github]] [\u003c\u003chzxcaryn#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"koo1993"},"content":"Responsibilities: UI + Testing + Documentation"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sun Bangjie"},{"lineNumber":48,"author":{"gitID":"-"},"content":"image::SunBangjie.JPG[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":49,"author":{"gitID":"koo1993"},"content":"{empty}[http://github.com/SunBangjie[github]] [\u003c\u003cSunBangjie#, portfolio\u003e\u003e]"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":52,"author":{"gitID":"koo1993"},"content":"Responsibilities: Integration + Model component + Documentation"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":55,"author":{"gitID":"koo1993"},"content":""}],"authorContributionMap":{"koo1993":19,"-":36}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hzxcaryn"},"content":"\u003d image:ptman_logo_ug.png[width\u003d\"400\"]"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toclevels: 3"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B2/main"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"By: `W14-B2`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"Part-time Manager (PTMan) is an application made for companies to manage their part timers and their respective working schedules. +"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":" +"},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"PTMan comes with many useful features for employers to easily schedule their part times\u0027 working time slots. PTMan also allow the part timers to have more flexibility in choosing their own working schedules. +"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":" +"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"This user guide comes with comprehensive instructions and examples to help you get started using PTMan. +"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":" +"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"Sounds great? Jump straight to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d About"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"This user guide shows you how to get started using PTman. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":" +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"This user guide introduces you to the features PTMan have and leads you through with examples. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":" +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"You are required to know how to use Java to run a Graphical User Interface (GUI) application. +"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"Here are the steps required to get PTMan up and running on your computer:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your computer."},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":43,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":45,"author":{"gitID":"-"},"content":"+"},{"lineNumber":46,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":47,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for PTMan."},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":".  Double-click the file to start the app. The graphical user interface (GUI) should appear in a few seconds."},{"lineNumber":49,"author":{"gitID":"-"},"content":"+"},{"lineNumber":50,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"_Figure 1._ Successful start up window +"},{"lineNumber":52,"author":{"gitID":"-"},"content":" +"},{"lineNumber":53,"author":{"gitID":"-"},"content":".  Type a command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":55,"author":{"gitID":"-"},"content":"*  Some example commands you can try:"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"** *`list`* : Lists all contacts."},{"lineNumber":58,"author":{"gitID":"-"},"content":"** **`add`** `n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/0` : Adds an employee named `John Doe` to PTMan."},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"** **`delete`** `3` `pw/ADMIN_PASSWORD` : Deletes the 3rd contact shown in the current list."},{"lineNumber":60,"author":{"gitID":"-"},"content":"** *`exit`* : Exits the app."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"*  Refer to \u003c\u003cFeatures\u003e\u003e for more details of each command."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"In this section, we will be introducing you to the various features of PTMan, and their respective  commands."},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"Our features would be split into 3 sub-sections, \u003c\u003cShared Features\u003e\u003e, \u003c\u003cEmployer Features\u003e\u003e, and \u003c\u003cEmployee Features\u003e\u003e. +"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"Take note that for this user guide, our commands will follow the format as stated in Command Format below."},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":72,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"e.g. In `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"* Items in square brackets are optional. +"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"* Items with `…`​ after them can be used multiple times, or none at all. +"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":"e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"* Parameters can be in any order. +"},{"lineNumber":81,"author":{"gitID":"hzxcaryn"},"content":"e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":"* For your convenience, many commands have an alias. +"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":"eg. `list` and `l` will both show a list of all employees in PTMan."},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Shared Features"},{"lineNumber":87,"author":{"gitID":"-"},"content":"These commands can be executed by both employees and employers."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing help: `help`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"Displays the help window. +"},{"lineNumber":92,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `help`"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating an employee by name: `find`"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"Finds employees whose names contain any of the given keywords. +"},{"lineNumber":97,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":98,"author":{"gitID":"hzxcaryn"},"content":"*Shorthand:* `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"****"},{"lineNumber":101,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":102,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":103,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":104,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":105,"author":{"gitID":"-"},"content":"* Employees matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":106,"author":{"gitID":"-"},"content":"****"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":111,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":113,"author":{"gitID":"-"},"content":"Returns any employee having names `Betsy`, `Tim`, or `John`."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all employees: `list`"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Shows a list of all employees in PTMan. +"},{"lineNumber":118,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `list` +"},{"lineNumber":119,"author":{"gitID":"hzxcaryn"},"content":"*Shorthand:* `l`"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Show employee shifts: `select`"},{"lineNumber":122,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":123,"author":{"gitID":"hzxcaryn"},"content":"Displays the shifts of the selected employee on the timetable view. +"},{"lineNumber":124,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `select INDEX` +"},{"lineNumber":125,"author":{"gitID":"hzxcaryn"},"content":"*Shorthand:* `s INDEX`"},{"lineNumber":126,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":127,"author":{"gitID":"hzxcaryn"},"content":"Examples:"},{"lineNumber":128,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":129,"author":{"gitID":"hzxcaryn"},"content":"* `list` +"},{"lineNumber":130,"author":{"gitID":"hzxcaryn"},"content":"`select 2` +"},{"lineNumber":131,"author":{"gitID":"hzxcaryn"},"content":"Selects the 2nd employee in PTMan and displays his/her shifts in the timetable view."},{"lineNumber":132,"author":{"gitID":"hzxcaryn"},"content":"* `find Betsy` +"},{"lineNumber":133,"author":{"gitID":"hzxcaryn"},"content":"`select 1` +"},{"lineNumber":134,"author":{"gitID":"hzxcaryn"},"content":"Selects the 1st employee in the results of the `find` command and displays his/her shifts in the timetable view."},{"lineNumber":135,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Show main timetable view: `main`"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"Displays the main timetable view (of the current week). Useful for users to navigate back to main timetable view"},{"lineNumber":139,"author":{"gitID":"-"},"content":"after using the `select` command. +"},{"lineNumber":140,"author":{"gitID":"-"},"content":"*Format:* `main`"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Export timetable as image: `export`"},{"lineNumber":143,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":144,"author":{"gitID":"hzxcaryn"},"content":"Exports the current timetable displayed as an image and saves it locally. +"},{"lineNumber":145,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `export` +"},{"lineNumber":146,"author":{"gitID":"hzxcaryn"},"content":"*Shorthand:* `exp`"},{"lineNumber":147,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":148,"author":{"gitID":"hzxcaryn"},"content":"Examples:"},{"lineNumber":149,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":150,"author":{"gitID":"hzxcaryn"},"content":"* `export` +"},{"lineNumber":151,"author":{"gitID":"hzxcaryn"},"content":"Exports the current timetable in PTMan."},{"lineNumber":152,"author":{"gitID":"hzxcaryn"},"content":"* `select 1` +"},{"lineNumber":153,"author":{"gitID":"hzxcaryn"},"content":"`export` +"},{"lineNumber":154,"author":{"gitID":"hzxcaryn"},"content":"Exports the timetable with the shifts of the 1st employee in PTMan."},{"lineNumber":155,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing entered commands: `history`"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":159,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `history` +"},{"lineNumber":160,"author":{"gitID":"hzxcaryn"},"content":"*Shorthand:* `h`"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":163,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":164,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exiting the program: `exit`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"Exits the app. +"},{"lineNumber":170,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `exit`"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Employer Features"},{"lineNumber":173,"author":{"gitID":"-"},"content":"If you are an employer, you are able to access these commands in addition to the shared commands."},{"lineNumber":174,"author":{"gitID":"-"},"content":"These commands require logging in to admin mode as shown in \u003c\u003cLogging in to admin mode: `login`\u003e\u003e."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Logging in to admin mode: `login`"},{"lineNumber":177,"author":{"gitID":"-"},"content":"Logs in to admin mode, allowing you to use all the employer features."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"*Format:* `login pw/AdminPassword`"},{"lineNumber":180,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":181,"author":{"gitID":"hzxcaryn"},"content":"[CAUTION]"},{"lineNumber":182,"author":{"gitID":"-"},"content":"For security purposes, do remember to log out after you are done. +"},{"lineNumber":183,"author":{"gitID":"-"},"content":"\u003c\u003cLogging out of admin mode: `logout`\u003e\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Logging out of admin mode: `logout`"},{"lineNumber":186,"author":{"gitID":"-"},"content":"Logs out of admin mode, preventing the use of employer features."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"*Format:* `logout`"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding an employee: `add`"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Adds an employee to PTMan. +"},{"lineNumber":193,"author":{"gitID":"-"},"content":"*Format:* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SALARY [t/TAG]...` +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"*Shorthand:* `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SALARY [t/TAG]...`"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"An employee can have any number of tags (including 0)"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/0 pw/DEFAULT1`  +"},{"lineNumber":202,"author":{"gitID":"koo1993"},"content":"Adds an employee named `John Doe` with phone number `98765432`, address `John street, block 123, #01-01`, and salary earned so far $`0`."},{"lineNumber":203,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe e/betsycrowe@example.com a/Newgate Prison p/1234567 s/100  pw/DEFAULT1`  +"},{"lineNumber":204,"author":{"gitID":"koo1993"},"content":"Adds an employee named `Betsy Crowe` with email `betsycrowe@example.com`, address `Newgate Prison`, phone number `1234567`, and salary earned so far $`100`."},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing an employee: `edit`"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"Edits an existing employee in PTMan. +"},{"lineNumber":210,"author":{"gitID":"-"},"content":"*Format:* `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SALARY] [t/TAG]...` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"*Shorthand:* `e INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SALARY] [t/TAG]...`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"An employer password can\u0027t be edited. [refer to `rp` (reset password)]"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"****"},{"lineNumber":217,"author":{"gitID":"-"},"content":"* Edits the employee at the specified `INDEX`. The index refers to the index number shown in the last employee listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":218,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":219,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":220,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the employee will be removed i.e adding of tags is not cumulative."},{"lineNumber":221,"author":{"gitID":"-"},"content":"* You can remove all the employee\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":222,"author":{"gitID":"-"},"content":"****"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st employee to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"Edits the name of the 2nd employee to be `Betsy Crower` and clears all existing tags."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting an employee : `delete`"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"Deletes the specified employee from PTMan. +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"*Format:* `delete INDEX` +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"*Shorthand:* `d INDEX`"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"****"},{"lineNumber":240,"author":{"gitID":"-"},"content":"* The employee will be deleted at the specified INDEX."},{"lineNumber":241,"author":{"gitID":"-"},"content":"* The INDEX refers to the index number shown in the most recent listing."},{"lineNumber":242,"author":{"gitID":"-"},"content":"* The INDEX *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":243,"author":{"gitID":"-"},"content":"****"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":249,"author":{"gitID":"-"},"content":"Deletes the 2nd employee in PTMan."},{"lineNumber":250,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":251,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":252,"author":{"gitID":"-"},"content":"Deletes the 1st employee in the results of the `find` command."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changing master password: `cmp`"},{"lineNumber":255,"author":{"gitID":"-"},"content":"You should be given a default password when your entry is created by your employer."},{"lineNumber":256,"author":{"gitID":"-"},"content":"For security purposes, you are required to change your password the moment your account is created. +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"*Format:* `cmp` `pw/CURRENT_PASSWORD pw/NEW_PASSWORD pw/CONFIRM_NEW_PASSWORD`"},{"lineNumber":258,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"Password should be at least 8 character long."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Resetting master password: `rmp`"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"Resets the password of the specified employee. +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"*Format:* `rmp` +"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"****"},{"lineNumber":267,"author":{"gitID":"-"},"content":"* The password will reset for employee at the specified INDEX."},{"lineNumber":268,"author":{"gitID":"-"},"content":"* The INDEX refers to the index number shown in the most recent listing."},{"lineNumber":269,"author":{"gitID":"-"},"content":"* The INDEX *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":270,"author":{"gitID":"-"},"content":"****"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"* `rmp` +"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":278,"author":{"gitID":"-"},"content":"Password reset will be sent to your outlet email."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":281,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"Restores PTMan to the state before the previous _undoable_ command was executed. +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"*Format:* `undo` +"},{"lineNumber":285,"author":{"gitID":"-"},"content":"*Shorthand:* `u`"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":288,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":289,"author":{"gitID":"-"},"content":"Undoable commands: Commands that modify PTMan\u0027s data (`add`, `delete`, `edit`, `clear`, `addshift`, `deleteshift`, `apply` and `unapply`)."},{"lineNumber":290,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"* `delete 1 +"},{"lineNumber":295,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"hzxcaryn"},"content":"* `list` +"},{"lineNumber":299,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":300,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":303,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":305,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command: `redo`"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":310,"author":{"gitID":"-"},"content":"*Format:* `redo` +"},{"lineNumber":311,"author":{"gitID":"-"},"content":"*Shorthand:* `r`"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":316,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":317,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":321,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"hzxcaryn"},"content":"* `delete 1 pw/ADMIN_PASSWORD` +"},{"lineNumber":324,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":325,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":327,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":328,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"Clears all employees from PTMan. +"},{"lineNumber":334,"author":{"gitID":"-"},"content":"*Format:* `clear` +"},{"lineNumber":335,"author":{"gitID":"-"},"content":"*Shorthand:* `c`"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing all details of employees: `viewall`"},{"lineNumber":338,"author":{"gitID":"-"},"content":"Displays all the details of the employees. These include their addresses and phone numbers. +"},{"lineNumber":339,"author":{"gitID":"-"},"content":"*Format:* `viewall`"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing outlet information: `editoutlet`"},{"lineNumber":342,"author":{"gitID":"-"},"content":"Edits the outlet information. +"},{"lineNumber":343,"author":{"gitID":"-"},"content":"*Format:* `editoutlet n/NAME h/OPERATING_HOURS c/CONTACT_NUMBERS e/EMAIL`  +"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":346,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":347,"author":{"gitID":"-"},"content":"`OperatingHours` in HHMM-HHMM format. +"},{"lineNumber":348,"author":{"gitID":"-"},"content":"For example, `h/0900-2200` +"},{"lineNumber":349,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changing admin password: `cap` [coming in v1.4]"},{"lineNumber":352,"author":{"gitID":"-"},"content":"Changes the admin password. +"},{"lineNumber":353,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `cap old/CURRENT_ADMIN_PASSWORD new/NEW_ADMIN_PASSWORD` +"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Creating an announcement: `announcement`"},{"lineNumber":356,"author":{"gitID":"-"},"content":"PTman should be able to allow employers to create a new announcement. +"},{"lineNumber":357,"author":{"gitID":"-"},"content":"*Format:* `announcement ANNOUNCEMENT_MESSAGE` +"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a shift: `addshift`"},{"lineNumber":360,"author":{"gitID":"-"},"content":"Adds a shift to the timetable to indicate that you require employees at that period. +"},{"lineNumber":361,"author":{"gitID":"-"},"content":"*Format:* `addshift d/DATE ts/START_TIME te/END_TIME c/EMPLOYEE_CAPACITY` +"},{"lineNumber":362,"author":{"gitID":"-"},"content":"*Shorthand:* `as`"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":365,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":366,"author":{"gitID":"-"},"content":"`DATE` should be in DD-MM-YY format. +"},{"lineNumber":367,"author":{"gitID":"-"},"content":"`START_TIME` and `END_TIME` are in HHMM format. +"},{"lineNumber":368,"author":{"gitID":"-"},"content":"`CAPACITY` should be a positive integer."},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting a shift: `deleteshift`"},{"lineNumber":372,"author":{"gitID":"-"},"content":"Deletes a shift from the timetable."},{"lineNumber":373,"author":{"gitID":"-"},"content":"*Format:* `deleteshift SHIFT_INDEX`"},{"lineNumber":374,"author":{"gitID":"-"},"content":"*Shorthand:* `ds`"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding an employee to a shift: `addto` [coming in v1.4]"},{"lineNumber":377,"author":{"gitID":"-"},"content":"Adds an employee to a shift."},{"lineNumber":378,"author":{"gitID":"-"},"content":"*Format:* `addto EMPLOYEE_INDEX SHIFT_INDEX` +"},{"lineNumber":379,"author":{"gitID":"-"},"content":"*Shorthand:* `at`"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Removing an employee from a shift: `unapply`"},{"lineNumber":382,"author":{"gitID":"-"},"content":"Removes an employee from a shift. +"},{"lineNumber":383,"author":{"gitID":"-"},"content":"*Format:* `unapply EMPLOYEE_INDEX SHIFT_INDEX` +"},{"lineNumber":384,"author":{"gitID":"-"},"content":"*Shorthand:* `uap`"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d Employee Features"},{"lineNumber":387,"author":{"gitID":"-"},"content":"If you are an employee, you are able to access these commands in addition to the shared commands."},{"lineNumber":388,"author":{"gitID":"-"},"content":"These employee commands require the use of your employee password."},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Applying for a shift: `apply`"},{"lineNumber":391,"author":{"gitID":"-"},"content":"Applies for a shift. +"},{"lineNumber":392,"author":{"gitID":"-"},"content":"*Format:* `apply EMPLOYEE_INDEX SHIFT_INDEX pw/PASSWORD`"},{"lineNumber":393,"author":{"gitID":"-"},"content":"*Shorthand:* `ap`"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"hzxcaryn"},"content":"Examples:"},{"lineNumber":396,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"* If your index in the employee list is `2` and you want to apply for shift `1`: `apply 2 1 pw/YOUR_PASSWORD`"},{"lineNumber":398,"author":{"gitID":"-"},"content":"* If your index in the employee list is `6` and you want to apply for shift `5`: `apply 6 5 pw/YOUR_PASSWORD`"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":401,"author":{"gitID":"-"},"content":"If you have accidentally applied for the wrong shift, you may use the `unapply` command. +"},{"lineNumber":402,"author":{"gitID":"-"},"content":"View \u003c\u003cRemoving yourself from a shift: `unapply`\u003e\u003e for more information."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Removing yourself from a shift: `unapply`"},{"lineNumber":405,"author":{"gitID":"-"},"content":"Removes youreself from a shift. +"},{"lineNumber":406,"author":{"gitID":"-"},"content":"*Format:* `unapply EMPLOYEE_INDEX SHIFT_INDEX pw/PASSWORD` +"},{"lineNumber":407,"author":{"gitID":"-"},"content":"*Shorthand:* `uap`"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changing your password: `cp`"},{"lineNumber":410,"author":{"gitID":"-"},"content":"You should be given a default password when your entry is created by your employer."},{"lineNumber":411,"author":{"gitID":"-"},"content":"For security purposes, you are required to change your password the moment your account is created. +"},{"lineNumber":412,"author":{"gitID":"-"},"content":"*Format:* `cp INDEX` `pw/CURRENT_PASSWORD pw/NEW_PASSWORD pw/CONFIRM_NEW_PASSWORD`"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"****"},{"lineNumber":415,"author":{"gitID":"-"},"content":"* The password will change for employee at the specified INDEX."},{"lineNumber":416,"author":{"gitID":"-"},"content":"* The INDEX refers to the index number shown in the most recent listing."},{"lineNumber":417,"author":{"gitID":"-"},"content":"* The INDEX *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":418,"author":{"gitID":"-"},"content":"****"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Resetting your password: `rp`"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"Resets the password of the specified employee. +"},{"lineNumber":423,"author":{"gitID":"-"},"content":"*Format:* `rp INDEX` +"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"****"},{"lineNumber":426,"author":{"gitID":"-"},"content":"* The password will reset for employee at the specified INDEX."},{"lineNumber":427,"author":{"gitID":"-"},"content":"* The INDEX refers to the index number shown in the most recent listing."},{"lineNumber":428,"author":{"gitID":"-"},"content":"* The INDEX *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":429,"author":{"gitID":"-"},"content":"****"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":434,"author":{"gitID":"-"},"content":"`rp 2` +"},{"lineNumber":435,"author":{"gitID":"-"},"content":"Reset password for the 2nd employee in PTMan."},{"lineNumber":436,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":437,"author":{"gitID":"-"},"content":"`rp 1` +"},{"lineNumber":438,"author":{"gitID":"-"},"content":"Reset password for the 1st employee in the results of the `find` command."},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":441,"author":{"gitID":"-"},"content":"Password reset will be sent to your email that you registered with your employer"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":447,"author":{"gitID":"-"},"content":"You should change your password the moment you are in PTMan."},{"lineNumber":448,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"PTMan\u0027s data is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":453,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":459,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":460,"author":{"gitID":"-"},"content":""},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another computer? +"},{"lineNumber":466,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous PTMan folder."},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SALARY pw/AdminPassword [t/TAG]...` +"},{"lineNumber":471,"author":{"gitID":"koo1993"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 s/0 t/friend t/colleague`"},{"lineNumber":472,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":473,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":474,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":475,"author":{"gitID":"koo1993"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/SALARY] [t/TAG]...` +"},{"lineNumber":476,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":477,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":478,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":479,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":480,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":481,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":482,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":483,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":484,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":485,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"koo1993":4,"hzxcaryn":72,"-":409}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hzxcaryn"},"content":"\u003d image:docs/images/ptman_logo_readme.png[width\u003d\"400\"]"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W14-B2/main[image:https://travis-ci.org/CS2103JAN2018-W14-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://coveralls.io/repos/github/CS2103JAN2018-W14-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W14-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/shanwpf/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103JAN2018-W14-B2/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fb966d43886f4005981c9f75ad27c3e2[Codacy Badge]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"* This is a desktop application for both part-time employers and employees. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":17,"author":{"gitID":"-"},"content":"* For employers:"},{"lineNumber":18,"author":{"gitID":"-"},"content":". Provides easy management of employees."},{"lineNumber":19,"author":{"gitID":"-"},"content":". Indicate time slots where manpower is required."},{"lineNumber":20,"author":{"gitID":"-"},"content":"* For employees:"},{"lineNumber":21,"author":{"gitID":"-"},"content":". View the available working time slots through the timetable."},{"lineNumber":22,"author":{"gitID":"-"},"content":". Register for preferred time slots that you want to work at."},{"lineNumber":23,"author":{"gitID":"-"},"content":"* A sophisticated GUI that includes a list panel and an in-built timetable."},{"lineNumber":24,"author":{"gitID":"-"},"content":"* More test cases, including automated GUI testing."},{"lineNumber":25,"author":{"gitID":"-"},"content":"* Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":37,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"* AddressBook-Level4 project created by https://github.com/nus-cs2103-AY1718S2/addressbook-level4[SE-EDU] initiative"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://github.com/dlemmermann/CalendarFX[CalendarFX]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"hzxcaryn":1,"-":42}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DEFAULT_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty ptman book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: undo clearing ptman book -\u003e original ptman book restored */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: redo clearing ptman book -\u003e cleared */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* Case: selects first card in employee list and clears ptman book -\u003e cleared and no card selected */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ptman book"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        selectEmployee(Index.fromOneBased(1));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: filters the employee list before clearing -\u003e entire ptman book cleared */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ptman book"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: clear empty ptman book -\u003e cleared */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":"        assertAdminModeDisplayShowsLoginStyle();"},{"lineNumber":84,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":110,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":111}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DEFAULT_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.DeleteCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TestUtil.getEmployee;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TestUtil.getLastIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TestUtil.getMidIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: delete the first employee in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String command \u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_EMPLOYEE.getOneBased();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Employee deletedEmployee \u003d removeEmployee(expectedModel, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: delete the last employee in the list -\u003e deleted */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index lastEmployeeIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastEmployeeIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last employee in the list -\u003e last employee restored */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last employee in the list -\u003e last employee deleted again */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        removeEmployee(modelBeforeDeletingLast, lastEmployeeIndex);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: delete the middle employee in the list -\u003e deleted */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Index middleEmployeeIndex \u003d getMidIndex(getModel());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middleEmployeeIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, delete index within bounds of ptman book and employee list -\u003e deleted */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, delete index within bounds of ptman book but out of bounds of employee list"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* ------------------- Performing delete operation while a employee card is selected ---------------------- */"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: delete the selected employee -\u003e employee list panel selects the employee before the deleted employee */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        showAllEmployees();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        selectEmployee(selectedIndex);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        deletedEmployee \u003d removeEmployee(expectedModel, selectedIndex);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0 \";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1 \";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":106,"author":{"gitID":"-"},"content":"                getModel().getPartTimeManager().getEmployeeList().size() + 1);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Removes the {@code Employee} at the specified {@code index} in {@code model}\u0027s ptman book."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @return the removed employee"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private Employee removeEmployee(Model model, Index index) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Employee targetEmployee \u003d getEmployee(model, index);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            model.deleteEmployee(targetEmployee);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetEmployee is retrieved from model.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return targetEmployee;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Deletes the employee at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Employee deletedEmployee \u003d removeEmployee(expectedModel, toDelete);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                expectedModel, expectedResultMessage);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":183,"author":{"gitID":"hzxcaryn"},"content":"        assertAdminModeDisplayShowsLoginStyle();"},{"lineNumber":184,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":211,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":212}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DEFAULT_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_SALARY_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_SALARY_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.CARL;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.HOON;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.IDA;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.AddCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Address;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Phone;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Salary;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeUtil;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: add a employee without tags to a non-empty ptman book, command with leading spaces and trailing spaces"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Employee toAdd \u003d AMY;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \" \" + SALARY_DESC_AMY + \"   \" + TAG_DESC_FRIEND;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD + \" \";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD + \" \";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        model.addEmployee(toAdd);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except name -\u003e added */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSalary(VALID_SALARY_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except phone -\u003e added */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSalary(VALID_SALARY_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except email -\u003e added */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSalary(VALID_SALARY_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except address -\u003e added */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withSalary(VALID_SALARY_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except salary -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSalary(VALID_SALARY_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                + SALARY_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: add to empty ptman book -\u003e added */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        deleteAllEmployees();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: add a employee with tags, command with parameters in random order -\u003e added */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + SALARY_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: add a employee, missing tags -\u003e added */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: filters the employee list before adding -\u003e added */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* ---------------------- Perform add operation while a employee card is selected ------------------------- */"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the employee list, add a employee -\u003e added, card selection remains unchanged */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        selectEmployee(Index.fromOneBased(1));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate employee -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        command \u003d EmployeeUtil.getAddCommand(HOON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate employee except with different tags -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalEmployees#ALICE"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // PartTimeManager#addEmployee(Employee)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        command \u003d EmployeeUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SALARY_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SALARY_DESC_AMY;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + SALARY_DESC_AMY;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + SALARY_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: missing salary -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + EmployeeUtil.getEmployeeDetails(toAdd);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        /* Case: invalid salary -\u003e rejected */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                + INVALID_SALARY_DESC;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Salary.MESSAGE_SALARY_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} equal to the corresponding components in"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Employee toAdd) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertCommandSuccess(EmployeeUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Employee)}. Executes {@code command}"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Employee)"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Employee toAdd) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            expectedModel.addEmployee(toAdd);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException dpe) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Employee)} except asserts that"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code EmployeeListPanel} equal to the corresponding components in"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Employee)"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":267,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":294,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":296}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.SelectCommand.MESSAGE_SELECT_EMPLOYEE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EmployeeUtil.DEFAULT_PASSWORD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.getTypicalEmployees;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.SelectCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the employee list, command with leading spaces and trailing spaces"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + \"   \";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the employee list -\u003e selected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Index employeeCount \u003d Index.fromOneBased(getTypicalEmployees().size());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + employeeCount.getOneBased();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, employeeCount);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the employee list -\u003e selected */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(employeeCount.getOneBased() / 2);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, select index within bounds of ptman book but out of bounds of employee list"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, select index within bounds of ptman book and employee list -\u003e selected */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredEmployeeList().size() + 1;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":93,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: select from empty ptman book -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        deleteAllEmployees();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased(),"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected employee.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":121,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_EMPLOYEE_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getEmployeeListPanel().getSelectedCardIndex();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":161,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":164}},{"path":"src/test/java/seedu/ptman/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_SUCCESS \u003d"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"            new NewResultAvailableEvent(\"Success\", false);"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_FAILED \u003d"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":"            new NewResultAvailableEvent(\"Failed\", true);"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"    private ArrayList\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(\"Welcome to PTMan. Type a command in the search bar above to get started. \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"                + \"If you need somewhere to start, search “help” to view the user guide.\","},{"lineNumber":46,"author":{"gitID":"-"},"content":"                resultDisplayHandle.getText());"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"        // new results received"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"        assertExpectedResultDisplay(NEW_RESULT_EVENT_SUCCESS);"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"        assertExpectedResultDisplay(NEW_RESULT_EVENT_FAILED);"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"     * Runs a new result event, then verifies that \u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"     *      - a successful event result display\u0027s style is the same as {@code defaultStyleOfResultDisplay}."},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"     *      - a failed event result display\u0027s style is the same as {@code errorStyleOfResultDisplay}."},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"    private void assertExpectedResultDisplay(NewResultAvailableEvent event) {"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"        postNow(event);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(event.message, resultDisplayHandle.getText());"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"        if (event.isError) {"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"            assertEquals(errorStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"        } else {"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"            assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":38,"-":36}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EmployeeUtil.DEFAULT_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.CARL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.DANIEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, command with leading spaces and trailing spaces"},{"lineNumber":32,"author":{"gitID":"-"},"content":"         * -\u003e 2 employees found"},{"lineNumber":33,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where employee list is displaying the employees we are finding"},{"lineNumber":42,"author":{"gitID":"-"},"content":"         * -\u003e 2 employees found"},{"lineNumber":43,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: find employee where employee list is not displaying the employee we are finding -\u003e 1 employee found */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 keywords -\u003e 2 employees found */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 keywords in reversed order -\u003e 2 employees found */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 keywords with 1 repeat -\u003e 2 employees found */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e 2 employees found"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: find same employees in ptman book after deleting 1 of them -\u003e 1 employee found */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getPartTimeManager().getEmployeeList().contains(BENSON));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: find employee in ptman book, keyword is same as name but of different case -\u003e 1 employee found */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: find employee in ptman book, keyword is substring of name -\u003e 0 employees found */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: find employee in ptman book, name is substring of keyword -\u003e 0 employees found */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: find employee not in ptman book -\u003e 0 employees found */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: find phone number of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: find ptman of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: find email of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: find tags of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: find while a employee is selected -\u003e selected card deselected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        showAllEmployees();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        selectEmployee(Index.fromOneBased(1));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertFalse(getEmployeeListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: find employee in empty ptman book -\u003e 0 employees found */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        deleteAllEmployees();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_EMPLOYEES_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":173,"author":{"gitID":"-"},"content":"                MESSAGE_EMPLOYEES_LISTED_OVERVIEW, expectedModel.getFilteredEmployeeList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":203,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":206}},{"path":"src/test/java/seedu/ptman/ui/TimetablePanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.getTypicalPartTimeManagerWithShiftsWithoutSunday;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.TimetablePanel.TIMETABLE_IMAGE_FILE_FORMAT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.TimetablePanel.getTimetableAvail;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.TimetablePanel.getTimetableEmployee;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.TimetablePanel.getTimetableFull;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.TimetablePanel.getTimetableOthers;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.TimetablePanel.getTimetableRunningOut;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.testutil.GuiTestAssert.assertEntryDisplaysShift;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.EmployeePanelSelectionChangedEvent;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.ExportTimetableAsImageAndEmailRequestEvent;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.ExportTimetableAsImageRequestEvent;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"public class TimetablePanelTest extends GuiUnitTest {"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"    private static final ObservableList\u003cShift\u003e TYPICAL_SHIFTS \u003d"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"            getTypicalPartTimeManagerWithShiftsWithoutSunday().getShiftList();"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"    private static final OutletInformation TYPICAL_OUTLET \u003d"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"            getTypicalPartTimeManagerWithShiftsWithoutSunday().getOutletInformation();"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"    private static final String TIMETABLE_IMAGE_FILE_NAME_FIRST_TEST \u003d \"Testing1\";"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"    private static final String TIMETABLE_IMAGE_FILE_NAME_SECOND_TEST \u003d \"Testing2\";"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"    private static final Email TIMETABLE_IMAGE_EMAIL_TEST \u003d new Email(\"example@gmail.com\");"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"    private EmployeePanelSelectionChangedEvent employeePanelSelectionChangedEventAliceStub;"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"    private EmployeePanelSelectionChangedEvent employeePanelSelectionChangedEventNullStub;"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"    private ExportTimetableAsImageRequestEvent exportTimetableAsImageRequestEventStub;"},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"    private ExportTimetableAsImageAndEmailRequestEvent exportTimetableAsImageAndEmailRequestEventStub;"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"    private TimetablePanel timetablePanel;"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"    private Path testFilePathFirst;"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"    private Path testFilePathSecond;"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"    private String testFilePathNameSecond;"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"    @Before"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"    public void setUp() {"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"        employeePanelSelectionChangedEventAliceStub \u003d"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"                new EmployeePanelSelectionChangedEvent(new EmployeeCard(ALICE, 0));"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"        employeePanelSelectionChangedEventNullStub \u003d new EmployeePanelSelectionChangedEvent(null);"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":"        exportTimetableAsImageRequestEventStub \u003d"},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"                new ExportTimetableAsImageRequestEvent(TIMETABLE_IMAGE_FILE_NAME_FIRST_TEST);"},{"lineNumber":81,"author":{"gitID":"hzxcaryn"},"content":"        exportTimetableAsImageAndEmailRequestEventStub \u003d new ExportTimetableAsImageAndEmailRequestEvent("},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":"                TIMETABLE_IMAGE_FILE_NAME_SECOND_TEST, TIMETABLE_IMAGE_EMAIL_TEST);"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":84,"author":{"gitID":"hzxcaryn"},"content":"        testFilePathFirst \u003d Paths.get(\".\" + File.separator + TIMETABLE_IMAGE_FILE_NAME_FIRST_TEST + \".\""},{"lineNumber":85,"author":{"gitID":"hzxcaryn"},"content":"                + TIMETABLE_IMAGE_FILE_FORMAT);"},{"lineNumber":86,"author":{"gitID":"hzxcaryn"},"content":"        testFilePathNameSecond \u003d \".\" + File.separator + TIMETABLE_IMAGE_FILE_NAME_SECOND_TEST + \".\""},{"lineNumber":87,"author":{"gitID":"hzxcaryn"},"content":"                + TIMETABLE_IMAGE_FILE_FORMAT;"},{"lineNumber":88,"author":{"gitID":"hzxcaryn"},"content":"        testFilePathSecond \u003d Paths.get(testFilePathNameSecond);"},{"lineNumber":89,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":90,"author":{"gitID":"hzxcaryn"},"content":"        timetablePanel \u003d new TimetablePanel(TYPICAL_SHIFTS, TYPICAL_OUTLET);"},{"lineNumber":91,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":92,"author":{"gitID":"hzxcaryn"},"content":"        uiPartRule.setUiPart(timetablePanel);"},{"lineNumber":93,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":95,"author":{"gitID":"hzxcaryn"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"hzxcaryn"},"content":"    public void display() {"},{"lineNumber":97,"author":{"gitID":"hzxcaryn"},"content":"        // Default timetable view: Displays week view"},{"lineNumber":98,"author":{"gitID":"hzxcaryn"},"content":"        assertNotNull(timetablePanel.getRoot());"},{"lineNumber":99,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(timetablePanel.getRoot().getSelectedPage(), timetablePanel.getRoot().getWeekPage());"},{"lineNumber":100,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":101,"author":{"gitID":"hzxcaryn"},"content":"        // Default timetable view: Displays all shifts"},{"lineNumber":102,"author":{"gitID":"hzxcaryn"},"content":"        List\u003cEntry\u003e defaultEntries \u003d getTimetableEntries();"},{"lineNumber":103,"author":{"gitID":"hzxcaryn"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_SHIFTS.size(); i++) {"},{"lineNumber":104,"author":{"gitID":"hzxcaryn"},"content":"            Shift expectedShift \u003d TYPICAL_SHIFTS.get(i);"},{"lineNumber":105,"author":{"gitID":"hzxcaryn"},"content":"            Entry actualEntry \u003d defaultEntries.get(i);"},{"lineNumber":106,"author":{"gitID":"hzxcaryn"},"content":"            assertEntryDisplaysShift(expectedShift, actualEntry, i + 1);"},{"lineNumber":107,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":109,"author":{"gitID":"hzxcaryn"},"content":"        // Snapshot taken when export command called"},{"lineNumber":110,"author":{"gitID":"hzxcaryn"},"content":"        postNow(exportTimetableAsImageRequestEventStub);"},{"lineNumber":111,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(Files.exists(testFilePathFirst) \u0026\u0026 Files.isRegularFile(testFilePathFirst));"},{"lineNumber":112,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":113,"author":{"gitID":"hzxcaryn"},"content":"        // Snapshot taken when export and email command called: Emailed file is not saved locally"},{"lineNumber":114,"author":{"gitID":"hzxcaryn"},"content":"        File testFileSecond \u003d new File(testFilePathNameSecond);"},{"lineNumber":115,"author":{"gitID":"hzxcaryn"},"content":"        postNow(exportTimetableAsImageAndEmailRequestEventStub);"},{"lineNumber":116,"author":{"gitID":"hzxcaryn"},"content":"        assertFalse(Files.exists(testFilePathSecond));"},{"lineNumber":117,"author":{"gitID":"hzxcaryn"},"content":"        assertFalse(testFileSecond.exists());"},{"lineNumber":118,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":119,"author":{"gitID":"hzxcaryn"},"content":"        // Associated shifts of employee highlighted"},{"lineNumber":120,"author":{"gitID":"hzxcaryn"},"content":"        postNow(employeePanelSelectionChangedEventAliceStub);"},{"lineNumber":121,"author":{"gitID":"hzxcaryn"},"content":"        List\u003cEntry\u003e entriesAfterSelectionEventAlice \u003d getTimetableEntries();"},{"lineNumber":122,"author":{"gitID":"hzxcaryn"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_SHIFTS.size(); i++) {"},{"lineNumber":123,"author":{"gitID":"hzxcaryn"},"content":"            Shift expectedShift \u003d TYPICAL_SHIFTS.get(i);"},{"lineNumber":124,"author":{"gitID":"hzxcaryn"},"content":"            Entry actualEntry \u003d entriesAfterSelectionEventAlice.get(i);"},{"lineNumber":125,"author":{"gitID":"hzxcaryn"},"content":"            assertEntryDisplaysShift(expectedShift, actualEntry, i + 1);"},{"lineNumber":126,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":128,"author":{"gitID":"hzxcaryn"},"content":"        // Load back to default timetable view: Displays current week view"},{"lineNumber":129,"author":{"gitID":"hzxcaryn"},"content":"        postNow(employeePanelSelectionChangedEventNullStub);"},{"lineNumber":130,"author":{"gitID":"hzxcaryn"},"content":"        List\u003cEntry\u003e entriesAfterSelectionEventNull \u003d getTimetableEntries();"},{"lineNumber":131,"author":{"gitID":"hzxcaryn"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_SHIFTS.size(); i++) {"},{"lineNumber":132,"author":{"gitID":"hzxcaryn"},"content":"            Shift expectedShift \u003d TYPICAL_SHIFTS.get(i);"},{"lineNumber":133,"author":{"gitID":"hzxcaryn"},"content":"            Entry actualEntry \u003d entriesAfterSelectionEventNull.get(i);"},{"lineNumber":134,"author":{"gitID":"hzxcaryn"},"content":"            assertEntryDisplaysShift(expectedShift, actualEntry, i + 1);"},{"lineNumber":135,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":138,"author":{"gitID":"hzxcaryn"},"content":"    @After"},{"lineNumber":139,"author":{"gitID":"hzxcaryn"},"content":"    public void tearDown() {"},{"lineNumber":140,"author":{"gitID":"hzxcaryn"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"hzxcaryn"},"content":"            Files.deleteIfExists(testFilePathFirst);"},{"lineNumber":142,"author":{"gitID":"hzxcaryn"},"content":"            Files.deleteIfExists(testFilePathSecond);"},{"lineNumber":143,"author":{"gitID":"hzxcaryn"},"content":"        } catch (IOException e) {"},{"lineNumber":144,"author":{"gitID":"hzxcaryn"},"content":"            throw new AssertionError(\"Error deleting test files.\");"},{"lineNumber":145,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":148,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cEntry\u003c?\u003e\u003e getEntriesForEntryType(Calendar entryType) {"},{"lineNumber":149,"author":{"gitID":"hzxcaryn"},"content":"        Map\u003cLocalDate, List\u003cEntry\u003c?\u003e\u003e\u003e entryMap \u003d entryType.findEntries("},{"lineNumber":150,"author":{"gitID":"hzxcaryn"},"content":"                LocalDate.of(2018, 3, 19).minusDays(7), LocalDate.of(2018, 3, 19).plusDays(7), ZoneId.systemDefault());"},{"lineNumber":151,"author":{"gitID":"hzxcaryn"},"content":"        List\u003cEntry\u003c?\u003e\u003e entryList \u003d entryMap.values().stream()"},{"lineNumber":152,"author":{"gitID":"hzxcaryn"},"content":"                .flatMap(Collection::stream)"},{"lineNumber":153,"author":{"gitID":"hzxcaryn"},"content":"                .collect(Collectors.toList());"},{"lineNumber":154,"author":{"gitID":"hzxcaryn"},"content":"        return entryList;"},{"lineNumber":155,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":157,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cEntry\u003e getTimetableEntries() {"},{"lineNumber":158,"author":{"gitID":"hzxcaryn"},"content":"        List\u003cEntry\u003c?\u003e\u003e availEntries \u003d getEntriesForEntryType(getTimetableAvail());"},{"lineNumber":159,"author":{"gitID":"hzxcaryn"},"content":"        List\u003cEntry\u003c?\u003e\u003e runningOutEntries \u003d getEntriesForEntryType(getTimetableRunningOut());"},{"lineNumber":160,"author":{"gitID":"hzxcaryn"},"content":"        List\u003cEntry\u003c?\u003e\u003e fullEntries \u003d getEntriesForEntryType(getTimetableFull());"},{"lineNumber":161,"author":{"gitID":"hzxcaryn"},"content":"        List\u003cEntry\u003c?\u003e\u003e employeeEntries \u003d getEntriesForEntryType(getTimetableEmployee());"},{"lineNumber":162,"author":{"gitID":"hzxcaryn"},"content":"        List\u003cEntry\u003c?\u003e\u003e othersEntries \u003d getEntriesForEntryType(getTimetableOthers());"},{"lineNumber":163,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":164,"author":{"gitID":"hzxcaryn"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e(Stream.of("},{"lineNumber":165,"author":{"gitID":"hzxcaryn"},"content":"                availEntries, runningOutEntries, fullEntries, employeeEntries, othersEntries)"},{"lineNumber":166,"author":{"gitID":"hzxcaryn"},"content":"                .flatMap(Collection::stream)"},{"lineNumber":167,"author":{"gitID":"hzxcaryn"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":168,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":169,"author":{"gitID":"hzxcaryn"},"content":"        Collections.sort(entries, Comparator.comparing(Entry::getStartAsLocalDateTime));"},{"lineNumber":170,"author":{"gitID":"hzxcaryn"},"content":"        return entries;"},{"lineNumber":171,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":173,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":124,"-":49}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DEFAULT_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.ptman.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Address;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Salary;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeUtil;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last employee in the list -\u003e last employee restored */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last employee in the list -\u003e last employee edited again */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updateEmployee("},{"lineNumber":86,"author":{"gitID":"-"},"content":"                getModel().getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased()), editedEmployee);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: edit a employee with new values same as existing values -\u003e edited */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Employee employeeToEdit \u003d getModel().getFilteredEmployeeList().get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withTags().build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, edit index within bounds of ptman book and employee list -\u003e edited */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        employeeToEdit \u003d getModel().getFilteredEmployeeList().get(index.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, edit index within bounds of ptman book but out of bounds of employee list"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* ------------------- Performing edit operation while a employee card is selected ------------------------ */"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the employee list, edit a employee -\u003e edited,"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * card selection remains unchanged but browser url changes"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        showAllEmployees();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        selectEmployee(index);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new employee\u0027s name"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredEmployeeList().size() + 1;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased(),"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                        + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid salary -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                        + INVALID_SALARY_DESC, Salary.MESSAGE_SALARY_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: edit a employee with new values same as another employee\u0027s values -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        executeCommand(EmployeeUtil.getAddCommand(BOB));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getPartTimeManager().getEmployeeList().contains(BOB));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredEmployeeList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: edit a employee with new values same as another employee\u0027s values"},{"lineNumber":197,"author":{"gitID":"-"},"content":"         * but with different tags -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Employee, Index)} except that"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Employee, Index)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedEmployee, null);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the employee at index {@code toEdit} being"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedEmployee}.\u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee,"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            expectedModel.updateEmployee("},{"lineNumber":226,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredEmployeeList().get(toEdit.getZeroBased()), editedEmployee);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException | EmployeeNotFoundException e) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":230,"author":{"gitID":"-"},"content":"                    \"editedEmployee is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee), expectedSelectedCardIndex);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":276,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":298,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":300}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hzxcaryn"},"content":"\u003d image:ptman_logo_dg.png[width\u003d\"400\"]"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `W14-B2`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"PTMan is a Java application that helps employers manage and schedule their part-time employees. +"},{"lineNumber":20,"author":{"gitID":"-"},"content":"It provides a graphical user interface for displaying schedules and employee information while making use of a command-line interface as the primary mode of input."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":25,"author":{"gitID":"-"},"content":"You need to make sure the following prerequisites are installed on your computer before proceeding:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"Follow these steps to set up the project in your computer:"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":45,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":46,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle."},{"lineNumber":47,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":49,"author":{"gitID":"-"},"content":". Click `Import Project`."},{"lineNumber":50,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":51,"author":{"gitID":"-"},"content":". Click `Open as Project`."},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings."},{"lineNumber":53,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":57,"author":{"gitID":"-"},"content":"You may check that you have setup the project correctly by following these steps:"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". Run the `seedu.ptman.MainApp` and try a few commands"},{"lineNumber":60,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify:"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS) . Select `Editor` \u003e `Code Style` \u003e `Java` . Click on the `Imports` tab to set the order."},{"lineNumber":69,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":70,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":90,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Here are some tips before you get started with coding:"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":97,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"The _Architecture Diagram_ given below illustrates the high-level design of the app."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":107,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":110,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Here are some quick overviews of each component:"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"** At app launch: Initializing the components in the correct sequence, and connecting them up with each other."},{"lineNumber":117,"author":{"gitID":"-"},"content":"** At shut down: Shutting down the components and invoking cleanup methods where necessary."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architectural level."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"** `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."},{"lineNumber":122,"author":{"gitID":"-"},"content":"** `LogsCenter` : Used by many classes to write log messages to the app\u0027s log file."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"The rest of the app consists of four components:"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Displays the UI of the app."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes commands."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the app in-memory."},{"lineNumber":129,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"Each of the four components:"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"* Defines their API in an `interface` with the same name as the component."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* Exposes their functionality using a `{Component Name}Manager` class."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":139,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":142,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":150,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":158,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":163,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component is responsible for displaying information to the user. +"},{"lineNumber":166,"author":{"gitID":"-"},"content":"_Figure 5_ below shows the structure of the `UI` component."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":169,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"The `UI` component:"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":180,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":187,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":188,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":194,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":197,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":198,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":199,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":204,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":210,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":217,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":218,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cEmployee\u003e` and `ObservableList\u003cShift\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the lists change."},{"lineNumber":219,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":222,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":225,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":232,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Shifts feature"},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"PTMan is designed to give employees the freedom and flexibility to choose the shifts they want to work in."},{"lineNumber":247,"author":{"gitID":"-"},"content":"By allowing employers to add or delete shifts, employees can then apply for shifts that are available."},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"In order to create a shift, the date, starting time, ending time, and capacity of the shift must be specified."},{"lineNumber":252,"author":{"gitID":"-"},"content":"Figure 11 is a class diagram that displays the association between `Shift` and other components in the `Model`."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":".Overview of the Shift class in the Model"},{"lineNumber":255,"author":{"gitID":"-"},"content":"image::ShiftClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"A `Shift` object is created using it\u0027s constructor:"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"Shift(Date date, Time startTime, Time endTime, Capacity capacity)"},{"lineNumber":260,"author":{"gitID":"-"},"content":"----"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"Explanation for arguments:"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":". `Date`: A class that wraps Java\u0027s `LocalDate` class. It indicates the date that the shift is on. +"},{"lineNumber":265,"author":{"gitID":"-"},"content":"Example: `new Date(\"12-03-18\")` creates a `Date` object representing 12 March 2018."},{"lineNumber":266,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":267,"author":{"gitID":"-"},"content":"The string argument should represent a date in the DD-MM-YY format."},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":". `Time`: A class that wraps Java\u0027s `LocalTime` class. It indicates the either the starting time or ending time of the shift. +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"Example: `new Time(\"1030\")` creates a `Time` object representing 10:30am."},{"lineNumber":271,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":272,"author":{"gitID":"-"},"content":"The string argument should represent a time in the 24-hour format."},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":". `Capacity`: A class that wraps an integer that indicates the number of employees required for the shift. +"},{"lineNumber":275,"author":{"gitID":"-"},"content":"Example: `new Capacity(\"4\")` creates a `Capacity` object representing integer `4`."},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"In addition to these classes, `Shift` also contains a `UniqueEmployeeList` which is empty when `Shift` is constructed."},{"lineNumber":278,"author":{"gitID":"-"},"content":"This is used to store employees that have applied for this shift."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"To store a list of shifts, we may use a `UniqueShiftList` to ensure there are no duplicate shifts."},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"The following are commands that directly interact with the `Shift` class:"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":". `AddShiftCommand`: Creates a `Shift` and adds it to the `UniqueShiftList` in `PartTimeManager`."},{"lineNumber":285,"author":{"gitID":"-"},"content":". `DeleteShiftCommand`: Deletes a `Shift` from the `UniqueShiftList` in `PartTimeManager`."},{"lineNumber":286,"author":{"gitID":"-"},"content":". `ApplyCommand`: Adds an `Employee` to the `UniqueEmployeeList` in the `Shift`."},{"lineNumber":287,"author":{"gitID":"-"},"content":". `UnapplyCommand`: Removes an `Employee` from the `UniqueEmployeeList` in the `Shift`."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reasons for how it is implemented"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"* We wrap the arguments in the classes above so that we may carry out validity checks in those classes."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"* `Time` and `Date` uses Java\u0027s well-documented `LocalTime` and `LocalDate` classes for easy integration with the GUI timetable."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"* `UniqueEmployeeList` is used to ensure there are no duplicate employees in the shift."},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"// tag::timetable"},{"lineNumber":299,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Timetable feature"},{"lineNumber":300,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"A timetable GUI is useful for employers, as it provides visual aid for them to add and remove shifts from the application."},{"lineNumber":303,"author":{"gitID":"-"},"content":"It is also helpful for both employers and employees to find out which shifts are still available and requires workers. +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"This implementation reflects the changes that resulted from the Shift commands, such as the adding and removing of shifts, as well"},{"lineNumber":305,"author":{"gitID":"-"},"content":"as the updating of slots left for each shift. +"},{"lineNumber":306,"author":{"gitID":"-"},"content":"On top of this, the selection of each employee will highlight the shifts that they have chosen to work for the week. Users are"},{"lineNumber":307,"author":{"gitID":"-"},"content":"then allowed to export the timetable as an image for future reference, without having to boot up the application, hence"},{"lineNumber":308,"author":{"gitID":"-"},"content":"bringing users convenience."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"The timetable GUI is created with the help of the https://github.com/dlemmermann/CalendarFX[CalendarFX] library, and `TimetablePanel`"},{"lineNumber":313,"author":{"gitID":"-"},"content":" is the main class in charge of displaying the timetable."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"A `TimetablePanel` is created with its constructor:"},{"lineNumber":316,"author":{"gitID":"-"},"content":"----"},{"lineNumber":317,"author":{"gitID":"-"},"content":"TimetablePanel(ObservableList\u003cShift\u003e shiftObservableList, OutletInformation outletInformation)"},{"lineNumber":318,"author":{"gitID":"-"},"content":"----"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"The `TimetablePanel` is initialised in the `MainWindow` class in the following way:"},{"lineNumber":321,"author":{"gitID":"-"},"content":"----"},{"lineNumber":322,"author":{"gitID":"-"},"content":"TimetablePanel timetablePanel \u003d new TimetablePanel(logic.getFilteredShiftList(), logic.getOutletInformation());"},{"lineNumber":323,"author":{"gitID":"-"},"content":"----"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"`TimetablePanel` takes in:"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":" * An `ObservableList\u003cShift\u003e` object, which is an unmodifiable sorted view of the filtered shifts."},{"lineNumber":328,"author":{"gitID":"-"},"content":" * An `OutletInformation` object, which contains information of the outlet that is required to build the timetable."},{"lineNumber":329,"author":{"gitID":"-"},"content":"  In particular, the operating hours of the outlet."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"`TimetablePanel` then uses these `Shift` objects to set the Entries in the timetable view, in the method `setShifts()`."},{"lineNumber":332,"author":{"gitID":"-"},"content":"The operating hours acquired from `OutletInformation` is then used in `updateTimetableView()` to ensure that the timetable"},{"lineNumber":333,"author":{"gitID":"-"},"content":"displays all the time slots within this time range. +"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"The timetable GUI automatically refreshes to update the timetable view by calling the `updateTimetableView()` method whenever"},{"lineNumber":336,"author":{"gitID":"-"},"content":"there is a `PartTimeManagerChangedEvent`. This ensures the timetable is always updated when a shift is added, removed, or altered."},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Select employee to view working shifts"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"`TimetablePanel` also subscribes to `EmployeePanelSelectionChangedEvent` to detect if a certain employee is selected. If so,"},{"lineNumber":341,"author":{"gitID":"-"},"content":"the timetable will reflect the employee\u0027s shifts in a different color by calling `loadEmployeeTimetable(Employee employee)`. +"},{"lineNumber":342,"author":{"gitID":"-"},"content":"More to be updated in v1.3."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Export timetable to image"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"To be updated in v1.3."},{"lineNumber":347,"author":{"gitID":"-"},"content":"// end::timetable"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram (Figure 11) shows the inheritance diagram for commands:"},{"lineNumber":357,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":".Inheritance Diagram for commands"},{"lineNumber":360,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"As you can see from Figure 11, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implement the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":367,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":368,"author":{"gitID":"-"},"content":"----"},{"lineNumber":369,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":370,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":371,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":373,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"-"},"content":"}"},{"lineNumber":375,"author":{"gitID":"-"},"content":"----"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":378,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":379,"author":{"gitID":"-"},"content":"----"},{"lineNumber":380,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":381,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":382,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":383,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":387,"author":{"gitID":"-"},"content":"}"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":390,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":391,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":392,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":393,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":394,"author":{"gitID":"-"},"content":"}"},{"lineNumber":395,"author":{"gitID":"-"},"content":"----"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":410,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":421,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":424,"author":{"gitID":"-"},"content":"The following sequence diagram (Figure 12) shows how the undo operation works:"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":".Sequence Diagram for Undo Operation"},{"lineNumber":427,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":434,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer makes sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":455,"author":{"gitID":"-"},"content":"This section highlights the considerations behind our application\u0027s design choices."},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`."},{"lineNumber":460,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":461,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":462,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":463,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":464,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":469,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":470,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":471,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":472,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":473,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each command is correct."},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modify the address book (`add`, `clear`, `edit`)."},{"lineNumber":479,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are lost)."},{"lineNumber":480,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example),  only to realize that it does not do that, after executing `undo`."},{"lineNumber":481,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":482,"author":{"gitID":"-"},"content":"** Pros: PTMan might be more intuitive for the user."},{"lineNumber":483,"author":{"gitID":"-"},"content":"** Cons: User has no way of skipping such commands if he or she just want to reset the state of PTMan and not the view."},{"lineNumber":484,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":489,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science undergraduates, who are likely to be the new incoming developers of our project."},{"lineNumber":490,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update  both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":491,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":492,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":493,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."},{"lineNumber":494,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Outlet Feature"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":499,"author":{"gitID":"-"},"content":"PTMan is designed for outlets such as bubble tea shops and fast food resturants which require a large number of part-time workers."},{"lineNumber":500,"author":{"gitID":"-"},"content":"This outlet feature stores basic outlet information such as outlet name, operating hours, contact number, admin password and timetable for workers."},{"lineNumber":501,"author":{"gitID":"-"},"content":"Such details are essential to facilitate other functions such as the access control system and the timetable displayed in the GUI."},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Model component"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"Currently, the `OutletInformation` object initialized in the `PartTimeManager` is created by calling its default constructor:"},{"lineNumber":508,"author":{"gitID":"-"},"content":"----"},{"lineNumber":509,"author":{"gitID":"-"},"content":"OutletInformation()"},{"lineNumber":510,"author":{"gitID":"-"},"content":"----"},{"lineNumber":511,"author":{"gitID":"-"},"content":"This default constructor initializes the seven fields of `OutletInformation` to respective default values:"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"* Outlet name +"},{"lineNumber":514,"author":{"gitID":"-"},"content":"* Operating hours +"},{"lineNumber":515,"author":{"gitID":"-"},"content":"* Contact number +"},{"lineNumber":516,"author":{"gitID":"-"},"content":"* Email +"},{"lineNumber":517,"author":{"gitID":"-"},"content":"* Master password +"},{"lineNumber":518,"author":{"gitID":"-"},"content":"* Announcement +"},{"lineNumber":519,"author":{"gitID":"-"},"content":"* Timetable +"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"This saves the time of any employer new to PTMan because the creation of an outlet has already been done with default values."},{"lineNumber":522,"author":{"gitID":"-"},"content":"Employers can edit those values by entering an `editoutlet` command."},{"lineNumber":523,"author":{"gitID":"-"},"content":"However, there is an alternative way to create an `OutletInformation` object:"},{"lineNumber":524,"author":{"gitID":"-"},"content":"----"},{"lineNumber":525,"author":{"gitID":"-"},"content":"OutletInformation(OutletName outletName, OperatingHours operatingHours, OutletContact outletContact, OutletEmail outletEmail, Announcement announcement)"},{"lineNumber":526,"author":{"gitID":"-"},"content":"----"},{"lineNumber":527,"author":{"gitID":"-"},"content":"This constructor allows flexibility in storing outlet information, but master password must be set to the default value."},{"lineNumber":528,"author":{"gitID":"-"},"content":"It is because this default password is used for employer\u0027s first login and any employer cannot change his password without the first login. +"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Logic component"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"Currently, there are three commands that allows employers to change fields of the `OutletInformation` object. +"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"*Edit outlet command*"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"After login with correct master password, using the `editoutlet` command, employers should be able to edit the outlet information including"},{"lineNumber":537,"author":{"gitID":"-"},"content":"outlet name, operating hours, contact numbers and email. Master password can only be changed using changemasterpassword command,"},{"lineNumber":538,"author":{"gitID":"-"},"content":"while timetable can only be set with relevant `shift` commands."},{"lineNumber":539,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":540,"author":{"gitID":"-"},"content":"Editing with some fields not specified is allowed."},{"lineNumber":541,"author":{"gitID":"-"},"content":"For example, editoutlet n/OUTLETNAME is allowed. This enables employers to edit only the information required for change."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"*Change master password command*"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"After login with correct master password, using the `changemasterpassword` command, employers should be able to change the master password as well."},{"lineNumber":546,"author":{"gitID":"-"},"content":"However, due to the possibility that previous employer forgot to log out, changemasterpassword command requires"},{"lineNumber":547,"author":{"gitID":"-"},"content":"the old password for further verification. This reduces the risk of password getting stolen."},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"*Announcement command*"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"After login with correct master password, using the \"announcement\" command, employers should be able to create an announcement."},{"lineNumber":552,"author":{"gitID":"-"},"content":"This allows employers to broadcast important messages to employees. For example, when there is an urgent need of manpower in a specific time slot,"},{"lineNumber":553,"author":{"gitID":"-"},"content":"employers can create an announcement to inform the employees who can sign up for the corresponding time slot upon receving the announcement."},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Storage component"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"All outlet information is stored in a separate file with data encryption to ensure crucial data cannot be interpreted by any third party."},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d UI component"},{"lineNumber":560,"author":{"gitID":"-"},"content":"Outlet information is displayed in the outlet panel above the time table."},{"lineNumber":561,"author":{"gitID":"-"},"content":"Any change in the outlet information will be reflected immediately after the command."},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Password Class"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":567,"author":{"gitID":"-"},"content":"As PTMan is currently designed to use locally on a system, both employer and employee must go through the same system to allocate their preferred slot or to edit the data in PTMan. A Password class is given to both employer and employee to ensure that they are the authorized person that is using the system."},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":570,"author":{"gitID":"-"},"content":"A Password class is created with two constructors."},{"lineNumber":571,"author":{"gitID":"-"},"content":"----"},{"lineNumber":572,"author":{"gitID":"-"},"content":"new Password();"},{"lineNumber":573,"author":{"gitID":"-"},"content":"new Password(String hashCode);"},{"lineNumber":574,"author":{"gitID":"-"},"content":"----"},{"lineNumber":575,"author":{"gitID":"-"},"content":"`new Password()` produce hash code converted by https://en.wikipedia.org/wiki/SHA-2[SHA-256] using the default password \"DEFAULT1\" and store it within the class. +"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"`new Password(String hashCode)` allows storage to directly insert the generated hash code to create the password class upon loading. +"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":580,"author":{"gitID":"-"},"content":"To create a password with desired password String, one can invoke the method below."},{"lineNumber":581,"author":{"gitID":"-"},"content":"----"},{"lineNumber":582,"author":{"gitID":"-"},"content":"createPassword(String password)"},{"lineNumber":583,"author":{"gitID":"-"},"content":"----"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reasons for how it is implemented"},{"lineNumber":586,"author":{"gitID":"-"},"content":"The reason of converting password string to hashCode is to protect user’s password from being seen in the storage file.  Anyone who get hold of the data are not able to convert the hashCode back to the original password string as SHA-256 is a https://en.wikipedia.org/wiki/Collision_resistance[collision resistant] hash."},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature Admin Mode"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":591,"author":{"gitID":"-"},"content":"Initial stage of PTMan require huge amount of manual input by admin. To promote hassle-free command, employers can log in to admin mode and use the command provided without the need to enter the password for every command."},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":594,"author":{"gitID":"-"},"content":"Model component now implement three new API for logic component to use."},{"lineNumber":595,"author":{"gitID":"-"},"content":"----"},{"lineNumber":596,"author":{"gitID":"-"},"content":"boolean isAdminMode();"},{"lineNumber":597,"author":{"gitID":"-"},"content":"boolean setTrueAdminMode(Password password);"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"/** guarantee to break out from adminMode */"},{"lineNumber":600,"author":{"gitID":"-"},"content":"setFalseAdminMode();"},{"lineNumber":601,"author":{"gitID":"-"},"content":"----"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"`setTrueAdminMode(Password password)` requires a password that will check against the outlet password and set admin mode accordingly. Failing to give the correct password will result in returning false."},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":606,"author":{"gitID":"-"},"content":"In order to enable the command to be usable only in command mode the code below must be added to the execution() of the command *first*."},{"lineNumber":607,"author":{"gitID":"-"},"content":"----"},{"lineNumber":608,"author":{"gitID":"-"},"content":"if (!model.isAdminMode()) {"},{"lineNumber":609,"author":{"gitID":"-"},"content":"    throw new CommandException(MESSAGE_ACCESS_DENIED);"},{"lineNumber":610,"author":{"gitID":"-"},"content":"}"},{"lineNumber":611,"author":{"gitID":"-"},"content":"----"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":614,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":625,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":626,"author":{"gitID":"-"},"content":"* Currently, log messages are output to `Console` and to a `.log` file."},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":631,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":632,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":633,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":636,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"This section describes how to edit, publish and convert documentation. We use asciidoc for writing documentation."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":645,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":650,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format:"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":663,"author":{"gitID":"-"},"content":".  Go to `build/docs` folder, your should see the generated HTML files."},{"lineNumber":664,"author":{"gitID":"-"},"content":".  Right click on the file and select `Open with` -\u003e `Google Chrome`. You should see a Google Chrome window."},{"lineNumber":665,"author":{"gitID":"-"},"content":".  Click on the `Print` option in Chrome\u0027s menu. You should see a `Print` window as shown in Figure 11 below."},{"lineNumber":666,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`."},{"lineNumber":667,"author":{"gitID":"-"},"content":".  Click `Save` to save a copy of the file in PDF format. For the best results, use the settings indicated in Figure 11."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":".Saving Documentation as PDF Files in Chrome"},{"lineNumber":670,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":673,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"This section explains how to run tests, the different types of tests and test troubleshooting."},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the third one. The first two methods might fail in some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit Test Runner*"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"* Right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027` to run all tests."},{"lineNumber":687,"author":{"gitID":"-"},"content":"* Right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027` to run a subset of tests."},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests`. If you are using Mac/Linux system, run the command `./gradlew clean allTests` instead."},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":694,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more information on how to run tests using Gradle."},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (Headless)*"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean headless allTests` to run tests in headless mode. If you are using Mac/Linux system, run the command `./gradlew clean headless allTests` instead."},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":701,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the computer while the tests are running."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":".  *GUI Tests*"},{"lineNumber":708,"author":{"gitID":"-"},"content":"* These are tests involving the GUI. They include:"},{"lineNumber":709,"author":{"gitID":"-"},"content":".. _System tests_ that test the entire app by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":710,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in the `seedu.ptman.ui` package."},{"lineNumber":711,"author":{"gitID":"-"},"content":".  *Non-GUI Tests*"},{"lineNumber":712,"author":{"gitID":"-"},"content":"* These are tests not involving the GUI. They include:"},{"lineNumber":713,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting methods/classes at the lowest level. +"},{"lineNumber":714,"author":{"gitID":"-"},"content":"e.g. `seedu.ptman.commons.StringUtilTest`"},{"lineNumber":715,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units. Those code units are assumed to be working. +"},{"lineNumber":716,"author":{"gitID":"-"},"content":"e.g. `seedu.ptman.storage.StorageManagerTest`"},{"lineNumber":717,"author":{"gitID":"-"},"content":"..  Hybrids of _unit_ and _integration tests_. These test are checking multiple code units as well as how they are connected together. +"},{"lineNumber":718,"author":{"gitID":"-"},"content":"e.g. `seedu.ptman.logic.LogicManagerTest`"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":"The common problems encountered while testing are listed here."},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"**Problem:** `HelpWindowTest` fails with a `NullPointerException`."},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":728,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":731,"author":{"gitID":"-"},"content":"The following sections help you ensure that the project is fully integrated, tested, and built for release."},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform continuous integration on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":746,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"Here are the steps to create a new release:"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":753,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":754,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":755,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, PTMan depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these dependencies can be automated using Gradle. One advantage of Gradle is that it can download these dependencies automatically, which is better than the below alternatives: +"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"..  Including the third-party libraries in the repo. This bloats the repo size. +"},{"lineNumber":762,"author":{"gitID":"-"},"content":"..  Making developers download the third-party libraries manually. This creates extra work for developers."},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":765,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":766,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":775,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":780,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":785,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":788,"author":{"gitID":"-"},"content":"+"},{"lineNumber":789,"author":{"gitID":"-"},"content":"****"},{"lineNumber":790,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":791,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":792,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":793,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":794,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":795,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":796,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":797,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":798,"author":{"gitID":"-"},"content":"****"},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":801,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":806,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":809,"author":{"gitID":"-"},"content":"+"},{"lineNumber":810,"author":{"gitID":"-"},"content":"****"},{"lineNumber":811,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":812,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":813,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":814,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":815,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":816,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":817,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":818,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":819,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":820,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":821,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":822,"author":{"gitID":"-"},"content":"****"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":825,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":830,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":833,"author":{"gitID":"-"},"content":"+"},{"lineNumber":834,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":835,"author":{"gitID":"-"},"content":"+"},{"lineNumber":836,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":837,"author":{"gitID":"-"},"content":"+"},{"lineNumber":838,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":839,"author":{"gitID":"-"},"content":"+"},{"lineNumber":840,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":841,"author":{"gitID":"-"},"content":"+"},{"lineNumber":842,"author":{"gitID":"-"},"content":"****"},{"lineNumber":843,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":844,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":845,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":846,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":847,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":848,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":849,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":850,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":851,"author":{"gitID":"-"},"content":"****"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":854,"author":{"gitID":"-"},"content":"+"},{"lineNumber":855,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":856,"author":{"gitID":"-"},"content":"+"},{"lineNumber":857,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":858,"author":{"gitID":"-"},"content":"+"},{"lineNumber":859,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":860,"author":{"gitID":"-"},"content":"+"},{"lineNumber":861,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":862,"author":{"gitID":"-"},"content":"+"},{"lineNumber":863,"author":{"gitID":"-"},"content":"****"},{"lineNumber":864,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":865,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":866,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":867,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":868,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":869,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":870,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":871,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":872,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":873,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":874,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":875,"author":{"gitID":"-"},"content":"****"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":878,"author":{"gitID":"-"},"content":"+"},{"lineNumber":879,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":880,"author":{"gitID":"-"},"content":"+"},{"lineNumber":881,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":882,"author":{"gitID":"-"},"content":"+"},{"lineNumber":883,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":884,"author":{"gitID":"-"},"content":"+"},{"lineNumber":885,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":886,"author":{"gitID":"-"},"content":"+"},{"lineNumber":887,"author":{"gitID":"-"},"content":"****"},{"lineNumber":888,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":889,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":890,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":891,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":892,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":893,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":894,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":895,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":896,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":897,"author":{"gitID":"-"},"content":"****"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":900,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":905,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":908,"author":{"gitID":"-"},"content":"+"},{"lineNumber":909,"author":{"gitID":"-"},"content":"****"},{"lineNumber":910,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":911,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":912,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":913,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":914,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":915,"author":{"gitID":"-"},"content":"****"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":918,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":925,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":926,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":931,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":932,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":933,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":938,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":943,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":948,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":951,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":956,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":957,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":962,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":963,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":964,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":965,"author":{"gitID":"-"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":967,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":972,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":979,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":984,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":991,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":996,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":997,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1016,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1030,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"* has a need to manage part-time employees."},{"lineNumber":1050,"author":{"gitID":"-"},"content":"* wants to give employees flexibility in their working hours."},{"lineNumber":1051,"author":{"gitID":"-"},"content":"* can type fast."},{"lineNumber":1052,"author":{"gitID":"-"},"content":"* prefers typing over mouse input."},{"lineNumber":1053,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps."},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"*Value proposition*: manage part-time employees faster than a typical mouse/GUI driven app"},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"*Shannon*:"},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":". *Shifts (Major)*:"},{"lineNumber":1061,"author":{"gitID":"-"},"content":".. *Add/remove shifts*: Added commands for the employer to add/remove shifts. Employees can then view the available shifts, their working hours, and the capacity of each shift."},{"lineNumber":1062,"author":{"gitID":"-"},"content":".. *Select/Deselect shifts*: Added commands for employees to choose the shifts they want to work in."},{"lineNumber":1063,"author":{"gitID":"-"},"content":". *Command aliases (Minor)*: Added aliases to most commands. These aliases can be used in place of the full length commands for the user\u0027s convenience."},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":"*Chin Chye*:"},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":". *Access Control (Major)*:"},{"lineNumber":1068,"author":{"gitID":"-"},"content":".. *Password*: Give password to every employee and outlet to protect from accidental/misuse of command."},{"lineNumber":1069,"author":{"gitID":"-"},"content":".. *Login for edit/admin Mode*: Using the password in outlet, employer are able to login to access admin functions."},{"lineNumber":1070,"author":{"gitID":"-"},"content":".. *Change/reset password command*: Employee and employer are able to change/reset password to keep their data/password a secret."},{"lineNumber":1071,"author":{"gitID":"-"},"content":". *Salary (Minor)*: Added salary to employee. This variable is used to keep track of how much employee has earned so far."},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"*Caryn*:"},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":". *Timetable (Major)*:"},{"lineNumber":1076,"author":{"gitID":"-"},"content":".. *Timetable GUI*: Added the interactive timetable GUI for employees to interact through the Shift commands."},{"lineNumber":1077,"author":{"gitID":"-"},"content":".. *Export as Image*: Added a command for exporting timetable as image."},{"lineNumber":1078,"author":{"gitID":"-"},"content":". *Tag colors (Minor)*: Added different colors for different tags inside person cards. Tags are allocated colors based on their hashcode."},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"*Bangjie*:"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":". *Outlet Feature(Major)*:"},{"lineNumber":1083,"author":{"gitID":"-"},"content":".. *Edit outlet information*: Commands are added for the employers to edit outlet information, including outlet name and operating hours."},{"lineNumber":1084,"author":{"gitID":"-"},"content":".. *Display outlet information*: Outlet information will be displayed in the UI. Any change in the outlet information will be reflected as well."},{"lineNumber":1085,"author":{"gitID":"-"},"content":".. *Store Outlet information*: Outlet information is stored in a separate file."},{"lineNumber":1086,"author":{"gitID":"-"},"content":". *Data Encryption(Minor)*: Storage files will be encrypted to ciphertext to ensure that data cannot be obtained and undertood by any third party."},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1095,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1096,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"|`* * *` |user |have a user manual |know how to use the app."},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"|`* * *` |user |have access control |prevent unauthorized access to my information."},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"|`* * *` |user |update my password |keep my information secure."},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"|`* * *` |user |reset my password |reset when i forget my password."},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"-"},"content":"|`* * *` |employer |add a new employee |store them in the record."},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"|`* * *` |employer |view an employee’s contact |contact them."},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"|`* * *` |employer |view an employee’s salary |view their salary."},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"|`* * *` |employer |edit an employee’s salary |update their salary."},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"|`* * *` |employer |delete an existing employee |remove employees that are no longer working."},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"|`* * *` |employer |update the schedule |show employees the available slots."},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":"|`* * *` |employee |view the schedule |choose when I want to work."},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":"|`* * *` |employee |select from the available slots in the schedule |work during that slot."},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":"|`* *` |employer |edit an employee’s contact |update their outdated contact information."},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"|`* *` |employer |edit the outlet information |update the outdated outlet information."},{"lineNumber":1125,"author":{"gitID":"hzxcaryn"},"content":"c"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"|`* *` |employer |sort employees by name |have a clearer view of all employees’ details."},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"|`* *` |employer |find an employee by name |locate details of employees without having to go through the entire list."},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"|`* *` |employer |view an employee’s address|view their address information."},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"|`* *` |employer |edit an employee’s address|update their outdated address."},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"|`* *` |employee |view my own shifts in the timetable |so that I can easily recall when I need to work."},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"|`* *` |employee |export timetable as image |have easy access to the time slots I\u0027m working at."},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":"|`* *` |employee |edit my contact and address |update my particulars."},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"|`* *` |employee |view my salary so far for the month |plan my expenses."},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"|`*` |employer |add an employee’s photo |view it at any time."},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"|`*` |employer |edit an employee’s photo |change an employee\u0027s photo to a newer one."},{"lineNumber":1145,"author":{"gitID":"-"},"content":""},{"lineNumber":1146,"author":{"gitID":"-"},"content":"|`*` |employer |view an employee’s photo |recognize the employee."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"|`*` |employer |remove an employee’s photo |remove their old photo."},{"lineNumber":1149,"author":{"gitID":"-"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":"|`*` |employee |add a photo |be easily identified by my employer."},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"|`*` |employee |have a notification for slot confirmation |be assured that I am working at that slot."},{"lineNumber":1153,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `PTMan` and the *Actor* is the `employer`, unless specified otherwise)"},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add employee"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"1.  Employer logs in to their admin account."},{"lineNumber":1166,"author":{"gitID":"-"},"content":"2.  Employer enters the employee\u0027s details."},{"lineNumber":1167,"author":{"gitID":"-"},"content":"3.  PTMan adds the employee."},{"lineNumber":1168,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"* 2a. The entered format is invalid."},{"lineNumber":1175,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"** 2a1. PTMan shows an error message."},{"lineNumber":1178,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add shift"},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"1.  Employer logs in to their admin account."},{"lineNumber":1186,"author":{"gitID":"-"},"content":"2.  Employer enters the shift details."},{"lineNumber":1187,"author":{"gitID":"-"},"content":"3.  PTMan adds the shift."},{"lineNumber":1188,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1194,"author":{"gitID":"-"},"content":"* 2a. The entered format is invalid."},{"lineNumber":1195,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"** 2a1. PTMan shows an error message."},{"lineNumber":1198,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete shift"},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"1.  Employer logs in to their admin account."},{"lineNumber":1206,"author":{"gitID":"-"},"content":"2.  Employer enters the shift\u0027s index."},{"lineNumber":1207,"author":{"gitID":"-"},"content":"3.  PTMan deletes the shift."},{"lineNumber":1208,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1212,"author":{"gitID":"-"},"content":""},{"lineNumber":1213,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"* 2a. The entered format is invalid."},{"lineNumber":1215,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"** 2a1. PTMan shows an error message."},{"lineNumber":1218,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1220,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"* 2b. The entered index does not exist."},{"lineNumber":1222,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1223,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"** 2b1. PTMan shows an error message."},{"lineNumber":1225,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1226,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete employee"},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1232,"author":{"gitID":"-"},"content":""},{"lineNumber":1233,"author":{"gitID":"-"},"content":"1.  Employer requests to list employees."},{"lineNumber":1234,"author":{"gitID":"-"},"content":"2.  PTMan shows a list of employees."},{"lineNumber":1235,"author":{"gitID":"-"},"content":"3.  Employer requests to delete a specific employee in the list."},{"lineNumber":1236,"author":{"gitID":"-"},"content":"4.  PTMan deletes the employee."},{"lineNumber":1237,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1244,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1248,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"** 3a1. PTMan shows an error message."},{"lineNumber":1251,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1253,"author":{"gitID":"-"},"content":""},{"lineNumber":1254,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit employee"},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1258,"author":{"gitID":"-"},"content":""},{"lineNumber":1259,"author":{"gitID":"-"},"content":"1.  Employer logs in to their admin account."},{"lineNumber":1260,"author":{"gitID":"-"},"content":"2.  Employer enters the employee\u0027s index and the new details of the employee."},{"lineNumber":1261,"author":{"gitID":"-"},"content":"3.  PTMan changes the employee\u0027s details."},{"lineNumber":1262,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1263,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1266,"author":{"gitID":"-"},"content":""},{"lineNumber":1267,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1268,"author":{"gitID":"-"},"content":"* 2a. The entered format is invalid."},{"lineNumber":1269,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1270,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"** 2a1. PTMan shows an error message."},{"lineNumber":1272,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1273,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1274,"author":{"gitID":"-"},"content":"* 2b. The employee cannot be found."},{"lineNumber":1275,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1276,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1277,"author":{"gitID":"-"},"content":"** 2b1. PTMan shows an error message."},{"lineNumber":1278,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1279,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1280,"author":{"gitID":"-"},"content":"* 2c. The entered format of new details is invalid."},{"lineNumber":1281,"author":{"gitID":"hzxcaryn"},"content":"+"},{"lineNumber":1282,"author":{"gitID":"hzxcaryn"},"content":"[none]"},{"lineNumber":1283,"author":{"gitID":"-"},"content":"** 2c1. PTMan shows an error message."},{"lineNumber":1284,"author":{"gitID":"hzxcaryn"},"content":"+"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1286,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":1287,"author":{"gitID":"hzxcaryn"},"content":"[discrete]"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sign up for available shifts"},{"lineNumber":1289,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":1290,"author":{"gitID":"hzxcaryn"},"content":"*MSS*"},{"lineNumber":1291,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"1.  Employee enters a shift that he wants to work in."},{"lineNumber":1293,"author":{"gitID":"-"},"content":"2.  PTMan sends a confirmation message to the employee."},{"lineNumber":1294,"author":{"gitID":"-"},"content":"3.  PTMan updates the indicated time slot in the timetable of the indicated outlet."},{"lineNumber":1295,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1301,"author":{"gitID":"-"},"content":"* 1a. The entered format is invalid."},{"lineNumber":1302,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1303,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1304,"author":{"gitID":"-"},"content":"** 1a1. PTMan shows an error message."},{"lineNumber":1305,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1306,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1307,"author":{"gitID":"-"},"content":"* 1b. The shift is full."},{"lineNumber":1308,"author":{"gitID":"hzxcaryn"},"content":"+"},{"lineNumber":1309,"author":{"gitID":"hzxcaryn"},"content":"[none]"},{"lineNumber":1310,"author":{"gitID":"hzxcaryn"},"content":"** 1b1. PTMan shows an error message."},{"lineNumber":1311,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1312,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1313,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1315,"author":{"gitID":"-"},"content":""},{"lineNumber":1316,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1317,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1320,"author":{"gitID":"-"},"content":".  Should work on both 32-bit and 64-bit environment."},{"lineNumber":1321,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1322,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1323,"author":{"gitID":"-"},"content":".  Should respond within 2 seconds after entering any command."},{"lineNumber":1324,"author":{"gitID":"-"},"content":".  Should be able to use by users who has never used a command line interface before."},{"lineNumber":1325,"author":{"gitID":"-"},"content":".  Should be able to manage contact details of part-time workers in any outlet."},{"lineNumber":1326,"author":{"gitID":"-"},"content":".  Should be able to manage work schedule in any outlet."},{"lineNumber":1327,"author":{"gitID":"-"},"content":".  Should not be required to handle the printing of contact details and schedules."},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1330,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1336,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1339,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1348,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1353,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1356,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1357,"author":{"gitID":"-"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1366,"author":{"gitID":"-"},"content":""},{"lineNumber":1367,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1368,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1369,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1374,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1376,"author":{"gitID":"-"},"content":""},{"lineNumber":1377,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1378,"author":{"gitID":"-"},"content":""},{"lineNumber":1379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an employee"},{"lineNumber":1380,"author":{"gitID":"-"},"content":""},{"lineNumber":1381,"author":{"gitID":"-"},"content":". Deleting an employee while all employees are listed"},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":".. Prerequisites: List all employees using the `list` command. Multiple persons in the list."},{"lineNumber":1384,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1385,"author":{"gitID":"-"},"content":"   Expected: First employee is deleted from the list. Details of the deleted employee shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1386,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1387,"author":{"gitID":"-"},"content":"   Expected: No employee is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1388,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"hzxcaryn":14,"-":1383}},{"path":"src/test/java/seedu/ptman/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.LogicManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandleOutput;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        commandBoxHandleOutput \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_OUTPUT_FIELD_ID));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandleOutput.getStyleClass());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandleOutput.getStyleClass());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandleOutput.getStyleClass());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":146,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":147,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isError);"},{"lineNumber":148,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":149,"author":{"gitID":"hzxcaryn"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":150,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandleOutput.getStyleClass());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":162,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":163,"author":{"gitID":"hzxcaryn"},"content":"        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isError);"},{"lineNumber":164,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":165,"author":{"gitID":"hzxcaryn"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":166,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandleOutput.getInput());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandleOutput.getStyleClass());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":14,"-":164}},{"path":"src/test/java/systemtests/PartTimeManagerSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.NUM_EMPLOYEES_STATUS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"import guitests.guihandles.AdminModeDisplayHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.EmployeeListPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.OutletDetailsPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.TimetableViewHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.ptman.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.ptman.model.PartTimeManager;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.TypicalEmployees;"},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"import seedu.ptman.ui.AdminModeDisplay;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.BrowserPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.CommandBox;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.ResultDisplay;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * A system test class for PartTimeManager, which provides access to handles of GUI components and helper methods"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":50,"author":{"gitID":"-"},"content":" */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"public abstract class PartTimeManagerSystemTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cString\u003e defaultStyleOfAdminModeDisplay;"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cString\u003e loginStyleOfAdminModeDisplay;"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":"        defaultStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":81,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":"        defaultStyleOfAdminModeDisplay \u003d mainWindowHandle.getAdminModeDisplay().getStyleClass();"},{"lineNumber":84,"author":{"gitID":"hzxcaryn"},"content":"        loginStyleOfAdminModeDisplay \u003d mainWindowHandle.getAdminModeDisplay().getStyleClass();"},{"lineNumber":85,"author":{"gitID":"hzxcaryn"},"content":"        loginStyleOfAdminModeDisplay.remove(AdminModeDisplay.LABEL_STYLE_CLASS_NON_ADMIN);"},{"lineNumber":86,"author":{"gitID":"hzxcaryn"},"content":"        loginStyleOfAdminModeDisplay.add(AdminModeDisplay.LABEL_STYLE_CLASS_ADMIN);"},{"lineNumber":87,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    protected PartTimeManager getInitialData() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return TypicalEmployees.getTypicalPartTimeManager();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBoxOutput() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBoxOutput();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"hzxcaryn"},"content":"    public AdminModeDisplayHandle getAdminModeDisplay() {"},{"lineNumber":123,"author":{"gitID":"hzxcaryn"},"content":"        return mainWindowHandle.getAdminModeDisplay();"},{"lineNumber":124,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public EmployeeListPanelHandle getEmployeeListPanel() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getEmployeeListPanel();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public OutletDetailsPanelHandle getOutletDetailsPanel() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getOutletDetailsPanel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public TimetableViewHandle getTimetableView() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getTimetableView();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":158,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Displays all employees in PTMan."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    protected void showAllEmployees() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getPartTimeManager().getEmployeeList().size(),"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                getModel().getFilteredEmployeeList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Displays all employees with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void showEmployeesWithName(String keyword) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredEmployeeList().size()"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u003c getModel().getPartTimeManager().getEmployeeList().size());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Selects the employee at {@code index} of the displayed list."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    protected void selectEmployee(Index index) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getEmployeeListPanel().getSelectedCardIndex());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Deletes all employees in PTMan."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    protected void deleteAllEmployees() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD + \" \");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getPartTimeManager().getEmployeeList().size());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same employee objects as {@code expectedModel}"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * and the employee list panel displays the employees in the model correctly."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getPartTimeManager(), testApp.readStoragePartTimeManager());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertListMatching(getEmployeeListPanel(), expectedModel.getFilteredEmployeeList());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Calls {@code OutletDetailsPanelHandle}, {@code EmployeeListPanelHandle} and {@code StatusBarFooterHandle} to"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * remember their current state."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        OutletDetailsPanelHandle outletDetailsPanelHandle \u003d getOutletDetailsPanel();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        outletDetailsPanelHandle.rememberOutletAnnouncement();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        outletDetailsPanelHandle.rememberOutletInformation();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        outletDetailsPanelHandle.rememberOutletName();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberNumEmployees();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        getEmployeeListPanel().rememberSelectedEmployeeCard();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * of the previously selected employee."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertFalse(getEmployeeListPanel().isAnyCardSelected());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the employee in the employee list panel at"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * @see EmployeeListPanelHandle#isSelectedEmployeeCardChanged()"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getEmployeeListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getEmployeeListPanel().getSelectedCardIndex());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the employee list panel remain unchanged."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see EmployeeListPanelHandle#isSelectedEmployeeCardChanged()"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertFalse(getEmployeeListPanel().isSelectedEmployeeCardChanged());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the command box and result display shows the default style."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBoxOutput().getStyleClass());"},{"lineNumber":269,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(defaultStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the command box and result display shows the error style."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"hzxcaryn"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBoxOutput().getStyleClass());"},{"lineNumber":277,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(errorStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":281,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the admin mode display shows the default(logout) style."},{"lineNumber":283,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"hzxcaryn"},"content":"    protected void assertAdminModeDisplayShowsDefaultStyle() {"},{"lineNumber":285,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(defaultStyleOfAdminModeDisplay, getAdminModeDisplay().getStyleClass());"},{"lineNumber":286,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":288,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the admin mode display shows the login style."},{"lineNumber":290,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"hzxcaryn"},"content":"    protected void assertAdminModeDisplayShowsLoginStyle() {"},{"lineNumber":292,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(loginStyleOfAdminModeDisplay, getAdminModeDisplay().getStyleClass());"},{"lineNumber":293,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * Asserts that the entire outlet panel remains the same."},{"lineNumber":297,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    protected void assertOutletDetailsPanelUnchanged() {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        OutletDetailsPanelHandle handle \u003d getOutletDetailsPanel();"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertFalse(handle.isOutletAnnouncementChanged());"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertFalse(handle.isOutletInformationChanged());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertFalse(handle.isOutletNameChanged());"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":307,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        assertFalse(handle.isNumEmployeesChanged());"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":316,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that only the save location in the status bar was unchanged, while sync status"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * is changed to the timing of {@code ClockRule#getInjectedClock()}, and num employees updates to"},{"lineNumber":318,"author":{"gitID":"-"},"content":"     * the current num of employees."},{"lineNumber":319,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":320,"author":{"gitID":"hzxcaryn"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        int currNumEmployees \u003d testApp.getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        String expectedNumEmployees \u003d String.format(NUM_EMPLOYEES_STATUS, currNumEmployees);"},{"lineNumber":326,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        assertEquals(expectedNumEmployees, handle.getNumEmployees());"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":333,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":334,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":337,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":338,"author":{"gitID":"-"},"content":"            assertEquals(\"Welcome to PTMan. Type a command in the search bar above to get started. \""},{"lineNumber":339,"author":{"gitID":"-"},"content":"                    + \"If you need somewhere to start, search “help” to view the user guide.\","},{"lineNumber":340,"author":{"gitID":"-"},"content":"                    getResultDisplay().getText());"},{"lineNumber":341,"author":{"gitID":"-"},"content":"            assertListMatching(getEmployeeListPanel(), getModel().getFilteredEmployeeList());"},{"lineNumber":342,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":343,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":344,"author":{"gitID":"-"},"content":"            assertEquals(String.format(NUM_EMPLOYEES_STATUS,"},{"lineNumber":345,"author":{"gitID":"-"},"content":"                    getModel().getPartTimeManager().getEmployeeList().size()), getStatusBarFooter().getNumEmployees());"},{"lineNumber":346,"author":{"gitID":"hzxcaryn"},"content":"            assertAdminModeDisplayShowsDefaultStyle();"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":348,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":353,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":354,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":357,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":358,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":44,"-":314}},{"path":"src/test/java/seedu/ptman/ui/OutletDetailsPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.OutletDetailsPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.AnnouncementChangedEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.OutletInformationChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.OutletNameChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"public class OutletDetailsPanelTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"    private OutletInformationChangedEvent outletInformationChangedEventStub;"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"    private OutletNameChangedEvent outletNameChangedEventStub;"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":"    private AnnouncementChangedEvent announcementChangedEventStub;"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"    private OutletDetailsPanel outletDetailsPanel;"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"    private OutletDetailsPanelHandle outletDetailsPanelHandle;"},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"    private OutletInformation outlet \u003d new OutletInformation();"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"        outletInformationChangedEventStub \u003d new OutletInformationChangedEvent(\"New Operating Hours\","},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"                \"New Outlet Contact\", \"New Outlet Email\");"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"        outletNameChangedEventStub \u003d new OutletNameChangedEvent(\"New Outlet Name\");"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"        announcementChangedEventStub \u003d new AnnouncementChangedEvent(\"New Announcement\");"},{"lineNumber":31,"author":{"gitID":"hzxcaryn"},"content":"        outletDetailsPanel \u003d new OutletDetailsPanel(outlet);"},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":"        uiPartRule.setUiPart(outletDetailsPanel);"},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        outletDetailsPanelHandle \u003d new OutletDetailsPanelHandle(outletDetailsPanel.getRoot());"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"hzxcaryn"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"hzxcaryn"},"content":"        // Default outlet name and information"},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"        String expectedDefaultOutletName \u003d \"DefaultOutlet\";"},{"lineNumber":41,"author":{"gitID":"hzxcaryn"},"content":"        String expectedTrimmedDefaultOutletOperatingHours \u003d \"09:00-22:00\";"},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"        String expectedTrimmedDefaultOutletContact \u003d \"91234567\";"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":"        String expectedTrimmedDefaultOutletEmail \u003d \"DefaultOutlet@gmail.com\";"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedTrimmedDefaultOutletOperatingHours,"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"                outletDetailsPanelHandle.getOutletOperatingHours().trim());"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedTrimmedDefaultOutletContact, outletDetailsPanelHandle.getOutletContact().trim());"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedTrimmedDefaultOutletEmail, outletDetailsPanelHandle.getOutletEmail().trim());"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedDefaultOutletName, outletDetailsPanelHandle.getOutletName());"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"        // Outlet Information: Operating Hours Updated"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"        postNow(outletInformationChangedEventStub);"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":"        String expectedTrimmedOutletOperatingHours \u003d \"New Operating Hours\";"},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedTrimmedOutletOperatingHours, outletDetailsPanelHandle.getOutletOperatingHours().trim());"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"        // Outlet Information: Contact Updated"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"        postNow(outletInformationChangedEventStub);"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"        String expectedTrimmedOutletContact \u003d \"New Outlet Contact\";"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedTrimmedOutletContact, outletDetailsPanelHandle.getOutletContact().trim());"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"        // Outlet Information: Email Updated"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"        postNow(outletInformationChangedEventStub);"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"        String expectedTrimmedOutletEmail \u003d \"New Outlet Email\";"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedTrimmedOutletEmail, outletDetailsPanelHandle.getOutletEmail().trim());"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"        // Outlet Name Updated"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"        postNow(outletNameChangedEventStub);"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"        String expectedOutletName \u003d \"New Outlet Name\";"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedOutletName, outletDetailsPanelHandle.getOutletName());"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"        // Announcement Updated"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"        postNow(announcementChangedEventStub);"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"        String expectedAnnouncement \u003d \"New Announcement\";"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedAnnouncement, outletDetailsPanelHandle.getAnnouncement());"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":63,"-":14}},{"path":"src/test/java/seedu/ptman/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.EmployeeCardHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.EmployeeListPanelHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.EmployeeCard;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(EmployeeCardHandle expectedCard, EmployeeCardHandle actualCard) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":"        expectedCard.getTags().forEach(tag -\u003e {"},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":"            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag));"},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedEmployee}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysEmployee(Employee expectedEmployee, EmployeeCardHandle actualCard) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getName().fullName, actualCard.getName());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getPhone().value, actualCard.getPhone());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getEmail().value, actualCard.getEmail());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getAddress().value, actualCard.getAddress());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertTagEquals(expectedEmployee, actualCard);"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualEntry} displays the details of {@code expectedShift}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void assertEntryDisplaysShift(Shift expectedShift, Entry actualEntry, int index) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(expectedShift.getDate().getLocalDate(), actualEntry.getStartDate());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(expectedShift.getDate().getLocalDate(), actualEntry.getEndDate());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(expectedShift.getStartTime().getLocalTime(), actualEntry.getStartTime());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(expectedShift.getEndTime().getLocalTime(), actualEntry.getEndTime());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(\"SHIFT \" + index + \"\\nSlots left: \" + expectedShift.getSlotsLeft(),"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                actualEntry.getTitle());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * in {@code EmployeeCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @see EmployeeCard#getTagColor(String)"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"    private static String getTagColor(String tagName) {"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"        switch (tagName) {"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"        case \"classmates\":"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"        case \"owesMoney\":"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"            return \"salmon\";"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"        case \"colleagues\":"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"        case \"neighbours\":"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"            return \"teal\";"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":"        case \"family\":"},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"        case \"friend\":"},{"lineNumber":81,"author":{"gitID":"hzxcaryn"},"content":"            return \"pink\";"},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":"        case \"friends\":"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":"            return \"pale-blue\";"},{"lineNumber":84,"author":{"gitID":"hzxcaryn"},"content":"        case \"husband\":"},{"lineNumber":85,"author":{"gitID":"hzxcaryn"},"content":"            return \"yellow\";"},{"lineNumber":86,"author":{"gitID":"hzxcaryn"},"content":"        default:"},{"lineNumber":87,"author":{"gitID":"hzxcaryn"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":88,"author":{"gitID":"hzxcaryn"},"content":"            return \"\";"},{"lineNumber":89,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":92,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * {@code expectedEmployee} with the correct color."},{"lineNumber":95,"author":{"gitID":"hzxcaryn"},"content":"     * */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private static void assertTagEquals(Employee expectedEmployee,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                                        EmployeeCardHandle actualCard) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedEmployee.getTags().stream().map(tag -\u003e tag.tagName)"},{"lineNumber":99,"author":{"gitID":"hzxcaryn"},"content":"                .collect(Collectors.toList());"},{"lineNumber":100,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":101,"author":{"gitID":"hzxcaryn"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":102,"author":{"gitID":"hzxcaryn"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColor(tag)), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code employeeListPanelHandle} displays the details of {@code employees} correctly and"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static void assertListMatching(EmployeeListPanelHandle employeeListPanelHandle, Employee... employees) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c employees.length; i++) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertCardDisplaysEmployee(employees[i], employeeListPanelHandle.getEmployeeCardHandle(i));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code employeeListPanelHandle} displays the details of {@code employees} correctly and"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static void assertListMatching(EmployeeListPanelHandle employeeListPanelHandle, List\u003cEmployee\u003e employees) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertListMatching(employeeListPanelHandle, employees.toArray(new Employee[0]));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code employeeListPanelHandle} equals to {@code size}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static void assertListSize(EmployeeListPanelHandle employeeListPanelHandle, int size) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d employeeListPanelHandle.getListSize();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":41,"-":96}},{"path":"src/test/java/seedu/ptman/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.NUM_EMPLOYEES_STATUS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.model.PartTimeManagerChangedEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.PartTimeManagerBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final int INITIAL_NUM_EMPLOYEES \u003d 0;"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final PartTimeManagerChangedEvent EVENT_STUB \u003d new PartTimeManagerChangedEvent("},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new PartTimeManagerBuilder().withEmployee(ALICE).build());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_NUM_EMPLOYEES);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                String.format(NUM_EMPLOYEES_STATUS, INITIAL_NUM_EMPLOYEES));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // after ptman book is updated"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                String.format(NUM_EMPLOYEES_STATUS, EVENT_STUB.data.getEmployeeList().size()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, the"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}, and the num employees matches"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * that of {@code expectedNumEmployees}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"    private void assertStatusBarContent(String expectedSaveLocation,"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                                        String expectedSyncStatus, String expectedNumEmployees) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(expectedNumEmployees, statusBarFooterHandle.getNumEmployees());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":5,"-":80}},{"path":"src/test/java/seedu/ptman/ui/AdminModeDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"hzxcaryn"},"content":"import guitests.guihandles.AdminModeDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"hzxcaryn"},"content":"import seedu.ptman.commons.events.model.UserModeChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.LogicManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":"public class AdminModeDisplayTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"    private UserModeChangedEvent userModeChangedEventLoginStub \u003d new UserModeChangedEvent(true);"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"    private UserModeChangedEvent userModeChangedEventLogoutStub \u003d new UserModeChangedEvent(false);"},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfAdminModeDetails;"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"    private ArrayList\u003cString\u003e loginStyleOfAdminModeDetails;"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"    private AdminModeDisplayHandle adminModeDisplayHandle;"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"hzxcaryn"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        AdminModeDisplay adminModeDisplay \u003d new AdminModeDisplay(logic.isAdminMode());"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":"        uiPartRule.setUiPart(adminModeDisplay);"},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"        adminModeDisplayHandle \u003d new AdminModeDisplayHandle(getChildNode(adminModeDisplay.getRoot(),"},{"lineNumber":38,"author":{"gitID":"hzxcaryn"},"content":"                adminModeDisplayHandle.ADMIN_MODE_DISPLAY_LABEL_ID));"},{"lineNumber":39,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"        defaultStyleOfAdminModeDetails \u003d new ArrayList\u003c\u003e(adminModeDisplayHandle.getStyleClass());"},{"lineNumber":41,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"        loginStyleOfAdminModeDetails \u003d new ArrayList\u003c\u003e(defaultStyleOfAdminModeDetails);"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":"        loginStyleOfAdminModeDetails.remove(AdminModeDisplay.LABEL_STYLE_CLASS_NON_ADMIN);"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"        loginStyleOfAdminModeDetails.add(AdminModeDisplay.LABEL_STYLE_CLASS_ADMIN);"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"    public void display() {"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"        // default Admin Mode Display text"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(\"Admin Mode\", adminModeDisplayHandle.getText());"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(defaultStyleOfAdminModeDetails, adminModeDisplayHandle.getStyleClass());"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"        // login performed"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"        postNow(userModeChangedEventLoginStub);"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(loginStyleOfAdminModeDetails, adminModeDisplayHandle.getStyleClass());"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"        // logout performed"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"        postNow(userModeChangedEventLogoutStub);"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(defaultStyleOfAdminModeDetails, adminModeDisplayHandle.getStyleClass());"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":50,"-":12}},{"path":"src/test/java/seedu/ptman/commons/util/DateUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":12,"author":{"gitID":"shanwpf"},"content":"public class DateUtilTest {"},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":"    @Rule"},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"    public void getWeekFromDate_validDate_returnsWeekNumber() {"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"        // 14th Jan 2018 is in the 2nd week of 2018"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"        assertEquals(DateUtil.getWeekFromDate(LocalDate.of(2018, 1, 14)), 2);"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"        // 15th Jan 2018 is in the 3rd week of 2018"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"        assertEquals(DateUtil.getWeekFromDate(LocalDate.of(2018, 1, 15)), 3);"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    public void getWeekFromDate_null_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"        DateUtil.getWeekFromDate(null);"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"    public void getMondayOfDate_validDate_returnsMondayDate() {"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"        // Sunday 8th April 2018 returns Monday 2nd April 2018"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"        assertEquals(DateUtil.getMondayOfDate(LocalDate.of(2018, 4, 8)), LocalDate.of(2018, 4, 2));"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        // Monday 9th April 2018 returns Monday 9th April 2018"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"        assertEquals(DateUtil.getMondayOfDate(LocalDate.of(2018, 4, 9)), LocalDate.of(2018, 4, 9));"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    public void getMondayOfDate_null_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        DateUtil.getMondayOfDate(null);"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":35,"-":10}},{"path":"src/test/java/seedu/ptman/logic/parser/ApplyCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_SHIFT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ApplyCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Password;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"public class ApplyCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"    private ApplyCommandParser parser \u003d new ApplyCommandParser();"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"    public void parse_validArgs_returnsApplyCommand() {"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"        assertParseSuccess(parser, \"1 1 pw/DEFAULT1\","},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"                new ApplyCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, new Password()));"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    public void parse_noPassword_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, \"1 1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApplyCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, \"a b pw/DEFAULT1\","},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApplyCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":22,"-":13}},{"path":"src/test/java/seedu/ptman/logic/parser/UnapplyCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_SHIFT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UnapplyCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Password;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"public class UnapplyCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"    private UnapplyCommandParser parser \u003d new UnapplyCommandParser();"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"    public void parse_userModeValidArgs_returnsApplyCommand() {"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"        assertParseSuccess(parser, \"1 1 pw/DEFAULT1\","},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"                new UnapplyCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, Optional.of(new Password())));"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    public void parse_adminModeValidArgs_returnsApplyCommand() {"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"        assertParseSuccess(parser, \"1 1\","},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"                new UnapplyCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, Optional.empty()));"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, \"a b pw/DEFAULT1\","},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnapplyCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":23,"-":15}},{"path":"src/test/java/seedu/ptman/logic/parser/DeleteShiftCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_SHIFT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.DeleteShiftCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":"public class DeleteShiftCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"    private DeleteShiftCommandParser parser \u003d new DeleteShiftCommandParser();"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"    public void parse_validArgs_returnsDeleteShiftCommand() {"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"        assertParseSuccess(parser, \"1\", new DeleteShiftCommand(INDEX_FIRST_SHIFT));"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteShiftCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":16,"-":11}},{"path":"src/test/java/seedu/ptman/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OperatingHours;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletContact;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Capacity;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Time;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_OUTLET_NAME \u003d \"Awesome@Outlet\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String INVALID_OUTLET_CONTACT \u003d \"+1234\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String INVALID_OPERATING_HOURS \u003d \"09:00/18:00\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String INVALID_TIME \u003d \"1pm\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String INVALID_CAPACITY \u003d \"one\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String VALID_OUTLET_NAME \u003d \"AwesomeOutlet\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String VALID_OUTLET_CONTACT \u003d \"91234567\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final String VALID_OPERATING_HOURS \u003d \"09:00-18:00\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final String VALID_TIME \u003d \"1300\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String VALID_CAPACITY \u003d \"10\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_EMPLOYEE, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_EMPLOYEE, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"    //@@author shanwpf"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"    public void parseTime_null_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((String) null));"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((Optional\u003cString\u003e) null));"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"    public void parseTime_invalidValue_throwsIllegalValueException() {"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseTime(INVALID_TIME));"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseTime(Optional.of(INVALID_TIME)));"},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"    public void parseTime_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"        assertFalse(ParserUtil.parseTime(Optional.empty()).isPresent());"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":"    public void parseTime_validValueWithoutWhitespace_returnsTime() throws Exception {"},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":"        Time expectedTime \u003d new Time(VALID_TIME);"},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"        assertEquals(Optional.of(expectedTime), ParserUtil.parseTime(Optional.of(VALID_TIME)));"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"    public void parseTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":"        Time expectedTime \u003d new Time(VALID_TIME);"},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"        assertEquals(Optional.of(expectedTime), ParserUtil.parseTime(Optional.of(timeWithWhitespace)));"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"    public void parseCapacity_null_throwsNullPointerException() {"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCapacity((String) null));"},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCapacity((Optional\u003cString\u003e) null));"},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":120,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"shanwpf"},"content":"    public void parseCapacity_invalidValue_throwsIllegalValueException() {"},{"lineNumber":122,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseCapacity(INVALID_CAPACITY));"},{"lineNumber":123,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseCapacity(Optional.of(INVALID_CAPACITY)));"},{"lineNumber":124,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":126,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"shanwpf"},"content":"    public void parseCapacity_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":128,"author":{"gitID":"shanwpf"},"content":"        assertFalse(ParserUtil.parseCapacity(Optional.empty()).isPresent());"},{"lineNumber":129,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":131,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"shanwpf"},"content":"    public void parseCapacity_validValueWithoutWhitespace_returnsCapacity() throws Exception {"},{"lineNumber":133,"author":{"gitID":"shanwpf"},"content":"        Capacity expectedCapacity \u003d new Capacity(VALID_CAPACITY);"},{"lineNumber":134,"author":{"gitID":"shanwpf"},"content":"        assertEquals(expectedCapacity, ParserUtil.parseCapacity(VALID_CAPACITY));"},{"lineNumber":135,"author":{"gitID":"shanwpf"},"content":"        assertEquals(Optional.of(expectedCapacity), ParserUtil.parseCapacity(Optional.of(VALID_CAPACITY)));"},{"lineNumber":136,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":138,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"shanwpf"},"content":"    public void parseCapacity_validValueWithWhitespace_returnsTrimmedCapacity() throws Exception {"},{"lineNumber":140,"author":{"gitID":"shanwpf"},"content":"        String capacityWithWhitespace \u003d WHITESPACE + VALID_CAPACITY + WHITESPACE;"},{"lineNumber":141,"author":{"gitID":"shanwpf"},"content":"        Capacity expectedCapacity \u003d new Capacity(VALID_CAPACITY);"},{"lineNumber":142,"author":{"gitID":"shanwpf"},"content":"        assertEquals(expectedCapacity, ParserUtil.parseCapacity(capacityWithWhitespace));"},{"lineNumber":143,"author":{"gitID":"shanwpf"},"content":"        assertEquals(Optional.of(expectedCapacity), ParserUtil.parseCapacity(Optional.of(capacityWithWhitespace)));"},{"lineNumber":144,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":146,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"shanwpf"},"content":"    public void parseSecondIndex_invalidValue_throwsIllegalValueException() {"},{"lineNumber":148,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSecondIndex(\"1 a\"));"},{"lineNumber":149,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSecondIndex(\"1 -1\"));"},{"lineNumber":150,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"shanwpf"},"content":"    //@@author"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    public void parseOutletName_null_throwsNullPointerException() {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOutletName((String) null));"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOutletName((Optional\u003cString\u003e) null));"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    public void parseOutletName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseOutletName(INVALID_OUTLET_NAME));"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseOutletName("},{"lineNumber":341,"author":{"gitID":"-"},"content":"                Optional.of(INVALID_OUTLET_NAME)));"},{"lineNumber":342,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    public void parseOutletName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseOutletName(Optional.empty()).isPresent());"},{"lineNumber":347,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    public void parseOutletName_validValueWithoutWhitespace_returnsOutletName() throws Exception {"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        OutletName expectedName \u003d new OutletName(VALID_OUTLET_NAME);"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseOutletName(VALID_OUTLET_NAME));"},{"lineNumber":353,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseOutletName(Optional.of(VALID_OUTLET_NAME)));"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":357,"author":{"gitID":"-"},"content":"    public void parseOutletName_validValueWithWhitespace_returnsTrimmedOutletName() throws Exception {"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_OUTLET_NAME + WHITESPACE;"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        OutletName expectedName \u003d new OutletName(VALID_OUTLET_NAME);"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseOutletName(nameWithWhitespace));"},{"lineNumber":361,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseOutletName(Optional.of(nameWithWhitespace)));"},{"lineNumber":362,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":365,"author":{"gitID":"-"},"content":"    public void parseOutletContact_null_throwsNullPointerException() {"},{"lineNumber":366,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOutletContact((String) null));"},{"lineNumber":367,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOutletContact((Optional\u003cString\u003e) null));"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":371,"author":{"gitID":"-"},"content":"    public void parseOutletContact_invalidValue_throwsIllegalValueException() {"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseOutletContact("},{"lineNumber":373,"author":{"gitID":"-"},"content":"                INVALID_OUTLET_CONTACT));"},{"lineNumber":374,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseOutletContact("},{"lineNumber":375,"author":{"gitID":"-"},"content":"                Optional.of(INVALID_OUTLET_CONTACT)));"},{"lineNumber":376,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":379,"author":{"gitID":"-"},"content":"    public void parseOutletContact_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":380,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseOutletContact(Optional.empty()).isPresent());"},{"lineNumber":381,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":384,"author":{"gitID":"-"},"content":"    public void parseOutletContact_validValueWithoutWhitespace_returnsOutletContact() throws Exception {"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        OutletContact expectedOutletContact \u003d new OutletContact(VALID_OUTLET_CONTACT);"},{"lineNumber":386,"author":{"gitID":"-"},"content":"        assertEquals(expectedOutletContact, ParserUtil.parseOutletContact(VALID_OUTLET_CONTACT));"},{"lineNumber":387,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedOutletContact), ParserUtil.parseOutletContact("},{"lineNumber":388,"author":{"gitID":"-"},"content":"                Optional.of(VALID_OUTLET_CONTACT)));"},{"lineNumber":389,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":392,"author":{"gitID":"-"},"content":"    public void parseOutletContact_validValueWithWhitespace_returnsTrimmedOutletContact() throws Exception {"},{"lineNumber":393,"author":{"gitID":"-"},"content":"        String outletContactWithWhitespace \u003d WHITESPACE + VALID_OUTLET_CONTACT + WHITESPACE;"},{"lineNumber":394,"author":{"gitID":"-"},"content":"        OutletContact expectedOutletContact \u003d new OutletContact(VALID_OUTLET_CONTACT);"},{"lineNumber":395,"author":{"gitID":"-"},"content":"        assertEquals(expectedOutletContact, ParserUtil.parseOutletContact(outletContactWithWhitespace));"},{"lineNumber":396,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedOutletContact), ParserUtil.parseOutletContact("},{"lineNumber":397,"author":{"gitID":"-"},"content":"                Optional.of(outletContactWithWhitespace)));"},{"lineNumber":398,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":401,"author":{"gitID":"-"},"content":"    public void parseOperatingHours_null_throwsNullPointerException() {"},{"lineNumber":402,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOperatingHours((String) null));"},{"lineNumber":403,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOperatingHours((Optional\u003cString\u003e) null));"},{"lineNumber":404,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":407,"author":{"gitID":"-"},"content":"    public void parseOperatingHours_invalidValue_throwsIllegalValueException() {"},{"lineNumber":408,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseOperatingHours("},{"lineNumber":409,"author":{"gitID":"-"},"content":"                INVALID_OPERATING_HOURS));"},{"lineNumber":410,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseOperatingHours("},{"lineNumber":411,"author":{"gitID":"-"},"content":"                Optional.of(INVALID_OPERATING_HOURS)));"},{"lineNumber":412,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":415,"author":{"gitID":"-"},"content":"    public void parseOperatingHours_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":416,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseOperatingHours(Optional.empty()).isPresent());"},{"lineNumber":417,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":420,"author":{"gitID":"-"},"content":"    public void parseOperatingHours_validValueWithoutWhitespace_returnsOperatingHours() throws Exception {"},{"lineNumber":421,"author":{"gitID":"-"},"content":"        OperatingHours expectedOperatingHours \u003d new OperatingHours(VALID_OPERATING_HOURS);"},{"lineNumber":422,"author":{"gitID":"-"},"content":"        assertEquals(expectedOperatingHours, ParserUtil.parseOperatingHours(VALID_OPERATING_HOURS));"},{"lineNumber":423,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedOperatingHours), ParserUtil.parseOperatingHours("},{"lineNumber":424,"author":{"gitID":"-"},"content":"                Optional.of(VALID_OPERATING_HOURS)));"},{"lineNumber":425,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":428,"author":{"gitID":"-"},"content":"    public void parseOperatingHours_validValueWithWhitespace_returnsTrimmedOperatingHours() throws Exception {"},{"lineNumber":429,"author":{"gitID":"-"},"content":"        String operatingHoursWithWhitespace \u003d WHITESPACE + VALID_OPERATING_HOURS + WHITESPACE;"},{"lineNumber":430,"author":{"gitID":"-"},"content":"        OperatingHours expectedOperatingHours \u003d new OperatingHours(VALID_OPERATING_HOURS);"},{"lineNumber":431,"author":{"gitID":"-"},"content":"        assertEquals(expectedOperatingHours, ParserUtil.parseOperatingHours(operatingHoursWithWhitespace));"},{"lineNumber":432,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedOperatingHours), ParserUtil.parseOperatingHours("},{"lineNumber":433,"author":{"gitID":"-"},"content":"                Optional.of(operatingHoursWithWhitespace)));"},{"lineNumber":434,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":435,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shanwpf":71,"-":364}},{"path":"src/test/java/seedu/ptman/logic/parser/AddShiftCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.CAPACITY_DESC_1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.CAPACITY_DESC_2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DATE_DESC_12MAR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DATE_DESC_13MAR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_CAPACITY_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_TIME_END_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_TIME_START_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TIME_END_DESC_10PM;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TIME_END_DESC_8PM;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TIME_START_DESC_10AM;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TIME_START_DESC_12PM;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_CAPACITY_1;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_DATE_12MAR;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TIME_END_8PM;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TIME_START_10AM;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.AddShiftCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Capacity;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Date;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Time;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.ShiftBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"public class AddShiftCommandParserTest {"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"    private AddShiftCommandParser parser \u003d new AddShiftCommandParser();"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"        Shift expectedShift \u003d new ShiftBuilder().withDate(VALID_DATE_12MAR).withStartTime(VALID_TIME_START_10AM)"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"                .withEndTime(VALID_TIME_END_8PM).withCapacity(VALID_CAPACITY_1).build();"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        // whitespace only preamble"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DATE_DESC_12MAR + TIME_START_DESC_10AM + TIME_END_DESC_8PM"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"                + CAPACITY_DESC_1, new AddShiftCommand(expectedShift));"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"        // multiple dates - last day accepted"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        assertParseSuccess(parser, DATE_DESC_13MAR + DATE_DESC_12MAR + TIME_START_DESC_10AM + TIME_END_DESC_8PM"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"                + CAPACITY_DESC_1, new AddShiftCommand(expectedShift));"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"        // multiple start times - last start time accepted"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"        assertParseSuccess(parser, DATE_DESC_12MAR + TIME_START_DESC_12PM + TIME_START_DESC_10AM + TIME_END_DESC_8PM"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"                + CAPACITY_DESC_1, new AddShiftCommand(expectedShift));"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"        // multiple end times - last end time accepted"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"        assertParseSuccess(parser, DATE_DESC_12MAR + TIME_START_DESC_10AM +  TIME_END_DESC_10PM + TIME_END_DESC_8PM"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"                + CAPACITY_DESC_1, new AddShiftCommand(expectedShift));"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"        // multiple capacities - last capacity accepted"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"        assertParseSuccess(parser, DATE_DESC_12MAR + TIME_START_DESC_10AM +  TIME_END_DESC_8PM"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"                + CAPACITY_DESC_2 + CAPACITY_DESC_1, new AddShiftCommand(expectedShift));"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddShiftCommand.MESSAGE_USAGE);"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        // missing date prefix"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser,  VALID_DATE_12MAR + TIME_START_DESC_10AM + TIME_END_DESC_8PM"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"                + CAPACITY_DESC_1, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"        // missing start time prefix"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser,  DATE_DESC_12MAR + VALID_TIME_START_10AM + TIME_END_DESC_8PM"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"                + CAPACITY_DESC_1, expectedMessage);"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"        // missing end time prefix"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser,  DATE_DESC_12MAR + TIME_START_DESC_10AM + VALID_TIME_END_8PM"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"                + CAPACITY_DESC_1, expectedMessage);"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"        // missing capacity prefix"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser,  DATE_DESC_12MAR + TIME_START_DESC_10AM + TIME_END_DESC_8PM"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"                + VALID_CAPACITY_1, expectedMessage);"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"        // all prefixes missing"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, VALID_DATE_12MAR + VALID_TIME_START_10AM + VALID_TIME_END_8PM + VALID_CAPACITY_1,"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"                expectedMessage);"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"        // invalid date"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, INVALID_DATE_DESC + TIME_START_DESC_10AM + TIME_END_DESC_8PM"},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"                + CAPACITY_DESC_1, Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"        // invalid start time"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, DATE_DESC_12MAR + INVALID_TIME_START_DESC + TIME_END_DESC_8PM"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"                        + CAPACITY_DESC_1, Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"        // invalid end time"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, DATE_DESC_12MAR + TIME_START_DESC_10AM + INVALID_TIME_END_DESC"},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":"                        + CAPACITY_DESC_1, Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"        // invalid capacity"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, DATE_DESC_12MAR + TIME_START_DESC_10AM + TIME_END_DESC_8PM"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":"                        + INVALID_CAPACITY_DESC, Capacity.MESSAGE_CAPACITY_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, DATE_DESC_12MAR + TIME_START_DESC_10AM + INVALID_TIME_END_DESC"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"                        + INVALID_CAPACITY_DESC, Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"        // non-empty preamble"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DATE_DESC_12MAR + TIME_START_DESC_10AM + TIME_END_DESC_8PM"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"                        + INVALID_CAPACITY_DESC,"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddShiftCommand.MESSAGE_USAGE));"},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":82,"-":33}},{"path":"src/test/java/seedu/ptman/logic/parser/PartTimeManagerParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_OPERATING_HOURS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_OUTLET_CONTACT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_OUTLET_EMAIL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_OUTLET_NAME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_SHIFT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.AddCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.AddShiftCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.AnnouncementCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ApplyCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ChangeMasterPasswordCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ChangePasswordCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ClearCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.DeleteCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.DeleteShiftCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.EditCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.EditCommand.EditEmployeeDescriptor;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.EditOutletCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ExitCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ExportCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.FindCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.HelpCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.HistoryCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ListCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogOutAdminCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.MainCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.SelectCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UnapplyCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.parser.exceptions.ParseException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Password;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.NameContainsKeywordsPredicate;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.Announcement;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OperatingHours;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletContact;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletEmail;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletName;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EditEmployeeDescriptorBuilder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeUtil;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.ShiftBuilder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.ShiftUtil;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"public class PartTimeManagerParserTest {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private final PartTimeManagerParser parser \u003d new PartTimeManagerParser();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void parseCommand_logOut() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(LogOutAdminCommand.COMMAND_WORD) instanceof LogOutAdminCommand);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(LogOutAdminCommand.COMMAND_WORD + \" 3\") instanceof LogOutAdminCommand);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(EmployeeUtil.getAddCommand(employee));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(employee), command);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(EmployeeUtil.getAliasedAddCommand(employee));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(employee), command);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"    //@@author shanwpf"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"    public void parseCommand_addShift() throws Exception {"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"        Shift shift \u003d new ShiftBuilder().build();"},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"        AddShiftCommand command \u003d (AddShiftCommand) parser.parseCommand(ShiftUtil.getAddShiftCommand(shift));"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":"        assertEquals(new AddShiftCommand(shift), command);"},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"    public void parseCommand_addShiftAlias() throws Exception {"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":"        Shift shift \u003d new ShiftBuilder().build();"},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":"        AddShiftCommand command \u003d (AddShiftCommand) parser.parseCommand(ShiftUtil.getAliasedAddShiftCommand(shift));"},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"        assertEquals(new AddShiftCommand(shift), command);"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"    public void parseCommand_apply() throws Exception {"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand command \u003d (ApplyCommand) parser.parseCommand("},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"                ApplyCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":"                        + \" \" + INDEX_FIRST_SHIFT.getOneBased() + \" \" + PREFIX_PASSWORD + \"DEFAULT1\");"},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"        assertEquals(new ApplyCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, new Password()), command);"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":"    public void parseCommand_applyAlias() throws Exception {"},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand command \u003d (ApplyCommand) parser.parseCommand("},{"lineNumber":120,"author":{"gitID":"shanwpf"},"content":"                ApplyCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":121,"author":{"gitID":"shanwpf"},"content":"                        + \" \" + INDEX_FIRST_SHIFT.getOneBased() + \" \" + PREFIX_PASSWORD + \"DEFAULT1\");"},{"lineNumber":122,"author":{"gitID":"shanwpf"},"content":"        assertEquals(new ApplyCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, new Password()), command);"},{"lineNumber":123,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":125,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"shanwpf"},"content":"    public void parseCommand_deleteShift() throws Exception {"},{"lineNumber":127,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand command \u003d (DeleteShiftCommand) parser.parseCommand("},{"lineNumber":128,"author":{"gitID":"shanwpf"},"content":"                DeleteShiftCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SHIFT.getOneBased());"},{"lineNumber":129,"author":{"gitID":"shanwpf"},"content":"        assertEquals(new DeleteShiftCommand(INDEX_FIRST_EMPLOYEE), command);"},{"lineNumber":130,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":132,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"shanwpf"},"content":"    public void parseCommand_deleteShiftAlias() throws Exception {"},{"lineNumber":134,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand command \u003d (DeleteShiftCommand) parser.parseCommand("},{"lineNumber":135,"author":{"gitID":"shanwpf"},"content":"                DeleteShiftCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_SHIFT.getOneBased());"},{"lineNumber":136,"author":{"gitID":"shanwpf"},"content":"        assertEquals(new DeleteShiftCommand(INDEX_FIRST_EMPLOYEE), command);"},{"lineNumber":137,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":139,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"shanwpf"},"content":"    public void parseCommand_unapply() throws Exception {"},{"lineNumber":141,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand command \u003d (UnapplyCommand) parser.parseCommand("},{"lineNumber":142,"author":{"gitID":"shanwpf"},"content":"                UnapplyCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":143,"author":{"gitID":"shanwpf"},"content":"                        + \" \" + INDEX_FIRST_SHIFT.getOneBased() + \" \" + PREFIX_PASSWORD + \"DEFAULT1\");"},{"lineNumber":144,"author":{"gitID":"shanwpf"},"content":"        assertEquals(new UnapplyCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, Optional.of(new Password())), command);"},{"lineNumber":145,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":147,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"shanwpf"},"content":"    public void parseCommand_unapplyAlias() throws Exception {"},{"lineNumber":149,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand command \u003d (UnapplyCommand) parser.parseCommand("},{"lineNumber":150,"author":{"gitID":"shanwpf"},"content":"                UnapplyCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":151,"author":{"gitID":"shanwpf"},"content":"                        + \" \" + INDEX_FIRST_SHIFT.getOneBased() + \" \" + PREFIX_PASSWORD + \"DEFAULT1\");"},{"lineNumber":152,"author":{"gitID":"shanwpf"},"content":"        assertEquals(new UnapplyCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, Optional.of(new Password())), command);"},{"lineNumber":153,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"shanwpf"},"content":"    //@@author"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":171,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_EMPLOYEE), command);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":178,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_EMPLOYEE), command);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(employee).build();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_EMPLOYEE.getOneBased() + \" \" + EmployeeUtil.getEmployeeDetails(employee));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_EMPLOYEE, descriptor), command);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(employee).build();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_EMPLOYEE.getOneBased() + \" \" + EmployeeUtil.getEmployeeDetails(employee));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_EMPLOYEE, descriptor), command);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void parseCommand_changePassword() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        ArrayList\u003cString\u003e passwords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT1\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT2\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT2\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ChangePasswordCommand command \u003d"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                (ChangePasswordCommand) parser.parseCommand(ChangePasswordCommand.COMMAND_WORD"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                        + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + \" \" + \" pw/DEFAULT1 \" + \" pw/DEFAULT2 \""},{"lineNumber":209,"author":{"gitID":"-"},"content":"                        + \" pw/DEFAULT2 \");"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertEquals(new ChangePasswordCommand(INDEX_FIRST_EMPLOYEE, passwords), command);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parseCommand_changePasswordAlias() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        ArrayList\u003cString\u003e passwords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT1\");"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT2\");"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT2\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        ChangePasswordCommand command \u003d"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                (ChangePasswordCommand) parser.parseCommand(ChangePasswordCommand.COMMAND_ALIAS"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                        + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + \" \" + \" pw/DEFAULT1 \" + \" pw/DEFAULT2 \""},{"lineNumber":222,"author":{"gitID":"-"},"content":"                        + \" pw/DEFAULT2 \");"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(new ChangePasswordCommand(INDEX_FIRST_EMPLOYEE, passwords), command);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void parseCommand_changeMasterPassword() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        ArrayList\u003cString\u003e passwords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT1\");"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT2\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT2\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        ChangeMasterPasswordCommand command \u003d"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                (ChangeMasterPasswordCommand) parser.parseCommand(ChangeMasterPasswordCommand.COMMAND_WORD"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                        + \" pw/DEFAULT1 \" + \" pw/DEFAULT2 \" + \" pw/DEFAULT2 \");"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertEquals(new ChangeMasterPasswordCommand(passwords), command);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public void parseCommand_changeMasterPasswordAlias() throws Exception {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        ArrayList\u003cString\u003e passwords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT1\");"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT2\");"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        passwords.add(\"DEFAULT2\");"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        ChangeMasterPasswordCommand command \u003d"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                (ChangeMasterPasswordCommand) parser.parseCommand(ChangeMasterPasswordCommand.COMMAND_ALIAS"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                        + \" pw/DEFAULT1 \" + \" pw/DEFAULT2 \" + \" pw/DEFAULT2 \");"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(new ChangeMasterPasswordCommand(passwords), command);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public void parseCommand_editoutlet() throws Exception {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        String name \u003d \"EditedOutlet\";"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        String operatingHours \u003d \"10:00-17:00\";"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        String outletContact \u003d \"91234567\";"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        String outletEmail \u003d \"EditedOutlet@gmail.com\";"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        EditOutletCommand command \u003d (EditOutletCommand) parser.parseCommand(EditOutletCommand.COMMAND_WORD"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_OUTLET_NAME + name"},{"lineNumber":258,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_OPERATING_HOURS + operatingHours"},{"lineNumber":259,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_OUTLET_CONTACT + outletContact"},{"lineNumber":260,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_OUTLET_EMAIL + outletEmail);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertEquals(new EditOutletCommand(new OutletName(name), new OperatingHours(operatingHours),"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                new OutletContact(outletContact), new OutletEmail(outletEmail)), command);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    public void parseCommand_editoutletAlias() throws Exception {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        String name \u003d \"EditedOutlet\";"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        String operatingHours \u003d \"10:00-17:00\";"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        String outletContact \u003d \"91234567\";"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        String outletEmail \u003d \"EditedOutlet@gmail.com\";"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        EditOutletCommand command \u003d (EditOutletCommand) parser.parseCommand(EditOutletCommand.COMMAND_ALIAS"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_OUTLET_NAME + name"},{"lineNumber":273,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_OPERATING_HOURS + operatingHours"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_OUTLET_CONTACT + outletContact"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_OUTLET_EMAIL + outletEmail);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertEquals(new EditOutletCommand(new OutletName(name), new OperatingHours(operatingHours),"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                new OutletContact(outletContact), new OutletEmail(outletEmail)), command);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public void parseCommand_announcement() throws Exception {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        String announcement \u003d \"new announcement.\";"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        AnnouncementCommand command \u003d (AnnouncementCommand) parser.parseCommand(AnnouncementCommand.COMMAND_WORD"},{"lineNumber":284,"author":{"gitID":"-"},"content":"                + \" \" + announcement);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertEquals(new AnnouncementCommand(new Announcement(announcement)), command);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public void parseCommand_announcementAlias() throws Exception {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        String announcement \u003d \"new announcement.\";"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        AnnouncementCommand command \u003d (AnnouncementCommand) parser.parseCommand(AnnouncementCommand.COMMAND_ALIAS"},{"lineNumber":292,"author":{"gitID":"-"},"content":"                + \" \" + announcement);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertEquals(new AnnouncementCommand(new Announcement(announcement)), command);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public void parseCommand_export() throws Exception {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        String email \u003d \"example@gmail.com\";"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        ExportCommand command \u003d (ExportCommand) parser.parseCommand(ExportCommand.COMMAND_WORD + \" \""},{"lineNumber":300,"author":{"gitID":"-"},"content":"                + PREFIX_EMAIL + email);"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExportCommand.COMMAND_WORD) instanceof ExportCommand);"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertEquals(new ExportCommand(new Email(email)), command);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    public void parseCommand_exportAlias() throws Exception {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        String email \u003d \"example@gmail.com\";"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        ExportCommand command \u003d (ExportCommand) parser.parseCommand(ExportCommand.COMMAND_ALIAS + \" \""},{"lineNumber":309,"author":{"gitID":"-"},"content":"                + PREFIX_EMAIL + email);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExportCommand.COMMAND_WORD) instanceof ExportCommand);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        assertEquals(new ExportCommand(new Email(email)), command);"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":325,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":333,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":341,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":344,"author":{"gitID":"-"},"content":"    public void parseCommand_main() throws Exception {"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(MainCommand.COMMAND_WORD) instanceof MainCommand);"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(MainCommand.COMMAND_WORD + \" 3\") instanceof MainCommand);"},{"lineNumber":347,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":355,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":356,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":358,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":360,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":363,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":364,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":368,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":369,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":370,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":371,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":373,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":376,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":377,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":378,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":379,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":382,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":383,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":384,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":385,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":388,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":389,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":390,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased());"},{"lineNumber":391,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_EMPLOYEE), command);"},{"lineNumber":392,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":395,"author":{"gitID":"-"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":396,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":397,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased());"},{"lineNumber":398,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_EMPLOYEE), command);"},{"lineNumber":399,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":402,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":403,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":404,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":405,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":408,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":409,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":410,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"r 1\") instanceof RedoCommand);"},{"lineNumber":411,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":414,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":415,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":416,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":417,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":420,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":421,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":422,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"u 3\") instanceof UndoCommand);"},{"lineNumber":423,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":426,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":427,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":428,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":429,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":430,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":433,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":434,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":435,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":436,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":437,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":438,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shanwpf":61,"-":377}},{"path":"src/test/java/seedu/ptman/logic/commands/MainCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.MainCommand.MESSAGE_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.EmployeePanelSelectionChangedEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class MainCommandTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_main_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        CommandResult result \u003d new MainCommand().execute();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof EmployeePanelSelectionChangedEvent);"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":23}},{"path":"src/test/java/seedu/ptman/logic/commands/DeleteShiftCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_SHIFT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_OUT_OF_BOUNDS_SHIFT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_SECOND_SHIFT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.getTypicalPartTimeManagerWithShifts;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Password;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":" * {@code DeleteShiftCommand}."},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"public class DeleteShiftCommandTest {"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"    private Model model \u003d new ModelManager(getTypicalPartTimeManagerWithShifts(), new UserPrefs(),"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"            new OutletInformation());"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"    public void setupAdminMode() {"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"        model.setTrueAdminMode(new Password());"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"    @Before"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"    public void showAllShifts() {"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"        model.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"        Shift shiftToDelete \u003d model.getFilteredShiftList().get(INDEX_FIRST_SHIFT.getZeroBased());"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteShiftCommand \u003d prepareCommand(INDEX_FIRST_SHIFT);"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"        String expectedMessage \u003d String.format(DeleteShiftCommand.MESSAGE_DELETE_SHIFT_SUCCESS, shiftToDelete);"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getPartTimeManager(), new UserPrefs(),"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"                new OutletInformation());"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"        expectedModel.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"        expectedModel.deleteShift(shiftToDelete);"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"        assertCommandSuccess(deleteShiftCommand, model, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShiftList().size() + 1);"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteShiftCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        assertCommandFailure(deleteShiftCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"        Shift shiftToDelete \u003d model.getFilteredShiftList().get(INDEX_FIRST_SHIFT.getZeroBased());"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteShiftCommand \u003d prepareCommand(INDEX_FIRST_SHIFT);"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"        String expectedMessage \u003d String.format(DeleteShiftCommand.MESSAGE_DELETE_SHIFT_SUCCESS, shiftToDelete);"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"        Model expectedModel \u003d new ModelManager(model.getPartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"        expectedModel.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"        expectedModel.deleteShift(shiftToDelete);"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"        assertNotEquals(shiftToDelete, expectedModel.getFilteredShiftList().get(INDEX_FIRST_SHIFT.getZeroBased()));"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"        assertCommandSuccess(deleteShiftCommand, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"        Index outOfBoundIndex \u003d INDEX_OUT_OF_BOUNDS_SHIFT;"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteShiftCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":"        assertCommandFailure(deleteShiftCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":"        Shift shiftToDelete \u003d model.getFilteredShiftList().get(INDEX_FIRST_SHIFT.getZeroBased());"},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteShiftCommand \u003d prepareCommand(INDEX_FIRST_SHIFT);"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"        Model expectedModel \u003d new ModelManager(model.getPartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":"        expectedModel.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"        // delete -\u003e first employee deleted"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"        deleteShiftCommand.execute();"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"        undoRedoStack.push(deleteShiftCommand);"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"        // undo -\u003e reverts parttimemanager back to previous state and filtered employee list to show all employees"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":"        // redo -\u003e same first employee deleted again"},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"        expectedModel.deleteShift(shiftToDelete);"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":120,"author":{"gitID":"shanwpf"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":121,"author":{"gitID":"shanwpf"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":122,"author":{"gitID":"shanwpf"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":123,"author":{"gitID":"shanwpf"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredShiftList().size() + 1);"},{"lineNumber":124,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteShiftCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":125,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":126,"author":{"gitID":"shanwpf"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":127,"author":{"gitID":"shanwpf"},"content":"        assertCommandFailure(deleteShiftCommand, model, Messages.MESSAGE_INVALID_SHIFT_DISPLAYED_INDEX);"},{"lineNumber":128,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":129,"author":{"gitID":"shanwpf"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":130,"author":{"gitID":"shanwpf"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":131,"author":{"gitID":"shanwpf"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":132,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":134,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"shanwpf"},"content":"    public void equals() throws Exception {"},{"lineNumber":136,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_SHIFT);"},{"lineNumber":137,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_SHIFT);"},{"lineNumber":138,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":139,"author":{"gitID":"shanwpf"},"content":"        // same object -\u003e returns true"},{"lineNumber":140,"author":{"gitID":"shanwpf"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":141,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":142,"author":{"gitID":"shanwpf"},"content":"        // same values -\u003e returns true"},{"lineNumber":143,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_SHIFT);"},{"lineNumber":144,"author":{"gitID":"shanwpf"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":145,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":146,"author":{"gitID":"shanwpf"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":147,"author":{"gitID":"shanwpf"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":148,"author":{"gitID":"shanwpf"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":149,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":150,"author":{"gitID":"shanwpf"},"content":"        // different types -\u003e returns false"},{"lineNumber":151,"author":{"gitID":"shanwpf"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":152,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":153,"author":{"gitID":"shanwpf"},"content":"        // null -\u003e returns false"},{"lineNumber":154,"author":{"gitID":"shanwpf"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":155,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":156,"author":{"gitID":"shanwpf"},"content":"        // different employee -\u003e returns false"},{"lineNumber":157,"author":{"gitID":"shanwpf"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":158,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":160,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"shanwpf"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":162,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"shanwpf"},"content":"    private DeleteShiftCommand prepareCommand(Index index) {"},{"lineNumber":164,"author":{"gitID":"shanwpf"},"content":"        DeleteShiftCommand deleteShiftCommand \u003d new DeleteShiftCommand(index);"},{"lineNumber":165,"author":{"gitID":"shanwpf"},"content":"        deleteShiftCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":166,"author":{"gitID":"shanwpf"},"content":"        return deleteShiftCommand;"},{"lineNumber":167,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":140,"-":28}},{"path":"src/test/java/seedu/ptman/logic/commands/ApplyCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_SHIFT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_SECOND_SHIFT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.MONDAY_AM;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.getTypicalPartTimeManagerWithShifts;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.InvalidPasswordException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.model.PartTimeManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Password;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.ptman.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for ApplyCommand."},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"public class ApplyCommandTest {"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"    private Model model \u003d new ModelManager(new PartTimeManager(getTypicalPartTimeManagerWithShifts()), new UserPrefs(),"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"            new OutletInformation());"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"    public void setMode_adminMode() {"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        model.setTrueAdminMode(new Password());"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"    public void showAllShifts() {"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        model.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"    public void execute_employeeNotInShift_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"        String expectedMessage \u003d String.format(ApplyCommand.MESSAGE_APPLY_SHIFT_SUCCESS,"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"                employee.getName(), INDEX_FIRST_SHIFT.getOneBased());"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"        Model expectedModel \u003d new ModelManager(new PartTimeManager(model.getPartTimeManager()), new UserPrefs(),"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"                new OutletInformation());"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"        expectedModel.setTrueAdminMode(new Password());"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"        expectedModel.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        Shift editedShift \u003d new Shift(MONDAY_AM);"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"        editedShift.addEmployee(ALICE);"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"        expectedModel.updateShift(model.getFilteredShiftList().get(0), editedShift);"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"        assertCommandSuccess(applyCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"        assertTrue(applyCommand.equals(applyCommand));"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"    public void equals_sameValues_returnsTrue() {"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand1 \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand2 \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"        assertTrue(applyCommand1.equals(applyCommand2));"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"    public void equals_differentTypes_returnsFalse() {"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":"        assertFalse(applyCommand.equals(1));"},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"    public void equals_null_returnsFalse() {"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"        assertFalse(applyCommand.equals(null));"},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":"    public void equals_differentShifts_returnsFalse() {"},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommandFirst \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommandSecond \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, INDEX_SECOND_SHIFT, model);"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":"        assertFalse(applyCommandFirst.equals(applyCommandSecond));"},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"    public void equals_differentEmployees_returnsFalse() {"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommandFirst \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommandSecond \u003d prepareCommand(INDEX_SECOND_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"        assertFalse(applyCommandFirst.equals(applyCommandSecond));"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"    public void execute_shiftIndexOutOfRange_throwsCommandException() {"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand \u003d prepareCommand(INDEX_FIRST_EMPLOYEE, Index.fromOneBased(99), model);"},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(CommandException.class, applyCommand::execute);"},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":120,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"shanwpf"},"content":"    public void execute_employeeIndexOutOfRange_throwsCommandException() {"},{"lineNumber":122,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand \u003d prepareCommand(Index.fromOneBased(99), INDEX_FIRST_SHIFT, model);"},{"lineNumber":123,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(CommandException.class, applyCommand::execute);"},{"lineNumber":124,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":126,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"shanwpf"},"content":"    public void execute_incorrectPassword_throwsInvalidPasswordException() {"},{"lineNumber":128,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand \u003d new ApplyCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT,"},{"lineNumber":129,"author":{"gitID":"shanwpf"},"content":"                new Password(\"wrongPassword\"));"},{"lineNumber":130,"author":{"gitID":"shanwpf"},"content":"        applyCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":131,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(InvalidPasswordException.class, applyCommand::execute);"},{"lineNumber":132,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":134,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"shanwpf"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":136,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"shanwpf"},"content":"    private ApplyCommand prepareCommand(Index employeeIndex, Index shiftIndex, Model model) {"},{"lineNumber":138,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand \u003d new ApplyCommand(employeeIndex, shiftIndex, new Password());"},{"lineNumber":139,"author":{"gitID":"shanwpf"},"content":"        applyCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":140,"author":{"gitID":"shanwpf"},"content":"        return applyCommand;"},{"lineNumber":141,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":108,"-":34}},{"path":"src/test/java/seedu/ptman/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.deleteFirstEmployee;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.showEmployeeAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.getTypicalPartTimeManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalPartTimeManager(), new UserPrefs(),"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            new OutletInformation());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPartTimeManager(), new UserPrefs(),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new OutletInformation());"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFirstEmployee(expectedModel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all employees"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalPartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all employees"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstEmployee(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Deletes the first employee in the model\u0027s filtered list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                model.deleteEmployee(employeeToDelete);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                fail(\"Impossible: employeeToDelete was retrieved from model.\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":70}},{"path":"src/test/java/seedu/ptman/logic/commands/AddShiftCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.getTypicalPartTimeManagerWithShifts;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Password;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.ShiftBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":" * Contains integration tests (interaction with the Model) for {@code AddShiftCommand}."},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"public class AddShiftCommandIntegrationTest {"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    private Model model;"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"        model \u003d new ModelManager(getTypicalPartTimeManagerWithShifts(), new UserPrefs(), new OutletInformation());"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"        model.setTrueAdminMode(new Password());"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"    public void execute_newShift_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        Shift validShift \u003d new ShiftBuilder().build();"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"        Model expectedModel \u003d new ModelManager(model.getPartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"        expectedModel.addShift(validShift);"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"        assertCommandSuccess(prepareCommand(validShift, model), model,"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"                String.format(AddShiftCommand.MESSAGE_SUCCESS, validShift), expectedModel);"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"    public void execute_duplicateShift_throwsCommandException() {"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"        Shift shiftInList \u003d model.getPartTimeManager().getShiftList().get(0);"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        assertCommandFailure(prepareCommand(shiftInList, model), model, AddShiftCommand.MESSAGE_DUPLICATE_SHIFT);"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code employee} into the {@code model}."},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"    private AddShiftCommand prepareCommand(Shift shift, Model model) {"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"        AddShiftCommand command \u003d new AddShiftCommand(shift);"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"        return command;"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":40,"-":19}},{"path":"src/test/java/seedu/ptman/logic/commands/AddShiftCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.MONDAY_AM;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.MONDAY_PM;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.PartTimeManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Password;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ReadOnlyPartTimeManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.DuplicateShiftException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.NoOutletInformationFieldChangeException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.ShiftNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.ShiftBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"public class AddShiftCommandTest {"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"    public void constructor_nullShift_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"        new AddShiftCommand(null);"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"    public void execute_shiftAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"        ModelStubAcceptingShiftAdded modelStub \u003d new ModelStubAcceptingShiftAdded();"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        modelStub.setTrueAdminMode(new Password());"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"        Shift validShift \u003d new ShiftBuilder().build();"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"        CommandResult commandResult \u003d getAddShiftCommandForShift(validShift, modelStub).execute();"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"        assertEquals(String.format(AddShiftCommand.MESSAGE_SUCCESS, validShift), commandResult.feedbackToUser);"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"        assertEquals(Arrays.asList(validShift), modelStub.shiftsAdded);"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"    public void execute_duplicateShift_throwsCommandException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateShiftException();"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"        modelStub.setTrueAdminMode(new Password());"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"        Shift validShift \u003d new ShiftBuilder().build();"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        thrown.expectMessage(AddShiftCommand.MESSAGE_DUPLICATE_SHIFT);"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"        getAddShiftCommandForShift(validShift, modelStub).execute();"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"    public void equals() {"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"        AddShiftCommand addMondayAmCommand \u003d new AddShiftCommand(MONDAY_AM);"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"        AddShiftCommand addMondayPmCommand \u003d new AddShiftCommand(MONDAY_PM);"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"        // same object -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"        assertTrue(addMondayAmCommand.equals(addMondayAmCommand));"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"        // same values -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"        AddShiftCommand addMondayAmCommandCopy \u003d new AddShiftCommand(MONDAY_AM);"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"        assertTrue(addMondayAmCommand.equals(addMondayAmCommandCopy));"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"        // different types -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"        assertFalse(addMondayAmCommand.equals(1));"},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"        // null -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"        assertFalse(addMondayAmCommand.equals(null));"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"        // different employee -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":"        assertFalse(addMondayAmCommand.equals(addMondayPmCommand));"},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"     * Generates a new AddCommand with the details of the given employee."},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":"    private AddShiftCommand getAddShiftCommandForShift(Shift shift, Model model) {"},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":"        AddShiftCommand command \u003d new AddShiftCommand(shift);"},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"        return command;"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"    private class ModelStub implements Model {"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"        public void addEmployee(Employee employee) throws DuplicateEmployeeException {"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"        public boolean isAdminPassword(Password password) {"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":120,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"shanwpf"},"content":"        public void setAdminPassword(Password password) {"},{"lineNumber":122,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":125,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":126,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"shanwpf"},"content":"        public void addShift(Shift shift) throws DuplicateShiftException {"},{"lineNumber":128,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"shanwpf"},"content":"        public boolean isAdminMode() {"},{"lineNumber":132,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":134,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":136,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"shanwpf"},"content":"        public boolean setTrueAdminMode(Password password) {"},{"lineNumber":138,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":140,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":142,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"shanwpf"},"content":"        public void setFalseAdminMode() {"},{"lineNumber":144,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":147,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"shanwpf"},"content":"        public void storeResetPassword(Employee employee, Password tempPassword) {"},{"lineNumber":149,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":152,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"shanwpf"},"content":"        public void storeResetPassword(OutletInformation outlet, Password tempPassword) {"},{"lineNumber":154,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":157,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"shanwpf"},"content":"        public boolean isCorrectTempPwd(OutletInformation outlet, Password tempPassword) {"},{"lineNumber":159,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":161,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":163,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":164,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"shanwpf"},"content":"        public boolean isCorrectTempPwd(Employee employee, Password tempPassword) {"},{"lineNumber":166,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":168,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":170,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"shanwpf"},"content":"        public void deleteTagFromAllEmployee(Tag tag) {"},{"lineNumber":172,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":173,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":175,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"shanwpf"},"content":"        public void resetData(ReadOnlyPartTimeManager newData) {"},{"lineNumber":177,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":180,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"shanwpf"},"content":"        public ReadOnlyPartTimeManager getPartTimeManager() {"},{"lineNumber":182,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":183,"author":{"gitID":"shanwpf"},"content":"            return null;"},{"lineNumber":184,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":186,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":187,"author":{"gitID":"shanwpf"},"content":"        public void deleteEmployee(Employee target) throws EmployeeNotFoundException {"},{"lineNumber":188,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":189,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":191,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"shanwpf"},"content":"        public void updateEmployee(Employee target, Employee editedEmployee)"},{"lineNumber":193,"author":{"gitID":"shanwpf"},"content":"                throws DuplicateEmployeeException {"},{"lineNumber":194,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":197,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"shanwpf"},"content":"        public void updateOutlet(OutletInformation outlet) throws NoOutletInformationFieldChangeException {"},{"lineNumber":199,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":200,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":202,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"shanwpf"},"content":"        public String getOutletInformationMessage() {"},{"lineNumber":204,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":205,"author":{"gitID":"shanwpf"},"content":"            return null;"},{"lineNumber":206,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":208,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"shanwpf"},"content":"        public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"},{"lineNumber":210,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":211,"author":{"gitID":"shanwpf"},"content":"            return null;"},{"lineNumber":212,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":214,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"shanwpf"},"content":"        public ObservableList\u003cShift\u003e getFilteredShiftList() {"},{"lineNumber":216,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":217,"author":{"gitID":"shanwpf"},"content":"            return null;"},{"lineNumber":218,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":220,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"shanwpf"},"content":"        public OutletInformation getOutletInformation() {"},{"lineNumber":222,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":223,"author":{"gitID":"shanwpf"},"content":"            return null;"},{"lineNumber":224,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":226,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":227,"author":{"gitID":"shanwpf"},"content":"        public void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate) {"},{"lineNumber":228,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":229,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":231,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":232,"author":{"gitID":"shanwpf"},"content":"        public void deleteShift(Shift shiftToDelete) throws ShiftNotFoundException {"},{"lineNumber":233,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":234,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":236,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"shanwpf"},"content":"        public void updateShift(Shift shiftToApply, Shift editedShift)"},{"lineNumber":238,"author":{"gitID":"shanwpf"},"content":"                throws ShiftNotFoundException, DuplicateShiftException {"},{"lineNumber":239,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":240,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":242,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"shanwpf"},"content":"        public void updateFilteredShiftList(Predicate\u003cShift\u003e predicate) {"},{"lineNumber":244,"author":{"gitID":"shanwpf"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":245,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":248,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"shanwpf"},"content":"     * A Model stub that always throw a DuplicateEmployeeException when trying to add an employee."},{"lineNumber":250,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"shanwpf"},"content":"    private class ModelStubThrowingDuplicateShiftException extends ModelStub {"},{"lineNumber":252,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":253,"author":{"gitID":"shanwpf"},"content":"        public void addShift(Shift shift) throws DuplicateShiftException {"},{"lineNumber":254,"author":{"gitID":"shanwpf"},"content":"            throw new DuplicateShiftException();"},{"lineNumber":255,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":257,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":258,"author":{"gitID":"shanwpf"},"content":"        public boolean isAdminMode() {"},{"lineNumber":259,"author":{"gitID":"shanwpf"},"content":"            return true;"},{"lineNumber":260,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":262,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":263,"author":{"gitID":"shanwpf"},"content":"        public boolean setTrueAdminMode(Password password) {"},{"lineNumber":264,"author":{"gitID":"shanwpf"},"content":"            requireNonNull(password);"},{"lineNumber":265,"author":{"gitID":"shanwpf"},"content":"            return true;"},{"lineNumber":266,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":268,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":269,"author":{"gitID":"shanwpf"},"content":"        public ReadOnlyPartTimeManager getPartTimeManager() {"},{"lineNumber":270,"author":{"gitID":"shanwpf"},"content":"            return new PartTimeManager();"},{"lineNumber":271,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":274,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"shanwpf"},"content":"     * A Model stub that always accept the employee being added."},{"lineNumber":276,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"shanwpf"},"content":"    private class ModelStubAcceptingShiftAdded extends ModelStub {"},{"lineNumber":278,"author":{"gitID":"shanwpf"},"content":"        final ArrayList\u003cShift\u003e shiftsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":279,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":280,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":281,"author":{"gitID":"shanwpf"},"content":"        public void addShift(Shift shift) throws DuplicateShiftException {"},{"lineNumber":282,"author":{"gitID":"shanwpf"},"content":"            requireNonNull(shift);"},{"lineNumber":283,"author":{"gitID":"shanwpf"},"content":"            shiftsAdded.add(shift);"},{"lineNumber":284,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":286,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":287,"author":{"gitID":"shanwpf"},"content":"        public boolean setTrueAdminMode(Password password) {"},{"lineNumber":288,"author":{"gitID":"shanwpf"},"content":"            requireNonNull(password);"},{"lineNumber":289,"author":{"gitID":"shanwpf"},"content":"            return true;"},{"lineNumber":290,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":292,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":293,"author":{"gitID":"shanwpf"},"content":"        public boolean isAdminMode() {"},{"lineNumber":294,"author":{"gitID":"shanwpf"},"content":"            return true;"},{"lineNumber":295,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":297,"author":{"gitID":"shanwpf"},"content":"        @Override"},{"lineNumber":298,"author":{"gitID":"shanwpf"},"content":"        public ReadOnlyPartTimeManager getPartTimeManager() {"},{"lineNumber":299,"author":{"gitID":"shanwpf"},"content":"            return new PartTimeManager();"},{"lineNumber":300,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":303,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":266,"-":37}},{"path":"src/test/java/seedu/ptman/logic/commands/ExportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.ExportCommand.MESSAGE_EMAIL_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.ExportCommand.MESSAGE_SAVE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.ExportTimetableAsImageAndEmailRequestEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.ExportTimetableAsImageRequestEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.testutil.EventsCollectorRule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"public class ExportCommandTest {"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"    public void execute_exportAndSave_success() {"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":"        CommandResult result \u003d new ExportCommand().execute();"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(MESSAGE_SAVE_SUCCESS, result.feedbackToUser);"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExportTimetableAsImageRequestEvent);"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"hzxcaryn"},"content":"    public void execute_exportAndEmail_success() {"},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":"        CommandResult result \u003d new ExportCommand(new Email(\"email@example.com\")).execute();"},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(MESSAGE_EMAIL_SUCCESS, result.feedbackToUser);"},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent()"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":"                instanceof ExportTimetableAsImageAndEmailRequestEvent);"},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":39,"author":{"gitID":"hzxcaryn"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"    public void equals() {"},{"lineNumber":41,"author":{"gitID":"hzxcaryn"},"content":"        Email aliceEmail \u003d new Email(\"alice@example.com\");"},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"        Email bobEmail \u003d new Email(\"bob@example.com\");"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":"        ExportCommand exportAliceCommand \u003d new ExportCommand(aliceEmail);"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"        ExportCommand exportBobCommand \u003d new ExportCommand(bobEmail);"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(exportAliceCommand.equals(exportAliceCommand));"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"        ExportCommand exportAliceCommandCopy \u003d new ExportCommand(aliceEmail);"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(exportAliceCommand.equals(exportAliceCommandCopy));"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"        assertFalse(exportAliceCommand.equals(1));"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"        assertFalse(exportAliceCommand.equals(null));"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"        // different email -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"        assertFalse(exportAliceCommand.equals(exportBobCommand));"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":46,"-":16}},{"path":"src/test/java/seedu/ptman/logic/commands/UnapplyCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_SHIFT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_SECOND_SHIFT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.getTypicalPartTimeManagerWithShifts;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.InvalidPasswordException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.MissingPasswordException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.ptman.model.PartTimeManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Password;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.ptman.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.ShiftBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":" * and unit tests for UnapplyCommand."},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"public class UnapplyCommandTest {"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"    private Model model \u003d new ModelManager(new PartTimeManager(getTypicalPartTimeManagerWithShifts()), new UserPrefs(),"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"            new OutletInformation());"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"    public void setMode_adminMode() {"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        model.setTrueAdminMode(new Password());"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"    @Before"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"    public void showAllShifts() {"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"        model.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"    public void execute_employeeNotInShift_throwsCommandException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"        Model model \u003d new ModelManager(new PartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"        model.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"        model.setTrueAdminMode(new Password());"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"        Employee employee \u003d new EmployeeBuilder().withName(\"Absent\").build();"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"        Shift shift \u003d new ShiftBuilder().build();"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"        model.addEmployee(employee);"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        model.addShift(shift);"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"        assertCommandFailure(unapplyCommand, model, UnapplyCommand.MESSAGE_EMPLOYEE_NOT_FOUND);"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"    public void execute_adminModeEmployeeInShift_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"        Model model \u003d new ModelManager(new PartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"        Model expectedModel \u003d new ModelManager(new PartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"        model.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"        expectedModel.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"        model.setTrueAdminMode(new Password());"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"        expectedModel.setTrueAdminMode(new Password());"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"        Employee employee \u003d new EmployeeBuilder().withName(\"Present\").build();"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"        Employee expectedEmployee \u003d new EmployeeBuilder().withName(\"Present\").build();"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"        Shift shift \u003d new ShiftBuilder().build();"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"        Shift expectedShift \u003d new ShiftBuilder().build();"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"        shift.addEmployee(employee);"},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":"        model.addEmployee(employee);"},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"        model.addShift(shift);"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"        expectedModel.addShift(expectedShift);"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":"        expectedModel.addEmployee(expectedEmployee);"},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"        String expectedMessage \u003d"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"                String.format(UnapplyCommand.MESSAGE_UNAPPLY_SHIFT_SUCCESS, expectedEmployee.getName(), 1);"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"        assertCommandSuccess(unapplyCommand, model, expectedMessage, expectedModel);"},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":"    public void execute_userModeEmployeeInShift_success() throws Exception {"},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"        Model model \u003d new ModelManager(new PartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"        Model expectedModel \u003d new ModelManager(new PartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":"        model.setFalseAdminMode();"},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":"        model.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"        expectedModel.setFalseAdminMode();"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"        expectedModel.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"        Employee employee \u003d new EmployeeBuilder().withName(\"Present\").build();"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":"        Employee expectedEmployee \u003d new EmployeeBuilder().withName(\"Present\").build();"},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"        Shift shift \u003d new ShiftBuilder().build();"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"        Shift expectedShift \u003d new ShiftBuilder().build();"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"        shift.addEmployee(employee);"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":"        model.addEmployee(employee);"},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"        model.addShift(shift);"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"        expectedModel.addShift(expectedShift);"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":"        expectedModel.addEmployee(expectedEmployee);"},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":"        String expectedMessage \u003d"},{"lineNumber":120,"author":{"gitID":"shanwpf"},"content":"                String.format(UnapplyCommand.MESSAGE_UNAPPLY_SHIFT_SUCCESS, expectedEmployee.getName(), 1);"},{"lineNumber":121,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":122,"author":{"gitID":"shanwpf"},"content":"        assertCommandSuccess(unapplyCommand, model, expectedMessage, expectedModel);"},{"lineNumber":123,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":125,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"shanwpf"},"content":"    public void execute_userModeNoPassword_throwsMissingPasswordException() throws Exception {"},{"lineNumber":127,"author":{"gitID":"shanwpf"},"content":"        Model model \u003d new ModelManager(new PartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":128,"author":{"gitID":"shanwpf"},"content":"        model.setFalseAdminMode();"},{"lineNumber":129,"author":{"gitID":"shanwpf"},"content":"        model.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":130,"author":{"gitID":"shanwpf"},"content":"        Employee employee \u003d new EmployeeBuilder().withName(\"Present\").build();"},{"lineNumber":131,"author":{"gitID":"shanwpf"},"content":"        Shift shift \u003d new ShiftBuilder().build();"},{"lineNumber":132,"author":{"gitID":"shanwpf"},"content":"        shift.addEmployee(employee);"},{"lineNumber":133,"author":{"gitID":"shanwpf"},"content":"        model.addEmployee(employee);"},{"lineNumber":134,"author":{"gitID":"shanwpf"},"content":"        model.addShift(shift);"},{"lineNumber":135,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":136,"author":{"gitID":"shanwpf"},"content":"        thrown.expect(MissingPasswordException.class);"},{"lineNumber":137,"author":{"gitID":"shanwpf"},"content":"        unapplyCommand.execute();"},{"lineNumber":138,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":140,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"shanwpf"},"content":"    public void execute_userModeIncorrectPassword_throwsInvalidPasswordException() throws Exception {"},{"lineNumber":142,"author":{"gitID":"shanwpf"},"content":"        Model model \u003d new ModelManager(new PartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":143,"author":{"gitID":"shanwpf"},"content":"        model.setFalseAdminMode();"},{"lineNumber":144,"author":{"gitID":"shanwpf"},"content":"        model.updateFilteredShiftList(Model.PREDICATE_SHOW_ALL_SHIFTS);"},{"lineNumber":145,"author":{"gitID":"shanwpf"},"content":"        Employee employee \u003d new EmployeeBuilder().withName(\"Present\").withPassword(\"incorrect\").build();"},{"lineNumber":146,"author":{"gitID":"shanwpf"},"content":"        Shift shift \u003d new ShiftBuilder().build();"},{"lineNumber":147,"author":{"gitID":"shanwpf"},"content":"        shift.addEmployee(employee);"},{"lineNumber":148,"author":{"gitID":"shanwpf"},"content":"        model.addEmployee(employee);"},{"lineNumber":149,"author":{"gitID":"shanwpf"},"content":"        model.addShift(shift);"},{"lineNumber":150,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":151,"author":{"gitID":"shanwpf"},"content":"        thrown.expect(InvalidPasswordException.class);"},{"lineNumber":152,"author":{"gitID":"shanwpf"},"content":"        unapplyCommand.execute();"},{"lineNumber":153,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":155,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"shanwpf"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":157,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":158,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPw \u003d prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":159,"author":{"gitID":"shanwpf"},"content":"        assertTrue(unapplyCommand.equals(unapplyCommand));"},{"lineNumber":160,"author":{"gitID":"shanwpf"},"content":"        assertTrue(unapplyCommandPw.equals(unapplyCommandPw));"},{"lineNumber":161,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":163,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"shanwpf"},"content":"    public void equals_sameValues_returnsTrue() {"},{"lineNumber":165,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand1 \u003d prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":166,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand2 \u003d prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":167,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPw1 \u003d prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":168,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPw2 \u003d prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":169,"author":{"gitID":"shanwpf"},"content":"        assertTrue(unapplyCommand1.equals(unapplyCommand2));"},{"lineNumber":170,"author":{"gitID":"shanwpf"},"content":"        assertTrue(unapplyCommandPw1.equals(unapplyCommandPw2));"},{"lineNumber":171,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":173,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"shanwpf"},"content":"    public void equals_differentTypes_returnsFalse() {"},{"lineNumber":175,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":176,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPw \u003d prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":177,"author":{"gitID":"shanwpf"},"content":"        assertFalse(unapplyCommand.equals(1));"},{"lineNumber":178,"author":{"gitID":"shanwpf"},"content":"        assertFalse(unapplyCommandPw.equals(1));"},{"lineNumber":179,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":181,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"shanwpf"},"content":"    public void equals_null_returnsFalse() {"},{"lineNumber":183,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":184,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPw \u003d prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":185,"author":{"gitID":"shanwpf"},"content":"        assertFalse(unapplyCommand.equals(null));"},{"lineNumber":186,"author":{"gitID":"shanwpf"},"content":"        assertFalse(unapplyCommandPw.equals(null));"},{"lineNumber":187,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":189,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"shanwpf"},"content":"    public void equals_differentShifts_returnsFalse() {"},{"lineNumber":191,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandFirst \u003d"},{"lineNumber":192,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":193,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandSecond \u003d"},{"lineNumber":194,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_SECOND_SHIFT, model);"},{"lineNumber":195,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPwFirst \u003d"},{"lineNumber":196,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":197,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPwSecond \u003d"},{"lineNumber":198,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_SECOND_SHIFT, model);"},{"lineNumber":199,"author":{"gitID":"shanwpf"},"content":"        assertFalse(unapplyCommandFirst.equals(unapplyCommandSecond));"},{"lineNumber":200,"author":{"gitID":"shanwpf"},"content":"        assertFalse(unapplyCommandPwFirst.equals(unapplyCommandPwSecond));"},{"lineNumber":201,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":203,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"shanwpf"},"content":"    public void equals_differentEmployees_returnsFalse() {"},{"lineNumber":205,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandFirst \u003d"},{"lineNumber":206,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":207,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandSecond \u003d"},{"lineNumber":208,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithoutPassword(INDEX_SECOND_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":209,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPwFirst \u003d"},{"lineNumber":210,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":211,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPwSecond \u003d"},{"lineNumber":212,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithPassword(INDEX_SECOND_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":213,"author":{"gitID":"shanwpf"},"content":"        assertFalse(unapplyCommandFirst.equals(unapplyCommandSecond));"},{"lineNumber":214,"author":{"gitID":"shanwpf"},"content":"        assertFalse(unapplyCommandPwFirst.equals(unapplyCommandPwSecond));"},{"lineNumber":215,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":217,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":218,"author":{"gitID":"shanwpf"},"content":"    public void execute_shiftIndexOutOfRange_throwsCommandException() {"},{"lineNumber":219,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d"},{"lineNumber":220,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithoutPassword(INDEX_FIRST_EMPLOYEE, Index.fromOneBased(99), model);"},{"lineNumber":221,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPw \u003d"},{"lineNumber":222,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, Index.fromOneBased(99), model);"},{"lineNumber":223,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(CommandException.class, unapplyCommand::execute);"},{"lineNumber":224,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(CommandException.class, unapplyCommandPw::execute);"},{"lineNumber":225,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":227,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"shanwpf"},"content":"    public void execute_employeeIndexOutOfRange_throwsCommandException() {"},{"lineNumber":229,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d prepareCommandWithoutPassword(Index.fromOneBased(99), INDEX_FIRST_SHIFT, model);"},{"lineNumber":230,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommandPw \u003d prepareCommandWithPassword(Index.fromOneBased(99), INDEX_FIRST_SHIFT, model);"},{"lineNumber":231,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(CommandException.class, unapplyCommand::execute);"},{"lineNumber":232,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(CommandException.class, unapplyCommandPw::execute);"},{"lineNumber":233,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":235,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"shanwpf"},"content":"    public void execute_incorrectPassword_throwsInvalidPasswordException() {"},{"lineNumber":237,"author":{"gitID":"shanwpf"},"content":"        ApplyCommand applyCommand \u003d new ApplyCommand(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT,"},{"lineNumber":238,"author":{"gitID":"shanwpf"},"content":"                new Password(\"wrongPassword\"));"},{"lineNumber":239,"author":{"gitID":"shanwpf"},"content":"        applyCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":240,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(InvalidPasswordException.class, applyCommand::execute);"},{"lineNumber":241,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":243,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"shanwpf"},"content":"    public void hashCode_sameValues_returnsSameHashCode() {"},{"lineNumber":245,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand1 \u003d"},{"lineNumber":246,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":247,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand2 \u003d"},{"lineNumber":248,"author":{"gitID":"shanwpf"},"content":"                prepareCommandWithPassword(INDEX_FIRST_EMPLOYEE, INDEX_FIRST_SHIFT, model);"},{"lineNumber":249,"author":{"gitID":"shanwpf"},"content":"        assertEquals(unapplyCommand1.hashCode(), unapplyCommand2.hashCode());"},{"lineNumber":250,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":252,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"shanwpf"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":254,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"shanwpf"},"content":"    private UnapplyCommand prepareCommandWithPassword(Index employeeIndex, Index shiftIndex, Model model) {"},{"lineNumber":256,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d new UnapplyCommand(employeeIndex, shiftIndex, Optional.of(new Password()));"},{"lineNumber":257,"author":{"gitID":"shanwpf"},"content":"        unapplyCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":258,"author":{"gitID":"shanwpf"},"content":"        return unapplyCommand;"},{"lineNumber":259,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":261,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"shanwpf"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":263,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"shanwpf"},"content":"    private UnapplyCommand prepareCommandWithoutPassword(Index employeeIndex, Index shiftIndex, Model model) {"},{"lineNumber":265,"author":{"gitID":"shanwpf"},"content":"        UnapplyCommand unapplyCommand \u003d new UnapplyCommand(employeeIndex, shiftIndex, Optional.empty());"},{"lineNumber":266,"author":{"gitID":"shanwpf"},"content":"        unapplyCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":267,"author":{"gitID":"shanwpf"},"content":"        return unapplyCommand;"},{"lineNumber":268,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":231,"-":38}},{"path":"src/test/java/seedu/ptman/model/shift/ShiftTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.ShiftBuilder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"public class ShiftTest {"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"    public void constructor_illegalTime_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"                new Shift(new Date(\"19-03-18\"), new Time(\"2200\"), new Time(\"1000\"), new Capacity(\"4\"))"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"        );"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"                new Shift(null, null, null, null)"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"        );"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"                new Shift(new Date(\"19-03-18\"), new Time(\"1000\"), null, null)"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"        );"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"    public void setEmployees() throws DuplicateEmployeeException {"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"        Shift shift \u003d new ShiftBuilder().build();"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"        shift.addEmployee(ALICE);"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"        shift.addEmployee(BOB);"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"        Shift other \u003d new ShiftBuilder().build();"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"        other.setEmployees(shift);"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"        assertTrue(other.contains(ALICE));"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        assertTrue(other.contains(BOB));"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"    public void equals_sameShift_returnsTrue() throws DuplicateEmployeeException {"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        Shift shift1 \u003d new ShiftBuilder().withDate(\"19-03-18\")"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"                .withCapacity(\"4\")"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"                .withStartTime(\"1200\")"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"                .withEndTime(\"1600\").build();"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"        Shift shift2 \u003d new ShiftBuilder().withDate(\"19-03-18\")"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"                .withCapacity(\"4\")"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"                .withStartTime(\"1200\")"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"                .withEndTime(\"1600\").build();"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"        shift1.addEmployee(ALICE);"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"        shift2.addEmployee(ALICE);"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"        assertEquals(shift1, shift2);"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"    public void hashCode_sameShift_sameHashCode() {"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"        Shift shift1 \u003d new ShiftBuilder().withDate(\"19-03-18\")"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"                .withCapacity(\"4\")"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"                .withStartTime(\"1200\")"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"                .withEndTime(\"1600\").build();"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"        Shift shift2 \u003d new ShiftBuilder().withDate(\"19-03-18\")"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"                .withCapacity(\"4\")"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"                .withStartTime(\"1200\")"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"                .withEndTime(\"1600\").build();"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"        assertEquals(shift1.hashCode(), shift2.hashCode());"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"    public void hashCode_differentShift_differentHashCode() {"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"        Shift shift1 \u003d new ShiftBuilder().withDate(\"12-03-18\")"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"                .withCapacity(\"4\")"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"                .withStartTime(\"1200\")"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"                .withEndTime(\"1600\").build();"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"        Shift shift2 \u003d new ShiftBuilder().withDate(\"19-03-18\")"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"                .withCapacity(\"4\")"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"                .withStartTime(\"1200\")"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"                .withEndTime(\"1600\").build();"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"        assertNotEquals(shift1.hashCode(), shift2.hashCode());"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":73,"-":14}},{"path":"src/test/java/seedu/ptman/model/shift/TimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":"public class TimeTest {"},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Time(null));"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"    public void constructor_invalidTime_throwsIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"        String invalidTime \u003d \"\";"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    public void isValidTime_nullTime_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"    public void isValidTime_invalidTime_returnsFalse() {"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Time.isValidTime(\"\")); // empty string"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Time.isValidTime(\" \")); // spaces only"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Time.isValidTime(\"^\")); // only non-alphanumeric characters"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Time.isValidTime(\"11:11\")); // contains non-alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Time.isValidTime(\"2500\")); // contains invalid time"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"    public void isValidTime_validTime_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        assertTrue(Time.isValidTime(\"0000\"));"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"        assertTrue(Time.isValidTime(\"2359\"));"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"    public void toString_sameValue_returnsTrue() {"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"        Time day \u003d new Time(\"1000\");"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"        assertEquals(day.toString(), \"1000\");"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"        Time test \u003d new Time(\"1000\");"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"        Time other \u003d new Time(\"1000\");"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"        assertTrue(test.equals(other));"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"        Time test \u003d new Time(\"1200\");"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"        Time other \u003d new Time(\"2300\");"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"        assertFalse(test.equals(other));"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"    public void hashCode_sameTime_returnsTrue() {"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        Time test \u003d new Time(\"1100\");"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"        assertEquals(test.hashCode(), LocalTime.of(11, 0).hashCode());"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":60,"-":12}},{"path":"src/test/java/seedu/ptman/model/PartTimeManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.getTypicalPartTimeManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.MONDAY_AM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.PartTimeManagerBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class PartTimeManagerTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final PartTimeManager partTimeManager \u003d new PartTimeManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final PartTimeManager partTimeManagerWithAliceAndBenson \u003d new PartTimeManagerBuilder().withEmployee(ALICE)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withEmployee(BENSON).build();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), partTimeManager.getEmployeeList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), partTimeManager.getTagList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        partTimeManager.resetData(null);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyPartTimeManager_replacesData() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        PartTimeManager newData \u003d getTypicalPartTimeManager();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        partTimeManager.resetData(newData);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(newData, partTimeManager);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicateEmployees_throwsAssertionError() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        List\u003cEmployee\u003e newEmployees \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        List\u003cShift\u003e newShifts \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        OutletInformation outlet \u003d new OutletInformation();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        PartTimeManagerStub newData \u003d new PartTimeManagerStub(newEmployees, newTags, newShifts, outlet);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        partTimeManager.resetData(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"    //@@author shanwpf"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"    public void resetData_withDuplicateShifts_throwsAssertionError() {"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"        List\u003cEmployee\u003e newEmployees \u003d Arrays.asList(ALICE);"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"        List\u003cShift\u003e newShifts \u003d Arrays.asList(MONDAY_AM, MONDAY_AM);"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"        OutletInformation outlet \u003d new OutletInformation();"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"        PartTimeManagerStub newData \u003d new PartTimeManagerStub(newEmployees, newTags, newShifts, outlet);"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"        partTimeManager.resetData(newData);"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"    //@@author"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void getEmployeeList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        partTimeManager.getEmployeeList().remove(0);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        partTimeManager.getTagList().remove(0);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void removeTagFromAllEmployees_tagNonExisting_partTimeManagerNoChange() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        partTimeManagerWithAliceAndBenson.removeTagFromAllEmployees(new Tag(\"NoSuchTag\"));"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        PartTimeManager expectedPartTimeManager \u003d new PartTimeManagerBuilder().withEmployee(ALICE)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withEmployee(BENSON).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPartTimeManager, partTimeManagerWithAliceAndBenson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void removeTagFromAllEmployees_tagExistInMultipleEmployees_tagChanged() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        partTimeManagerWithAliceAndBenson.removeTagFromAllEmployees(new Tag(\"friends\"));"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Employee aliceWithoutFriendTag \u003d new EmployeeBuilder(ALICE).withTags().build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Employee bensonWithoutFriendTag \u003d new EmployeeBuilder(BENSON).withTags(\"owesMoney\").build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        PartTimeManager expectedPartTimeManager \u003d new PartTimeManagerBuilder().withEmployee(aliceWithoutFriendTag)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withEmployee(bensonWithoutFriendTag).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(expectedPartTimeManager, partTimeManagerWithAliceAndBenson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void getOutletInformationMessage_defaultData_returnCorrectMessage() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String actualMessage \u003d partTimeManager.getOutletInformationMessage();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d new OutletInformation().toString();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(actualMessage, expectedMessage);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyPartTimeManager whose employees and tags lists can violate interface constraints."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    private static class PartTimeManagerStub implements ReadOnlyPartTimeManager {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cEmployee\u003e employees \u003d FXCollections.observableArrayList();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cShift\u003e shifts \u003d FXCollections.observableArrayList();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        private final OutletInformation outlet;"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        PartTimeManagerStub(Collection\u003cEmployee\u003e employees, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                            Collection\u003cShift\u003e shifts, OutletInformation outlet) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            this.employees.setAll(employees);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            this.shifts.setAll(shifts);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            this.outlet \u003d outlet;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public ObservableList\u003cEmployee\u003e getEmployeeList() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return employees;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public ObservableList\u003cShift\u003e getShiftList() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return shifts;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public OutletInformation getOutletInformation() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return outlet;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shanwpf":13,"-":150}},{"path":"src/test/java/seedu/ptman/model/shift/DateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":"public class DateTest {"},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"        String invalidDate \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"    public void isValidDate_nullDate_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"    public void isValidDate_invalidDate_returnsFalse() {"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Date.isValidDate(\"\")); // empty string"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Date.isValidDate(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Date.isValidDate(\"^\")); // only non-alphanumeric characters"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Date.isValidDate(\"11-11\")); // invalid date"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Date.isValidDate(\"12-13-18\")); // invalid Date"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    public void isValidDate_validDate_returnsTrue() {"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"        assertTrue(Date.isValidDate(\"12-12-18\"));"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        assertTrue(Date.isValidDate(\"01-01-19\"));"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"    public void toString_sameValue_returnsTrue() {"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        Date date \u003d new Date(\"10-10-18\");"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"        assertEquals(date.toString(), \"10-10-18\");"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"    public void equals_null_returnsFalse() {"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"        Date test \u003d new Date(\"10-10-18\");"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"        assertFalse(test.equals(null));"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"        Date test \u003d new Date(\"10-10-18\");"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"        Date other \u003d new Date(\"10-10-18\");"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"        assertTrue(test.equals(other));"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"        Date test \u003d new Date(\"12-10-10\");"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"        Date other \u003d new Date(\"11-01-11\");"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        assertFalse(test.equals(other));"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"    public void hashCode_sameDate_sameHashCode() {"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"        Date test \u003d new Date(\"11-11-18\");"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"        Date test1 \u003d new Date(\"11-11-18\");"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"        assertEquals(test.hashCode(), test1.hashCode());"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"    public void hashCode_differentDate_differentHashCode() {"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"        Date test \u003d new Date(\"11-11-18\");"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"        Date test1 \u003d new Date(\"11-12-18\");"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"        assertNotEquals(test.hashCode(), test1.hashCode());"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":74,"-":11}},{"path":"src/test/java/seedu/ptman/model/shift/CapacityTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":3,"author":{"gitID":"koo1993"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":12,"author":{"gitID":"shanwpf"},"content":"public class CapacityTest {"},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Capacity(null));"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"    public void constructor_invalidCapacity_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"        String invalidCapacity \u003d \"w\";"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Capacity(invalidCapacity));"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    public void isValidCapacity_nullCapacity_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Capacity.isValidCapacity(null));"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"    public void isValidCapacity_invalidCapacity_returnsFalse() {"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Capacity.isValidCapacity(\"\")); // empty string"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Capacity.isValidCapacity(\" \")); // spaces only"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Capacity.isValidCapacity(\"^\")); // only non-numeric characters"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Capacity.isValidCapacity(\"3*\")); // contains non-numeric characters"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Capacity.isValidCapacity(\"-3\")); // only negative numeric string"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"        assertFalse(Capacity.isValidCapacity(\"0\")); // only zero"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    public void isValidCapacity_validCapacity_returnsTrue() {"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"        assertTrue(Capacity.isValidCapacity(\"4\")); // positive integer only"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"    public void toString_sameValue_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"        Capacity test \u003d new Capacity(\"5\");"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        assertEquals(test.toString(), \"5\");"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        Capacity test \u003d new Capacity(\"5\");"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"        Capacity other \u003d new Capacity(\"5\");"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"        assertTrue(test.equals(other));"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"        Capacity test \u003d new Capacity(\"5\");"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"        Capacity other \u003d new Capacity(\"3\");"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"        assertFalse(test.equals(other));"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"    public void hashCode_sameValue_returnsTrue() {"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"        Capacity test \u003d new Capacity(\"4\");"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"        assertEquals(test.hashCode(), new Integer(4).hashCode());"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":60,"koo1993":2,"-":8}},{"path":"src/test/java/seedu/ptman/model/shift/UniqueShiftListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.MONDAY_AM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.MONDAY_PM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalShifts.TUESDAY_AM;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.DuplicateShiftException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.ShiftNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"public class UniqueShiftListTest {"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    public void setShift_shiftDoesNotExist_throwsShiftNotFoundException() {"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"        UniqueShiftList uniqueShiftList \u003d new UniqueShiftList();"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"        assertThrows(ShiftNotFoundException.class, () -\u003e {"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"            uniqueShiftList.setShift(MONDAY_AM, MONDAY_PM);"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"        });"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"    public void setShift_editedShiftExists_throwsDuplicateShiftException()"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"            throws DuplicateShiftException {"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        UniqueShiftList uniqueShiftList \u003d new UniqueShiftList();"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"        uniqueShiftList.add(MONDAY_AM);"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"        uniqueShiftList.add(MONDAY_PM);"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"        assertThrows(DuplicateShiftException.class, () -\u003e {"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"            uniqueShiftList.setShift(MONDAY_AM, MONDAY_PM);"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"        });"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"    public void setShift_validShifts_shiftReplaced()"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"            throws DuplicateShiftException, ShiftNotFoundException {"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"        UniqueShiftList uniqueShiftList \u003d new UniqueShiftList();"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        uniqueShiftList.add(MONDAY_AM);"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"        uniqueShiftList.add(MONDAY_PM);"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"        uniqueShiftList.setShift(MONDAY_AM, TUESDAY_AM);"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"        assertFalse(uniqueShiftList.contains(MONDAY_AM));"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"        assertTrue(uniqueShiftList.contains(TUESDAY_AM));"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"    public void setShifts_validShifts_shiftsReplaced() throws DuplicateShiftException {"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"        UniqueShiftList uniqueShiftList \u003d new UniqueShiftList();"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"        List\u003cShift\u003e shiftList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"        shiftList.add(MONDAY_AM);"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"        shiftList.add(MONDAY_PM);"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"        shiftList.add(TUESDAY_AM);"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"        uniqueShiftList.setShifts(shiftList);"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"        assertTrue(uniqueShiftList.contains(MONDAY_AM));"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"        assertTrue(uniqueShiftList.contains(MONDAY_PM));"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"        assertTrue(uniqueShiftList.contains(TUESDAY_AM));"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"    public void equals_sameUniqueShiftLists_returnsTrue() throws DuplicateShiftException {"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"        UniqueShiftList uniqueShiftList1 \u003d new UniqueShiftList();"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"        UniqueShiftList uniqueShiftList2 \u003d new UniqueShiftList();"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"        uniqueShiftList1.add(MONDAY_AM);"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"        uniqueShiftList2.add(MONDAY_AM);"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"        assertTrue(uniqueShiftList1.equals(uniqueShiftList2));"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"        UniqueShiftList uniqueShiftList \u003d new UniqueShiftList();"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"        uniqueShiftList.asObservableList().remove(0);"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"    public void remove_shiftDoesNotExist_throwsShiftNotFoundException() {"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"        UniqueShiftList uniqueShiftList \u003d new UniqueShiftList();"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"        assertThrows(ShiftNotFoundException.class, () -\u003e uniqueShiftList.remove(MONDAY_AM));"},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":70,"-":19}},{"path":"src/test/java/seedu/ptman/model/employee/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.employee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long ptman"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"koo1993":1,"-":36}},{"path":"src/test/java/seedu/ptman/model/PasswordTest.java","lines":[{"lineNumber":1,"author":{"gitID":"koo1993"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":3,"author":{"gitID":"koo1993"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"koo1993"},"content":"public class PasswordTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String DEFAULT1_HASH \u003d \"wkqTFuX6NX3hucWqn2ZxB24cRo73LssRq7IDOk6Zx00\u003d\"; // hash code for DEFAULT1"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String DEFAULT2_HASH \u003d \"j9R1Y0IIRVI052lxIOkweVd88O+EiSLGJvnXAZXKD40\u003d\";"},{"lineNumber":15,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Password((Password) null));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Password((String) null));"},{"lineNumber":19,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":21,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"koo1993"},"content":"    public void constructor_defaultConstructor_noError() {"},{"lineNumber":23,"author":{"gitID":"koo1993"},"content":"        Password password \u003d new Password();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Password expectPassword \u003d new Password(DEFAULT1_HASH);"},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":26,"author":{"gitID":"koo1993"},"content":"        assertEquals(password, expectPassword);"},{"lineNumber":27,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"koo1993"},"content":"    public void isValidPassword() {"},{"lineNumber":32,"author":{"gitID":"koo1993"},"content":"        // null password"},{"lineNumber":33,"author":{"gitID":"koo1993"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"},{"lineNumber":34,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":35,"author":{"gitID":"koo1993"},"content":"        // invalid Password"},{"lineNumber":36,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\"\")); // empty string"},{"lineNumber":37,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\" \")); // spaces only"},{"lineNumber":38,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\"!#@! fdsafdsafdsa\")); // characters with space"},{"lineNumber":39,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\"less8\")); // less than 8 character"},{"lineNumber":40,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":41,"author":{"gitID":"koo1993"},"content":"        // valid name"},{"lineNumber":42,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"peterjack\")); // alphabets only"},{"lineNumber":43,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"1234567dsa6\")); // numbers only"},{"lineNumber":44,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"peterthe2nd\")); // alphanumeric characters"},{"lineNumber":45,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"CapitalTan\")); // with capital letters"},{"lineNumber":46,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"Da@acks$RayJr2nd\")); // alphanumeric with captial and special character"},{"lineNumber":47,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":49,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"koo1993"},"content":"    public void isCorrectPassword() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Password password \u003d new Password(DEFAULT1_HASH);"},{"lineNumber":52,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":53,"author":{"gitID":"koo1993"},"content":"        // wrong password"},{"lineNumber":54,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.isCorrectPassword(\"thisiswrongpassword\"));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(password.isCorrectPassword(\"THISISNOTTHEPASS\"));"},{"lineNumber":56,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":57,"author":{"gitID":"koo1993"},"content":"        //correct password"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(password.isCorrectPassword(\"DEFAULT1\")); //correct password"},{"lineNumber":59,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":61,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":62,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"koo1993"},"content":"    public void changePassword() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Password password \u003d new Password(DEFAULT1_HASH);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Password expectedPassword \u003d new Password(DEFAULT2_HASH);"},{"lineNumber":66,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":67,"author":{"gitID":"koo1993"},"content":"        //wrong password"},{"lineNumber":68,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.checkAndChangePassword(\"this is the password\", \"newPassword\"));"},{"lineNumber":69,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.checkAndChangePassword(\"notapassword\", \"newPassword\"));"},{"lineNumber":70,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":71,"author":{"gitID":"koo1993"},"content":"        //correct password and changed"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(password.checkAndChangePassword(\"DEFAULT1\", \"DEFAULT2\"));"},{"lineNumber":73,"author":{"gitID":"koo1993"},"content":"        assertEquals(password, expectedPassword);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":77,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"koo1993"},"content":"    public void changeHash() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String encodedHash \u003d \"wkqTFuX6NX3hucWqn2ZxB24cRo73LssRq7IDOk6Zx00\u003d\"; // hash code for DEFAULT1"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Password password \u003d new Password(encodedHash);"},{"lineNumber":81,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":82,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.isCorrectPassword(\"newPassword\"));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(password.isCorrectPassword(\"DEFAULT1\"));"},{"lineNumber":84,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":86,"author":{"gitID":"koo1993"},"content":"}"}],"authorContributionMap":{"koo1993":61,"-":25}},{"path":"src/test/java/seedu/ptman/testutil/ShiftBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Capacity;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Date;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Time;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":" * A utility class to help with building Shift objects."},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"public class ShiftBuilder {"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"    public static final String DEFAULT_DATE \u003d \"04-03-18\";"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"    public static final String DEFAULT_TIME_START \u003d \"0900\";"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"    public static final String DEFAULT_TIME_END \u003d \"1600\";"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"    public static final String DEFAULT_CAPACITY \u003d \"5\";"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"    private Date date;"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    private Time startTime;"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    private Time endTime;"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"    private Capacity capacity;"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    private List\u003cEmployee\u003e employees;"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"    public ShiftBuilder() {"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"        date \u003d new Date(DEFAULT_DATE);"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"        startTime \u003d new Time(DEFAULT_TIME_START);"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"        endTime \u003d new Time(DEFAULT_TIME_END);"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"        capacity \u003d new Capacity(DEFAULT_CAPACITY);"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"        employees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"     * Initializes the ShiftBuilder with the data of {@code shiftToCopy}."},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    public ShiftBuilder(Shift shiftToCopy) {"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"        date \u003d shiftToCopy.getDate();"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        startTime \u003d shiftToCopy.getStartTime();"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"        endTime \u003d shiftToCopy.getEndTime();"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"        capacity \u003d shiftToCopy.getCapacity();"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"        employees \u003d new ArrayList\u003c\u003e(shiftToCopy.getEmployeeList());"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"     * Sets the {@code Date} of the {@code Shift} that we are building."},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"    public ShiftBuilder withDate(String date) {"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        this.date \u003d new Date(date);"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"        return this;"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"     * Sets the start {@code Time} of the {@code Shift} that we are building."},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"    public ShiftBuilder withStartTime(String startTime) {"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"        this.startTime \u003d new Time(startTime);"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"     * Sets the end {@code Time} of the {@code Shift} that we are building."},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"    public ShiftBuilder withEndTime(String endTime) {"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        this.endTime \u003d new Time(endTime);"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"     * Sets the {@code Capacity} of the {@code Shift} that we are building."},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"    public ShiftBuilder withCapacity(String capacity) {"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"        this.capacity \u003d new Capacity(capacity);"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"     * Sets the {@code Employee} of the {@code Shift} that we are building."},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"    public ShiftBuilder withEmployees(Employee... employees) {"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"        this.employees.addAll(Arrays.asList(employees));"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"     * Returns the {@code Shift}"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":"     * @return"},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":"    public Shift build() {"},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"        return new Shift(date, startTime, endTime, capacity, employees);"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":85,"-":12}},{"path":"src/test/java/seedu/ptman/testutil/ShiftUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_CAPACITY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_TIME_END;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_TIME_START;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.AddShiftCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":12,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":" * A utility class for Shift."},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"public class ShiftUtil {"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"     * Returns an addshift command string for adding the {@code shift}."},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"    public static String getAddShiftCommand(Shift shift) {"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"        return AddShiftCommand.COMMAND_WORD + \" \" + getShiftDetails(shift);"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"     * Returns an aliased addshift command string for adding the {@code shift}."},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    public static String getAliasedAddShiftCommand(Shift shift) {"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"        return AddShiftCommand.COMMAND_ALIAS + \" \" + getShiftDetails(shift);"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"     * Returns the part of command string for the given {@code shift}\u0027s details."},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"    public static String getShiftDetails(Shift shift) {"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"        sb.append(PREFIX_DATE + shift.getDate().toString() + \" \");"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        sb.append(PREFIX_TIME_START + shift.getStartTime().toString() + \" \");"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"        sb.append(PREFIX_TIME_END + shift.getEndTime().toString() + \" \");"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"        sb.append(PREFIX_CAPACITY + shift.getCapacity().toString() + \" \");"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"        return sb.toString();"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":31,"-":10}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"hzxcaryn"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"     * Returns the list of style classes present in the result display."},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":9,"-":22}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final EmployeeListPanelHandle employeeListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBoxOutput;"},{"lineNumber":14,"author":{"gitID":"hzxcaryn"},"content":"    private final AdminModeDisplayHandle adminModeDisplay;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final OutletDetailsPanelHandle outletPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final TimetableViewHandle timetableView;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        employeeListPanel \u003d new EmployeeListPanelHandle(getChildNode(EmployeeListPanelHandle.EMPLOYEE_LIST_VIEW_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        commandBoxOutput \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_OUTPUT_FIELD_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"        adminModeDisplay \u003d new AdminModeDisplayHandle(getChildNode(AdminModeDisplayHandle.ADMIN_MODE_DISPLAY_LABEL_ID));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        outletPanel \u003d new OutletDetailsPanelHandle(getChildNode(OutletDetailsPanelHandle.OUTLET_ID));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        timetableView \u003d new TimetableViewHandle(getChildNode(TimetableViewHandle.TIMETABLE_ID));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EmployeeListPanelHandle getEmployeeListPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return employeeListPanel;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBoxOutput() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return commandBoxOutput;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"    public AdminModeDisplayHandle getAdminModeDisplay() {"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"        return adminModeDisplay;"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public OutletDetailsPanelHandle getOutletDetailsPanel() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return outletPanel;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public TimetableViewHandle getTimetableView() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return timetableView;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":6,"-":63}},{"path":"src/test/java/seedu/ptman/testutil/TypicalShifts.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.getTypicalEmployees;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.model.PartTimeManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.DuplicateShiftException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":" * A utility class containing a list of {@code Shift} objects to be used in tests."},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"public class TypicalShifts {"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"    public static final Shift MONDAY_AM \u003d new ShiftBuilder().withDate(\"19-03-18\")"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"0800\")"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"1300\")"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"4\").build();"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    public static final Shift MONDAY_PM \u003d new ShiftBuilder().withDate(\"19-03-18\")"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"1300\")"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"2200\")"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"4\").build();"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"    public static final Shift TUESDAY_AM \u003d new ShiftBuilder().withDate(\"20-03-18\")"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"0900\")"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"1200\")"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"5\").build();"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"    public static final Shift TUESDAY_PM \u003d new ShiftBuilder().withDate(\"20-03-18\")"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"1200\")"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"2200\")"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"3\").build();"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"    public static final Shift SUNDAY_AM \u003d new ShiftBuilder().withDate(\"25-03-18\")"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"1000\")"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"1300\")"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"4\").build();"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    public static final Shift SUNDAY_PM \u003d new ShiftBuilder().withDate(\"25-03-18\")"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"1300\")"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"1700\")"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"4\").build();"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"    public static final Shift WEDNESDAY_AM \u003d new ShiftBuilder().withDate(\"21-03-18\")"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"0900\")"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"1200\")"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"5\").build();"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    public static final Shift WEDNESDAY_PM \u003d new ShiftBuilder().withDate(\"21-03-18\")"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"1200\")"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"2200\")"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"3\").build();"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"    public static final Shift THURSDAY_AM \u003d new ShiftBuilder().withDate(\"22-03-18\")"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"0900\")"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"1200\")"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"5\")"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"            .withEmployees(new EmployeeBuilder().build()).build();"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"    public static final Shift THURSDAY_PM \u003d new ShiftBuilder().withDate(\"22-03-18\")"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"1200\")"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"2200\")"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"3\").build();"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"    public static final Shift SHIFT_RUNNING_OUT \u003d new ShiftBuilder().withDate(\"22-03-18\")"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"            .withStartTime(\"0900\")"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"            .withEndTime(\"1200\")"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"            .withCapacity(\"1\").build();"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"    private TypicalShifts() {} // prevents instantiation"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"    public static PartTimeManager getTypicalPartTimeManagerWithShifts() {"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"        PartTimeManager ptman \u003d new PartTimeManager();"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"        for (Employee employee : getTypicalEmployees()) {"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"            try {"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"                ptman.addEmployee(employee);"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"            } catch (DuplicateEmployeeException e) {"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"        for (Shift shift : getTypicalShifts()) {"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"            try {"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"                ptman.addShift(shift);"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"            } catch (DuplicateShiftException e) {"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"        return ptman;"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"    // TODO: Update this when new structure of Shifts (with dates) is out."},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"    // Created because Sunday is causing some problems for the UI tests"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":"    public static PartTimeManager getTypicalPartTimeManagerWithShiftsWithoutSunday() {"},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"        PartTimeManager ptman \u003d new PartTimeManager();"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":"        for (Employee employee : getTypicalEmployees()) {"},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"            try {"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"                ptman.addEmployee(employee);"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"            } catch (DuplicateEmployeeException e) {"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":"        for (Shift shift : getTypicalShiftsWithoutSunday()) {"},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":"            try {"},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"                ptman.addShift(shift);"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"            } catch (DuplicateShiftException e) {"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"        return ptman;"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"    public static List\u003cShift\u003e getTypicalShifts() {"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MONDAY_AM, MONDAY_PM, TUESDAY_AM, TUESDAY_PM,"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"                WEDNESDAY_AM, WEDNESDAY_PM, SUNDAY_PM, SUNDAY_AM));"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"    public static List\u003cShift\u003e getTypicalShiftsWithoutSunday() {"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MONDAY_AM, MONDAY_PM, TUESDAY_AM, TUESDAY_PM,"},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":"                WEDNESDAY_AM, WEDNESDAY_PM, SHIFT_RUNNING_OUT));"},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":105,"-":14}},{"path":"src/test/java/guitests/guihandles/EmployeeCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a employee card in the employee list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class EmployeeCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public EmployeeCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"                .findFirst()"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"Tag does not exist.\"));"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":8,"-":73}},{"path":"src/test/java/guitests/guihandles/StatusBarFooterHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code StatusBarFooter} at the footer of the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String NUM_EMPLOYEES_STATUS_ID \u003d \"#numEmployeesStatus\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final StatusBar syncStatusNode;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final StatusBar numEmployeesNode;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final StatusBar saveLocationNode;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private String lastRememberedNumEmployees;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle(Node statusBarFooterNode) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.numEmployeesNode \u003d getChildNode(NUM_EMPLOYEES_STATUS_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027num employees\u0027 portion of the status bar."},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getNumEmployees() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return numEmployeesNode.getText();"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027num Employees\u0027 portion of the status bar."},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void rememberNumEmployees() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        lastRememberedNumEmployees \u003d getNumEmployees();"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027num employees\u0027 is different from the value remembered by the most"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean isNumEmployeesChanged() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return !lastRememberedNumEmployees.equals(getNumEmployees());"},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":11,"-":87}},{"path":"src/test/java/guitests/guihandles/OutletDetailsPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":7,"author":{"gitID":"hzxcaryn"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"hzxcaryn"},"content":" * A handler for the {@code OutletDetailsPanel} of the UI"},{"lineNumber":9,"author":{"gitID":"hzxcaryn"},"content":" */"},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":"public class OutletDetailsPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":12,"author":{"gitID":"hzxcaryn"},"content":"    public static final String OUTLET_ID \u003d \"#outletDetailsPanelPlaceholder\";"},{"lineNumber":13,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":14,"author":{"gitID":"hzxcaryn"},"content":"    private static final String OUTLET_NAME_ID \u003d \"#outletNamePanelHeader\";"},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":"    private static final String OUTLET_OPERATING_HOURS_ID \u003d \"#operatingHours\";"},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"    private static final String OUTLET_CONTACT_ID \u003d \"#outletContact\";"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"    private static final String OUTLET_EMAIL_ID \u003d \"#outletEmail\";"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"    private static final String OUTLET_ANNOUNCEMENT_ID \u003d \"#announcement\";"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":"    private final Label outletNameNode;"},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"    private final Label outletOperatingHoursNode;"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"    private final Label outletContactNode;"},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"    private final Label outletEmailNode;"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":"    private final Label outletAnnouncementNode;"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"    private String lastRememberedOutletName;"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"    private String lastRememberedOutletOperatingHours;"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    private String lastRememberedOutletContact;"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"    private String lastRememberedOutletEmail;"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"    private String lastRememberedOutletAnnouncement;"},{"lineNumber":31,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":"    public OutletDetailsPanelHandle(Node outletDetailsNode) {"},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":"        super(outletDetailsNode);"},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":"        this.outletNameNode \u003d getChildNode(OUTLET_NAME_ID);"},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":"        this.outletOperatingHoursNode \u003d getChildNode(OUTLET_OPERATING_HOURS_ID);"},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"        this.outletContactNode \u003d getChildNode(OUTLET_CONTACT_ID);"},{"lineNumber":38,"author":{"gitID":"hzxcaryn"},"content":"        this.outletEmailNode \u003d getChildNode(OUTLET_EMAIL_ID);"},{"lineNumber":39,"author":{"gitID":"hzxcaryn"},"content":"        this.outletAnnouncementNode \u003d getChildNode(OUTLET_ANNOUNCEMENT_ID);"},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":"     * @return the outlet name in outlet panel."},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"    public String getOutletName() {"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":"        return outletNameNode.getText();"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"     * @return the outlet info in outlet panel."},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":"    public String getAnnouncement() {"},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"        return outletAnnouncementNode.getText();"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"     * @return the outlet info in outlet panel."},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"    public String getOutletOperatingHours() {"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"        return outletOperatingHoursNode.getText();"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"     * @return the outlet info in outlet panel."},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"    public String getOutletContact() {"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"        return outletContactNode.getText();"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"     * @return the outlet info in outlet panel."},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"    public String getOutletEmail() {"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"        return outletEmailNode.getText();"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"     * Remembers the outlet name in the outlet panel."},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"    public void rememberOutletName() {"},{"lineNumber":81,"author":{"gitID":"hzxcaryn"},"content":"        lastRememberedOutletName \u003d getOutletName();"},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":84,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"hzxcaryn"},"content":"     * Returns true if the current outlet name is different from the value remembered by the most recent"},{"lineNumber":86,"author":{"gitID":"hzxcaryn"},"content":"     * {@code rememberOutletName()} call."},{"lineNumber":87,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"hzxcaryn"},"content":"    public boolean isOutletNameChanged() {"},{"lineNumber":89,"author":{"gitID":"hzxcaryn"},"content":"        return !lastRememberedOutletName.equals(getOutletName());"},{"lineNumber":90,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":92,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"hzxcaryn"},"content":"     * Remembers the outlet info in the outlet panel."},{"lineNumber":94,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"hzxcaryn"},"content":"    public void rememberOutletInformation() {"},{"lineNumber":96,"author":{"gitID":"hzxcaryn"},"content":"        lastRememberedOutletOperatingHours \u003d getOutletOperatingHours();"},{"lineNumber":97,"author":{"gitID":"hzxcaryn"},"content":"        lastRememberedOutletContact \u003d getOutletContact();"},{"lineNumber":98,"author":{"gitID":"hzxcaryn"},"content":"        lastRememberedOutletEmail \u003d getOutletEmail();"},{"lineNumber":99,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":101,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"hzxcaryn"},"content":"     * Returns true if the current outlet information is different from the value remembered by the most"},{"lineNumber":103,"author":{"gitID":"hzxcaryn"},"content":"     * recent {@code rememberOutletInformation()} call."},{"lineNumber":104,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"hzxcaryn"},"content":"    public boolean isOutletInformationChanged() {"},{"lineNumber":106,"author":{"gitID":"hzxcaryn"},"content":"        boolean isOutletOperatingHoursChanged \u003d !lastRememberedOutletOperatingHours.equals(getOutletOperatingHours());"},{"lineNumber":107,"author":{"gitID":"hzxcaryn"},"content":"        boolean isOutletContactChanged \u003d !lastRememberedOutletContact.equals(getOutletContact());"},{"lineNumber":108,"author":{"gitID":"hzxcaryn"},"content":"        boolean isOutletEmailChanged \u003d !lastRememberedOutletEmail.equals(getOutletContact());"},{"lineNumber":109,"author":{"gitID":"hzxcaryn"},"content":"        return isOutletOperatingHoursChanged \u0026\u0026 isOutletContactChanged \u0026\u0026 isOutletEmailChanged;"},{"lineNumber":110,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":112,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"hzxcaryn"},"content":"     * Remembers the outlet name in the outlet panel."},{"lineNumber":114,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"hzxcaryn"},"content":"    public void rememberOutletAnnouncement() {"},{"lineNumber":116,"author":{"gitID":"hzxcaryn"},"content":"        lastRememberedOutletAnnouncement \u003d getAnnouncement();"},{"lineNumber":117,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":119,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"hzxcaryn"},"content":"     * Returns true if the current outlet name is different from the value remembered by the most recent"},{"lineNumber":121,"author":{"gitID":"hzxcaryn"},"content":"     * {@code rememberOutletName()} call."},{"lineNumber":122,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"hzxcaryn"},"content":"    public boolean isOutletAnnouncementChanged() {"},{"lineNumber":124,"author":{"gitID":"hzxcaryn"},"content":"        return !lastRememberedOutletAnnouncement.equals(getAnnouncement());"},{"lineNumber":125,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":127,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":122,"-":5}},{"path":"src/main/java/seedu/ptman/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.sun.javafx.scene.control.skin.TextFieldSkin;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.Tooltip;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.ListElementPointer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Tooltip tooltip \u003d new Tooltip();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private TextField commandTextFieldOutput;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private TextField commandTextFieldInput;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"koo1993"},"content":"    //@@author koo1993"},{"lineNumber":45,"author":{"gitID":"koo1993"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":46,"author":{"gitID":"koo1993"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"koo1993"},"content":"        this.logic \u003d logic;"},{"lineNumber":48,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":49,"author":{"gitID":"koo1993"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":50,"author":{"gitID":"koo1993"},"content":"        commandTextFieldOutput.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":51,"author":{"gitID":"koo1993"},"content":"        commandTextFieldOutput.setEditable(false);"},{"lineNumber":52,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":53,"author":{"gitID":"koo1993"},"content":"        // copying text from input to output textfield"},{"lineNumber":54,"author":{"gitID":"koo1993"},"content":"        commandTextFieldInput.textProperty()"},{"lineNumber":55,"author":{"gitID":"koo1993"},"content":"                .addListener((observable, oldText, newText) -\u003e commandTextFieldOutput.setText(processInput(newText)));"},{"lineNumber":56,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":57,"author":{"gitID":"koo1993"},"content":"        commandTextFieldInput.setSkin(new TextFieldCaretControlSkin(commandTextFieldInput, Color.WHITE));"},{"lineNumber":58,"author":{"gitID":"koo1993"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":59,"author":{"gitID":"koo1993"},"content":"        tooltip.setText(\"Tip: Enter \\\"help\\\" when you get stuck\");"},{"lineNumber":60,"author":{"gitID":"koo1993"},"content":"        commandTextFieldInput.setTooltip(tooltip);"},{"lineNumber":61,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":62,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":64,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"koo1993"},"content":"     * obscure sensitive information like password by replacing it with \"_\""},{"lineNumber":66,"author":{"gitID":"koo1993"},"content":"     * @param input"},{"lineNumber":67,"author":{"gitID":"koo1993"},"content":"     * @return the processed input"},{"lineNumber":68,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"koo1993"},"content":"    private String processInput(String input) {"},{"lineNumber":70,"author":{"gitID":"koo1993"},"content":"        StringBuilder tempBuild \u003d new StringBuilder(input);"},{"lineNumber":71,"author":{"gitID":"koo1993"},"content":"        int indexOfPrefix \u003d input.indexOf(PREFIX_PASSWORD.getPrefix());"},{"lineNumber":72,"author":{"gitID":"koo1993"},"content":"        int indexOfSpace \u003d input.indexOf(\" \", indexOfPrefix);"},{"lineNumber":73,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":74,"author":{"gitID":"koo1993"},"content":"        while (indexOfPrefix \u003e\u003d 0) {"},{"lineNumber":75,"author":{"gitID":"koo1993"},"content":"            if (indexOfSpace \u003d\u003d -1) {"},{"lineNumber":76,"author":{"gitID":"koo1993"},"content":"                indexOfSpace \u003d input.length();"},{"lineNumber":77,"author":{"gitID":"koo1993"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"koo1993"},"content":"            for (int i \u003d indexOfPrefix + 3; i \u003c indexOfSpace; i++) {"},{"lineNumber":79,"author":{"gitID":"koo1993"},"content":"                tempBuild.replace(i, i + 1, \"*\");"},{"lineNumber":80,"author":{"gitID":"koo1993"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"koo1993"},"content":"            indexOfPrefix \u003d input.indexOf(PREFIX_PASSWORD.getPrefix(), indexOfPrefix + 3);"},{"lineNumber":82,"author":{"gitID":"koo1993"},"content":"            indexOfSpace \u003d input.indexOf(\" \", indexOfPrefix);"},{"lineNumber":83,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"koo1993"},"content":"        return tempBuild.toString();"},{"lineNumber":85,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":87,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"koo1993"},"content":"     * Disable caret at certain Password Field to avoid funny caret location when entering password"},{"lineNumber":89,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"koo1993"},"content":"    private void updateCaret() {"},{"lineNumber":91,"author":{"gitID":"koo1993"},"content":"        int indexOfPrefix \u003d commandTextFieldInput.getText().indexOf(PREFIX_PASSWORD.getPrefix());"},{"lineNumber":92,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":93,"author":{"gitID":"koo1993"},"content":"        if (indexOfPrefix \u003d\u003d -1) {"},{"lineNumber":94,"author":{"gitID":"koo1993"},"content":"            indexOfPrefix \u003d commandTextFieldInput.getText().length();"},{"lineNumber":95,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":97,"author":{"gitID":"koo1993"},"content":"        if (indexOfPrefix + 3 \u003e commandTextFieldInput.getCaretPosition()) {"},{"lineNumber":98,"author":{"gitID":"koo1993"},"content":"            commandTextFieldInput.setOpacity(1);"},{"lineNumber":99,"author":{"gitID":"koo1993"},"content":"        } else {"},{"lineNumber":100,"author":{"gitID":"koo1993"},"content":"            commandTextFieldInput.setOpacity(0);"},{"lineNumber":101,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":104,"author":{"gitID":"koo1993"},"content":"    //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        updateCaret();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        commandTextFieldInput.setText(text);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        commandTextFieldInput.positionCaret(commandTextFieldInput.getText().length());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextFieldInput.getText());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            commandTextFieldInput.setText(\"\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":176,"author":{"gitID":"hzxcaryn"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextFieldInput.getText());"},{"lineNumber":183,"author":{"gitID":"hzxcaryn"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Handle clicks"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @param event"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void handleClick(MouseEvent event) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        updateCaret();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":203,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        commandTextFieldOutput.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextFieldOutput.getStyleClass();"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"koo1993"},"content":"    //@@author koo1993"},{"lineNumber":226,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"koo1993"},"content":"     * class to set up caret colour for textField"},{"lineNumber":228,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"koo1993"},"content":"    public class TextFieldCaretControlSkin extends TextFieldSkin {"},{"lineNumber":230,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":231,"author":{"gitID":"koo1993"},"content":"        public TextFieldCaretControlSkin(TextField textField, Color caretColor) {"},{"lineNumber":232,"author":{"gitID":"koo1993"},"content":"            super(textField);"},{"lineNumber":233,"author":{"gitID":"koo1993"},"content":"            setCaretColor(caretColor);"},{"lineNumber":234,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":236,"author":{"gitID":"koo1993"},"content":"        private void setCaretColor(Color color) {"},{"lineNumber":237,"author":{"gitID":"koo1993"},"content":"            caretPath.strokeProperty().unbind();"},{"lineNumber":238,"author":{"gitID":"koo1993"},"content":"            caretPath.fillProperty().unbind();"},{"lineNumber":239,"author":{"gitID":"koo1993"},"content":"            caretPath.setStroke(color);"},{"lineNumber":240,"author":{"gitID":"koo1993"},"content":"            caretPath.setFill(color);"},{"lineNumber":241,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":244,"author":{"gitID":"koo1993"},"content":"}"},{"lineNumber":245,"author":{"gitID":"koo1993"},"content":""}],"authorContributionMap":{"koo1993":82,"hzxcaryn":2,"-":161}},{"path":"src/test/java/guitests/guihandles/AdminModeDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"hzxcaryn"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":8,"author":{"gitID":"hzxcaryn"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"hzxcaryn"},"content":" * A handler for the {@code AdminModeDetails} of the UI"},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":" */"},{"lineNumber":11,"author":{"gitID":"hzxcaryn"},"content":"public class AdminModeDisplayHandle extends NodeHandle\u003cLabel\u003e {"},{"lineNumber":12,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":13,"author":{"gitID":"hzxcaryn"},"content":"    public static final String ADMIN_MODE_DISPLAY_LABEL_ID \u003d \"#adminModeDisplay\";"},{"lineNumber":14,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":"    public AdminModeDisplayHandle (Label adminModeDisplayNode) {"},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"        super(adminModeDisplayNode);"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":"     * @return the text in the admin mode label"},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"    public String getText() {"},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"     * @return the list of style classes present in the admin mode display"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":31,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":29,"-":4}},{"path":"src/main/java/seedu/ptman/ui/EmployeeCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Employee}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class EmployeeCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"EmployeeListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"    private static final String[] TAG_COLORS \u003d"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"        {\"salmon\", \"mint\", \"teal\", \"turquoise\", \"pink\", \"pale-blue\", \"purple\", \"blue\", \"indigo\", \"yellow\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * \u003ca href\u003d\"https://github.com/se-edu/parttimemanager-level4/issues/336\"\u003eThe issue on PartTimeManager level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public final Employee employee;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label salary;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public EmployeeCard(Employee employee, int displayedIndex) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.employee \u003d employee;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        name.setText(employee.getName().fullName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        phone.setText(employee.getPhone().value);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        address.setText(employee.getAddress().value);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        email.setText(employee.getEmail().value);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        salary.setText(\"Earned: $\" + employee.getSalary().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        addTagLabels(employee);"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"     * Tag colors are derived by calculating the hash code of the {@code tagName} string to"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"     * select a color from the {@code TAG_COLORS} array"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"     * @param tagName"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"     * @return color for the {@code tagName}\u0027s tag label"},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"    private String getTagColor(String tagName) {"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"        int index \u003d Math.abs(tagName.hashCode()) %  TAG_COLORS.length;"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"        return TAG_COLORS[index];"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Adds all tags of {@code employee} as color-coded labels"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void addTagLabels(Employee employee) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        employee.getTags().forEach(tag -\u003e {"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"            Label newLabel \u003d new Label(tag.tagName);"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"            newLabel.getStyleClass().add(getTagColor(tag.tagName));"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"            tags.getChildren().add(newLabel);"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!(other instanceof EmployeeCard)) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EmployeeCard card \u003d (EmployeeCard) other;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                \u0026\u0026 employee.equals(card.employee);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":22,"-":77}},{"path":"src/main/java/seedu/ptman/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.model.PartTimeManagerChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String NUM_EMPLOYEES_STATUS \u003d \"%d employee(s) total\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private StatusBar numEmployeesStatus;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation, int numEmployees) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        setNumEmployees(numEmployees);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setNumEmployees(int numEmployees) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.numEmployeesStatus.setText(String.format(NUM_EMPLOYEES_STATUS, numEmployees)));"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void handlePartTimeManagerChangedEvent(PartTimeManagerChangedEvent abce) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setNumEmployees(abce.data.getEmployeeList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":87}},{"path":"src/main/java/seedu/ptman/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"Welcome to PTMan. \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Type a command in the search bar above to get started. \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"If you need somewhere to start, search “help” to view the user guide.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        resultDisplay.setWrapText(true);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"            displayed.setValue(event.message);;"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"            if (event.isError) {"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":"                setStyleToIndicateCommandFailure();"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"            } else {"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"                setStyleToDefault();"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"     * Sets the result display style to use the default style."},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"    private void setStyleToDefault() {"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"     * Sets the result display style to indicate a failed command."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":21,"-":52}},{"path":"src/main/java/seedu/ptman/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private OutletDetailsPanel outletPanel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private TimetablePanel timetablePanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private EmployeeListPanel employeeListPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StackPane outletDetailsPanelPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"    private StackPane adminModeDisplayPlaceholder;"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane employeeListPanelPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private StackPane timetableViewPlaceholder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":112,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":116,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        outletPanel \u003d new OutletDetailsPanel(logic.getOutletInformation());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        outletDetailsPanelPlaceholder.getChildren().add(outletPanel.getRoot());"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        timetablePanel \u003d new TimetablePanel(logic.getFilteredShiftList(), logic.getOutletInformation());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        timetableViewPlaceholder.getChildren().add(timetablePanel.getRoot());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        employeeListPanel \u003d new EmployeeListPanel(logic.getFilteredEmployeeList());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        employeeListPanelPlaceholder.getChildren().add(employeeListPanel.getRoot());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"hzxcaryn"},"content":"        AdminModeDisplay adminModeDisplay \u003d new AdminModeDisplay(logic.isAdminMode());"},{"lineNumber":139,"author":{"gitID":"hzxcaryn"},"content":"        adminModeDisplayPlaceholder.getChildren().add(adminModeDisplay.getRoot());"},{"lineNumber":140,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getPartTimeManagerFilePath(),"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                logic.getFilteredEmployeeList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public EmployeeListPanel getEmployeeListPanel() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        return this.employeeListPanel;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":6,"-":204}},{"path":"src/main/java/seedu/ptman/ui/AdminModeDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"hzxcaryn"},"content":"import seedu.ptman.commons.events.model.UserModeChangedEvent;"},{"lineNumber":14,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":" * Admin mode panel of the app. Displays whether the user is in admin mode or not."},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":" */"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"public class AdminModeDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":"    public static final String LABEL_STYLE_CLASS_ADMIN \u003d \"label-admin-mode\";"},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"    public static final String LABEL_STYLE_CLASS_NON_ADMIN \u003d \"label-non-admin-mode\";"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"    private static final String adminModeText \u003d \"Admin Mode\";"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"    private static final String FXML \u003d \"AdminModeDisplay.fxml\";"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    private Label adminModeDisplay;"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"    public AdminModeDisplay(boolean isAdminMode) {"},{"lineNumber":31,"author":{"gitID":"hzxcaryn"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":"        adminModeDisplay.setText(adminModeText);"},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        setLabelStyle(isAdminMode);"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":39,"author":{"gitID":"hzxcaryn"},"content":"    private void setLabelStyle(boolean isAdminMode) {"},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"        ObservableList\u003cString\u003e styleClass \u003d this.adminModeDisplay.getStyleClass();"},{"lineNumber":41,"author":{"gitID":"hzxcaryn"},"content":"        if (isAdminMode) {"},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"            styleClass.remove(LABEL_STYLE_CLASS_NON_ADMIN);"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":"            styleClass.add(LABEL_STYLE_CLASS_ADMIN);"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"        } else {"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"            styleClass.remove(LABEL_STYLE_CLASS_ADMIN);"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":"            styleClass.add(LABEL_STYLE_CLASS_NON_ADMIN);"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"    @Subscribe"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"    private void handleUserModeChangedEvent(UserModeChangedEvent event) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"        Platform.runLater(() -\u003e setLabelStyle(event.isAdminMode));"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":44,"-":12}},{"path":"src/main/java/seedu/ptman/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"hzxcaryn"},"content":"    public final boolean isError;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"hzxcaryn"},"content":"    public NewResultAvailableEvent(String message, boolean isError) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":"        this.isError \u003d isError;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":20}},{"path":"src/main/java/seedu/ptman/ui/TimetablePanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.temporal.WeekFields;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Locale;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javax.imageio.ImageIO;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javax.mail.MessagingException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar.Style;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import com.calendarfx.view.DayViewBase;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import com.calendarfx.view.DetailedWeekView;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import javafx.embed.swing.SwingFXUtils;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import javafx.scene.SnapshotParameters;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import javafx.scene.image.WritableImage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import javafx.scene.transform.Transform;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.model.PartTimeManagerChangedEvent;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.EmployeePanelSelectionChangedEvent;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.ExportTimetableAsImageAndEmailRequestEvent;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.ExportTimetableAsImageRequestEvent;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.services.EmailService;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.UniqueEmployeeList;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"/**"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":" * Displays the GUI Timetable."},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":" */"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"public class TimetablePanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"    public static final String TIMETABLE_IMAGE_FILE_NAME_DEFAULT \u003d \"MyTimetable\";"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"    public static final String TIMETABLE_IMAGE_FILE_FORMAT \u003d \"png\";"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"    private static final int TIMETABLE_IMAGE_PIXEL_SCALE \u003d 2;"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"    private static final String FXML \u003d \"TimetableView.fxml\";"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"    private static final int MAX_SLOTS_LEFT_RUNNING_OUT \u003d 3;"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"    private static final Style ENTRY_GREEN_STYLE \u003d Style.STYLE1;"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"    private static final Style ENTRY_BLUE_STYLE \u003d Style.STYLE2;"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"    private static final Style ENTRY_YELLOW_STYLE \u003d Style.STYLE3;"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"    private static final Style ENTRY_RED_STYLE \u003d Style.STYLE5;"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"    private static final Style ENTRY_BROWN_STYLE \u003d Style.STYLE7;"},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"    private static Calendar timetableAvail;"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"    private static Calendar timetableEmployee;"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"    private static Calendar timetableFull;"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"    private static Calendar timetableOthers;"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"    private static Calendar timetableRunningOut;"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"    private CalendarView timetableView;"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"    private ObservableList\u003cShift\u003e shiftObservableList;"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"    private OutletInformation outletInformation;"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":81,"author":{"gitID":"hzxcaryn"},"content":"    private Employee currentEmployee \u003d null;"},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":"    protected TimetablePanel(ObservableList\u003cShift\u003e shiftObservableList, OutletInformation outletInformation) {"},{"lineNumber":84,"author":{"gitID":"hzxcaryn"},"content":"        super(FXML);"},{"lineNumber":85,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":86,"author":{"gitID":"hzxcaryn"},"content":"        this.shiftObservableList \u003d shiftObservableList;"},{"lineNumber":87,"author":{"gitID":"hzxcaryn"},"content":"        this.outletInformation \u003d outletInformation;"},{"lineNumber":88,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":89,"author":{"gitID":"hzxcaryn"},"content":"        timetableView \u003d new CalendarView();"},{"lineNumber":90,"author":{"gitID":"hzxcaryn"},"content":"        showRelevantViewsOnly();"},{"lineNumber":91,"author":{"gitID":"hzxcaryn"},"content":"        // disable clicks on timetable view"},{"lineNumber":92,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.getWeekPage().setMouseTransparent(true);"},{"lineNumber":93,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":94,"author":{"gitID":"hzxcaryn"},"content":"        updateTimetableView();"},{"lineNumber":95,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":96,"author":{"gitID":"hzxcaryn"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":97,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":99,"author":{"gitID":"hzxcaryn"},"content":"    public CalendarView getRoot() {"},{"lineNumber":100,"author":{"gitID":"hzxcaryn"},"content":"        return this.timetableView;"},{"lineNumber":101,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":103,"author":{"gitID":"hzxcaryn"},"content":"    public static Calendar getTimetableAvail() {"},{"lineNumber":104,"author":{"gitID":"hzxcaryn"},"content":"        return timetableAvail;"},{"lineNumber":105,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":107,"author":{"gitID":"hzxcaryn"},"content":"    public static Calendar getTimetableRunningOut() {"},{"lineNumber":108,"author":{"gitID":"hzxcaryn"},"content":"        return timetableRunningOut;"},{"lineNumber":109,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":111,"author":{"gitID":"hzxcaryn"},"content":"    public static Calendar getTimetableFull() {"},{"lineNumber":112,"author":{"gitID":"hzxcaryn"},"content":"        return timetableFull;"},{"lineNumber":113,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":115,"author":{"gitID":"hzxcaryn"},"content":"    public static Calendar getTimetableEmployee() {"},{"lineNumber":116,"author":{"gitID":"hzxcaryn"},"content":"        return timetableEmployee;"},{"lineNumber":117,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":119,"author":{"gitID":"hzxcaryn"},"content":"    public static Calendar getTimetableOthers() {"},{"lineNumber":120,"author":{"gitID":"hzxcaryn"},"content":"        return timetableOthers;"},{"lineNumber":121,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":123,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"hzxcaryn"},"content":"     * Only show the parts of CalendarFX that we need."},{"lineNumber":125,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"hzxcaryn"},"content":"    private void showRelevantViewsOnly() {"},{"lineNumber":127,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.showWeekPage();"},{"lineNumber":128,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":129,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.getWeekPage().setShowNavigation(false);"},{"lineNumber":130,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.getWeekPage().setShowDate(false);"},{"lineNumber":131,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.weekFieldsProperty().setValue(WeekFields.of(Locale.FRANCE)); // Start week from Monday"},{"lineNumber":132,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowToday(true);"},{"lineNumber":133,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowPrintButton(true);"},{"lineNumber":134,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowAddCalendarButton(false);"},{"lineNumber":135,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowSearchField(false);"},{"lineNumber":136,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowToolBar(false);"},{"lineNumber":137,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowPageSwitcher(false);"},{"lineNumber":138,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowPageToolBarControls(false);"},{"lineNumber":139,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowSearchResultsTray(false);"},{"lineNumber":140,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowSourceTray(false);"},{"lineNumber":141,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setShowSourceTrayButton(false);"},{"lineNumber":142,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.getWeekPage().getDetailedWeekView().setShowAllDayView(false);"},{"lineNumber":143,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":145,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"hzxcaryn"},"content":"     * This ensures that the range of the times shown by the timetable view is constrained to the"},{"lineNumber":147,"author":{"gitID":"hzxcaryn"},"content":"     * operating hours of the outlet."},{"lineNumber":148,"author":{"gitID":"hzxcaryn"},"content":"     * Also ensures that no scrolling is required to view the entire timetable."},{"lineNumber":149,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"hzxcaryn"},"content":"    private void setTimetableRange() {"},{"lineNumber":151,"author":{"gitID":"hzxcaryn"},"content":"        LocalTime startTime \u003d outletInformation.getOperatingHours().getStartTime();"},{"lineNumber":152,"author":{"gitID":"hzxcaryn"},"content":"        LocalTime endTime \u003d outletInformation.getOperatingHours().getEndTime();"},{"lineNumber":153,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setStartTime(startTime);"},{"lineNumber":154,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setEndTime(endTime);"},{"lineNumber":155,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":156,"author":{"gitID":"hzxcaryn"},"content":"        DetailedWeekView detailedWeekView \u003d timetableView.getWeekPage().getDetailedWeekView();"},{"lineNumber":157,"author":{"gitID":"hzxcaryn"},"content":"        detailedWeekView.setEarlyLateHoursStrategy(DayViewBase.EarlyLateHoursStrategy.HIDE);"},{"lineNumber":158,"author":{"gitID":"hzxcaryn"},"content":"        detailedWeekView.setHoursLayoutStrategy(DayViewBase.HoursLayoutStrategy.FIXED_HOUR_COUNT);"},{"lineNumber":159,"author":{"gitID":"hzxcaryn"},"content":"        detailedWeekView.setVisibleHours((int) ChronoUnit.HOURS.between(startTime, endTime));"},{"lineNumber":160,"author":{"gitID":"hzxcaryn"},"content":"        detailedWeekView.setShowScrollBar(false);"},{"lineNumber":161,"author":{"gitID":"hzxcaryn"},"content":"        detailedWeekView.setEnableCurrentTimeMarker(false);"},{"lineNumber":162,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":164,"author":{"gitID":"hzxcaryn"},"content":"    private void setCurrentTime() {"},{"lineNumber":165,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.setToday(LocalDate.now());"},{"lineNumber":166,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":168,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"hzxcaryn"},"content":"     * Takes default outlet shifts and set timetable entries based on these shifts."},{"lineNumber":170,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"hzxcaryn"},"content":"    private void setShifts() {"},{"lineNumber":172,"author":{"gitID":"hzxcaryn"},"content":"        int index \u003d 1;"},{"lineNumber":173,"author":{"gitID":"hzxcaryn"},"content":"        for (Shift shift: shiftObservableList) {"},{"lineNumber":174,"author":{"gitID":"hzxcaryn"},"content":"            LocalDate date \u003d shift.getDate().getLocalDate();"},{"lineNumber":175,"author":{"gitID":"hzxcaryn"},"content":"            Interval timeInterval \u003d new Interval(date, shift.getStartTime().getLocalTime(),"},{"lineNumber":176,"author":{"gitID":"hzxcaryn"},"content":"                    date, shift.getEndTime().getLocalTime());"},{"lineNumber":177,"author":{"gitID":"hzxcaryn"},"content":"            Entry\u003cString\u003e shiftEntry \u003d new Entry\u003c\u003e(\"SHIFT \" + index + \"\\nSlots left: \" + shift.getSlotsLeft(),"},{"lineNumber":178,"author":{"gitID":"hzxcaryn"},"content":"                    timeInterval);"},{"lineNumber":179,"author":{"gitID":"hzxcaryn"},"content":"            setEntryType(shift, shiftEntry);"},{"lineNumber":180,"author":{"gitID":"hzxcaryn"},"content":"            index++;"},{"lineNumber":181,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":184,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"hzxcaryn"},"content":"     * Sets the entry type (aka the color) of the shift in the timetable"},{"lineNumber":186,"author":{"gitID":"hzxcaryn"},"content":"     * @param shift"},{"lineNumber":187,"author":{"gitID":"hzxcaryn"},"content":"     * @param shiftEntry"},{"lineNumber":188,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"hzxcaryn"},"content":"    private void setEntryType(Shift shift, Entry\u003cString\u003e shiftEntry) {"},{"lineNumber":190,"author":{"gitID":"hzxcaryn"},"content":"        Calendar entryType;"},{"lineNumber":191,"author":{"gitID":"hzxcaryn"},"content":"        if (currentEmployee !\u003d null) {"},{"lineNumber":192,"author":{"gitID":"hzxcaryn"},"content":"            entryType \u003d getEntryTypeEmployee(shift);"},{"lineNumber":193,"author":{"gitID":"hzxcaryn"},"content":"        } else {"},{"lineNumber":194,"author":{"gitID":"hzxcaryn"},"content":"            entryType \u003d getEntryTypeMain(shift);"},{"lineNumber":195,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"hzxcaryn"},"content":"        entryType.addEntry(shiftEntry);"},{"lineNumber":197,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":199,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"hzxcaryn"},"content":"     * Checks if currentEmployee is in input shift"},{"lineNumber":201,"author":{"gitID":"hzxcaryn"},"content":"     * @param shift"},{"lineNumber":202,"author":{"gitID":"hzxcaryn"},"content":"     * @return true if currentEmployee is in input shift, false if not."},{"lineNumber":203,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"hzxcaryn"},"content":"    private boolean isCurrentEmployeeInShift(Shift shift) {"},{"lineNumber":205,"author":{"gitID":"hzxcaryn"},"content":"        UniqueEmployeeList employees \u003d shift.getUniqueEmployeeList();"},{"lineNumber":206,"author":{"gitID":"hzxcaryn"},"content":"        for (Employee employee : employees) {"},{"lineNumber":207,"author":{"gitID":"hzxcaryn"},"content":"            if (employee.equals(currentEmployee)) {"},{"lineNumber":208,"author":{"gitID":"hzxcaryn"},"content":"                return true;"},{"lineNumber":209,"author":{"gitID":"hzxcaryn"},"content":"            }"},{"lineNumber":210,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"hzxcaryn"},"content":"        return false;"},{"lineNumber":212,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":214,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"hzxcaryn"},"content":"     * @return the entryType (a Calendar object) for the shift in the main timetable view, which reflects"},{"lineNumber":216,"author":{"gitID":"hzxcaryn"},"content":"     * the color of the shift in the timetableView."},{"lineNumber":217,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"hzxcaryn"},"content":"    private Calendar getEntryTypeMain(Shift shift) {"},{"lineNumber":219,"author":{"gitID":"hzxcaryn"},"content":"        float ratio \u003d (float) shift.getSlotsLeft() / (float) shift.getCapacity().getCapacity();"},{"lineNumber":220,"author":{"gitID":"hzxcaryn"},"content":"        if (ratio \u003c\u003d 0) {"},{"lineNumber":221,"author":{"gitID":"hzxcaryn"},"content":"            return timetableFull;"},{"lineNumber":222,"author":{"gitID":"hzxcaryn"},"content":"        } else if (ratio \u003c\u003d 0.5 || shift.getCapacity().getCapacity() \u003c MAX_SLOTS_LEFT_RUNNING_OUT) {"},{"lineNumber":223,"author":{"gitID":"hzxcaryn"},"content":"            return timetableRunningOut;"},{"lineNumber":224,"author":{"gitID":"hzxcaryn"},"content":"        } else {"},{"lineNumber":225,"author":{"gitID":"hzxcaryn"},"content":"            return timetableAvail;"},{"lineNumber":226,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":229,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"hzxcaryn"},"content":"     * @return the entryType (a Calendar object) for the shift in the employee timetable view, which reflects"},{"lineNumber":231,"author":{"gitID":"hzxcaryn"},"content":"     * the color of the shift in the timetableView."},{"lineNumber":232,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"hzxcaryn"},"content":"    private Calendar getEntryTypeEmployee(Shift shift) {"},{"lineNumber":234,"author":{"gitID":"hzxcaryn"},"content":"        if (isCurrentEmployeeInShift(shift)) {"},{"lineNumber":235,"author":{"gitID":"hzxcaryn"},"content":"            return timetableEmployee;"},{"lineNumber":236,"author":{"gitID":"hzxcaryn"},"content":"        } else {"},{"lineNumber":237,"author":{"gitID":"hzxcaryn"},"content":"            return timetableOthers;"},{"lineNumber":238,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":241,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"hzxcaryn"},"content":"     * Replaces the timetable view with a new timetable, with shifts taken by the employee being highlighted"},{"lineNumber":243,"author":{"gitID":"hzxcaryn"},"content":"     * @param employee"},{"lineNumber":244,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"hzxcaryn"},"content":"    private void loadEmployeeTimetable(Employee employee) {"},{"lineNumber":246,"author":{"gitID":"hzxcaryn"},"content":"        currentEmployee \u003d employee;"},{"lineNumber":247,"author":{"gitID":"hzxcaryn"},"content":"        updateTimetableView();"},{"lineNumber":248,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":250,"author":{"gitID":"hzxcaryn"},"content":"    private void loadMainTimetable() {"},{"lineNumber":251,"author":{"gitID":"hzxcaryn"},"content":"        currentEmployee \u003d null;"},{"lineNumber":252,"author":{"gitID":"hzxcaryn"},"content":"        updateTimetableView();"},{"lineNumber":253,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":255,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"hzxcaryn"},"content":"     * Replaces timetableView with a new timetable with updated shift and outlet information"},{"lineNumber":257,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"hzxcaryn"},"content":"    private void updateTimetableView() {"},{"lineNumber":259,"author":{"gitID":"hzxcaryn"},"content":"        setCurrentTime();"},{"lineNumber":260,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.getCalendarSources().clear();"},{"lineNumber":261,"author":{"gitID":"hzxcaryn"},"content":"        CalendarSource calendarSource \u003d new CalendarSource(\"Shifts\");"},{"lineNumber":262,"author":{"gitID":"hzxcaryn"},"content":"        addCalendars(calendarSource);"},{"lineNumber":263,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":264,"author":{"gitID":"hzxcaryn"},"content":"        setShifts();"},{"lineNumber":265,"author":{"gitID":"hzxcaryn"},"content":"        timetableView.getCalendarSources().add(calendarSource);"},{"lineNumber":266,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":267,"author":{"gitID":"hzxcaryn"},"content":"        setTimetableRange();"},{"lineNumber":268,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":270,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"hzxcaryn"},"content":"     * Initialises all the Calendar objects"},{"lineNumber":272,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"hzxcaryn"},"content":"    private void initialiseEntries() {"},{"lineNumber":274,"author":{"gitID":"hzxcaryn"},"content":"        timetableAvail \u003d new Calendar(\"Available\");"},{"lineNumber":275,"author":{"gitID":"hzxcaryn"},"content":"        timetableRunningOut \u003d new Calendar(\"Running Out\");"},{"lineNumber":276,"author":{"gitID":"hzxcaryn"},"content":"        timetableFull \u003d new Calendar(\"Full\");"},{"lineNumber":277,"author":{"gitID":"hzxcaryn"},"content":"        timetableEmployee \u003d new Calendar(\"Employee\u0027s shift\");"},{"lineNumber":278,"author":{"gitID":"hzxcaryn"},"content":"        timetableOthers \u003d new Calendar(\"Other shifts\");"},{"lineNumber":279,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":281,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"hzxcaryn"},"content":"     * Sets the color styles of the entries"},{"lineNumber":283,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"hzxcaryn"},"content":"    private void setEntryStyles() {"},{"lineNumber":285,"author":{"gitID":"hzxcaryn"},"content":"        timetableAvail.setStyle(ENTRY_GREEN_STYLE);"},{"lineNumber":286,"author":{"gitID":"hzxcaryn"},"content":"        timetableRunningOut.setStyle(ENTRY_YELLOW_STYLE);"},{"lineNumber":287,"author":{"gitID":"hzxcaryn"},"content":"        timetableFull.setStyle(ENTRY_RED_STYLE);"},{"lineNumber":288,"author":{"gitID":"hzxcaryn"},"content":"        timetableEmployee.setStyle(ENTRY_BLUE_STYLE);"},{"lineNumber":289,"author":{"gitID":"hzxcaryn"},"content":"        timetableOthers.setStyle(ENTRY_BROWN_STYLE);"},{"lineNumber":290,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":292,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"hzxcaryn"},"content":"     * Adds all relevant Calendars (entryTypes) to its source"},{"lineNumber":294,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"hzxcaryn"},"content":"    private void addCalendars(CalendarSource calendarSource) {"},{"lineNumber":296,"author":{"gitID":"hzxcaryn"},"content":"        initialiseEntries();"},{"lineNumber":297,"author":{"gitID":"hzxcaryn"},"content":"        setEntryStyles();"},{"lineNumber":298,"author":{"gitID":"hzxcaryn"},"content":"        calendarSource.getCalendars().addAll(timetableAvail, timetableRunningOut, timetableFull,"},{"lineNumber":299,"author":{"gitID":"hzxcaryn"},"content":"                timetableEmployee, timetableOthers);"},{"lineNumber":300,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":302,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"hzxcaryn"},"content":"     * Takes a snapshot of the timetable view"},{"lineNumber":304,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"hzxcaryn"},"content":"    private WritableImage takeSnapshot() {"},{"lineNumber":306,"author":{"gitID":"hzxcaryn"},"content":"        WritableImage timetableWritableImage \u003d new WritableImage("},{"lineNumber":307,"author":{"gitID":"hzxcaryn"},"content":"                (int) (TIMETABLE_IMAGE_PIXEL_SCALE * timetableView.getWidth()),"},{"lineNumber":308,"author":{"gitID":"hzxcaryn"},"content":"                (int) (TIMETABLE_IMAGE_PIXEL_SCALE * timetableView.getHeight()));"},{"lineNumber":309,"author":{"gitID":"hzxcaryn"},"content":"        SnapshotParameters spa \u003d new SnapshotParameters();"},{"lineNumber":310,"author":{"gitID":"hzxcaryn"},"content":"        spa.setTransform(Transform.scale(TIMETABLE_IMAGE_PIXEL_SCALE, TIMETABLE_IMAGE_PIXEL_SCALE));"},{"lineNumber":311,"author":{"gitID":"hzxcaryn"},"content":"        WritableImage snapshot \u003d timetableView.snapshot(spa, timetableWritableImage);"},{"lineNumber":312,"author":{"gitID":"hzxcaryn"},"content":"        return snapshot;"},{"lineNumber":313,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":315,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":316,"author":{"gitID":"hzxcaryn"},"content":"     * Exports timetable as image and save it locally"},{"lineNumber":317,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":318,"author":{"gitID":"hzxcaryn"},"content":"    private void exportTimetableAsImage(String filename) {"},{"lineNumber":319,"author":{"gitID":"hzxcaryn"},"content":"        File imageFile \u003d new File(\".\" + File.separator + filename + \".\" + TIMETABLE_IMAGE_FILE_FORMAT);"},{"lineNumber":320,"author":{"gitID":"hzxcaryn"},"content":"        try {"},{"lineNumber":321,"author":{"gitID":"hzxcaryn"},"content":"            ImageIO.write(SwingFXUtils.fromFXImage(takeSnapshot(), null), TIMETABLE_IMAGE_FILE_FORMAT, imageFile);"},{"lineNumber":322,"author":{"gitID":"hzxcaryn"},"content":"        } catch (IOException e) {"},{"lineNumber":323,"author":{"gitID":"hzxcaryn"},"content":"            logger.warning(\"Error taking snapshot of timetable.\");"},{"lineNumber":324,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":325,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":327,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":328,"author":{"gitID":"hzxcaryn"},"content":"     * Exports timetable as image and email it"},{"lineNumber":329,"author":{"gitID":"hzxcaryn"},"content":"     * @param email"},{"lineNumber":330,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":331,"author":{"gitID":"hzxcaryn"},"content":"    private void exportTimetableAsImageAndEmail(String filename, Email email) {"},{"lineNumber":332,"author":{"gitID":"hzxcaryn"},"content":"        String pathName \u003d \".\" + File.separator + filename + \".\" + TIMETABLE_IMAGE_FILE_FORMAT;"},{"lineNumber":333,"author":{"gitID":"hzxcaryn"},"content":"        File imageFile \u003d new File(pathName);"},{"lineNumber":334,"author":{"gitID":"hzxcaryn"},"content":"        try {"},{"lineNumber":335,"author":{"gitID":"hzxcaryn"},"content":"            ImageIO.write(SwingFXUtils.fromFXImage(takeSnapshot(), null), TIMETABLE_IMAGE_FILE_FORMAT, imageFile);"},{"lineNumber":336,"author":{"gitID":"hzxcaryn"},"content":"            EmailService emailService \u003d EmailService.getInstance();"},{"lineNumber":337,"author":{"gitID":"hzxcaryn"},"content":"            emailService.sendTimetableAttachment(email.toString(), pathName);"},{"lineNumber":338,"author":{"gitID":"hzxcaryn"},"content":"            Files.deleteIfExists(Paths.get(pathName));"},{"lineNumber":339,"author":{"gitID":"hzxcaryn"},"content":"        } catch (IOException e) {"},{"lineNumber":340,"author":{"gitID":"hzxcaryn"},"content":"            logger.warning(\"Error taking snapshot of timetable.\");"},{"lineNumber":341,"author":{"gitID":"hzxcaryn"},"content":"        } catch (MessagingException e) {"},{"lineNumber":342,"author":{"gitID":"hzxcaryn"},"content":"            logger.warning(\"Error sending timetable as email.\");"},{"lineNumber":343,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":344,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":345,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":346,"author":{"gitID":"hzxcaryn"},"content":"    @Subscribe"},{"lineNumber":347,"author":{"gitID":"hzxcaryn"},"content":"    private void handleShiftChangedEvent(PartTimeManagerChangedEvent event) {"},{"lineNumber":348,"author":{"gitID":"hzxcaryn"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event) + \": Updating timetable view....\");"},{"lineNumber":349,"author":{"gitID":"hzxcaryn"},"content":"        Platform.runLater(() -\u003e updateTimetableView());"},{"lineNumber":350,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":352,"author":{"gitID":"hzxcaryn"},"content":"    @Subscribe"},{"lineNumber":353,"author":{"gitID":"hzxcaryn"},"content":"    private void handleEmployeePanelSelectionChangedEvent(EmployeePanelSelectionChangedEvent event) {"},{"lineNumber":354,"author":{"gitID":"hzxcaryn"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":355,"author":{"gitID":"hzxcaryn"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":356,"author":{"gitID":"hzxcaryn"},"content":"            if (event.hasNewSelection()) {"},{"lineNumber":357,"author":{"gitID":"hzxcaryn"},"content":"                loadEmployeeTimetable(event.getNewSelection().employee);"},{"lineNumber":358,"author":{"gitID":"hzxcaryn"},"content":"            } else {"},{"lineNumber":359,"author":{"gitID":"hzxcaryn"},"content":"                loadMainTimetable();"},{"lineNumber":360,"author":{"gitID":"hzxcaryn"},"content":"            }"},{"lineNumber":361,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":362,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":364,"author":{"gitID":"hzxcaryn"},"content":"    @Subscribe"},{"lineNumber":365,"author":{"gitID":"hzxcaryn"},"content":"    private void handleExportTimetableAsImageRequestEvent(ExportTimetableAsImageRequestEvent event) {"},{"lineNumber":366,"author":{"gitID":"hzxcaryn"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event) + \": Exporting timetable as image....\");"},{"lineNumber":367,"author":{"gitID":"hzxcaryn"},"content":"        Platform.runLater(() -\u003e exportTimetableAsImage(event.filename));"},{"lineNumber":368,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":370,"author":{"gitID":"hzxcaryn"},"content":"    @Subscribe"},{"lineNumber":371,"author":{"gitID":"hzxcaryn"},"content":"    private void handleExportTimetableAsImageAndEmailRequestEvent(ExportTimetableAsImageAndEmailRequestEvent event) {"},{"lineNumber":372,"author":{"gitID":"hzxcaryn"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event)"},{"lineNumber":373,"author":{"gitID":"hzxcaryn"},"content":"                + \": Exporting timetable as image to send email....\");"},{"lineNumber":374,"author":{"gitID":"hzxcaryn"},"content":"        Platform.runLater(() -\u003e exportTimetableAsImageAndEmail(event.filename, event.email));"},{"lineNumber":375,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":377,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":331,"-":46}},{"path":"src/main/java/seedu/ptman/commons/util/DateUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.temporal.TemporalField;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.temporal.WeekFields;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Locale;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":11,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"shanwpf"},"content":" * Utility methods for handling dates"},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":"public class DateUtil {"},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"     * Returns the week number for {@code date} from the start of the year"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"    public static int getWeekFromDate(LocalDate date) {"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(date);"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"        TemporalField woy \u003d WeekFields.of(Locale.FRANCE).weekOfWeekBasedYear();"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"        return date.get(woy);"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"     * Given a {@code date}, returns the date of the week\u0027s Monday"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"    public static LocalDate getMondayOfDate(LocalDate date) {"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(date);"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"        int week \u003d getWeekFromDate(date);"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"        // We use Locale.FRANCE because it sets the first day of the week"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"        // to be Monday."},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"        WeekFields weekFields \u003d WeekFields.of(Locale.FRANCE);"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"        return LocalDate.now()"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"                .withYear(date.getYear())"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"                .with(weekFields.weekOfYear(), week)"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"                .with(weekFields.dayOfWeek(), 1);"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":29,"-":9}},{"path":"src/main/java/seedu/ptman/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of employees */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cEmployee\u003e getFilteredEmployeeList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable sorted view of the filtered shifts */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ObservableList\u003cShift\u003e getFilteredShiftList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    OutletInformation getOutletInformation();"},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":"    /** Returns if the user is currently in admin mode */"},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":"    boolean isAdminMode();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":34}},{"path":"src/main/java/seedu/ptman/commons/events/model/UserModeChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":5,"author":{"gitID":"hzxcaryn"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":" * Indicates that the user mode has changed. (Admin mode or not)"},{"lineNumber":7,"author":{"gitID":"hzxcaryn"},"content":" */"},{"lineNumber":8,"author":{"gitID":"hzxcaryn"},"content":"public class UserModeChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":"    public final boolean isAdminMode;"},{"lineNumber":11,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":12,"author":{"gitID":"hzxcaryn"},"content":"    public UserModeChangedEvent(boolean isAdminMode) {"},{"lineNumber":13,"author":{"gitID":"hzxcaryn"},"content":"        this.isAdminMode \u003d isAdminMode;"},{"lineNumber":14,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":11,"-":10}},{"path":"src/main/java/seedu/ptman/logic/commands/MainCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"hzxcaryn"},"content":"import seedu.ptman.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.EmployeePanelSelectionChangedEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Returns back to main timetable view (of current week) in PTMan"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class MainCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"main\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Showing main timetable view.\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new EmployeePanelSelectionChangedEvent(null));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":19}},{"path":"src/main/java/seedu/ptman/logic/commands/LogInAdminCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"hzxcaryn"},"content":"import seedu.ptman.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"import seedu.ptman.commons.events.model.UserModeChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.InvalidPasswordException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Password;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Selects a employee identified using it\u0027s last displayed index from PTMan."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class LogInAdminCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Log in to access admin command.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" pw/AdminPassword\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_LOGGEDIN \u003d \"You are already logged in\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You are now in admin mode. \\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"please remember to log out after amending all the data.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Password toCheck;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public LogInAdminCommand(Password password) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(password);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        toCheck \u003d password;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (model.isAdminMode()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_LOGGEDIN);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!model.setTrueAdminMode(toCheck)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new InvalidPasswordException();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"        EventsCenter.getInstance().post(new UserModeChangedEvent(true));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                || (other instanceof LogInAdminCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 toCheck.equals(((LogInAdminCommand) other).toCheck));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":54}},{"path":"src/main/java/seedu/ptman/logic/commands/LogOutAdminCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"hzxcaryn"},"content":"import seedu.ptman.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":"import seedu.ptman.commons.events.model.UserModeChangedEvent;"},{"lineNumber":5,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Lists all employees in PTMan to the user."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class LogOutAdminCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"logout\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have logged out from admin mode\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_LOGGEDOUT \u003d \"You already logged out\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        if (!model.isAdminMode()) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_LOGGEDOUT);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model.setFalseAdminMode();"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":"        EventsCenter.getInstance().post(new UserModeChangedEvent(false));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":4,"-":23}},{"path":"src/main/java/seedu/ptman/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.parser.PartTimeManagerParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final PartTimeManagerParser partTimeManagerParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        partTimeManagerParser \u003d new PartTimeManagerParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Command command \u003d partTimeManagerParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return model.getFilteredEmployeeList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ObservableList\u003cShift\u003e getFilteredShiftList() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return model.getFilteredShiftList();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public OutletInformation getOutletInformation() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return model.getOutletInformation();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"    public boolean isAdminMode() {"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"        return model.isAdminMode();"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":5,"-":69}},{"path":"src/main/java/seedu/ptman/storage/XmlAdaptedShift.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Capacity;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Time;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":" * JAXB-friendly version of the Shift."},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"public class XmlAdaptedShift {"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT_SHIFT \u003d \"Shifts\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    private String date;"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"    private String startTime;"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"    private String endTime;"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"    private String capacity;"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"    @XmlElement"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"    private List\u003cXmlAdaptedEmployee\u003e employees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"     * Constructs an XmlAdaptedShift."},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"    public XmlAdaptedShift() {}"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"     * Constructs an {@code XmlAdaptedShift} with the given shift details."},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"    public XmlAdaptedShift(String date, String startTime, String endTime,"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"                           String capacity, List\u003cXmlAdaptedEmployee\u003e employees) {"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"        this.date \u003d date;"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"        this.capacity \u003d capacity;"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"        if (employees !\u003d null) {"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"            this.employees \u003d new ArrayList\u003c\u003e(employees);"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"     * Converts a given Shift into this class for JAXB use."},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedShift"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"    public XmlAdaptedShift(Shift source) {"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"        date \u003d source.getDate().toString();"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"        startTime \u003d source.getStartTime().toString();"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"        endTime \u003d source.getEndTime().toString();"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"        capacity \u003d source.getCapacity().toString();"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"        employees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"        for (Employee employee : source.getEmployeeList()) {"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"            employees.add(new XmlAdaptedEmployee(employee));"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"     * Converts this jaxb-friendly adapted shift object into the model\u0027s Shift object."},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted shift"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"    public Shift toModelType() throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"        final List\u003cEmployee\u003e employees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"        for (XmlAdaptedEmployee employee : this.employees) {"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"            employees.add(employee.toModelType());"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"        if (this.date \u003d\u003d null) {"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT_SHIFT,"},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"                    Date.class.getSimpleName()));"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"        if (!Date.isValidDate(this.date)) {"},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"        final Date date \u003d new Date(this.date);"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"        if (this.startTime \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT_SHIFT,"},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"                    Time.class.getSimpleName()));"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"        if (!Time.isValidTime(this.startTime)) {"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":"        final Time startTime \u003d new Time(this.startTime);"},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":"        if (this.endTime \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT_SHIFT,"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"                    Time.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":"        if (!Time.isValidTime(this.endTime)) {"},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"        final Time endTime \u003d new Time(this.endTime);"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"        if (this.capacity \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT_SHIFT,"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":"                    Capacity.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"        if (!Capacity.isValidCapacity(this.capacity)) {"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":"            throw new IllegalValueException(Capacity.MESSAGE_CAPACITY_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":"        final Capacity capacity \u003d new Capacity(this.capacity);"},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":120,"author":{"gitID":"shanwpf"},"content":"        return new Shift(date, startTime, endTime, capacity, employees);"},{"lineNumber":121,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":123,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"shanwpf"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"shanwpf"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":126,"author":{"gitID":"shanwpf"},"content":"            return true;"},{"lineNumber":127,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":129,"author":{"gitID":"shanwpf"},"content":"        if (!(other instanceof XmlAdaptedShift)) {"},{"lineNumber":130,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":131,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":133,"author":{"gitID":"shanwpf"},"content":"        XmlAdaptedShift otherShift \u003d (XmlAdaptedShift) other;"},{"lineNumber":134,"author":{"gitID":"shanwpf"},"content":"        return Objects.equals(date, otherShift.date)"},{"lineNumber":135,"author":{"gitID":"shanwpf"},"content":"                \u0026\u0026 Objects.equals(startTime, otherShift.startTime)"},{"lineNumber":136,"author":{"gitID":"shanwpf"},"content":"                \u0026\u0026 Objects.equals(endTime, otherShift.endTime)"},{"lineNumber":137,"author":{"gitID":"shanwpf"},"content":"                \u0026\u0026 Objects.equals(capacity, otherShift.capacity)"},{"lineNumber":138,"author":{"gitID":"shanwpf"},"content":"                \u0026\u0026 employees.equals(otherShift.employees);"},{"lineNumber":139,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":125,"-":15}},{"path":"src/main/java/seedu/ptman/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.PartTimeManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ReadOnlyPartTimeManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.ptman.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.ptman.model.util.SampleDataUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.ptman.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.ptman.storage.OutletInformationStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.ptman.storage.PartTimeManagerStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.ptman.storage.Storage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.ptman.storage.StorageManager;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.ptman.storage.UserPrefsStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.ptman.storage.XmlOutletInformationStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.ptman.storage.XmlPartTimeManagerStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.Ui;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.UiManager;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PartTimeManager ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        PartTimeManagerStorage partTimeManagerStorage \u003d"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                new XmlPartTimeManagerStorage(userPrefs.getPartTimeManagerFilePath());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        OutletInformationStorage outletInformationStorage \u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                new XmlOutletInformationStorage(userPrefs.getOutletInformationFilePath());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(partTimeManagerStorage, userPrefsStorage, outletInformationStorage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s PTMan and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * The data from the sample PTMan will be used instead if {@code storage}\u0027s PTMan is not found,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * or an empty PTMan will be used instead if errors occur when reading {@code storage}\u0027s PTMan."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyPartTimeManager\u003e partTimeManagerOptional;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Optional\u003cOutletInformation\u003e outletInformationOptional;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        ReadOnlyPartTimeManager initialData;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        OutletInformation outletInformation;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            partTimeManagerOptional \u003d storage.readPartTimeManager();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            if (!partTimeManagerOptional.isPresent()) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample PartTimeManager\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            initialData \u003d partTimeManagerOptional.orElseGet(SampleDataUtil::getSamplePartTimeManager);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty PartTimeManager\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            initialData \u003d new PartTimeManager();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty PartTimeManager\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            initialData \u003d new PartTimeManager();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            outletInformationOptional \u003d storage.readOutletInformation();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            outletInformation \u003d outletInformationOptional.orElseGet(OutletInformation::new);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            if (!outletInformationOptional.isPresent()) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample OutletInformation\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. \""},{"lineNumber":121,"author":{"gitID":"-"},"content":"                    + \"Will be starting with an dafault OutletInformation\\\"\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            outletInformation \u003d new OutletInformation();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. \""},{"lineNumber":125,"author":{"gitID":"-"},"content":"                    + \"Will be starting with an dafault OutletInformation\\\"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            outletInformation \u003d new OutletInformation();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs, outletInformation);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":159,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":187,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty PartTimeManager\");"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        logger.info(\"Starting PartTimeManager \" + MainApp.VERSION);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":216,"author":{"gitID":"hzxcaryn"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PTMan ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":234}},{"path":"src/main/java/seedu/ptman/model/shift/Time.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":12,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":" * Represents a shift\u0027s start or end time."},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"public class Time {"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time should be in 24-hour format.\";"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"    public final LocalTime time;"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"    public Time(String time) {"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(time);"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"        this.time \u003d LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HHmm\"));"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"     * Returns true if a given string is a valid time."},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"     * @param test"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"     * @return"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"    public static Boolean isValidTime(String test) {"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"            LocalTime.parse(test, DateTimeFormatter.ofPattern(\"HHmm\"));"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"        return true;"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"    public boolean isAfter(Time t) {"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        return time.isAfter(t.time);"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        return time.toString().replace(\":\", \"\");"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"    public boolean equals(Object o) {"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"        Time time1 \u003d (Time) o;"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"        return Objects.equals(time, time1.time);"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"        return time.hashCode();"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"    public int compareTo(Time startTime) {"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"        return time.compareTo(startTime.getLocalTime());"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"    public LocalTime getLocalTime() {"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"        return time;"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":65,"-":10}},{"path":"src/main/java/seedu/ptman/model/shift/Capacity.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":9,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"shanwpf"},"content":" * Represents a shift\u0027s capacity"},{"lineNumber":11,"author":{"gitID":"shanwpf"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCapacity(String)}"},{"lineNumber":12,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":"public class Capacity {"},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"    public static final String MESSAGE_CAPACITY_CONSTRAINTS \u003d \"Capacity should be a positive integer.\";"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"    public static final String CAPACITY_VALIDATION_REGEX \u003d \"^[1-9]\\\\d*$\";"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"    public final int capacity;"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":"    public Capacity(String capacity) {"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(capacity);"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"        checkArgument(isValidCapacity(capacity), MESSAGE_CAPACITY_CONSTRAINTS);"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"        this.capacity \u003d Integer.parseInt(capacity);"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    public static Boolean isValidCapacity(String test) {"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"        return test.matches(CAPACITY_VALIDATION_REGEX);"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"    public int getCapacity() {"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"        return capacity;"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        return String.valueOf(capacity);"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"    public boolean equals(Object o) {"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"            return true;"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"        Capacity capacity1 \u003d (Capacity) o;"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"        return Objects.equals(capacity, capacity1.capacity);"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        return new Integer(capacity).hashCode();"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":48,"-":7}},{"path":"src/main/java/seedu/ptman/model/shift/Shift.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.collect.Iterables;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.UniqueEmployeeList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":" * Represents a shift that employees can work in."},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"public class Shift {"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":"    public static final String MESSAGE_SHIFT_CONSTRAINTS \u003d \"Start time should be after the end time.\";"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"    private Time startTime;"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"    private Time endTime;"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"    private Date date;"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    private UniqueEmployeeList uniqueEmployeeList;"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"    private Capacity capacity;"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"    public Shift(Date date, Time startTime, Time endTime, Capacity capacity) {"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"        requireAllNonNull(startTime, endTime, capacity);"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"        checkArgument(endTime.isAfter(startTime), MESSAGE_SHIFT_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"        this.date \u003d date;"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"        this.capacity \u003d capacity;"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"        this.uniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"    public Shift(Shift shift) {"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"        this.date \u003d shift.getDate();"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"        this.startTime \u003d shift.getStartTime();"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"        this.endTime \u003d shift.getEndTime();"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        this.capacity \u003d shift.getCapacity();"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"        this.uniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"        setEmployees(shift);"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"    public Shift(Date date, Time startTime, Time endTime, Capacity capacity, List\u003cEmployee\u003e employees) {"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"        requireAllNonNull(date, startTime, endTime, capacity, employees);"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"        checkArgument(endTime.isAfter(startTime), MESSAGE_SHIFT_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        this.capacity \u003d capacity;"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"        this.date \u003d date;"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"        this.uniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"            this.uniqueEmployeeList.setEmployees(employees);"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"            e.printStackTrace();"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"    protected boolean contains(Employee employee) {"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"        return uniqueEmployeeList.contains(employee);"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"     * Adds an employee that is working in this shift."},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"     * @param employee"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"     * @throws DuplicateEmployeeException"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"    public void addEmployee(Employee employee) throws DuplicateEmployeeException {"},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"        uniqueEmployeeList.add(employee);"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"     * Removes an employee who is no longer working in this shift."},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"     * @param employee"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"     * @throws EmployeeNotFoundException"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"    public void removeEmployee(Employee employee) throws EmployeeNotFoundException {"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"        uniqueEmployeeList.remove(employee);"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"    public boolean equals(Object o) {"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":"        Shift shift \u003d (Shift) o;"},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"        return startTime.equals(shift.startTime)"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"                \u0026\u0026 endTime.equals(shift.endTime)"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"                \u0026\u0026 date.equals(shift.date)"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":"                \u0026\u0026 uniqueEmployeeList.equals(shift.uniqueEmployeeList)"},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"                \u0026\u0026 capacity.equals(shift.capacity);"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"    public int hashCode() {"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"        return Objects.hash(startTime, endTime, date, uniqueEmployeeList, capacity);"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"    public ObservableList\u003cEmployee\u003e getEmployeeList() {"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"        return uniqueEmployeeList.asObservableList();"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"    public Time getStartTime() {"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"        return startTime;"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"    public Time getEndTime() {"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"        return endTime;"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":"    public Capacity getCapacity() {"},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":"        return capacity;"},{"lineNumber":120,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":122,"author":{"gitID":"shanwpf"},"content":"    public int getSlotsLeft() {"},{"lineNumber":123,"author":{"gitID":"shanwpf"},"content":"        int numEmployees \u003d Iterables.size(uniqueEmployeeList);"},{"lineNumber":124,"author":{"gitID":"shanwpf"},"content":"        return capacity.getCapacity() - numEmployees;"},{"lineNumber":125,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":127,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"shanwpf"},"content":"     * Compares this shift to another. Returns a negative integer if the argument is a later shift,"},{"lineNumber":129,"author":{"gitID":"shanwpf"},"content":"     * 0 if the shifts are equal, or a positive integer if the argument is a later shift."},{"lineNumber":130,"author":{"gitID":"shanwpf"},"content":"     * @param other"},{"lineNumber":131,"author":{"gitID":"shanwpf"},"content":"     * @return"},{"lineNumber":132,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"shanwpf"},"content":"    public int compareTo(Shift other) {"},{"lineNumber":134,"author":{"gitID":"shanwpf"},"content":"        if (date.equals(other.getDate())) {"},{"lineNumber":135,"author":{"gitID":"shanwpf"},"content":"            return startTime.compareTo(other.getStartTime());"},{"lineNumber":136,"author":{"gitID":"shanwpf"},"content":"        } else if (date.compareTo(other.getDate()) \u003c 0) {"},{"lineNumber":137,"author":{"gitID":"shanwpf"},"content":"            return -1;"},{"lineNumber":138,"author":{"gitID":"shanwpf"},"content":"        } else {"},{"lineNumber":139,"author":{"gitID":"shanwpf"},"content":"            return 1;"},{"lineNumber":140,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":143,"author":{"gitID":"shanwpf"},"content":"    public UniqueEmployeeList getUniqueEmployeeList() {"},{"lineNumber":144,"author":{"gitID":"shanwpf"},"content":"        return uniqueEmployeeList;"},{"lineNumber":145,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":147,"author":{"gitID":"shanwpf"},"content":"    public void setEmployees(Shift shift) {"},{"lineNumber":148,"author":{"gitID":"shanwpf"},"content":"        for (final Employee employee : shift.getEmployeeList()) {"},{"lineNumber":149,"author":{"gitID":"shanwpf"},"content":"            try {"},{"lineNumber":150,"author":{"gitID":"shanwpf"},"content":"                uniqueEmployeeList.add(employee);"},{"lineNumber":151,"author":{"gitID":"shanwpf"},"content":"            } catch (DuplicateEmployeeException e) {"},{"lineNumber":152,"author":{"gitID":"shanwpf"},"content":"                e.printStackTrace();"},{"lineNumber":153,"author":{"gitID":"shanwpf"},"content":"            }"},{"lineNumber":154,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":157,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"shanwpf"},"content":"    public String toString() {"},{"lineNumber":159,"author":{"gitID":"shanwpf"},"content":"        final StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":160,"author":{"gitID":"shanwpf"},"content":"        return sb.append(\"Date: \")"},{"lineNumber":161,"author":{"gitID":"shanwpf"},"content":"                .append(date)"},{"lineNumber":162,"author":{"gitID":"shanwpf"},"content":"                .append(\" Start time: \")"},{"lineNumber":163,"author":{"gitID":"shanwpf"},"content":"                .append(startTime)"},{"lineNumber":164,"author":{"gitID":"shanwpf"},"content":"                .append(\" End time: \")"},{"lineNumber":165,"author":{"gitID":"shanwpf"},"content":"                .append(endTime)"},{"lineNumber":166,"author":{"gitID":"shanwpf"},"content":"                .append(\" Capacity: \")"},{"lineNumber":167,"author":{"gitID":"shanwpf"},"content":"                .append(capacity).toString();"},{"lineNumber":168,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":170,"author":{"gitID":"shanwpf"},"content":"    public Date getDate() {"},{"lineNumber":171,"author":{"gitID":"shanwpf"},"content":"        return date;"},{"lineNumber":172,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":157,"-":16}},{"path":"src/main/java/seedu/ptman/model/shift/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":12,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"shanwpf"},"content":" * Represents a shift\u0027s date"},{"lineNumber":14,"author":{"gitID":"shanwpf"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"public class Date {"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":"    public static final String STRING_DATE_PATTERN \u003d \"dd-MM-yy\";"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date should be in dd-mm-yy format\";"},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":"    public final LocalDate date;"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":"    public Date(String date) {"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(date);"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"        this.date \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(STRING_DATE_PATTERN));"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"     * @param test"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"     * @return"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"    public static Boolean isValidDate(String test) {"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"            LocalDate.parse(test, DateTimeFormatter.ofPattern(STRING_DATE_PATTERN));"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"        return true;"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"        return date.format(DateTimeFormatter.ofPattern(STRING_DATE_PATTERN));"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    public boolean equals(Object o) {"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"        Date date1 \u003d (Date) o;"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"        return Objects.equals(date, date1.date);"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"        return date.hashCode();"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"    public int compareTo(Date startDate) {"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"        return date.compareTo(startDate.getLocalDate());"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"    public LocalDate getLocalDate() {"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":"        return date;"},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":62,"-":10}},{"path":"src/main/java/seedu/ptman/model/shift/UniqueShiftList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.shift;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.DuplicateShiftException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.ShiftNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"shanwpf"},"content":"//@@author shanwpf"},{"lineNumber":16,"author":{"gitID":"shanwpf"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"shanwpf"},"content":" * A list of shifts that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"shanwpf"},"content":" *"},{"lineNumber":19,"author":{"gitID":"shanwpf"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"shanwpf"},"content":" *"},{"lineNumber":21,"author":{"gitID":"shanwpf"},"content":" * @see Shift#equals(Object)"},{"lineNumber":22,"author":{"gitID":"shanwpf"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"shanwpf"},"content":" */"},{"lineNumber":24,"author":{"gitID":"shanwpf"},"content":"public class UniqueShiftList implements Iterable\u003cShift\u003e {"},{"lineNumber":25,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":26,"author":{"gitID":"shanwpf"},"content":"    private final ObservableList\u003cShift\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":28,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"shanwpf"},"content":"     * Returns true if the list contains an equivalent shift as the given argument."},{"lineNumber":30,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"shanwpf"},"content":"    public boolean contains(Shift toCheck) {"},{"lineNumber":32,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"shanwpf"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":36,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"shanwpf"},"content":"     * Adds a shift to the list."},{"lineNumber":38,"author":{"gitID":"shanwpf"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"shanwpf"},"content":"     * @throws DuplicateShiftException if the shift to add is a duplicate of an existing shift in the list."},{"lineNumber":40,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"shanwpf"},"content":"    public void add(Shift toAdd) throws DuplicateShiftException {"},{"lineNumber":42,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"shanwpf"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"shanwpf"},"content":"            throw new DuplicateShiftException();"},{"lineNumber":45,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"shanwpf"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":49,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"shanwpf"},"content":"     * Replaces the shift {@code target} in the list with {@code editedShift}."},{"lineNumber":51,"author":{"gitID":"shanwpf"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"shanwpf"},"content":"     * @throws DuplicateShiftException if the replacement is equivalent to another existing shift in the list."},{"lineNumber":53,"author":{"gitID":"shanwpf"},"content":"     * @throws ShiftNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"shanwpf"},"content":"    public void setShift(Shift target, Shift editedShift)"},{"lineNumber":56,"author":{"gitID":"shanwpf"},"content":"            throws DuplicateShiftException, ShiftNotFoundException {"},{"lineNumber":57,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(editedShift);"},{"lineNumber":58,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":59,"author":{"gitID":"shanwpf"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"shanwpf"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"shanwpf"},"content":"            throw new ShiftNotFoundException();"},{"lineNumber":62,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":64,"author":{"gitID":"shanwpf"},"content":"        if (!target.equals(editedShift) \u0026\u0026 internalList.contains(editedShift)) {"},{"lineNumber":65,"author":{"gitID":"shanwpf"},"content":"            throw new DuplicateShiftException();"},{"lineNumber":66,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":68,"author":{"gitID":"shanwpf"},"content":"        internalList.set(index, editedShift);"},{"lineNumber":69,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":71,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"shanwpf"},"content":"     * Removes the equivalent shift from the list."},{"lineNumber":73,"author":{"gitID":"shanwpf"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"shanwpf"},"content":"     * @throws ShiftNotFoundException if no such shift could be found in the list."},{"lineNumber":75,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"shanwpf"},"content":"    public boolean remove(Shift toRemove) throws ShiftNotFoundException {"},{"lineNumber":77,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"shanwpf"},"content":"        final boolean shiftFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"shanwpf"},"content":"        if (!shiftFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"shanwpf"},"content":"            throw new ShiftNotFoundException();"},{"lineNumber":81,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"shanwpf"},"content":"        return shiftFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":85,"author":{"gitID":"shanwpf"},"content":"    public void setShifts(UniqueShiftList replacement) {"},{"lineNumber":86,"author":{"gitID":"shanwpf"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":89,"author":{"gitID":"shanwpf"},"content":"    public void setShifts(List\u003cShift\u003e shifts) throws DuplicateShiftException {"},{"lineNumber":90,"author":{"gitID":"shanwpf"},"content":"        requireAllNonNull(shifts);"},{"lineNumber":91,"author":{"gitID":"shanwpf"},"content":"        final UniqueShiftList replacement \u003d new UniqueShiftList();"},{"lineNumber":92,"author":{"gitID":"shanwpf"},"content":"        for (final Shift shift : shifts) {"},{"lineNumber":93,"author":{"gitID":"shanwpf"},"content":"            replacement.add(shift);"},{"lineNumber":94,"author":{"gitID":"shanwpf"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"shanwpf"},"content":"        setShifts(replacement);"},{"lineNumber":96,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":98,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"shanwpf"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"shanwpf"},"content":"    public ObservableList\u003cShift\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"shanwpf"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"    public Iterator\u003cShift\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":110,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"shanwpf"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"shanwpf"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"shanwpf"},"content":"                || (other instanceof UniqueShiftList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"shanwpf"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueShiftList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":117,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"shanwpf"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"shanwpf"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"shanwpf"},"content":"}"}],"authorContributionMap":{"shanwpf":107,"-":14}},{"path":"src/main/java/seedu/ptman/model/PartTimeManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.UniqueEmployeeList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.DuplicateShiftException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.NoOutletInformationFieldChangeException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.ShiftNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.UniqueShiftList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.UniqueTagList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class PartTimeManager implements ReadOnlyPartTimeManager {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueEmployeeList employees;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniqueShiftList shifts;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final OutletInformation outlet;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private boolean isAdminMode;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        employees \u003d new UniqueEmployeeList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        shifts \u003d new UniqueShiftList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        outlet \u003d new OutletInformation();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        isAdminMode \u003d false;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PartTimeManager() {}"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Creates an PartTimeManager using the Employees and Tags in the {@code toBeCopied}"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public PartTimeManager(ReadOnlyPartTimeManager toBeCopied) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    //// authorization operations"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean isAdminMode() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this.isAdminMode;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Check if given password is of outlet\u0027s"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param password"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @return true if password is the same"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean isAdminPassword(Password password) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return outlet.getMasterPassword().equals(password);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * set admin mode only after check against adminPassword"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @param isAdmin"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void setAdminMode(boolean isAdmin) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        isAdminMode \u003d isAdmin;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * set password for outlet"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @param password"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void setAdminPassword(Password password) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        outlet.setOutletPassword(password);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void setEmployees(List\u003cEmployee\u003e employees) throws DuplicateEmployeeException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        this.employees.setEmployees(employees);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void setOutletInformation(OutletInformation outlet) throws NoOutletInformationFieldChangeException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.outlet.setOutletInformation(outlet);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"shanwpf"},"content":"    //@@author shanwpf"},{"lineNumber":106,"author":{"gitID":"shanwpf"},"content":"    public void setShifts(List\u003cShift\u003e shifts) throws DuplicateShiftException {"},{"lineNumber":107,"author":{"gitID":"shanwpf"},"content":"        this.shifts.setShifts(shifts);"},{"lineNumber":108,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"shanwpf"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code PartTimeManager} with {@code newData}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyPartTimeManager newData) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        List\u003cEmployee\u003e syncedEmployeeList \u003d newData.getEmployeeList().stream()"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        List\u003cShift\u003e syncedShiftList \u003d new ArrayList\u003c\u003e(newData.getShiftList());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        OutletInformation syncedOutlet \u003d new OutletInformation(newData.getOutletInformation());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            setEmployees(syncedEmployeeList);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            setShifts(syncedShiftList);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            setOutletInformation(syncedOutlet);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PartTimeManagers should not have duplicate employees\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (DuplicateShiftException e) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PartTimeManagers should not have duplicate shifts\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (NoOutletInformationFieldChangeException e) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PartTimeManagers should not have empty outlet information\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    //// employee-level operations"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Adds an employee to PTMan."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Also checks the new employee\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the employee to point to those in {@link #tags}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * @throws DuplicateEmployeeException if an equivalent employee already exists."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void addEmployee(Employee p) throws DuplicateEmployeeException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Employee employee \u003d syncWithMasterTagList(p);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any employee"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // in the employee list."},{"lineNumber":155,"author":{"gitID":"-"},"content":"        employees.add(employee);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Replaces the given employee {@code target} in the list with {@code editedEmployee}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * {@code PartTimeManager}\u0027s tag list will be updated with the tags of {@code editedEmployee}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @throws DuplicateEmployeeException if updating the employee\u0027s details causes the employee to be equivalent to"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     *      another existing employee in the list."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @throws EmployeeNotFoundException if {@code target} could not be found in the list."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Employee)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void updateEmployee(Employee target, Employee editedEmployee)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            throws DuplicateEmployeeException, EmployeeNotFoundException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        requireNonNull(editedEmployee);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Employee syncedEditedEmployee \u003d syncWithMasterTagList(editedEmployee);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any employee"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // in the employee list."},{"lineNumber":176,"author":{"gitID":"-"},"content":"        employees.setEmployee(target, syncedEditedEmployee);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void updateOutlet(OutletInformation editedOutlet) throws NoOutletInformationFieldChangeException {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        outlet.setOutletInformation(editedOutlet);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public String getOutletInformationMessage() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return outlet.toString();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code employee} that are not in the list."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code employee} such that every tag in this employee points to a Tag"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     *  object in the master list."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private Employee syncWithMasterTagList(Employee employee) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        final UniqueTagList employeeTags \u003d new UniqueTagList(employee.getTags());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        tags.mergeFrom(employeeTags);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        // used for checking employee tag references"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        // Rebuild the list of employee tags to point to the relevant tags in the master tag list."},{"lineNumber":202,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        employeeTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        return new Employee("},{"lineNumber":205,"author":{"gitID":"-"},"content":"                employee.getName(),"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                employee.getPhone(),"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                employee.getEmail(),"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                employee.getAddress(),"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                employee.getSalary(),"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                employee.getPassword(),"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                correctTagReferences"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code PartTimeManager}."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @throws EmployeeNotFoundException if the {@code key} is not in this {@code PartTimeManager}."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public boolean removeEmployee(Employee key) throws EmployeeNotFoundException {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        if (employees.remove(key)) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            removeUnusedTag();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            throw new EmployeeNotFoundException();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"shanwpf"},"content":"    //@@author shanwpf"},{"lineNumber":229,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"shanwpf"},"content":"     * Removes {@code key} from this {@code PartTimeManager}."},{"lineNumber":231,"author":{"gitID":"shanwpf"},"content":"     * @throws ShiftNotFoundException if the {@code key} is not in this {@code PartTimeManager}"},{"lineNumber":232,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"shanwpf"},"content":"    public boolean removeShift(Shift key) throws ShiftNotFoundException {"},{"lineNumber":234,"author":{"gitID":"shanwpf"},"content":"        return shifts.remove(key);"},{"lineNumber":235,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":237,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"shanwpf"},"content":"     * Adds a shift to PTMan."},{"lineNumber":239,"author":{"gitID":"shanwpf"},"content":"     * @throws DuplicateShiftException if a equivalent shift already exists."},{"lineNumber":240,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"shanwpf"},"content":"    public void addShift(Shift p) throws DuplicateShiftException {"},{"lineNumber":242,"author":{"gitID":"shanwpf"},"content":"        shifts.add(p);"},{"lineNumber":243,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":245,"author":{"gitID":"shanwpf"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"shanwpf"},"content":"     * Replaces the given shift {@code target} in the list with {@code editedShift}."},{"lineNumber":247,"author":{"gitID":"shanwpf"},"content":"     *"},{"lineNumber":248,"author":{"gitID":"shanwpf"},"content":"     * @throws DuplicateShiftException if updating the shift\u0027s details causes the shift to be equivalent to"},{"lineNumber":249,"author":{"gitID":"shanwpf"},"content":"     *      another existing shift in the list."},{"lineNumber":250,"author":{"gitID":"shanwpf"},"content":"     * @throws ShiftNotFoundException if {@code target} could not be found in the list."},{"lineNumber":251,"author":{"gitID":"shanwpf"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"shanwpf"},"content":"    public void updateShift(Shift target, Shift editedShift) throws ShiftNotFoundException, DuplicateShiftException {"},{"lineNumber":253,"author":{"gitID":"shanwpf"},"content":"        shifts.setShift(target, editedShift);"},{"lineNumber":254,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"shanwpf"},"content":"    //@@author"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Remove tag from Employee if the tag exist in Employee."},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * @param tag"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * @param employee"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    private void removeTagFromEmployee(Tag tag, Employee employee) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(employee.getTags());"},{"lineNumber":272,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":273,"author":{"gitID":"koo1993"},"content":"        if (!newTags.contains(tag)) {"},{"lineNumber":274,"author":{"gitID":"koo1993"},"content":"            return;"},{"lineNumber":275,"author":{"gitID":"koo1993"},"content":"        } else {"},{"lineNumber":276,"author":{"gitID":"koo1993"},"content":"            newTags.remove(tag);"},{"lineNumber":277,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"        Employee newEmployee \u003d new Employee(employee.getName(), employee.getPhone(), employee.getEmail(),"},{"lineNumber":280,"author":{"gitID":"-"},"content":"                employee.getAddress(), employee.getSalary(), employee.getPassword(), newTags);"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            updateEmployee(employee, newEmployee);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException dpe) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"updating employee should not result in duplicated employee\");"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"updating employee should always be able to find the employee you are editing\");"},{"lineNumber":288,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":290,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":292,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"koo1993"},"content":"     * remove tag that is unused in addressbook"},{"lineNumber":294,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"koo1993"},"content":"    private void removeUnusedTag() {"},{"lineNumber":296,"author":{"gitID":"koo1993"},"content":"        HashSet newSet \u003d new HashSet();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        for (Employee employee:employees) {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            for (Tag tag: employee.getTags()) {"},{"lineNumber":299,"author":{"gitID":"koo1993"},"content":"                if (!newSet.contains(tag)) {"},{"lineNumber":300,"author":{"gitID":"koo1993"},"content":"                    newSet.add(tag);"},{"lineNumber":301,"author":{"gitID":"koo1993"},"content":"                }"},{"lineNumber":302,"author":{"gitID":"koo1993"},"content":"            }"},{"lineNumber":303,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"koo1993"},"content":"        tags.setTags(newSet);"},{"lineNumber":305,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"koo1993"},"content":"     * Remove tags from everyone in the address book"},{"lineNumber":308,"author":{"gitID":"koo1993"},"content":"     * @param tag"},{"lineNumber":309,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    public void removeTagFromAllEmployees(Tag tag) {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        for (Employee employee: employees) {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"            removeTagFromEmployee(tag, employee);"},{"lineNumber":313,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"koo1993"},"content":"        removeUnusedTag();"},{"lineNumber":315,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        return employees.asObservableList().size() + \" employees, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":320,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    public ObservableList\u003cEmployee\u003e getEmployeeList() {"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        return employees.asObservableList();"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"shanwpf"},"content":"    //@@author shanwpf"},{"lineNumber":329,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":330,"author":{"gitID":"shanwpf"},"content":"    public ObservableList\u003cShift\u003e getShiftList() {"},{"lineNumber":331,"author":{"gitID":"shanwpf"},"content":"        return shifts.asObservableList();"},{"lineNumber":332,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"shanwpf"},"content":"    //@@author"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":341,"author":{"gitID":"-"},"content":"    public OutletInformation getOutletInformation() {"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        return outlet;"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":346,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":348,"author":{"gitID":"-"},"content":"                || (other instanceof PartTimeManager // instanceof handles nulls"},{"lineNumber":349,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.employees.equals(((PartTimeManager) other).employees)"},{"lineNumber":350,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((PartTimeManager) other).tags))"},{"lineNumber":351,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.outlet.equals(((PartTimeManager) other).outlet)"},{"lineNumber":352,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.shifts.equals(((PartTimeManager) other).shifts);"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":356,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        return Objects.hash(employees, tags);"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shanwpf":39,"koo1993":31,"-":291}},{"path":"src/main/java/seedu/ptman/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.util.DateUtil.getWeekFromDate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.ComponentManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.model.OutletDataChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.model.PartTimeManagerChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.DuplicateShiftException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.NoOutletInformationFieldChangeException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.ShiftNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.ptman.model.shift.Shift;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":32,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final PartTimeManager partTimeManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cEmployee\u003e filteredEmployees;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cShift\u003e filteredShifts;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private HashMap\u003cEmployee, Password\u003e tempPasswordMap;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private HashMap\u003cOutletInformation, Password\u003e tempMasterPasswordMap;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given partTimeManager and userPrefs."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyPartTimeManager partTimeManager, UserPrefs userPrefs,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                        OutletInformation outletInformation) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireAllNonNull(partTimeManager, userPrefs, outletInformation);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + partTimeManager + \" and user prefs \" + userPrefs);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.partTimeManager \u003d new PartTimeManager(partTimeManager);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            this.partTimeManager.updateOutlet(outletInformation);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (NoOutletInformationFieldChangeException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            logger.warning(\"Outlet data should not be empty.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        filteredEmployees \u003d new FilteredList\u003c\u003e(this.partTimeManager.getEmployeeList());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        filteredShifts \u003d new FilteredList\u003c\u003e(this.partTimeManager.getShiftList());"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Only display shifts in the current week"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        updateFilteredShiftList(shift -\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                getWeekFromDate(shift.getDate().getLocalDate()) \u003d\u003d getWeekFromDate(LocalDate.now()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        tempPasswordMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        tempMasterPasswordMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this(new PartTimeManager(), new UserPrefs(), new OutletInformation());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyPartTimeManager newData) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        partTimeManager.resetData(newData);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        indicatePartTimeManagerChanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public ReadOnlyPartTimeManager getPartTimeManager() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return partTimeManager;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void indicatePartTimeManagerChanged() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        raise(new PartTimeManagerChangedEvent(partTimeManager));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        raise(new OutletDataChangedEvent(partTimeManager.getOutletInformation()));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public synchronized void deleteEmployee(Employee target) throws EmployeeNotFoundException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        partTimeManager.removeEmployee(target);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        indicatePartTimeManagerChanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public synchronized void addEmployee(Employee employee) throws DuplicateEmployeeException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        partTimeManager.addEmployee(employee);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        indicatePartTimeManagerChanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public boolean isAdminMode() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return partTimeManager.isAdminMode();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public synchronized boolean setTrueAdminMode(Password password) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        requireNonNull(password);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!partTimeManager.isAdminPassword(password)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        partTimeManager.setAdminMode(partTimeManager.isAdminPassword(password));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public synchronized void setFalseAdminMode() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        partTimeManager.setAdminMode(false);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public boolean isAdminPassword(Password password) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return partTimeManager.isAdminPassword(password);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void setAdminPassword(Password password) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        partTimeManager.setAdminPassword(password);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void storeResetPassword(Employee employee, Password tempPassword) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        tempPasswordMap.put(employee, tempPassword);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void storeResetPassword(OutletInformation outlet, Password tempPassword) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        tempMasterPasswordMap.put(outlet, tempPassword);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public boolean isCorrectTempPwd(Employee employee, Password tempPassword) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (!tempPasswordMap.containsKey(employee)) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return tempPasswordMap.get(employee).equals(tempPassword);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public boolean isCorrectTempPwd(OutletInformation outlet, Password tempPassword) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (!tempMasterPasswordMap.containsKey(outlet)) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            return tempMasterPasswordMap.get(outlet).equals(tempPassword);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"shanwpf"},"content":"    //@@author shanwpf"},{"lineNumber":163,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"shanwpf"},"content":"    public void addShift(Shift shift) throws DuplicateShiftException {"},{"lineNumber":165,"author":{"gitID":"shanwpf"},"content":"        partTimeManager.addShift(shift);"},{"lineNumber":166,"author":{"gitID":"shanwpf"},"content":"        indicatePartTimeManagerChanged();"},{"lineNumber":167,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":169,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"shanwpf"},"content":"    public ObservableList\u003cShift\u003e getFilteredShiftList() {"},{"lineNumber":171,"author":{"gitID":"shanwpf"},"content":"        SortedList\u003cShift\u003e sortedShiftList \u003d new SortedList\u003c\u003e(filteredShifts, Shift::compareTo);"},{"lineNumber":172,"author":{"gitID":"shanwpf"},"content":"        return FXCollections.unmodifiableObservableList(sortedShiftList);"},{"lineNumber":173,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":175,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"shanwpf"},"content":"    public void deleteShift(Shift target) throws ShiftNotFoundException {"},{"lineNumber":177,"author":{"gitID":"shanwpf"},"content":"        partTimeManager.removeShift(target);"},{"lineNumber":178,"author":{"gitID":"shanwpf"},"content":"        indicatePartTimeManagerChanged();"},{"lineNumber":179,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":181,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"shanwpf"},"content":"    public void updateShift(Shift target, Shift editedShift) throws ShiftNotFoundException, DuplicateShiftException {"},{"lineNumber":183,"author":{"gitID":"shanwpf"},"content":"        partTimeManager.updateShift(target, editedShift);"},{"lineNumber":184,"author":{"gitID":"shanwpf"},"content":"        indicatePartTimeManagerChanged();"},{"lineNumber":185,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"shanwpf"},"content":""},{"lineNumber":187,"author":{"gitID":"shanwpf"},"content":"    @Override"},{"lineNumber":188,"author":{"gitID":"shanwpf"},"content":"    public void updateFilteredShiftList(Predicate\u003cShift\u003e predicate) {"},{"lineNumber":189,"author":{"gitID":"shanwpf"},"content":"        requireNonNull(predicate);"},{"lineNumber":190,"author":{"gitID":"shanwpf"},"content":"        filteredShifts.setPredicate(predicate);"},{"lineNumber":191,"author":{"gitID":"shanwpf"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"shanwpf"},"content":"    //@@author"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void updateEmployee(Employee target, Employee editedEmployee)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            throws DuplicateEmployeeException, EmployeeNotFoundException {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedEmployee);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        partTimeManager.updateEmployee(target, editedEmployee);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        indicatePartTimeManagerChanged();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void updateOutlet(OutletInformation editedOutlet) throws NoOutletInformationFieldChangeException {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        partTimeManager.updateOutlet(editedOutlet);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        indicatePartTimeManagerChanged();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public String getOutletInformationMessage() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        return partTimeManager.getOutletInformationMessage();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Employee List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void deleteTagFromAllEmployee(Tag tag) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        partTimeManager.removeTagFromAllEmployees(tag);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Employee} backed by the internal list of"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * {@code partTimeManager}"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredEmployees);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        filteredEmployees.setPredicate(predicate);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public OutletInformation getOutletInformation() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        return partTimeManager.getOutletInformation();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        return partTimeManager.equals(other.partTimeManager)"},{"lineNumber":255,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredEmployees.equals(other.filteredEmployees)"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredShifts.equals(other.filteredShifts);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shanwpf":31,"-":228}},{"path":"src/main/java/seedu/ptman/model/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"koo1993"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":5,"author":{"gitID":"koo1993"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":6,"author":{"gitID":"koo1993"},"content":"import java.security.MessageDigest;"},{"lineNumber":7,"author":{"gitID":"koo1993"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":8,"author":{"gitID":"koo1993"},"content":"import java.util.Base64;"},{"lineNumber":9,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.apache.commons.lang.RandomStringUtils;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.sun.media.jfxmedia.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"koo1993"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"koo1993"},"content":" * Represents a Password in PartTimeManger"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Store password as hashCode"},{"lineNumber":18,"author":{"gitID":"koo1993"},"content":" */"},{"lineNumber":19,"author":{"gitID":"koo1993"},"content":"public class Password {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"koo1993"},"content":"    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"},{"lineNumber":22,"author":{"gitID":"koo1993"},"content":"            \"Password should be at least 8 character and no spaces.\";"},{"lineNumber":23,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":24,"author":{"gitID":"koo1993"},"content":"    public static final String DEFAULT_PASSWORD \u003d"},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":"            \"DEFAULT1\";"},{"lineNumber":26,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":27,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"koo1993"},"content":"     * accept all password that do not have whitespaces and at least 8 characters."},{"lineNumber":29,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"koo1993"},"content":"    public static final String PASSWORD_VALIDATION_REGEX \u003d \"^(?\u003d\\\\S+$).{8,}$\";"},{"lineNumber":31,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":32,"author":{"gitID":"koo1993"},"content":"    private String passwordHash;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final String initialValue \u003d \"IV\";"},{"lineNumber":34,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":35,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"koo1993"},"content":"     * constructor for default password"},{"lineNumber":37,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"koo1993"},"content":"    public Password() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        createPassword(DEFAULT_PASSWORD);"},{"lineNumber":40,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":42,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * use this if hashcode is known"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @param hashCode"},{"lineNumber":45,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Password(String hashCode) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(hashCode);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        passwordHash \u003d hashCode;"},{"lineNumber":49,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Password(Password masterPassword) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(masterPassword);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.passwordHash \u003d masterPassword.getPasswordHash();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":57,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"koo1993"},"content":"     * @param test"},{"lineNumber":59,"author":{"gitID":"koo1993"},"content":"     * @return true if password is of correct format"},{"lineNumber":60,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"koo1993"},"content":"    public static boolean isValidPassword(String test) {"},{"lineNumber":62,"author":{"gitID":"koo1993"},"content":"        return test.matches(PASSWORD_VALIDATION_REGEX);"},{"lineNumber":63,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":65,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"koo1993"},"content":"     * check if passwordHash generated from the string is same as current passwordHash"},{"lineNumber":67,"author":{"gitID":"koo1993"},"content":"     * @param password"},{"lineNumber":68,"author":{"gitID":"koo1993"},"content":"     * @return true if same"},{"lineNumber":69,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"koo1993"},"content":"    public boolean isCorrectPassword(String password) {"},{"lineNumber":71,"author":{"gitID":"koo1993"},"content":"        return passwordHash.equals(generatePasswordHash(password));"},{"lineNumber":72,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":74,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"koo1993"},"content":"     * Change password given a password"},{"lineNumber":76,"author":{"gitID":"koo1993"},"content":"     * @return true if password is changed"},{"lineNumber":77,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"koo1993"},"content":"    public boolean checkAndChangePassword(String oldPassword, String newPassword) {"},{"lineNumber":79,"author":{"gitID":"koo1993"},"content":"        if (isCorrectPassword(oldPassword)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            createPassword(newPassword);"},{"lineNumber":81,"author":{"gitID":"koo1993"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"koo1993"},"content":"        return false;"},{"lineNumber":84,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Create passwordHash when password is entered in plain text"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @param password"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void createPassword(String password) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(password);"},{"lineNumber":92,"author":{"gitID":"koo1993"},"content":"        passwordHash \u003d generatePasswordHash(password);"},{"lineNumber":93,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public String getPasswordHash() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return passwordHash;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"koo1993"},"content":"     * Generate passwordHash given a string password"},{"lineNumber":101,"author":{"gitID":"koo1993"},"content":"     * @param password"},{"lineNumber":102,"author":{"gitID":"koo1993"},"content":"     * @return passwordHash in String"},{"lineNumber":103,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private String generatePasswordHash(String password) {"},{"lineNumber":105,"author":{"gitID":"koo1993"},"content":"        String encodedHash \u003d null;"},{"lineNumber":106,"author":{"gitID":"koo1993"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"koo1993"},"content":"            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            digest.update(initialValue.getBytes());"},{"lineNumber":109,"author":{"gitID":"koo1993"},"content":"            byte[] byteHash \u003d digest.digest(password.getBytes(StandardCharsets.UTF_8));"},{"lineNumber":110,"author":{"gitID":"koo1993"},"content":"            encodedHash \u003d Base64.getEncoder().encodeToString(byteHash);"},{"lineNumber":111,"author":{"gitID":"koo1993"},"content":"        } catch (NoSuchAlgorithmException noSuchAlgoException) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            Logger.logMsg(Logger.ERROR, \"cannot generate hash: MessageDigest.getInstance\");"},{"lineNumber":113,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"koo1993"},"content":"        return encodedHash;"},{"lineNumber":115,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @return random 8 character password."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static String generateRandomPassword() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String charactersAllowed \u003d \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String randomPwd \u003d RandomStringUtils.random(8, charactersAllowed);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return randomPwd;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"koo1993"},"content":"                || (other instanceof Password // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"koo1993"},"content":"                \u0026\u0026 this.passwordHash.equals(((Password) other).passwordHash)); // state check"},{"lineNumber":133,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":135,"author":{"gitID":"koo1993"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"koo1993"},"content":"    public int hashCode() {"},{"lineNumber":137,"author":{"gitID":"koo1993"},"content":"        return passwordHash.hashCode();"},{"lineNumber":138,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"koo1993"},"content":"}"}],"authorContributionMap":{"koo1993":90,"-":49}}]
