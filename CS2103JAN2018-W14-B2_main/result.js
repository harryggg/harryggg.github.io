var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d PTMan - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toclevels: 3"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B2/main"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"By: `W14-B2`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"Part-time Manager (PTMan) is an application made for companies to manage their part timers and their respective working schedules. +"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":" +"},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"PTMan comes with many useful features for employers to easily schedule their part times\u0027 working time slots. PTMan also allow the part timers to have more flexibility in choosing their own working schedules. +"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":" +"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"This user guide comes with comprehensive instructions and examples to help you get started using PTMan. +"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":" +"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"Sounds great? Jump straight to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d About"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"This user guide shows you how to get started using PTman. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":" +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"This user guide introduces you to the features PTMan have and leads you through with examples. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":" +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"You are required to know how to use Java to run a Graphical User Interface (GUI) application. +"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"Here are the steps required to get PTMan up and running on your computer:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your computer."},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":43,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":45,"author":{"gitID":"-"},"content":"+"},{"lineNumber":46,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":47,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for PTMan."},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":".  Double-click the file to start the app. The graphical user interface (GUI) should appear in a few seconds."},{"lineNumber":49,"author":{"gitID":"-"},"content":"+"},{"lineNumber":50,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"_Figure 1._ Successful start up window +"},{"lineNumber":52,"author":{"gitID":"-"},"content":" +"},{"lineNumber":53,"author":{"gitID":"-"},"content":".  Type a command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":55,"author":{"gitID":"-"},"content":"*  Some example commands you can try:"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"** *`list`* : Lists all contacts."},{"lineNumber":58,"author":{"gitID":"-"},"content":"** **`add`** `n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/0` : Adds an employee named `John Doe` to PTMan."},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"** **`delete`** `3` `pw/ADMIN_PASSWORD` : Deletes the 3rd contact shown in the current list."},{"lineNumber":60,"author":{"gitID":"-"},"content":"** *`exit`* : Exits the app."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"*  Refer to \u003c\u003cFeatures\u003e\u003e for more details of each command."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"In this section, we will be introducing you to the various features of PTMan, and their respective  commands."},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"Our features would be split into 3 sub-sections, \u003c\u003cShared Features\u003e\u003e, \u003c\u003cEmployer Features\u003e\u003e, and \u003c\u003cEmployee Features\u003e\u003e. +"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"Take note that for this user guide, our commands will follow the format as stated in Command Format below."},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":72,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"e.g. In `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"* Items in square brackets are optional. +"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"* Items with `…`​ after them can be used multiple times, or none at all. +"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":"e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"* Parameters can be in any order. +"},{"lineNumber":81,"author":{"gitID":"hzxcaryn"},"content":"e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":"* For your convenience, many commands have an alias. +"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":"eg. `list` and `l` will both show a list of all employees in PTMan."},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Shared Features"},{"lineNumber":87,"author":{"gitID":"-"},"content":"These commands can be executed by both employees and employers."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing help: `help`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"Displays the help window. +"},{"lineNumber":92,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `help`"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating an employee by name: `find`"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"Finds employees whose names contain any of the given keywords. +"},{"lineNumber":97,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":98,"author":{"gitID":"hzxcaryn"},"content":"*Shorthand:* `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"****"},{"lineNumber":101,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":102,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":103,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":104,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":105,"author":{"gitID":"-"},"content":"* Employees matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":106,"author":{"gitID":"-"},"content":"****"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":111,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":113,"author":{"gitID":"-"},"content":"Returns any employee having names `Betsy`, `Tim`, or `John`."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all employees : `list`"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Shows a list of all employees in PTMan. +"},{"lineNumber":118,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `list` +"},{"lineNumber":119,"author":{"gitID":"hzxcaryn"},"content":"*Shorthand:* `l`"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing entered commands: `history`"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":124,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `history` +"},{"lineNumber":125,"author":{"gitID":"hzxcaryn"},"content":"*Shorthand:* `h`"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":128,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":130,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exiting the program: `exit`"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"Exits the app. +"},{"lineNumber":135,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `exit`"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Employer Features"},{"lineNumber":138,"author":{"gitID":"-"},"content":"These commands are privileged, and can only be executed by the employer. These commands requires logging in to admin mode."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding an employee: `login`"},{"lineNumber":141,"author":{"gitID":"-"},"content":"This command allow employer to be in admin mode to use all the employer features"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"*format:* `login pw/AdminPassword`"},{"lineNumber":144,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":145,"author":{"gitID":"hzxcaryn"},"content":"[CAUTION]"},{"lineNumber":146,"author":{"gitID":"-"},"content":"Remeber to log out after editing the data."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding an employee: `logout`"},{"lineNumber":149,"author":{"gitID":"-"},"content":"This command log out from admin mode."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"*format:* `logout`"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding an employee: `add`"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"Adds an employee to PTMan. +"},{"lineNumber":156,"author":{"gitID":"-"},"content":"*Format:* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SALARY [t/TAG]...` +"},{"lineNumber":157,"author":{"gitID":"-"},"content":"*Shorthand:* `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SALARY [t/TAG]...`"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":160,"author":{"gitID":"-"},"content":"An employee can have any number of tags (including 0)"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/0 pw/DEFAULT1`  +"},{"lineNumber":165,"author":{"gitID":"koo1993"},"content":"Adds an employee named `John Doe` with phone number `98765432`, address `John street, block 123, #01-01`, and salary earned so far $`0`."},{"lineNumber":166,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe e/betsycrowe@example.com a/Newgate Prison p/1234567 s/100  pw/DEFAULT1`  +"},{"lineNumber":167,"author":{"gitID":"koo1993"},"content":"Adds an employee named `Betsy Crowe` with email `betsycrowe@example.com`, address `Newgate Prison`, phone number `1234567`, and salary earned so far $`100`."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing an employee: `edit`"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"Edits an existing employee in PTMan. +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"*Format:* `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SALARY] [t/TAG]...` +"},{"lineNumber":174,"author":{"gitID":"-"},"content":"*Shorthand:* `e INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SALARY] [t/TAG]...`"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":177,"author":{"gitID":"-"},"content":"An employer password can\u0027t be edited. [refer to `rp` (reset password)]"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"****"},{"lineNumber":180,"author":{"gitID":"-"},"content":"* Edits the employee at the specified `INDEX`. The index refers to the index number shown in the last employee listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":182,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":183,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the employee will be removed i.e adding of tags is not cumulative."},{"lineNumber":184,"author":{"gitID":"-"},"content":"* You can remove all the employee\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":185,"author":{"gitID":"-"},"content":"****"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":190,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st employee to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":191,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"Edits the name of the 2nd employee to be `Betsy Crower` and clears all existing tags."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting an employee : `delete`"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"Deletes the specified employee from PTMan. +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"*Format:* `delete INDEX` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"*Shorthand:* `d INDEX`"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"****"},{"lineNumber":203,"author":{"gitID":"-"},"content":"* The employee will be deleted at the specified INDEX."},{"lineNumber":204,"author":{"gitID":"-"},"content":"* The INDEX refers to the index number shown in the most recent listing."},{"lineNumber":205,"author":{"gitID":"-"},"content":"* The INDEX *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":206,"author":{"gitID":"-"},"content":"****"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"Deletes the 2nd employee in PTMan."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":214,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"Deletes the 1st employee in the results of the `find` command."},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Resetting Password for an employee : `rp`"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"Reset the password for employee from PTMan. +"},{"lineNumber":220,"author":{"gitID":"-"},"content":"*Format:* `rp INDEX` +"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"****"},{"lineNumber":223,"author":{"gitID":"-"},"content":"* The password will reset for employee at the specified INDEX."},{"lineNumber":224,"author":{"gitID":"-"},"content":"* The INDEX refers to the index number shown in the most recent listing."},{"lineNumber":225,"author":{"gitID":"-"},"content":"* The INDEX *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":226,"author":{"gitID":"-"},"content":"****"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"`rp 2` +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"Reset password for the 2nd employee in PTMan."},{"lineNumber":233,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"`rp 1` +"},{"lineNumber":235,"author":{"gitID":"-"},"content":"Reset password for the 1st employee in the results of the `find` command."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":238,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"Restores PTMan to the state before the previous _undoable_ command was executed. +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"*Format:* `undo` +"},{"lineNumber":242,"author":{"gitID":"-"},"content":"*Shorthand:* `u`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":246,"author":{"gitID":"-"},"content":"Undoable commands: Commands that modify PTMan\u0027s data (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"* `delete 1 +"},{"lineNumber":252,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"hzxcaryn"},"content":"* `list` +"},{"lineNumber":256,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":261,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":262,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command: `redo`"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"*Format:* `redo` +"},{"lineNumber":268,"author":{"gitID":"-"},"content":"*Shorthand:* `r`"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":273,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":274,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":277,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":278,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"hzxcaryn"},"content":"* `delete 1 pw/ADMIN_PASSWORD` +"},{"lineNumber":281,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":282,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":283,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":285,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"Clears all employees from PTMan. +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"*Format:* `clear` +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"*Shorthand:* `c`"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d View all details of employee: `viewall`"},{"lineNumber":295,"author":{"gitID":"-"},"content":"PTMan do not only allow user to view who is working in the outlet, details of address and phone numbers are not shown hence this command allows employer to view all the details for all the employee. +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"*Format:* `viewall`"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Edit outlet information: `editoutlet` [coming in v1.3]"},{"lineNumber":299,"author":{"gitID":"-"},"content":"PTman outlet information can be modified anytime by the admin. +"},{"lineNumber":300,"author":{"gitID":"-"},"content":"*Format:* `editoutlet n/NAME h/OPERATING_HOURS` +"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":303,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":304,"author":{"gitID":"-"},"content":"`OperatingHours` in HHMM-HHMM format. +"},{"lineNumber":305,"author":{"gitID":"-"},"content":"For example, `h/0900-2200` +"},{"lineNumber":306,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Change admin password: `cap` [coming in v1.3]"},{"lineNumber":309,"author":{"gitID":"hzxcaryn"},"content":"PTman should be able to allow employers to change admin password. +"},{"lineNumber":310,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `cap old/CURRENT_ADMIN_PASSWORD new/NEW_ADMIN_PASSWORD` +"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Add shift to outlet: `addshift` [coming in v1.4]"},{"lineNumber":313,"author":{"gitID":"-"},"content":"PTman outlets should be able to add a shift to the timetable indicating with how many people the shift needs. +"},{"lineNumber":314,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `addshift d/DATE ts/START_TIME te/END_TIME c/CAPACITY_OF_SHIFT` +"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":317,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":318,"author":{"gitID":"-"},"content":"`date` in DDMMYY format. +"},{"lineNumber":319,"author":{"gitID":"-"},"content":"`starttime` `endtime` in HHMM format"},{"lineNumber":320,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Add employee to shift: `addto` [coming in v1.4]"},{"lineNumber":323,"author":{"gitID":"-"},"content":"PTman outlets should be able to add an employee to a shift in the timetable. +"},{"lineNumber":324,"author":{"gitID":"-"},"content":"*Format:* `addto d/DATE ts/START_TIME te/END_TIME c/EMPLOYEE_NAME +"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Delete employee from shift: `delfrom` [coming in v1.4]"},{"lineNumber":327,"author":{"gitID":"-"},"content":"PTman outlets should be able to delete an employee from a shift in the timetable. +"},{"lineNumber":328,"author":{"gitID":"-"},"content":"*Format:* `delfrom d/DATE ts/START_TIME te/END_TIME c/EMPLOYEE_NAME` +"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Reset to default shift: `resetshift` [coming in v1.4]"},{"lineNumber":331,"author":{"gitID":"-"},"content":"PTman outlets should be able to reset a shift from the timetable to its default value. +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"*Format:* `resetshift d/DATE ts/START_TIME te/END_TIME` +"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d Employee Features"},{"lineNumber":336,"author":{"gitID":"hzxcaryn"},"content":"These commands can only be executed by employees and require the employee\u0027s password."},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Choose shift: `take`"},{"lineNumber":339,"author":{"gitID":"hzxcaryn"},"content":"Employee are able to choose the time slot they want from the timetable. +"},{"lineNumber":340,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `take n/NAME pw/PASSWORD i/SLOT_INDEX... `"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"hzxcaryn"},"content":"Examples:"},{"lineNumber":343,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":344,"author":{"gitID":"hzxcaryn"},"content":"* `take n/John Doe pw/PASSWORD i/1 i/3 i/6`"},{"lineNumber":345,"author":{"gitID":"hzxcaryn"},"content":"* `take n/Jane pw/PASSWORD i/5`"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d\u003d\u003d Change password: `cp`"},{"lineNumber":348,"author":{"gitID":"hzxcaryn"},"content":"Each employee is given a default password when their entry is created by their employer."},{"lineNumber":349,"author":{"gitID":"hzxcaryn"},"content":"They are required to change their password the moment their account is created. +"},{"lineNumber":350,"author":{"gitID":"hzxcaryn"},"content":"*Format:* `cp n/NAME` `pw/CURRENT_PASSWORD pw/NEW_PASSWORD`"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":353,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":354,"author":{"gitID":"hzxcaryn"},"content":"Employee should change their password the moment they are in PTMan."},{"lineNumber":355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"PTMan\u0027s data is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":360,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":366,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another computer? +"},{"lineNumber":373,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous PTMan folder."},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SALARY pw/AdminPassword [t/TAG]...` +"},{"lineNumber":378,"author":{"gitID":"koo1993"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 s/0 t/friend t/colleague`"},{"lineNumber":379,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":380,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":381,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":382,"author":{"gitID":"koo1993"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/SALARY] [t/TAG]...` +"},{"lineNumber":383,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":384,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":385,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":386,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":387,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":388,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":390,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":391,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":392,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"koo1993":4,"hzxcaryn":61,"-":327}},{"path":"docs/team/hzxcaryn.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hzxcaryn"},"content":"\u003d Caryn Heng - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d PROJECT: Part-time Manager (PTMan)"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"PTMan is a desktop human resource application used for managing part-timer employees. +"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"PTMan aims to give part-time employees the freedom of choosing when they want to work by registering for the available time slots set by the employer. +"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":18,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":21,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":42,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"}],"authorContributionMap":{"hzxcaryn":2,"-":64}},{"path":"docs/team/SunBangJie.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hzxcaryn"},"content":"\u003d Sun Bang Jie - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d PROJECT: Part-time Manager (PTMan)"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"PTMan is a desktop human resource application used for managing part-timer employees. +"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"PTMan aims to give part-time employees the freedom of choosing when they want to work by registering for the available time slots set by the employer. +"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":18,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":21,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":42,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"}],"authorContributionMap":{"hzxcaryn":2,"-":64}},{"path":"docs/team/koo1993.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hzxcaryn"},"content":"\u003d Koo Chin Chye - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"hzxcaryn"},"content":"\u003d\u003d PROJECT: Part-time Manager (PTMan)"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"PTMan is a desktop human resource application used for managing part-timer employees. +"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"PTMan aims to give part-time employees the freedom of choosing when they want to work by registering for the available time slots set by the employer. +"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":18,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":21,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":42,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"}],"authorContributionMap":{"hzxcaryn":2,"-":64}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"koo1993"},"content":"PTMan was developed by the CS2103T AY17/18 W14-B2 Team."},{"lineNumber":7,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Shannon Wong"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::shanwpf.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"{empty}[https://github.com/shanwpf[github]] [\u003c\u003cshannonwong#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"Role: Developer + Team Lead +"},{"lineNumber":17,"author":{"gitID":"koo1993"},"content":"Responsibilities: Storage + Deliverables and Deadlines + Documentation"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"koo1993"},"content":"\u003d\u003d\u003d Koo Chin Chye"},{"lineNumber":22,"author":{"gitID":"koo1993"},"content":"image::koo1993.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"koo1993"},"content":"{empty}[http://github.com/koo1993[github]] [\u003c\u003ckoo1993#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":"Role: Developer +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Responsibilities: Logic + Documentation + Integration"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"koo1993"},"content":"* Features Implemented : +"},{"lineNumber":29,"author":{"gitID":"koo1993"},"content":"** https://github.com/CS2103JAN2018-W14-B2/main/pull/32[Create Additional Salary Parameter]"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":33,"author":{"gitID":"koo1993"},"content":"* Other Contributions : +"},{"lineNumber":34,"author":{"gitID":"koo1993"},"content":"** https://github.com/CS2103JAN2018-W14-B2/main/pull/20[Password Class]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"koo1993"},"content":"\u003d\u003d\u003d Caryn Heng"},{"lineNumber":39,"author":{"gitID":"koo1993"},"content":"image::hzxcaryn.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"koo1993"},"content":"{empty}[http://github.com/hzxcaryn[github]] [\u003c\u003chzxcaryn#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"koo1993"},"content":"Responsibilities: UI + Testing + Documentation"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sun Bangjie"},{"lineNumber":48,"author":{"gitID":"-"},"content":"image::SunBangjie.JPG[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":49,"author":{"gitID":"koo1993"},"content":"{empty}[http://github.com/SunBangjie[github]] [\u003c\u003cSunBangjie#, portfolio\u003e\u003e]"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":52,"author":{"gitID":"koo1993"},"content":"Responsibilities: Integration + Model component + Documentation"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":55,"author":{"gitID":"koo1993"},"content":""}],"authorContributionMap":{"koo1993":19,"-":36}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DEFAULT_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty ptman book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: undo clearing ptman book -\u003e original ptman book restored */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: redo clearing ptman book -\u003e cleared */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* Case: selects first card in employee list and clears ptman book -\u003e cleared and no card selected */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ptman book"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        selectEmployee(Index.fromOneBased(1));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: filters the employee list before clearing -\u003e entire ptman book cleared */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ptman book"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: clear empty ptman book -\u003e cleared */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":109,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":111}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DEFAULT_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.DeleteCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TestUtil.getEmployee;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TestUtil.getLastIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TestUtil.getMidIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: delete the first employee in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String command \u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_EMPLOYEE.getOneBased();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Employee deletedEmployee \u003d removeEmployee(expectedModel, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: delete the last employee in the list -\u003e deleted */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index lastEmployeeIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastEmployeeIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last employee in the list -\u003e last employee restored */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last employee in the list -\u003e last employee deleted again */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        removeEmployee(modelBeforeDeletingLast, lastEmployeeIndex);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: delete the middle employee in the list -\u003e deleted */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Index middleEmployeeIndex \u003d getMidIndex(getModel());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middleEmployeeIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, delete index within bounds of ptman book and employee list -\u003e deleted */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, delete index within bounds of ptman book but out of bounds of employee list"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* ------------------- Performing delete operation while a employee card is selected ---------------------- */"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: delete the selected employee -\u003e employee list panel selects the employee before the deleted employee */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        showAllEmployees();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        selectEmployee(selectedIndex);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        deletedEmployee \u003d removeEmployee(expectedModel, selectedIndex);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0 \";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1 \";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":106,"author":{"gitID":"-"},"content":"                getModel().getPartTimeManager().getEmployeeList().size() + 1);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Removes the {@code Employee} at the specified {@code index} in {@code model}\u0027s ptman book."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @return the removed employee"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private Employee removeEmployee(Model model, Index index) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Employee targetEmployee \u003d getEmployee(model, index);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            model.deleteEmployee(targetEmployee);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetEmployee is retrieved from model.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return targetEmployee;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Deletes the employee at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Employee deletedEmployee \u003d removeEmployee(expectedModel, toDelete);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                expectedModel, expectedResultMessage);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":183,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":210,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":212}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DEFAULT_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_SALARY_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_SALARY_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.CARL;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.HOON;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.IDA;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.AddCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Address;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Phone;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Salary;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeUtil;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: add a employee without tags to a non-empty ptman book, command with leading spaces and trailing spaces"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Employee toAdd \u003d AMY;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \" \" + SALARY_DESC_AMY + \"   \" + TAG_DESC_FRIEND;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD + \" \";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD + \" \";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        model.addEmployee(toAdd);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except name -\u003e added */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSalary(VALID_SALARY_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except phone -\u003e added */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSalary(VALID_SALARY_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except email -\u003e added */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSalary(VALID_SALARY_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except address -\u003e added */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withSalary(VALID_SALARY_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except salary -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSalary(VALID_SALARY_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                + SALARY_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: add to empty ptman book -\u003e added */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        deleteAllEmployees();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: add a employee with tags, command with parameters in random order -\u003e added */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + SALARY_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: add a employee, missing tags -\u003e added */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: filters the employee list before adding -\u003e added */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* ---------------------- Perform add operation while a employee card is selected ------------------------- */"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the employee list, add a employee -\u003e added, card selection remains unchanged */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        selectEmployee(Index.fromOneBased(1));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate employee -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        command \u003d EmployeeUtil.getAddCommand(HOON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate employee except with different tags -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalEmployees#ALICE"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // PartTimeManager#addEmployee(Employee)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        command \u003d EmployeeUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SALARY_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SALARY_DESC_AMY;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + SALARY_DESC_AMY;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + SALARY_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: missing salary -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + EmployeeUtil.getEmployeeDetails(toAdd);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        /* Case: invalid salary -\u003e rejected */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                + INVALID_SALARY_DESC;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Salary.MESSAGE_SALARY_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                + SALARY_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} equal to the corresponding components in"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Employee toAdd) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertCommandSuccess(EmployeeUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Employee)}. Executes {@code command}"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Employee)"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Employee toAdd) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            expectedModel.addEmployee(toAdd);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException dpe) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Employee)} except asserts that"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code EmployeeListPanel} equal to the corresponding components in"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Employee)"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":267,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":294,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":296}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.SelectCommand.MESSAGE_SELECT_EMPLOYEE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EmployeeUtil.DEFAULT_PASSWORD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.getTypicalEmployees;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.SelectCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the employee list, command with leading spaces and trailing spaces"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + \"   \";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the employee list -\u003e selected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Index employeeCount \u003d Index.fromOneBased(getTypicalEmployees().size());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + employeeCount.getOneBased();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, employeeCount);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the employee list -\u003e selected */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(employeeCount.getOneBased() / 2);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, select index within bounds of ptman book but out of bounds of employee list"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, select index within bounds of ptman book and employee list -\u003e selected */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredEmployeeList().size() + 1;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":93,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: select from empty ptman book -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        deleteAllEmployees();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased(),"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected employee.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":121,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_EMPLOYEE_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getEmployeeListPanel().getSelectedCardIndex();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":161,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":164}},{"path":"src/test/java/seedu/ptman/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_SUCCESS \u003d"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"            new NewResultAvailableEvent(\"Success\", false);"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_FAILED \u003d"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":"            new NewResultAvailableEvent(\"Failed\", true);"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"    private ArrayList\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(\"Welcome to PTMan. Type a command in the search bar above to get started. \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"                + \"If you need somewhere to start, search “help” to view the user guide.\","},{"lineNumber":46,"author":{"gitID":"-"},"content":"                resultDisplayHandle.getText());"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"        // new results received"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"        assertExpectedResultDisplay(NEW_RESULT_EVENT_SUCCESS);"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"        assertExpectedResultDisplay(NEW_RESULT_EVENT_FAILED);"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"     * Runs a new result event, then verifies that \u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"     *      - a successful event result display\u0027s style is the same as {@code defaultStyleOfResultDisplay}."},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"     *      - a failed event result display\u0027s style is the same as {@code errorStyleOfResultDisplay}."},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"    private void assertExpectedResultDisplay(NewResultAvailableEvent event) {"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"        postNow(event);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(event.message, resultDisplayHandle.getText());"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"        if (event.isError) {"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"            assertEquals(errorStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"        } else {"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"            assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":38,"-":36}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EmployeeUtil.DEFAULT_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.CARL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.DANIEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, command with leading spaces and trailing spaces"},{"lineNumber":32,"author":{"gitID":"-"},"content":"         * -\u003e 2 employees found"},{"lineNumber":33,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where employee list is displaying the employees we are finding"},{"lineNumber":42,"author":{"gitID":"-"},"content":"         * -\u003e 2 employees found"},{"lineNumber":43,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: find employee where employee list is not displaying the employee we are finding -\u003e 1 employee found */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 keywords -\u003e 2 employees found */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 keywords in reversed order -\u003e 2 employees found */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 keywords with 1 repeat -\u003e 2 employees found */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e 2 employees found"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: find same employees in ptman book after deleting 1 of them -\u003e 1 employee found */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getPartTimeManager().getEmployeeList().contains(BENSON));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: find employee in ptman book, keyword is same as name but of different case -\u003e 1 employee found */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: find employee in ptman book, keyword is substring of name -\u003e 0 employees found */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: find employee in ptman book, name is substring of keyword -\u003e 0 employees found */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: find employee not in ptman book -\u003e 0 employees found */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: find phone number of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: find ptman of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: find email of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: find tags of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: find while a employee is selected -\u003e selected card deselected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        showAllEmployees();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        selectEmployee(Index.fromOneBased(1));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertFalse(getEmployeeListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: find employee in empty ptman book -\u003e 0 employees found */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        deleteAllEmployees();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_EMPLOYEES_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":173,"author":{"gitID":"-"},"content":"                MESSAGE_EMPLOYEES_LISTED_OVERVIEW, expectedModel.getFilteredEmployeeList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":203,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":206}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.DEFAULT_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.ptman.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.LogInAdminCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Address;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Salary;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeUtil;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        executeDefaultAdminLogin();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last employee in the list -\u003e last employee restored */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last employee in the list -\u003e last employee edited again */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updateEmployee("},{"lineNumber":86,"author":{"gitID":"-"},"content":"                getModel().getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased()), editedEmployee);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: edit a employee with new values same as existing values -\u003e edited */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Employee employeeToEdit \u003d getModel().getFilteredEmployeeList().get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withTags().build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, edit index within bounds of ptman book and employee list -\u003e edited */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        employeeToEdit \u003d getModel().getFilteredEmployeeList().get(index.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, edit index within bounds of ptman book but out of bounds of employee list"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* ------------------- Performing edit operation while a employee card is selected ------------------------ */"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the employee list, edit a employee -\u003e edited,"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * card selection remains unchanged but browser url changes"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        showAllEmployees();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        selectEmployee(index);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + SALARY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new employee\u0027s name"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredEmployeeList().size() + 1;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased(),"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                        + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid salary -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                        + INVALID_SALARY_DESC, Salary.MESSAGE_SALARY_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased()"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: edit a employee with new values same as another employee\u0027s values -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        executeCommand(EmployeeUtil.getAddCommand(BOB));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getPartTimeManager().getEmployeeList().contains(BOB));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredEmployeeList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: edit a employee with new values same as another employee\u0027s values"},{"lineNumber":197,"author":{"gitID":"-"},"content":"         * but with different tags -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Employee, Index)} except that"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Employee, Index)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedEmployee, null);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the employee at index {@code toEdit} being"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedEmployee}.\u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee,"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            expectedModel.updateEmployee("},{"lineNumber":226,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredEmployeeList().get(toEdit.getZeroBased()), editedEmployee);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException | EmployeeNotFoundException e) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":230,"author":{"gitID":"-"},"content":"                    \"editedEmployee is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee), expectedSelectedCardIndex);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Perform to transform PTMan to admin mode."},{"lineNumber":276,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    private void executeDefaultAdminLogin() {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        executeCommand(LogInAdminCommand.COMMAND_WORD + \" \" + PREFIX_PASSWORD + DEFAULT_PASSWORD);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":298,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertOutletDetailsPanelUnchanged();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":300}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d PTMan - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `W14-B2`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"PTMan is a Java application that helps employers manage and schedule their part-time employees. +"},{"lineNumber":20,"author":{"gitID":"-"},"content":"It provides a graphical user interface for displaying schedules and employee information while making use of a command-line interface as the primary mode of input."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":25,"author":{"gitID":"-"},"content":"You need to make sure the following prerequisites are installed on your computer before proceeding:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"Follow these steps to set up the project in your computer:"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":45,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":46,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle."},{"lineNumber":47,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":49,"author":{"gitID":"-"},"content":". Click `Import Project`."},{"lineNumber":50,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":51,"author":{"gitID":"-"},"content":". Click `Open as Project`."},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings."},{"lineNumber":53,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":57,"author":{"gitID":"-"},"content":"You may check that you have setup the project correctly by following these steps:"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". Run the `seedu.ptman.MainApp` and try a few commands"},{"lineNumber":60,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify:"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS) . Select `Editor` \u003e `Code Style` \u003e `Java` . Click on the `Imports` tab to set the order."},{"lineNumber":69,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":70,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":90,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Here are some tips before you get started with coding:"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":97,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"The _Architecture Diagram_ given below illustrates the high-level design of the app."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":107,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":110,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Here are some quick overviews of each component:"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"** At app launch: Initializing the components in the correct sequence, and connecting them up with each other."},{"lineNumber":117,"author":{"gitID":"-"},"content":"** At shut down: Shutting down the components and invoking cleanup methods where necessary."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architectural level."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"** `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."},{"lineNumber":122,"author":{"gitID":"-"},"content":"** `LogsCenter` : Used by many classes to write log messages to the app\u0027s log file."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"The rest of the app consists of four components:"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Displays the UI of the app."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes commands."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the app in-memory."},{"lineNumber":129,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"Each of the four components:"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"* Defines their API in an `interface` with the same name as the component."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* Exposes their functionality using a `{Component Name}Manager` class."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":139,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":142,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":150,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":158,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":163,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component is responsible for displaying information to the user. +"},{"lineNumber":166,"author":{"gitID":"-"},"content":"_Figure 5_ below shows the structure of the `UI` component."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":169,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"The `UI` component:"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":180,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":187,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":188,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":194,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":197,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":198,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":199,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":204,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":210,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":217,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":218,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":219,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":222,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":225,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":232,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Shifts feature"},{"lineNumber":244,"author":{"gitID":"-"},"content":"*Reason for implementation*"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"PTMan is designed to give employees the freedom and flexibility to choose the shifts they want to work in."},{"lineNumber":247,"author":{"gitID":"-"},"content":"By allowing employers to add or delete shifts, employees can then apply for shifts that are available."},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"*How it is implemented*"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"A `Shift` object is created using its constructor:"},{"lineNumber":252,"author":{"gitID":"-"},"content":"----"},{"lineNumber":253,"author":{"gitID":"-"},"content":"Shift(Day day, Time startTime, Time endTime, Capacity capacity)"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"Explanation for arguments:"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":". `Day`: A class that wraps Java\u0027s `DayOfWeek` enum. It indicates the day that the shift is on. +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"Example: `new Day(\"monday\")` creates a `Day` object representing Monday."},{"lineNumber":260,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":261,"author":{"gitID":"-"},"content":"The string argument is not case-sensitive, but should be a valid day of week spelt in full."},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":". `Time`: A class that wraps Java\u0027s `LocalTime` class. It indicates the either the starting time or ending time of the shift. +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"Example: `new Time(\"1030\")` creates a `Time` object representing 10:30am."},{"lineNumber":265,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":266,"author":{"gitID":"-"},"content":"The string argument should represent a time in the 24-hour format."},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":". `Capacity`: A class that wraps an integer that indicates the number of employees required for the shift. +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"Example: `new Capacity(\"4\")` creates a `Capacity` object representing integer `4`."},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"In addition to these classes, `Shift` also contains a `UniqueEmployeeList` which is empty when `Shift` is constructed."},{"lineNumber":272,"author":{"gitID":"-"},"content":"This is used to store employees that have applied for this shift."},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"To store a list of shifts, we may use a `UniqueShiftList` to ensure there are no duplicate shifts."},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"The following commands directly interact with the `Shift` class:"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":". `AddShiftCommand`: Creates a `Shift` and adds it to the `UniqueShiftList` in `OutletInformation`."},{"lineNumber":279,"author":{"gitID":"-"},"content":". `DeleteShiftCommand`: Deletes a `Shift` from the `UniqueShiftList` in `OutletInformation`."},{"lineNumber":280,"author":{"gitID":"-"},"content":". `ApplyCommand`: Adds an `Employee` to the `UniqueEmployeeList` in the `Shift`."},{"lineNumber":281,"author":{"gitID":"-"},"content":". `UnapplyCommand`: Removes an `Employee` from the `UniqueEmployeeList` in the `Shift`."},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"*Reasons for how it is implemented*"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"* We wrap the arguments in the classes above so that we may carry out validity checks in those classes."},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"* `Time` uses Java\u0027s well-documented `LocalTime` class for easy integration with the GUI timetable."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"* `UniqueEmployeeList` is used to ensure there are no duplicate employees in the shift."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"// tag::timetable"},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Timetable feature"},{"lineNumber":295,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"A timetable GUI is useful for employers, as it provides visual aid for them to add and remove shifts from the application."},{"lineNumber":298,"author":{"gitID":"-"},"content":"It is also helpful for both employers and employees to find out which shifts are still available and requires workers. +"},{"lineNumber":299,"author":{"gitID":"-"},"content":"This implementation reflects the changes that resulted from the Shift commands, such as the adding and removing of shifts, as well"},{"lineNumber":300,"author":{"gitID":"-"},"content":"as the updating of slots left for each shift. +"},{"lineNumber":301,"author":{"gitID":"-"},"content":"On top of this, the selection of each employee will highlight the shifts that they have chosen to work for the week. Users are"},{"lineNumber":302,"author":{"gitID":"-"},"content":"then allowed to export the timetable as an image for future reference, without having to boot up the application, hence"},{"lineNumber":303,"author":{"gitID":"-"},"content":"bringing users convenience."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The timetable GUI is created with the help of the https://github.com/dlemmermann/CalendarFX[CalendarFX] library, and `TimetablePanel`"},{"lineNumber":308,"author":{"gitID":"-"},"content":" is the main class in charge of displaying the timetable."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"A `TimetablePanel` is created with its constructor:"},{"lineNumber":311,"author":{"gitID":"-"},"content":"----"},{"lineNumber":312,"author":{"gitID":"-"},"content":"TimetablePanel(ObservableList\u003cShift\u003e shiftObservableList)`"},{"lineNumber":313,"author":{"gitID":"-"},"content":"----"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The `TimetablePanel` is initialised in the `MainWindow` class in the following way:"},{"lineNumber":316,"author":{"gitID":"-"},"content":"----"},{"lineNumber":317,"author":{"gitID":"-"},"content":"TimetablePanel timetablePanel \u003d new TimetablePanel(logic.getFilteredShiftList());"},{"lineNumber":318,"author":{"gitID":"-"},"content":"----"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"`TimetablePanel` takes in an `ObservableList\u003cShift\u003e` object, which is an unmodifiable sorted view of the filtered shifts."},{"lineNumber":321,"author":{"gitID":"-"},"content":" `TimetablePanel` then uses these `Shift` objects to set the Entries in the timetable view, in the method `setShifts()`.+"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"The timetable GUI automatically refreshes to update the timetable view by calling the `updateTimetableView()` method whenever"},{"lineNumber":324,"author":{"gitID":"-"},"content":"there is a `PartTimeManagerChangedEvent`. This ensures the timetable is always updated when a shift is added, removed, or altered."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Select employee to view working shifts"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"`TimetablePanel` also subscribes to `EmployeePanelSelectionChangedEvent` to detect if a certain employee is selected. If so,"},{"lineNumber":329,"author":{"gitID":"-"},"content":"the timetable will reflect the employee\u0027s shifts in a different color by calling `loadEmployeeTimetable(Employee employee)`. +"},{"lineNumber":330,"author":{"gitID":"-"},"content":"More to be updated in v1.3."},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Export timetable to image"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"To be updated in v1.3."},{"lineNumber":335,"author":{"gitID":"-"},"content":"// end::timetable"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":339,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram (Figure 11) shows the inheritance diagram for commands:"},{"lineNumber":345,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":".Inheritance Diagram for commands"},{"lineNumber":348,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"As you can see from Figure 11, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implement the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":355,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":356,"author":{"gitID":"-"},"content":"----"},{"lineNumber":357,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":361,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"-"},"content":"}"},{"lineNumber":363,"author":{"gitID":"-"},"content":"----"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":366,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":367,"author":{"gitID":"-"},"content":"----"},{"lineNumber":368,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":369,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":370,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":371,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"-"},"content":"}"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":378,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":379,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":380,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":381,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"-"},"content":"}"},{"lineNumber":383,"author":{"gitID":"-"},"content":"----"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":398,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":409,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":412,"author":{"gitID":"-"},"content":"The following sequence diagram (Figure 12) shows how the undo operation works:"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":".Sequence Diagram for Undo Operation"},{"lineNumber":415,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":422,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer makes sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":443,"author":{"gitID":"-"},"content":"This section highlights the considerations behind our application\u0027s design choices."},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`."},{"lineNumber":448,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":449,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":450,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":451,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":452,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":457,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":458,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":459,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":460,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":461,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each command is correct."},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modify the address book (`add`, `clear`, `edit`)."},{"lineNumber":467,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are lost)."},{"lineNumber":468,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example),  only to realize that it does not do that, after executing `undo`."},{"lineNumber":469,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":470,"author":{"gitID":"-"},"content":"** Pros: PTMan might be more intuitive for the user."},{"lineNumber":471,"author":{"gitID":"-"},"content":"** Cons: User has no way of skipping such commands if he or she just want to reset the state of PTMan and not the view."},{"lineNumber":472,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":477,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science undergraduates, who are likely to be the new incoming developers of our project."},{"lineNumber":478,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update  both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":479,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":480,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":481,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."},{"lineNumber":482,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Outlet Feature"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":487,"author":{"gitID":"-"},"content":"PTMan is designed for outlets such as bubble tea shops and fast food resturants which require a large number of part-time workers."},{"lineNumber":488,"author":{"gitID":"-"},"content":"This outlet feature stores basic outlet information such as outlet name, operating hours, contact number, admin password and timetable for workers."},{"lineNumber":489,"author":{"gitID":"-"},"content":"Such details are essential to facilitate other functions such as the access control system and the timetable displayed in the GUI."},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Model component"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"Currently, the `OutletInformation` object initialized in the `PartTimeManager` is created by calling its default constructor:"},{"lineNumber":496,"author":{"gitID":"-"},"content":"----"},{"lineNumber":497,"author":{"gitID":"-"},"content":"OutletInformation()"},{"lineNumber":498,"author":{"gitID":"-"},"content":"----"},{"lineNumber":499,"author":{"gitID":"-"},"content":"This default constructor initializes the five fields of `OutletInformation` to respective default values:"},{"lineNumber":500,"author":{"gitID":"-"},"content":"----"},{"lineNumber":501,"author":{"gitID":"-"},"content":"    public OutletInformation() {"},{"lineNumber":502,"author":{"gitID":"-"},"content":"        this.name \u003d new OutletName(DEFAULT_OUTLET_NAME);"},{"lineNumber":503,"author":{"gitID":"-"},"content":"        this.masterPassword \u003d new Password();"},{"lineNumber":504,"author":{"gitID":"-"},"content":"        this.operatingHours \u003d new OperatingHours(DEFAULT_OPERATING_HOURS);"},{"lineNumber":505,"author":{"gitID":"-"},"content":"        this.outletContact \u003d new OutletContact(DEFAULT_OUTLET_CONTACT);"},{"lineNumber":506,"author":{"gitID":"-"},"content":"        this.timetable \u003d new Timetable(LocalDate.now());"},{"lineNumber":507,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":508,"author":{"gitID":"-"},"content":"----"},{"lineNumber":509,"author":{"gitID":"-"},"content":"This saves the time of any employer new to PTMan because the creation of an outlet has already been done with default values."},{"lineNumber":510,"author":{"gitID":"-"},"content":"Employers can edit those values by entering an `editoutlet` command."},{"lineNumber":511,"author":{"gitID":"-"},"content":"However, there is an alternative way to create an `OutletInformation` object:"},{"lineNumber":512,"author":{"gitID":"-"},"content":"----"},{"lineNumber":513,"author":{"gitID":"-"},"content":"OutletInformation(OutletName outletName, OperatingHours operatingHours, OutletContact outletContact, Timetable timetable)"},{"lineNumber":514,"author":{"gitID":"-"},"content":"----"},{"lineNumber":515,"author":{"gitID":"-"},"content":"This constructor allows flexity in storing outlet information, but master password must be set to the default value."},{"lineNumber":516,"author":{"gitID":"-"},"content":"It is because this default password is used for employer\u0027s first login and any employer cannot change his password without the first login."},{"lineNumber":517,"author":{"gitID":"-"},"content":"stored in a separate file and managed by the `OutletInformation` class. +"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Logic component"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"Currently, there are two commands that allows employers to change fields of the `OutletInformation` object. +"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"*Edit outlet command*"},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"After login with correct master password, using the `editoutlet` command, employers should be able to edit the outlet information including"},{"lineNumber":526,"author":{"gitID":"-"},"content":"outlet name, operating hours and contact numbers. Master password can only be changed using changemasterpassword command,"},{"lineNumber":527,"author":{"gitID":"-"},"content":"while timetable can only be set with relevant commands."},{"lineNumber":528,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":529,"author":{"gitID":"-"},"content":"Editing with some fields not specified is allowed."},{"lineNumber":530,"author":{"gitID":"-"},"content":"For example, editoutlet n/OUTLETNAME is allowed. This enables employers to edit only the information required for change."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"*Change master password command*"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"After login with correct master password, using the `changemasterpassword` command, employers should be able to change the master password as well."},{"lineNumber":535,"author":{"gitID":"-"},"content":"However, due to the possibility that previous employer forgot to log out, changemasterpassword command requires"},{"lineNumber":536,"author":{"gitID":"-"},"content":"the old password for further verification. This reduces the risk of password getting stolen."},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Storage component"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"All outlet information is stored in a separate file with data encryption to ensure crucial data cannot be interpreted by any third party."},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d UI component"},{"lineNumber":543,"author":{"gitID":"-"},"content":"Outlet information is displayed in the outlet panel above the time table."},{"lineNumber":544,"author":{"gitID":"-"},"content":"Any change in the outlet information will be reflected immediately after the command."},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Password Class"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":550,"author":{"gitID":"-"},"content":"As PTMan is currently designed to use locally on a system, both employer and employee must go through the same system to allocate their preferred slot or to edit the data in PTMan. A Password class is given to both employer and employee to ensure that they are the authorized person that is using the system."},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":553,"author":{"gitID":"-"},"content":"A Password class is created with two constructors."},{"lineNumber":554,"author":{"gitID":"-"},"content":"----"},{"lineNumber":555,"author":{"gitID":"-"},"content":"new Password();"},{"lineNumber":556,"author":{"gitID":"-"},"content":"new Password(String hashCode);"},{"lineNumber":557,"author":{"gitID":"-"},"content":"----"},{"lineNumber":558,"author":{"gitID":"-"},"content":"`new Password()` produce hash code converted by https://en.wikipedia.org/wiki/SHA-2[SHA-256] using the default password \"DEFAULT1\" and store it within the class. +"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"`new Password(String hashCode)` allows storage to directly insert the generated hash code to create the password class upon loading. +"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":563,"author":{"gitID":"-"},"content":"To create a password with desired password String, one can invoke the method below."},{"lineNumber":564,"author":{"gitID":"-"},"content":"----"},{"lineNumber":565,"author":{"gitID":"-"},"content":"createPassword(String password)"},{"lineNumber":566,"author":{"gitID":"-"},"content":"----"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reasons for how it is implemented"},{"lineNumber":569,"author":{"gitID":"-"},"content":"The reason of converting password string to hashCode is to protect user’s password from being seen in the storage file.  Anyone who get hold of the data are not able to convert the hashCode back to the original password string as SHA-256 is a https://en.wikipedia.org/wiki/Collision_resistance[collision resistant] hash."},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature Admin Mode"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":574,"author":{"gitID":"-"},"content":"Initial stage of PTMan require huge amount of manual input by admin. To promote hassle-free command, employers can log in to admin mode and use the command provided without the need to enter the password for every command."},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":577,"author":{"gitID":"-"},"content":"Model component now implement three new API for logic component to use."},{"lineNumber":578,"author":{"gitID":"-"},"content":"----"},{"lineNumber":579,"author":{"gitID":"-"},"content":"boolean isAdminMode();"},{"lineNumber":580,"author":{"gitID":"-"},"content":"boolean setTrueAdminMode(Password password);"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"/** guarantee to break out from adminMode */"},{"lineNumber":583,"author":{"gitID":"-"},"content":"setFalseAdminMode();"},{"lineNumber":584,"author":{"gitID":"-"},"content":"----"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"`setTrueAdminMode(Password password)` requires a password that will check against the outlet password and set admin mode accordingly. Failing to give the correct password will result in returning false."},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":589,"author":{"gitID":"-"},"content":"In order to enable the command to be usable only in command mode the code below must be added to the execution() of the command *first*."},{"lineNumber":590,"author":{"gitID":"-"},"content":"----"},{"lineNumber":591,"author":{"gitID":"-"},"content":"if (!model.isAdminMode()) {"},{"lineNumber":592,"author":{"gitID":"-"},"content":"    throw new CommandException(MESSAGE_ACCESS_DENIED);"},{"lineNumber":593,"author":{"gitID":"-"},"content":"}"},{"lineNumber":594,"author":{"gitID":"-"},"content":"----"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":597,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":606,"author":{"gitID":"-"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":608,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":609,"author":{"gitID":"-"},"content":"* Currently, log messages are output to `Console` and to a `.log` file."},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":614,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":615,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":616,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":619,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"This section describes how to edit, publish and convert documentation. We use asciidoc for writing documentation."},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":628,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":633,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format:"},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":646,"author":{"gitID":"-"},"content":".  Go to `build/docs` folder, your should see the generated HTML files."},{"lineNumber":647,"author":{"gitID":"-"},"content":".  Right click on the file and select `Open with` -\u003e `Google Chrome`. You should see a Google Chrome window."},{"lineNumber":648,"author":{"gitID":"-"},"content":".  Click on the `Print` option in Chrome\u0027s menu. You should see a `Print` window as shown in Figure 11 below."},{"lineNumber":649,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`."},{"lineNumber":650,"author":{"gitID":"-"},"content":".  Click `Save` to save a copy of the file in PDF format. For the best results, use the settings indicated in Figure 11."},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":".Saving Documentation as PDF Files in Chrome"},{"lineNumber":653,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":656,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"This section explains how to run tests, the different types of tests and test troubleshooting."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":665,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the third one. The first two methods might fail in some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit Test Runner*"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"* Right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027` to run all tests."},{"lineNumber":670,"author":{"gitID":"-"},"content":"* Right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027` to run a subset of tests."},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests`. If you are using Mac/Linux system, run the command `./gradlew clean allTests` instead."},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":677,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more information on how to run tests using Gradle."},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (Headless)*"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean headless allTests` to run tests in headless mode. If you are using Mac/Linux system, run the command `./gradlew clean headless allTests` instead."},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":684,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the computer while the tests are running."},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":".  *GUI Tests*"},{"lineNumber":691,"author":{"gitID":"-"},"content":"* These are tests involving the GUI. They include:"},{"lineNumber":692,"author":{"gitID":"-"},"content":".. _System tests_ that test the entire app by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":693,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in the `seedu.ptman.ui` package."},{"lineNumber":694,"author":{"gitID":"-"},"content":".  *Non-GUI Tests*"},{"lineNumber":695,"author":{"gitID":"-"},"content":"* These are tests not involving the GUI. They include:"},{"lineNumber":696,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting methods/classes at the lowest level. +"},{"lineNumber":697,"author":{"gitID":"-"},"content":"e.g. `seedu.ptman.commons.StringUtilTest`"},{"lineNumber":698,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units. Those code units are assumed to be working. +"},{"lineNumber":699,"author":{"gitID":"-"},"content":"e.g. `seedu.ptman.storage.StorageManagerTest`"},{"lineNumber":700,"author":{"gitID":"-"},"content":"..  Hybrids of _unit_ and _integration tests_. These test are checking multiple code units as well as how they are connected together. +"},{"lineNumber":701,"author":{"gitID":"-"},"content":"e.g. `seedu.ptman.logic.LogicManagerTest`"},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"The common problems encountered while testing are listed here."},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"**Problem:** `HelpWindowTest` fails with a `NullPointerException`."},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":711,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":714,"author":{"gitID":"-"},"content":"The following sections help you ensure that the project is fully integrated, tested, and built for release."},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform continuous integration on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":729,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"Here are the steps to create a new release:"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":736,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":737,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":738,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, PTMan depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these dependencies can be automated using Gradle. One advantage of Gradle is that it can download these dependencies automatically, which is better than the below alternatives: +"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"..  Including the third-party libraries in the repo. This bloats the repo size. +"},{"lineNumber":745,"author":{"gitID":"-"},"content":"..  Making developers download the third-party libraries manually. This creates extra work for developers."},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":748,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":749,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":758,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":763,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":768,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":771,"author":{"gitID":"-"},"content":"+"},{"lineNumber":772,"author":{"gitID":"-"},"content":"****"},{"lineNumber":773,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":774,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":775,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":776,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":777,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":778,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":779,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":780,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":781,"author":{"gitID":"-"},"content":"****"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":784,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":789,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":792,"author":{"gitID":"-"},"content":"+"},{"lineNumber":793,"author":{"gitID":"-"},"content":"****"},{"lineNumber":794,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":795,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":796,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":797,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":798,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":799,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":800,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":801,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":802,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":803,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":804,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":805,"author":{"gitID":"-"},"content":"****"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":808,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":813,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":816,"author":{"gitID":"-"},"content":"+"},{"lineNumber":817,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":818,"author":{"gitID":"-"},"content":"+"},{"lineNumber":819,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":820,"author":{"gitID":"-"},"content":"+"},{"lineNumber":821,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":822,"author":{"gitID":"-"},"content":"+"},{"lineNumber":823,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":824,"author":{"gitID":"-"},"content":"+"},{"lineNumber":825,"author":{"gitID":"-"},"content":"****"},{"lineNumber":826,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":827,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":828,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":829,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":830,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":831,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":832,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":833,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":834,"author":{"gitID":"-"},"content":"****"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":837,"author":{"gitID":"-"},"content":"+"},{"lineNumber":838,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":839,"author":{"gitID":"-"},"content":"+"},{"lineNumber":840,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":841,"author":{"gitID":"-"},"content":"+"},{"lineNumber":842,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":843,"author":{"gitID":"-"},"content":"+"},{"lineNumber":844,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":845,"author":{"gitID":"-"},"content":"+"},{"lineNumber":846,"author":{"gitID":"-"},"content":"****"},{"lineNumber":847,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":848,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":849,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":850,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":851,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":852,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":853,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":854,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":855,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":856,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":857,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":858,"author":{"gitID":"-"},"content":"****"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":861,"author":{"gitID":"-"},"content":"+"},{"lineNumber":862,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":863,"author":{"gitID":"-"},"content":"+"},{"lineNumber":864,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":865,"author":{"gitID":"-"},"content":"+"},{"lineNumber":866,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":867,"author":{"gitID":"-"},"content":"+"},{"lineNumber":868,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":869,"author":{"gitID":"-"},"content":"+"},{"lineNumber":870,"author":{"gitID":"-"},"content":"****"},{"lineNumber":871,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":872,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":873,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":874,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":875,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":876,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":877,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":878,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":879,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":880,"author":{"gitID":"-"},"content":"****"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":883,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":888,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":891,"author":{"gitID":"-"},"content":"+"},{"lineNumber":892,"author":{"gitID":"-"},"content":"****"},{"lineNumber":893,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":894,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":895,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":896,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":897,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":898,"author":{"gitID":"-"},"content":"****"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":901,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":908,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":909,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":914,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":915,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":916,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":921,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":926,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":931,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":934,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":939,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":940,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":945,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":946,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":947,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":950,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":955,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":962,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":965,"author":{"gitID":"-"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":967,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":974,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":979,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":980,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":983,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":994,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":999,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"* has a need to manage part-time employees."},{"lineNumber":1033,"author":{"gitID":"-"},"content":"* wants to give employees flexibility in their working hours."},{"lineNumber":1034,"author":{"gitID":"-"},"content":"* can type fast."},{"lineNumber":1035,"author":{"gitID":"-"},"content":"* prefers typing over mouse input."},{"lineNumber":1036,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps."},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"*Value proposition*: manage part-time employees faster than a typical mouse/GUI driven app"},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"*Shannon*:"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":". *Shifts (Major)*:"},{"lineNumber":1044,"author":{"gitID":"-"},"content":".. *Add/remove shifts*: Added commands for the employer to add/remove shifts. Employees can then view the available shifts, their working hours, and the capacity of each shift."},{"lineNumber":1045,"author":{"gitID":"-"},"content":".. *Select/Deselect shifts*: Added commands for employees to choose the shifts they want to work in."},{"lineNumber":1046,"author":{"gitID":"-"},"content":". *Command aliases (Minor)*: Added aliases to most commands. These aliases can be used in place of the full length commands for the user\u0027s convenience."},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"*Chin Chye*:"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":". *Access Control (Major)*:"},{"lineNumber":1051,"author":{"gitID":"-"},"content":".. *Password*: Give password to every employee and outlet to protect from accidental/misuse of command."},{"lineNumber":1052,"author":{"gitID":"-"},"content":".. *Login for edit/admin Mode*: Using the password in outlet, employer are able to login to access admin functions."},{"lineNumber":1053,"author":{"gitID":"-"},"content":".. *Change/reset password command*: Employee and employer are able to change/reset password to keep their data/password a secret."},{"lineNumber":1054,"author":{"gitID":"-"},"content":". *Salary (Minor)*: Added salary to employee. This variable is used to keep track of how much employee has earned so far."},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"*Caryn*:"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":". *Timetable (Major)*:"},{"lineNumber":1059,"author":{"gitID":"-"},"content":".. *Timetable GUI*: Added the interactive timetable GUI for employees to interact through the Shift commands."},{"lineNumber":1060,"author":{"gitID":"-"},"content":".. *Export as Image*: Added a command for exporting timetable as image."},{"lineNumber":1061,"author":{"gitID":"-"},"content":". *Tag colors (Minor)*: Added different colors for different tags inside person cards. Tags are allocated colors based on their hashcode."},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"*Bangjie*:"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":". *Outlet Feature(Major)*:"},{"lineNumber":1066,"author":{"gitID":"-"},"content":".. *Edit outlet information*: Commands are added for the employers to edit outlet information, including outlet name and operating hours."},{"lineNumber":1067,"author":{"gitID":"-"},"content":".. *Display outlet information*: Outlet information will be displayed in the UI. Any change in the outlet information will be reflected as well."},{"lineNumber":1068,"author":{"gitID":"-"},"content":".. *Store Outlet information*: Outlet information is stored in a separate file."},{"lineNumber":1069,"author":{"gitID":"-"},"content":". *Data Encryption(Minor)*: Storage files will be encrypted to ciphertext to ensure that data cannot be obtained and undertood by any third party."},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1079,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"|`* * *` |user |have a user manual |know how to use the app."},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"|`* * *` |user |have access control |prevent unauthorized access to my information."},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"|`* * *` |user |update my password |keep my information secure."},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"|`* * *` |employer |add a new employee |store them in the record."},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"|`* * *` |employer |view an employee’s contact |contact them."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"|`* * *` |employer |view an employee’s salary |view their salary."},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"|`* * *` |employer |edit an employee’s salary |update their salary."},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"|`* * *` |employer |delete an existing employee |remove employees that are no longer working."},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"|`* * *` |employer |update the schedule |show employees the available slots."},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"|`* * *` |employee |view the schedule |choose when I want to work."},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"|`* * *` |employee |select from the available slots in the schedule |work during that slot."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"|`* *` |employer |edit an employee’s contact |update their outdated contact information."},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"|`* *` |employer |edit the outlet information |update the outdated outlet information."},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"|`* *` |employer |sort employees by name |have a clearer view of all employees’ details."},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"|`* *` |employer |find an employee by name |locate details of employees without having to go through the entire list."},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"|`* *` |employer |view an employee’s address|view their address information."},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"|`* *` |employer |edit an employee’s address|update their outdated address."},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"|`* *` |employee |edit my contact and address |update my particulars."},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"|`* *` |employee |view my salary so far for the month |plan my expenses."},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"|`*` |user |export timetable as image |have easy access to the time slots I\u0027m working at."},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"|`*` |employer |add an employee’s photo |view it at any time."},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"|`*` |employer |edit an employee’s photo |change an employee\u0027s photo to a newer one."},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"|`*` |employer |view an employee’s photo |recognize the employee."},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"|`*` |employer |remove an employee’s photo |remove their old photo."},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"|`*` |employee |add a photo |be easily identified by my employer."},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"|`*` |employee |have a notification for slot confirmation |be assured that I am working at that slot."},{"lineNumber":1132,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `PTMan` and the *Actor* is the `employer`, unless specified otherwise)"},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1140,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add employee"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"1.  Employer logs in to their admin account."},{"lineNumber":1145,"author":{"gitID":"-"},"content":"2.  Employer enters the employee\u0027s details."},{"lineNumber":1146,"author":{"gitID":"-"},"content":"3.  PTMan adds the employee."},{"lineNumber":1147,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1148,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1149,"author":{"gitID":"-"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"* 2a. The entered format is invalid."},{"lineNumber":1154,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"** 2a1. PTMan shows an error message."},{"lineNumber":1157,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add shift"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"1.  Employer logs in to their admin account."},{"lineNumber":1165,"author":{"gitID":"-"},"content":"2.  Employer enters the shift details."},{"lineNumber":1166,"author":{"gitID":"-"},"content":"3.  PTMan adds the shift."},{"lineNumber":1167,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1168,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1171,"author":{"gitID":"-"},"content":""},{"lineNumber":1172,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"* 2a. The entered format is invalid."},{"lineNumber":1174,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1175,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"** 2a1. PTMan shows an error message."},{"lineNumber":1177,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete shift"},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"1.  Employer logs in to their admin account."},{"lineNumber":1185,"author":{"gitID":"-"},"content":"2.  Employer enters the shift\u0027s index."},{"lineNumber":1186,"author":{"gitID":"-"},"content":"3.  PTMan deletes the shift."},{"lineNumber":1187,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"* 2a. The entered format is invalid."},{"lineNumber":1194,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"** 2a1. PTMan shows an error message."},{"lineNumber":1197,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1199,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"* 2b. The entered index does not exist."},{"lineNumber":1201,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"** 2b1. PTMan shows an error message."},{"lineNumber":1204,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete employee"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"1.  Employer requests to list employees."},{"lineNumber":1213,"author":{"gitID":"-"},"content":"2.  PTMan shows a list of employees."},{"lineNumber":1214,"author":{"gitID":"-"},"content":"3.  Employer requests to delete a specific employee in the list."},{"lineNumber":1215,"author":{"gitID":"-"},"content":"4.  PTMan deletes the employee."},{"lineNumber":1216,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1223,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1227,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1228,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"** 3a1. PTMan shows an error message."},{"lineNumber":1230,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1232,"author":{"gitID":"-"},"content":""},{"lineNumber":1233,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit employee"},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"1.  Employer logs in to their admin account."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"2.  Employer enters the employee\u0027s index and the new details of the employee."},{"lineNumber":1240,"author":{"gitID":"-"},"content":"3.  PTMan changes the employee\u0027s details."},{"lineNumber":1241,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1247,"author":{"gitID":"-"},"content":"* 2a. The entered format is invalid."},{"lineNumber":1248,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"** 2a1. PTMan shows an error message."},{"lineNumber":1251,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1253,"author":{"gitID":"-"},"content":"* 2b. The employee cannot be found."},{"lineNumber":1254,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1255,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1256,"author":{"gitID":"-"},"content":"** 2b1. PTMan shows an error message."},{"lineNumber":1257,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1259,"author":{"gitID":"-"},"content":"* 2c. The entered format of new details is invalid."},{"lineNumber":1260,"author":{"gitID":"hzxcaryn"},"content":"+"},{"lineNumber":1261,"author":{"gitID":"hzxcaryn"},"content":"[none]"},{"lineNumber":1262,"author":{"gitID":"-"},"content":"** 2c1. PTMan shows an error message."},{"lineNumber":1263,"author":{"gitID":"hzxcaryn"},"content":"+"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1265,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":1266,"author":{"gitID":"hzxcaryn"},"content":"[discrete]"},{"lineNumber":1267,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sign up for available shifts"},{"lineNumber":1268,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":1269,"author":{"gitID":"hzxcaryn"},"content":"*MSS*"},{"lineNumber":1270,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"1.  Employee enters a shift that he wants to work in."},{"lineNumber":1272,"author":{"gitID":"-"},"content":"2.  PTMan sends a confirmation message to the employee."},{"lineNumber":1273,"author":{"gitID":"-"},"content":"3.  PTMan updates the indicated time slot in the timetable of the indicated outlet."},{"lineNumber":1274,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1275,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1278,"author":{"gitID":"-"},"content":""},{"lineNumber":1279,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"* 1a. The entered format is invalid."},{"lineNumber":1281,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1283,"author":{"gitID":"-"},"content":"** 1a1. PTMan shows an error message."},{"lineNumber":1284,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1286,"author":{"gitID":"-"},"content":"* 1b. The shift is full."},{"lineNumber":1287,"author":{"gitID":"hzxcaryn"},"content":"+"},{"lineNumber":1288,"author":{"gitID":"hzxcaryn"},"content":"[none]"},{"lineNumber":1289,"author":{"gitID":"hzxcaryn"},"content":"** 1b1. PTMan shows an error message."},{"lineNumber":1290,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1292,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1299,"author":{"gitID":"-"},"content":".  Should work on both 32-bit and 64-bit environment."},{"lineNumber":1300,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1301,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1302,"author":{"gitID":"-"},"content":".  Should respond within 2 seconds after entering any command."},{"lineNumber":1303,"author":{"gitID":"-"},"content":".  Should be able to use by users who has never used a command line interface before."},{"lineNumber":1304,"author":{"gitID":"-"},"content":".  Should be able to manage contact details of part-time workers in any outlet."},{"lineNumber":1305,"author":{"gitID":"-"},"content":".  Should be able to manage work schedule in any outlet."},{"lineNumber":1306,"author":{"gitID":"-"},"content":".  Should not be required to handle the printing of contact details and schedules."},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1312,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1318,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1323,"author":{"gitID":"-"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1327,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1332,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1347,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1348,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1353,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1354,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1355,"author":{"gitID":"-"},"content":""},{"lineNumber":1356,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1357,"author":{"gitID":"-"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an employee"},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":". Deleting an employee while all employees are listed"},{"lineNumber":1361,"author":{"gitID":"-"},"content":""},{"lineNumber":1362,"author":{"gitID":"-"},"content":".. Prerequisites: List all employees using the `list` command. Multiple persons in the list."},{"lineNumber":1363,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"   Expected: First employee is deleted from the list. Details of the deleted employee shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1365,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1366,"author":{"gitID":"-"},"content":"   Expected: No employee is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1367,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1368,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1369,"author":{"gitID":"-"},"content":""},{"lineNumber":1370,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1371,"author":{"gitID":"-"},"content":""},{"lineNumber":1372,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1373,"author":{"gitID":"-"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1375,"author":{"gitID":"-"},"content":""},{"lineNumber":1376,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"hzxcaryn":12,"-":1364}},{"path":"src/test/java/seedu/ptman/ui/TimetablePanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.TypicalEmployees;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":12,"author":{"gitID":"hzxcaryn"},"content":"public class TimetablePanelTest extends GuiUnitTest {"},{"lineNumber":13,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":14,"author":{"gitID":"hzxcaryn"},"content":"    private TimetablePanel timetablePanel;"},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"    @Before"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"    public void setUp() {"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"        timetablePanel \u003d new TimetablePanel(TypicalEmployees.getTypicalPartTimeManager().getShiftList());"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":"        uiPartRule.setUiPart(timetablePanel);"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"    public void display() {"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":"        assertNotNull(timetablePanel.getRoot());"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"        // Displays week view"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(timetablePanel.getRoot().getSelectedPage(), timetablePanel.getRoot().getWeekPage());"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":19,"-":10}},{"path":"src/test/java/seedu/ptman/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.LogicManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":143,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":144,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isError);"},{"lineNumber":145,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":146,"author":{"gitID":"hzxcaryn"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":147,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":159,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":160,"author":{"gitID":"hzxcaryn"},"content":"        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isError);"},{"lineNumber":161,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":162,"author":{"gitID":"hzxcaryn"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":163,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":14,"-":161}},{"path":"src/test/java/systemtests/PartTimeManagerSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.NUM_EMPLOYEES_STATUS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.EmployeeListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.OutletDetailsPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.TimetableViewHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.ptman.TestApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.EventsCenter;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ClearCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.FindCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ListCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.SelectCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.ptman.model.PartTimeManager;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.TypicalEmployees;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.BrowserPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.CommandBox;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.ResultDisplay;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * A system test class for PartTimeManager, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public abstract class PartTimeManagerSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"        defaultStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected PartTimeManager getInitialData() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return TypicalEmployees.getTypicalPartTimeManager();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public EmployeeListPanelHandle getEmployeeListPanel() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getEmployeeListPanel();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public OutletDetailsPanelHandle getOutletDetailsPanel() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getOutletDetailsPanel();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public TimetableViewHandle getTimetableView() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getTimetableView();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":141,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all employees in PTMan."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showAllEmployees() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getPartTimeManager().getEmployeeList().size(),"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                getModel().getFilteredEmployeeList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Displays all employees with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    protected void showEmployeesWithName(String keyword) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredEmployeeList().size()"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                \u003c getModel().getPartTimeManager().getEmployeeList().size());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Selects the employee at {@code index} of the displayed list."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    protected void selectEmployee(Index index) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getEmployeeListPanel().getSelectedCardIndex());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Deletes all employees in PTMan."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void deleteAllEmployees() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD + \" \");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getPartTimeManager().getEmployeeList().size());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same employee objects as {@code expectedModel}"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * and the employee list panel displays the employees in the model correctly."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getPartTimeManager(), testApp.readStoragePartTimeManager());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertListMatching(getEmployeeListPanel(), expectedModel.getFilteredEmployeeList());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Calls {@code OutletDetailsPanelHandle}, {@code EmployeeListPanelHandle} and {@code StatusBarFooterHandle} to"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * remember their current state."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        OutletDetailsPanelHandle outletDetailsPanelHandle \u003d getOutletDetailsPanel();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        outletDetailsPanelHandle.rememberOutletInformation();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        outletDetailsPanelHandle.rememberOutletName();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberNumEmployees();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        getEmployeeListPanel().rememberSelectedEmployeeCard();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * of the previously selected employee."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertFalse(getEmployeeListPanel().isAnyCardSelected());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the employee in the employee list panel at"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see EmployeeListPanelHandle#isSelectedEmployeeCardChanged()"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getEmployeeListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getEmployeeListPanel().getSelectedCardIndex());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the employee list panel remain unchanged."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see EmployeeListPanelHandle#isSelectedEmployeeCardChanged()"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertFalse(getEmployeeListPanel().isSelectedEmployeeCardChanged());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the command box and result display shows the default style."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":251,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(defaultStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the command box and result display shows the error style."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"hzxcaryn"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":259,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(errorStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Asserts that the entire outlet panel remains the same."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    protected void assertOutletDetailsPanelUnchanged() {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        OutletDetailsPanelHandle handle \u003d getOutletDetailsPanel();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertFalse(handle.isOutletInformationChanged());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isOutletNameChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertFalse(handle.isNumEmployeesChanged());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that only the save location in the status bar was unchanged, while sync status"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * is changed to the timing of {@code ClockRule#getInjectedClock()}, and num employees updates to"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * the current num of employees."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"hzxcaryn"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        int currNumEmployees \u003d testApp.getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        String expectedNumEmployees \u003d String.format(NUM_EMPLOYEES_STATUS, currNumEmployees);"},{"lineNumber":292,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertEquals(expectedNumEmployees, handle.getNumEmployees());"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":300,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            assertEquals(\"Welcome to PTMan. Type a command in the search bar above to get started. \""},{"lineNumber":305,"author":{"gitID":"-"},"content":"                    + \"If you need somewhere to start, search “help” to view the user guide.\","},{"lineNumber":306,"author":{"gitID":"-"},"content":"                    getResultDisplay().getText());"},{"lineNumber":307,"author":{"gitID":"-"},"content":"            assertListMatching(getEmployeeListPanel(), getModel().getFilteredEmployeeList());"},{"lineNumber":308,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":309,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            assertEquals(String.format(NUM_EMPLOYEES_STATUS,"},{"lineNumber":311,"author":{"gitID":"-"},"content":"                    getModel().getPartTimeManager().getEmployeeList().size()), getStatusBarFooter().getNumEmployees());"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":318,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":319,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":14,"-":309}},{"path":"src/test/java/seedu/ptman/ui/OutletDetailsPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.OutletDetailsPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.OutletInformationChangedEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.OutletNameChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":"public class OutletDetailsPanelTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"    private OutletInformationChangedEvent outletInformationChangedEventStub;"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"    private OutletNameChangedEvent outletNameChangedEventStub;"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":"    private OutletDetailsPanel outletDetailsPanel;"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":"    private OutletDetailsPanelHandle outletDetailsPanelHandle;"},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"    private OutletInformation outlet \u003d new OutletInformation();"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"        outletInformationChangedEventStub \u003d new OutletInformationChangedEvent(\"New Outlet Information\");"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"        outletNameChangedEventStub \u003d new OutletNameChangedEvent(\"New Outlet Name\");"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"        outletDetailsPanel \u003d new OutletDetailsPanel(outlet);"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"        uiPartRule.setUiPart(outletDetailsPanel);"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"        outletDetailsPanelHandle \u003d new OutletDetailsPanelHandle(outletDetailsPanel.getRoot());"},{"lineNumber":31,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"    public void display() {"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":"        // Default outlet name and information"},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":"        String expectedDefaultOutletName \u003d \"DefaultOutlet\";"},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"        String expectedDefaultOutletInformation \u003d \"Operating Hour: 09:00-22:00 Contact: 91234567 \""},{"lineNumber":38,"author":{"gitID":"hzxcaryn"},"content":"                + \"Email: DefaultOutlet@gmail.com\";"},{"lineNumber":39,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedDefaultOutletInformation, outletDetailsPanelHandle.getOutletInformation());"},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedDefaultOutletName, outletDetailsPanelHandle.getOutletName());"},{"lineNumber":41,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"        // Outlet Information Updated"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":"        postNow(outletInformationChangedEventStub);"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"        String expectedOutletInformation \u003d \"New Outlet Information\";"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedOutletInformation, outletDetailsPanelHandle.getOutletInformation());"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"        // Outlet Name Updated"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"        postNow(outletNameChangedEventStub);"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"        String expectedOutletName \u003d \"New Outlet Name\";"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedOutletName, outletDetailsPanelHandle.getOutletName());"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":41,"-":13}},{"path":"src/test/java/seedu/ptman/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.EmployeeCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.EmployeeListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.EmployeeCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(EmployeeCardHandle expectedCard, EmployeeCardHandle actualCard) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":"        expectedCard.getTags().forEach(tag -\u003e {"},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":"            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag));"},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedEmployee}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysEmployee(Employee expectedEmployee, EmployeeCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getName().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getPhone().value, actualCard.getPhone());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getEmail().value, actualCard.getEmail());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getAddress().value, actualCard.getAddress());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTagEquals(expectedEmployee, actualCard);"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * in {@code EmployeeCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @see EmployeeCard#getTagColor(String)"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"    private static String getTagColor(String tagName) {"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"        switch (tagName) {"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"        case \"classmates\":"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"        case \"owesMoney\":"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"            return \"salmon\";"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"        case \"colleagues\":"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"        case \"neighbours\":"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"            return \"teal\";"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"        case \"family\":"},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"        case \"friend\":"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"            return \"pink\";"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"        case \"friends\":"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"            return \"pale-blue\";"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"        case \"husband\":"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"            return \"yellow\";"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"        default:"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"            return \"\";"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * {@code expectedEmployee} with the correct color."},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"     * */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private static void assertTagEquals(Employee expectedEmployee,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                                        EmployeeCardHandle actualCard) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedEmployee.getTags().stream().map(tag -\u003e tag.tagName)"},{"lineNumber":84,"author":{"gitID":"hzxcaryn"},"content":"                .collect(Collectors.toList());"},{"lineNumber":85,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":86,"author":{"gitID":"hzxcaryn"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":87,"author":{"gitID":"hzxcaryn"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColor(tag)), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code employeeListPanelHandle} displays the details of {@code employees} correctly and"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static void assertListMatching(EmployeeListPanelHandle employeeListPanelHandle, Employee... employees) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c employees.length; i++) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            assertCardDisplaysEmployee(employees[i], employeeListPanelHandle.getEmployeeCardHandle(i));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code employeeListPanelHandle} displays the details of {@code employees} correctly and"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static void assertListMatching(EmployeeListPanelHandle employeeListPanelHandle, List\u003cEmployee\u003e employees) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertListMatching(employeeListPanelHandle, employees.toArray(new Employee[0]));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code employeeListPanelHandle} equals to {@code size}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static void assertListSize(EmployeeListPanelHandle employeeListPanelHandle, int size) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d employeeListPanelHandle.getListSize();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":41,"-":81}},{"path":"src/test/java/seedu/ptman/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.NUM_EMPLOYEES_STATUS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.model.PartTimeManagerChangedEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.PartTimeManagerBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final int INITIAL_NUM_EMPLOYEES \u003d 0;"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final PartTimeManagerChangedEvent EVENT_STUB \u003d new PartTimeManagerChangedEvent("},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new PartTimeManagerBuilder().withEmployee(ALICE).build());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_NUM_EMPLOYEES);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                String.format(NUM_EMPLOYEES_STATUS, INITIAL_NUM_EMPLOYEES));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // after ptman book is updated"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                String.format(NUM_EMPLOYEES_STATUS, EVENT_STUB.data.getEmployeeList().size()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, the"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}, and the num employees matches"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * that of {@code expectedNumEmployees}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"    private void assertStatusBarContent(String expectedSaveLocation,"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                                        String expectedSyncStatus, String expectedNumEmployees) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(expectedNumEmployees, statusBarFooterHandle.getNumEmployees());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":5,"-":80}},{"path":"src/test/java/seedu/ptman/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.deleteFirstEmployee;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.showEmployeeAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.getTypicalPartTimeManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalPartTimeManager(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPartTimeManager(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstEmployee(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all employees"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalPartTimeManager(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all employees"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstEmployee(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the first employee in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deleteEmployee(employeeToDelete);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                fail(\"Impossible: employeeToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":67}},{"path":"src/test/java/seedu/ptman/model/outlet/CapacityTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.outlet;"},{"lineNumber":2,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":3,"author":{"gitID":"koo1993"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CapacityTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Capacity(null));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void constructor_invalidCapacity_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        String invalidCapacity \u003d \"w\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Capacity(invalidCapacity));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void isValidCapacity_nullCapacity_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Capacity.isValidCapacity(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void isValidCapacity_invalidCapacity_returnsFalse() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Capacity.isValidCapacity(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Capacity.isValidCapacity(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Capacity.isValidCapacity(\"^\")); // only non-numeric characters"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Capacity.isValidCapacity(\"3*\")); // contains non-numeric characters"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Capacity.isValidCapacity(\"-3\")); // only negative numeric string"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(Capacity.isValidCapacity(\"0\")); // only zero"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void isValidCapacity_validCapacity_returnsTrue() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(Capacity.isValidCapacity(\"4\")); // positive integer only"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toString_sameValue_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Capacity test \u003d new Capacity(\"5\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(test.toString(), \"5\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Capacity test \u003d new Capacity(\"5\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Capacity other \u003d new Capacity(\"5\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(test.equals(other));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Capacity test \u003d new Capacity(\"5\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Capacity other \u003d new Capacity(\"3\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(test.equals(other));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void hashCode_sameValue_returnsTrue() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Capacity test \u003d new Capacity(\"4\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(test.hashCode(), new Integer(4).hashCode());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"koo1993":2,"-":67}},{"path":"src/test/java/seedu/ptman/model/outlet/DayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.outlet;"},{"lineNumber":2,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":3,"author":{"gitID":"koo1993"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class DayTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Day(null));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void constructor_invalidDay_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        String invalidDay \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Day(invalidDay));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void isValidDay_nullDay_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Day.isValidDay(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void isValidDay_invalidDay_returnsFalse() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Day.isValidDay(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Day.isValidDay(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Day.isValidDay(\"^\")); // only non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Day.isValidDay(\"monday*\")); // contains non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Day.isValidDay(\"mon\")); // contains short form"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void isValidDay_validDay_returnsTrue() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTrue(Day.isValidDay(\"monday\")); // full spelling of day of week"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(Day.isValidDay(\"tuesday\")); // full spelling of day of week"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertTrue(Day.isValidDay(\"sunday\")); // full spelling of day of week"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertTrue(Day.isValidDay(\"ThUrSday\")); // upper and lower case characters"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void toString_sameValue_returnsTrue() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Day day \u003d new Day(\"friday\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(day.toString(), \"FRIDAY\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Day test \u003d new Day(\"sunday\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Day other \u003d new Day(\"sunday\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(test.equals(other));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Day test \u003d new Day(\"sunday\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Day other \u003d new Day(\"monday\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertFalse(test.equals(other));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void hashCode_sameDay_returnsTrue() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Day test \u003d new Day(\"monday\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(test.hashCode(), \"MONDAY\".hashCode());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"koo1993":2,"-":69}},{"path":"src/test/java/seedu/ptman/model/employee/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.employee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long ptman"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"koo1993":1,"-":36}},{"path":"src/test/java/seedu/ptman/model/PasswordTest.java","lines":[{"lineNumber":1,"author":{"gitID":"koo1993"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":3,"author":{"gitID":"koo1993"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"koo1993"},"content":"public class PasswordTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String DEFAULT1_HASH \u003d \"wkqTFuX6NX3hucWqn2ZxB24cRo73LssRq7IDOk6Zx00\u003d\"; // hash code for DEFAULT1"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String DEFAULT2_HASH \u003d \"j9R1Y0IIRVI052lxIOkweVd88O+EiSLGJvnXAZXKD40\u003d\";"},{"lineNumber":15,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Password((Password) null));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Password((String) null));"},{"lineNumber":19,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":21,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"koo1993"},"content":"    public void constructor_defaultConstructor_noError() {"},{"lineNumber":23,"author":{"gitID":"koo1993"},"content":"        Password password \u003d new Password();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Password expectPassword \u003d new Password(DEFAULT1_HASH);"},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":26,"author":{"gitID":"koo1993"},"content":"        assertEquals(password, expectPassword);"},{"lineNumber":27,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":29,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"koo1993"},"content":"    public void isValidPassword() {"},{"lineNumber":31,"author":{"gitID":"koo1993"},"content":"        // null password"},{"lineNumber":32,"author":{"gitID":"koo1993"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"},{"lineNumber":33,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":34,"author":{"gitID":"koo1993"},"content":"        // invalid Password"},{"lineNumber":35,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\"\")); // empty string"},{"lineNumber":36,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\" \")); // spaces only"},{"lineNumber":37,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\"!#@! fdsafdsafdsa\")); // characters with space"},{"lineNumber":38,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\"less8\")); // less than 8 character"},{"lineNumber":39,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":40,"author":{"gitID":"koo1993"},"content":"        // valid name"},{"lineNumber":41,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"peterjack\")); // alphabets only"},{"lineNumber":42,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"1234567dsa6\")); // numbers only"},{"lineNumber":43,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"peterthe2nd\")); // alphanumeric characters"},{"lineNumber":44,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"CapitalTan\")); // with capital letters"},{"lineNumber":45,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"Da@acks$RayJr2nd\")); // alphanumeric with captial and special character"},{"lineNumber":46,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":48,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"koo1993"},"content":"    public void isCorrectPassword() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Password password \u003d new Password(DEFAULT1_HASH);"},{"lineNumber":51,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":52,"author":{"gitID":"koo1993"},"content":"        // wrong password"},{"lineNumber":53,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.isCorrectPassword(\"thisiswrongpassword\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(password.isCorrectPassword(\"THISISNOTTHEPASS\"));"},{"lineNumber":55,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":56,"author":{"gitID":"koo1993"},"content":"        //correct password"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(password.isCorrectPassword(\"DEFAULT1\")); //correct password"},{"lineNumber":58,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":60,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":61,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"koo1993"},"content":"    public void changePassword() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Password password \u003d new Password(DEFAULT1_HASH);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Password expectedPassword \u003d new Password(DEFAULT2_HASH);"},{"lineNumber":65,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":66,"author":{"gitID":"koo1993"},"content":"        //wrong password"},{"lineNumber":67,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.checkAndChangePassword(\"this is the password\", \"newPassword\"));"},{"lineNumber":68,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.checkAndChangePassword(\"notapassword\", \"newPassword\"));"},{"lineNumber":69,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":70,"author":{"gitID":"koo1993"},"content":"        //correct password and changed"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(password.checkAndChangePassword(\"DEFAULT1\", \"DEFAULT2\"));"},{"lineNumber":72,"author":{"gitID":"koo1993"},"content":"        assertEquals(password, expectedPassword);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":76,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"koo1993"},"content":"    public void changeHash() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String encodedHash \u003d \"wkqTFuX6NX3hucWqn2ZxB24cRo73LssRq7IDOk6Zx00\u003d\"; // hash code for DEFAULT1"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Password password \u003d new Password(encodedHash);"},{"lineNumber":80,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":81,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.isCorrectPassword(\"newPassword\"));"},{"lineNumber":82,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(password.isCorrectPassword(\"DEFAULT1\"));"},{"lineNumber":85,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":87,"author":{"gitID":"koo1993"},"content":"}"}],"authorContributionMap":{"koo1993":62,"-":25}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"hzxcaryn"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":9,"-":22}},{"path":"src/test/java/guitests/guihandles/OutletDetailsPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"//@@author hzxcaryn"},{"lineNumber":7,"author":{"gitID":"hzxcaryn"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"hzxcaryn"},"content":" * A handler for the {@code OutletDetailsPanel} of the UI"},{"lineNumber":9,"author":{"gitID":"hzxcaryn"},"content":" */"},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":"public class OutletDetailsPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":12,"author":{"gitID":"hzxcaryn"},"content":"    public static final String OUTLET_ID \u003d \"#outletDetailsPanelPlaceholder\";"},{"lineNumber":13,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":14,"author":{"gitID":"hzxcaryn"},"content":"    private static final String OUTLET_NAME_ID \u003d \"#outletNamePanelHeader\";"},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":"    private static final String OUTLET_INFORMATION_ID \u003d \"#outletInformation\";"},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"    private final Label outletNameNode;"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"    private final Label outletInformationNode;"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":"    private String lastRememberedOutletName;"},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"    private String lastRememberedOutletInformation;"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":23,"author":{"gitID":"hzxcaryn"},"content":"    public OutletDetailsPanelHandle(Node outletDetailsNode) {"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":"        super(outletDetailsNode);"},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"        this.outletNameNode \u003d getChildNode(OUTLET_NAME_ID);"},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"        this.outletInformationNode \u003d getChildNode(OUTLET_INFORMATION_ID);"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"hzxcaryn"},"content":"     * @return the outlet name in outlet panel."},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":"    public String getOutletName() {"},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        return outletNameNode.getText();"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"hzxcaryn"},"content":"     * @return the outlet info in outlet panel."},{"lineNumber":39,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"    public String getOutletInformation() {"},{"lineNumber":41,"author":{"gitID":"hzxcaryn"},"content":"        return outletInformationNode.getText();"},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"     * Remembers the outlet name in the outlet panel."},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"    public void rememberOutletName() {"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"        lastRememberedOutletName \u003d getOutletName();"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":"     * Returns true if the current outlet name is different from the value remembered by the most recent"},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"     * {@code rememberOutletName()} call."},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"    public boolean isOutletNameChanged() {"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"        return !lastRememberedOutletName.equals(getOutletName());"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"     * Remembers the outlet info in the outlet panel."},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"    public void rememberOutletInformation() {"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"        lastRememberedOutletInformation \u003d getOutletInformation();"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"     * Returns true if the current outlet information is different from the value remembered by the most"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"     * recent {@code rememberOutletInformation()} call."},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"    public boolean isOutletInformationChanged() {"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"        return !lastRememberedOutletInformation.equals(getOutletInformation());"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"}"}],"authorContributionMap":{"hzxcaryn":69,"-":5}},{"path":"src/test/java/guitests/guihandles/StatusBarFooterHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code StatusBarFooter} at the footer of the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String NUM_EMPLOYEES_STATUS_ID \u003d \"#numEmployeesStatus\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final StatusBar syncStatusNode;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final StatusBar numEmployeesNode;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final StatusBar saveLocationNode;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private String lastRememberedNumEmployees;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle(Node statusBarFooterNode) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.numEmployeesNode \u003d getChildNode(NUM_EMPLOYEES_STATUS_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027num employees\u0027 portion of the status bar."},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getNumEmployees() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return numEmployeesNode.getText();"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027num Employees\u0027 portion of the status bar."},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void rememberNumEmployees() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        lastRememberedNumEmployees \u003d getNumEmployees();"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027num employees\u0027 is different from the value remembered by the most"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean isNumEmployeesChanged() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return !lastRememberedNumEmployees.equals(getNumEmployees());"},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":11,"-":87}},{"path":"src/test/java/guitests/guihandles/EmployeeCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a employee card in the employee list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class EmployeeCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public EmployeeCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"                .findFirst()"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"Tag does not exist.\"));"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":8,"-":73}},{"path":"src/main/java/seedu/ptman/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"hzxcaryn"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"hzxcaryn"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":149}},{"path":"src/main/java/seedu/ptman/ui/EmployeeCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Employee}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class EmployeeCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"EmployeeListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"    private static final String[] TAG_COLORS \u003d"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"        {\"salmon\", \"mint\", \"teal\", \"turquoise\", \"pink\", \"pale-blue\", \"purple\", \"blue\", \"indigo\", \"yellow\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * \u003ca href\u003d\"https://github.com/se-edu/parttimemanager-level4/issues/336\"\u003eThe issue on PartTimeManager level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public final Employee employee;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label salary;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public EmployeeCard(Employee employee, int displayedIndex) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.employee \u003d employee;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        name.setText(employee.getName().fullName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        phone.setText(employee.getPhone().value);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        address.setText(employee.getAddress().value);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        email.setText(employee.getEmail().value);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        salary.setText(\"Earned: $\" + employee.getSalary().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        addTagLabels(employee);"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"     * Tag colors are derived by calculating the hash code of the {@code tagName} string to"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"     * select a color from the {@code TAG_COLORS} array"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"     * @param tagName"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"     * @return color for the {@code tagName}\u0027s tag label"},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"    private String getTagColor(String tagName) {"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"        int index \u003d Math.abs(tagName.hashCode()) %  TAG_COLORS.length;"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"        return TAG_COLORS[index];"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Adds all tags of {@code employee} as color-coded labels"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void addTagLabels(Employee employee) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        employee.getTags().forEach(tag -\u003e {"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"            Label newLabel \u003d new Label(tag.tagName);"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"            newLabel.getStyleClass().add(getTagColor(tag.tagName));"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"            tags.getChildren().add(newLabel);"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!(other instanceof EmployeeCard)) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EmployeeCard card \u003d (EmployeeCard) other;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                \u0026\u0026 employee.equals(card.employee);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":22,"-":77}},{"path":"src/main/java/seedu/ptman/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"Welcome to PTMan. \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Type a command in the search bar above to get started. \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"If you need somewhere to start, search “help” to view the user guide.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        resultDisplay.setWrapText(true);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"            displayed.setValue(event.message);;"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"            if (event.isError) {"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":"                setStyleToIndicateCommandFailure();"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"            } else {"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"                setStyleToDefault();"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"     * Sets the result display style to use the default style."},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"    private void setStyleToDefault() {"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"     * Sets the result display style to indicate a failed command."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":21,"-":52}},{"path":"src/main/java/seedu/ptman/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.model.PartTimeManagerChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String NUM_EMPLOYEES_STATUS \u003d \"%d employee(s) total\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private StatusBar numEmployeesStatus;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation, int numEmployees) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        setNumEmployees(numEmployees);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setNumEmployees(int numEmployees) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.numEmployeesStatus.setText(String.format(NUM_EMPLOYEES_STATUS, numEmployees)));"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void handlePartTimeManagerChangedEvent(PartTimeManagerChangedEvent abce) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setNumEmployees(abce.data.getEmployeeList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":87}},{"path":"src/main/java/seedu/ptman/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"hzxcaryn"},"content":"    public final boolean isError;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"hzxcaryn"},"content":"    public NewResultAvailableEvent(String message, boolean isError) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":"        this.isError \u003d isError;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":20}},{"path":"src/main/java/seedu/ptman/model/PartTimeManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.UniqueEmployeeList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.OutletInformation;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.Shift;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.UniqueShiftList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.DuplicateShiftException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.NoOutletInformationFieldChangeException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.ptman.model.outlet.exceptions.ShiftNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.UniqueTagList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class PartTimeManager implements ReadOnlyPartTimeManager {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueEmployeeList employees;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniqueShiftList shifts;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final OutletInformation outlet;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private boolean isAdminMode;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        employees \u003d new UniqueEmployeeList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        shifts \u003d new UniqueShiftList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        outlet \u003d new OutletInformation();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        isAdminMode \u003d false;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PartTimeManager() {}"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Creates an PartTimeManager using the Employees and Tags in the {@code toBeCopied}"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public PartTimeManager(ReadOnlyPartTimeManager toBeCopied) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    //// authorization operations"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean isAdminMode() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this.isAdminMode;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Check if given password is of outlet\u0027s"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param password"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @return true if password is the same"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean isAdminPassword(Password password) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return outlet.getMasterPassword().equals(password);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void setEmployees(List\u003cEmployee\u003e employees) throws DuplicateEmployeeException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.employees.setEmployees(employees);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setOutletInformation(OutletInformation outlet) throws NoOutletInformationFieldChangeException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.outlet.setOutletInformation(outlet);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setShifts(List\u003cShift\u003e shifts) throws DuplicateShiftException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.shifts.setShifts(shifts);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code PartTimeManager} with {@code newData}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyPartTimeManager newData) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cEmployee\u003e syncedEmployeeList \u003d newData.getEmployeeList().stream()"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        List\u003cShift\u003e syncedShiftList \u003d new ArrayList\u003c\u003e(newData.getShiftList());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        OutletInformation syncedOutlet \u003d new OutletInformation(newData.getOutletInformation());"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            setEmployees(syncedEmployeeList);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            setShifts(syncedShiftList);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            setOutletInformation(syncedOutlet);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PartTimeManagers should not have duplicate employees\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (DuplicateShiftException e) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PartTimeManagers should not have duplicate shifts\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } catch (NoOutletInformationFieldChangeException e) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PartTimeManagers should not have empty outlet information\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    //// employee-level operations"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Adds an employee to the address book."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Also checks the new employee\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the employee to point to those in {@link #tags}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * @throws DuplicateEmployeeException if an equivalent employee already exists."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void addEmployee(Employee p) throws DuplicateEmployeeException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Employee employee \u003d syncWithMasterTagList(p);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any employee"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // in the employee list."},{"lineNumber":137,"author":{"gitID":"-"},"content":"        employees.add(employee);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Replaces the given employee {@code target} in the list with {@code editedEmployee}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * {@code PartTimeManager}\u0027s tag list will be updated with the tags of {@code editedEmployee}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * @throws DuplicateEmployeeException if updating the employee\u0027s details causes the employee to be equivalent to"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *      another existing employee in the list."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * @throws EmployeeNotFoundException if {@code target} could not be found in the list."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Employee)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void updateEmployee(Employee target, Employee editedEmployee)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            throws DuplicateEmployeeException, EmployeeNotFoundException {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        requireNonNull(editedEmployee);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        Employee syncedEditedEmployee \u003d syncWithMasterTagList(editedEmployee);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any employee"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // in the employee list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"        employees.setEmployee(target, syncedEditedEmployee);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void updateOutlet(OutletInformation editedOutlet) throws NoOutletInformationFieldChangeException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        outlet.setOutletInformation(editedOutlet);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public String getOutletInformationMessage() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return outlet.toString();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code employee} that are not in the list."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code employee} such that every tag in this employee points to a Tag"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     *  object in the master list."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    private Employee syncWithMasterTagList(Employee employee) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        final UniqueTagList employeeTags \u003d new UniqueTagList(employee.getTags());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        tags.mergeFrom(employeeTags);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // used for checking employee tag references"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // Rebuild the list of employee tags to point to the relevant tags in the master tag list."},{"lineNumber":184,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        employeeTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return new Employee("},{"lineNumber":187,"author":{"gitID":"-"},"content":"                employee.getName(),"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                employee.getPhone(),"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                employee.getEmail(),"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                employee.getAddress(),"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                employee.getSalary(),"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                employee.getPassword(),"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                correctTagReferences"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code PartTimeManager}."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @throws EmployeeNotFoundException if the {@code key} is not in this {@code PartTimeManager}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public boolean removeEmployee(Employee key) throws EmployeeNotFoundException {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        if (employees.remove(key)) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            removeUnusedTag();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            throw new EmployeeNotFoundException();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public boolean removeShift(Shift key) throws ShiftNotFoundException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        return shifts.remove(key);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Adds a shift to the address book."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @throws DuplicateShiftException if a equivalent shift already exists."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void addShift(Shift p) throws DuplicateShiftException {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        outlet.addShift(p);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        shifts.add(p);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public void setAdminMode(boolean isAdmin) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        isAdminMode \u003d isAdmin;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Remove tag from Employee if the tag exist in Employee."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @param tag"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * @param employee"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private void removeTagFromEmployee(Tag tag, Employee employee) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(employee.getTags());"},{"lineNumber":243,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":244,"author":{"gitID":"koo1993"},"content":"        if (!newTags.contains(tag)) {"},{"lineNumber":245,"author":{"gitID":"koo1993"},"content":"            return;"},{"lineNumber":246,"author":{"gitID":"koo1993"},"content":"        } else {"},{"lineNumber":247,"author":{"gitID":"koo1993"},"content":"            newTags.remove(tag);"},{"lineNumber":248,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        Employee newEmployee \u003d new Employee(employee.getName(), employee.getPhone(), employee.getEmail(),"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                employee.getAddress(), employee.getSalary(), employee.getPassword(), newTags);"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            updateEmployee(employee, newEmployee);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException dpe) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"updating employee should not result in duplicated employee\");"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"updating employee should always be able to find the employee you are editing\");"},{"lineNumber":259,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":261,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":263,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"koo1993"},"content":"     * remove tag that is unused in addressbook"},{"lineNumber":265,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"koo1993"},"content":"    private void removeUnusedTag() {"},{"lineNumber":267,"author":{"gitID":"koo1993"},"content":"        HashSet newSet \u003d new HashSet();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        for (Employee employee:employees) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            for (Tag tag: employee.getTags()) {"},{"lineNumber":270,"author":{"gitID":"koo1993"},"content":"                if (!newSet.contains(tag)) {"},{"lineNumber":271,"author":{"gitID":"koo1993"},"content":"                    newSet.add(tag);"},{"lineNumber":272,"author":{"gitID":"koo1993"},"content":"                }"},{"lineNumber":273,"author":{"gitID":"koo1993"},"content":"            }"},{"lineNumber":274,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"koo1993"},"content":"        tags.setTags(newSet);"},{"lineNumber":276,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"koo1993"},"content":"     * Remove tags from everyone in the address book"},{"lineNumber":279,"author":{"gitID":"koo1993"},"content":"     * @param tag"},{"lineNumber":280,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public void removeTagFromAllEmployees(Tag tag) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        for (Employee employee: employees) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            removeTagFromEmployee(tag, employee);"},{"lineNumber":284,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"koo1993"},"content":"        removeUnusedTag();"},{"lineNumber":286,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        return employees.asObservableList().size() + \" employees, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public ObservableList\u003cEmployee\u003e getEmployeeList() {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        return employees.asObservableList();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    public ObservableList\u003cShift\u003e getShiftList() {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        return shifts.asObservableList();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    public OutletInformation getOutletInformation() {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        return outlet;"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":317,"author":{"gitID":"-"},"content":"                || (other instanceof PartTimeManager // instanceof handles nulls"},{"lineNumber":318,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.employees.equals(((PartTimeManager) other).employees)"},{"lineNumber":319,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((PartTimeManager) other).tags))"},{"lineNumber":320,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.outlet.equals(((PartTimeManager) other).outlet);"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        return Objects.hash(employees, tags);"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"koo1993":31,"-":298}},{"path":"src/main/java/seedu/ptman/model/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"koo1993"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":5,"author":{"gitID":"koo1993"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":6,"author":{"gitID":"koo1993"},"content":"import java.security.MessageDigest;"},{"lineNumber":7,"author":{"gitID":"koo1993"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":8,"author":{"gitID":"koo1993"},"content":"import java.util.Base64;"},{"lineNumber":9,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":10,"author":{"gitID":"koo1993"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"koo1993"},"content":" * Represents a Password in PartTimeManger"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Store password as hashCode"},{"lineNumber":13,"author":{"gitID":"koo1993"},"content":" */"},{"lineNumber":14,"author":{"gitID":"koo1993"},"content":"public class Password {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"koo1993"},"content":"    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"koo1993"},"content":"            \"Password should be at least 8 character and no spaces.\";"},{"lineNumber":19,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":20,"author":{"gitID":"koo1993"},"content":"    public static final String DEFAULT_PASSWORD \u003d"},{"lineNumber":21,"author":{"gitID":"koo1993"},"content":"            \"DEFAULT1\";"},{"lineNumber":22,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":23,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"koo1993"},"content":"     * accept all password that do not have whitespaces and at least 8 characters."},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"koo1993"},"content":"    public static final String PASSWORD_VALIDATION_REGEX \u003d \"^(?\u003d\\\\S+$).{8,}$\";"},{"lineNumber":27,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":28,"author":{"gitID":"koo1993"},"content":"    private String passwordHash;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final String initialValue \u003d \"IV\";"},{"lineNumber":30,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":31,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"koo1993"},"content":"     * constructor for default password"},{"lineNumber":33,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"koo1993"},"content":"    public Password() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        createPassword(DEFAULT_PASSWORD);"},{"lineNumber":36,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":38,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * use this if hashcode is known"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @param hashCode"},{"lineNumber":41,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Password(String hashCode) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(hashCode);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        passwordHash \u003d hashCode;"},{"lineNumber":45,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Password(Password masterPassword) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(masterPassword);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.passwordHash \u003d masterPassword.getPasswordHash();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":53,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"koo1993"},"content":"     * @param test"},{"lineNumber":55,"author":{"gitID":"koo1993"},"content":"     * @return true if password is of correct format"},{"lineNumber":56,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"koo1993"},"content":"    public static boolean isValidPassword(String test) {"},{"lineNumber":58,"author":{"gitID":"koo1993"},"content":"        return test.matches(PASSWORD_VALIDATION_REGEX);"},{"lineNumber":59,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":61,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"koo1993"},"content":"     * check if passwordHash generated from the string is same as current passwordHash"},{"lineNumber":63,"author":{"gitID":"koo1993"},"content":"     * @param password"},{"lineNumber":64,"author":{"gitID":"koo1993"},"content":"     * @return true if same"},{"lineNumber":65,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"koo1993"},"content":"    public boolean isCorrectPassword(String password) {"},{"lineNumber":67,"author":{"gitID":"koo1993"},"content":"        return passwordHash.equals(generatePasswordHash(password));"},{"lineNumber":68,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":70,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"koo1993"},"content":"     * Change password given a password"},{"lineNumber":72,"author":{"gitID":"koo1993"},"content":"     * @return true if password is changed"},{"lineNumber":73,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"koo1993"},"content":"    public boolean checkAndChangePassword(String oldPassword, String newPassword) {"},{"lineNumber":75,"author":{"gitID":"koo1993"},"content":"        if (isCorrectPassword(oldPassword)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            createPassword(newPassword);"},{"lineNumber":77,"author":{"gitID":"koo1993"},"content":"            return true;"},{"lineNumber":78,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"koo1993"},"content":"        return false;"},{"lineNumber":80,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Create passwordHash when password is entered in plain text"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @param password"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void createPassword(String password) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(password);"},{"lineNumber":88,"author":{"gitID":"koo1993"},"content":"        passwordHash \u003d generatePasswordHash(password);"},{"lineNumber":89,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public String getPasswordHash() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return passwordHash;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"koo1993"},"content":"     * Generate passwordHash given a string password"},{"lineNumber":97,"author":{"gitID":"koo1993"},"content":"     * @param password"},{"lineNumber":98,"author":{"gitID":"koo1993"},"content":"     * @return passwordHash in String"},{"lineNumber":99,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private String generatePasswordHash(String password) {"},{"lineNumber":101,"author":{"gitID":"koo1993"},"content":"        String encodedHash \u003d null;"},{"lineNumber":102,"author":{"gitID":"koo1993"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"koo1993"},"content":"            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            digest.update(initialValue.getBytes());"},{"lineNumber":105,"author":{"gitID":"koo1993"},"content":"            byte[] byteHash \u003d digest.digest(password.getBytes(StandardCharsets.UTF_8));"},{"lineNumber":106,"author":{"gitID":"koo1993"},"content":"            encodedHash \u003d Base64.getEncoder().encodeToString(byteHash);"},{"lineNumber":107,"author":{"gitID":"koo1993"},"content":"        } catch (NoSuchAlgorithmException noSuchAlgoException) {"},{"lineNumber":108,"author":{"gitID":"koo1993"},"content":"            System.out.println(\"cannot generate hash: MessageDigest.getInstance\");"},{"lineNumber":109,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"koo1993"},"content":"        return encodedHash;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"koo1993"},"content":"                || (other instanceof Password // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"koo1993"},"content":"                \u0026\u0026 this.passwordHash.equals(((Password) other).passwordHash)); // state check"},{"lineNumber":118,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":120,"author":{"gitID":"koo1993"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"koo1993"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitID":"koo1993"},"content":"        return passwordHash.hashCode();"},{"lineNumber":123,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"koo1993"},"content":"}"}],"authorContributionMap":{"koo1993":89,"-":35}}]
