var resultJson = [{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.DeleteCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TestUtil.getEmployee;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TestUtil.getLastIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TestUtil.getMidIndex;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first employee in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_EMPLOYEE.getOneBased() + \"       \";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Employee deletedEmployee \u003d removeEmployee(expectedModel, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: delete the last employee in the list -\u003e deleted */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index lastEmployeeIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastEmployeeIndex);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last employee in the list -\u003e last employee restored */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last employee in the list -\u003e last employee deleted again */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        removeEmployee(modelBeforeDeletingLast, lastEmployeeIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: delete the middle employee in the list -\u003e deleted */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index middleEmployeeIndex \u003d getMidIndex(getModel());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middleEmployeeIndex);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, delete index within bounds of ptman book and employee list -\u003e deleted */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, delete index within bounds of ptman book but out of bounds of employee list"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* ------------------- Performing delete operation while a employee card is selected ---------------------- */"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: delete the selected employee -\u003e employee list panel selects the employee before the deleted employee */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        showAllEmployees();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        selectEmployee(selectedIndex);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        deletedEmployee \u003d removeEmployee(expectedModel, selectedIndex);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                getModel().getPartTimeManager().getEmployeeList().size() + 1);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Removes the {@code Employee} at the specified {@code index} in {@code model}\u0027s ptman book."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @return the removed employee"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private Employee removeEmployee(Model model, Index index) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Employee targetEmployee \u003d getEmployee(model, index);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            model.deleteEmployee(targetEmployee);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetEmployee is retrieved from model.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return targetEmployee;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Deletes the employee at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Employee deletedEmployee \u003d removeEmployee(expectedModel, toDelete);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, deletedEmployee);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":141,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":178,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":198,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":199}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty ptman book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing ptman book -\u003e original ptman book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing ptman book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in employee list and clears ptman book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ptman book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectEmployee(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the employee list before clearing -\u003e entire ptman book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original ptman book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty ptman book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":99}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.CARL;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.HOON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.IDA;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.AddCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: add a employee without tags to a non-empty ptman book, command with leading spaces and trailing spaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Employee toAdd \u003d AMY;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.addEmployee(toAdd);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except name -\u003e added */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except phone -\u003e added */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except email -\u003e added */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: add a employee with all fields same as another employee in PTMan except ptman -\u003e added */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        toAdd \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: add to empty ptman book -\u003e added */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        deleteAllEmployees();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: add a employee with tags, command with parameters in random order -\u003e added */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add a employee, missing tags -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: filters the employee list before adding -\u003e added */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* ---------------------- Perform add operation while a employee card is selected ------------------------- */"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the employee list, add a employee -\u003e added, card selection remains unchanged */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        selectEmployee(Index.fromOneBased(1));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate employee -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        command \u003d EmployeeUtil.getAddCommand(HOON);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate employee except with different tags -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalEmployees#ALICE"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // PartTimeManager#addEmployee(Employee)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d EmployeeUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: missing ptman -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + EmployeeUtil.getEmployeeDetails(toAdd);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid ptman -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} equal to the corresponding components in"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Employee toAdd) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandSuccess(EmployeeUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Employee)}. Executes {@code command}"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Employee)"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Employee toAdd) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            expectedModel.addEmployee(toAdd);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException dpe) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Employee)} except asserts that"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code EmployeeListPanel} equal to the corresponding components in"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Employee)"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":238,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":259}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.SelectCommand.MESSAGE_SELECT_EMPLOYEE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.getTypicalEmployees;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the employee list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the employee list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index employeeCount \u003d Index.fromOneBased(getTypicalEmployees().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + employeeCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, employeeCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the employee list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(employeeCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, select index within bounds of ptman book but out of bounds of employee list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, select index within bounds of ptman book and employee list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredEmployeeList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty ptman book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllEmployees();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected employee.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_EMPLOYEE_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getEmployeeListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EmployeeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":152}},{"path":"src/test/java/seedu/ptman/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_SUCCESS \u003d"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"            new NewResultAvailableEvent(\"Success\", false);"},{"lineNumber":18,"author":{"gitID":"hzxcaryn"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_FAILED \u003d"},{"lineNumber":19,"author":{"gitID":"hzxcaryn"},"content":"            new NewResultAvailableEvent(\"Failed\", true);"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":22,"author":{"gitID":"hzxcaryn"},"content":"    private ArrayList\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":35,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":36,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"},{"lineNumber":37,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"        // new results received"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"        assertExpectedResultDisplay(NEW_RESULT_EVENT_SUCCESS);"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":"        assertExpectedResultDisplay(NEW_RESULT_EVENT_FAILED);"},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"     * Runs a new result event, then verifies that \u003cbr\u003e"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"     *      - a successful event result display\u0027s style is the same as {@code defaultStyleOfResultDisplay}."},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"     *      - a failed event result display\u0027s style is the same as {@code errorStyleOfResultDisplay}."},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"    private void assertExpectedResultDisplay(NewResultAvailableEvent event) {"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"        postNow(event);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(event.message, resultDisplayHandle.getText());"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"        if (event.isError) {"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"            assertEquals(errorStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"        } else {"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"            assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":38,"-":34}},{"path":"src/test/java/seedu/ptman/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.LogicManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":143,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":144,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isError);"},{"lineNumber":145,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":146,"author":{"gitID":"hzxcaryn"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":147,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":159,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":160,"author":{"gitID":"hzxcaryn"},"content":"        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isError);"},{"lineNumber":161,"author":{"gitID":"hzxcaryn"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":162,"author":{"gitID":"hzxcaryn"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":163,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":14,"-":161}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 employees found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where employee list is displaying the employees we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 employees found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find employee where employee list is not displaying the employee we are finding -\u003e 1 employee found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 keywords -\u003e 2 employees found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 keywords in reversed order -\u003e 2 employees found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 keywords with 1 repeat -\u003e 2 employees found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple employees in ptman book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 employees found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same employees in ptman book after deleting 1 of them -\u003e 1 employee found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getPartTimeManager().getEmployeeList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find employee in ptman book, keyword is same as name but of different case -\u003e 1 employee found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find employee in ptman book, keyword is substring of name -\u003e 0 employees found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find employee in ptman book, name is substring of keyword -\u003e 0 employees found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find employee not in ptman book -\u003e 0 employees found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find ptman of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of employee in ptman book -\u003e 0 employees found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find while a employee is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllEmployees();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectEmployee(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertFalse(getEmployeeListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find employee in empty ptman book -\u003e 0 employees found */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        deleteAllEmployees();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_EMPLOYEES_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"-"},"content":"                MESSAGE_EMPLOYEES_LISTED_OVERVIEW, expectedModel.getFilteredEmployeeList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":194}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.ptman.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.KEYWORD_MATCHING_MEIER;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.EmployeeUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends PartTimeManagerSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last employee in the list -\u003e last employee restored */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last employee in the list -\u003e last employee edited again */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.updateEmployee("},{"lineNumber":79,"author":{"gitID":"-"},"content":"                getModel().getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased()), editedEmployee);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: edit a employee with new values same as existing values -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Employee employeeToEdit \u003d getModel().getFilteredEmployeeList().get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withTags().build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, edit index within bounds of ptman book and employee list -\u003e edited */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEmployeeList().size());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        employeeToEdit \u003d getModel().getFilteredEmployeeList().get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        editedEmployee \u003d new EmployeeBuilder(employeeToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedEmployee);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: filtered employee list, edit index within bounds of ptman book but out of bounds of employee list"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showEmployeesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* ------------------- Performing edit operation while a employee card is selected ------------------------ */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the employee list, edit a employee -\u003e edited,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * card selection remains unchanged but browser url changes"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        showAllEmployees();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        selectEmployee(index);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new employee\u0027s name"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredEmployeeList().size() + 1;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased(),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid ptman -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: edit a employee with new values same as another employee\u0027s values -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        executeCommand(EmployeeUtil.getAddCommand(BOB));"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getPartTimeManager().getEmployeeList().contains(BOB));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredEmployeeList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: edit a employee with new values same as another employee\u0027s values"},{"lineNumber":186,"author":{"gitID":"-"},"content":"         * but with different tags -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Employee, Index)} except that"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Employee, Index)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedEmployee, null);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the employee at index {@code toEdit} being"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedEmployee}.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Employee editedEmployee,"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            expectedModel.updateEmployee("},{"lineNumber":215,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredEmployeeList().get(toEdit.getZeroBased()), editedEmployee);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException | EmployeeNotFoundException e) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":219,"author":{"gitID":"-"},"content":"                    \"editedEmployee is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee), expectedSelectedCardIndex);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * {@code PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * @see PartTimeManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":280,"author":{"gitID":"hzxcaryn"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":281}},{"path":"src/test/java/seedu/ptman/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"hzxcaryn"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.EmployeeCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.EmployeeListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.EmployeeCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"hzxcaryn"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":21,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(EmployeeCardHandle expectedCard, EmployeeCardHandle actualCard) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":32,"author":{"gitID":"hzxcaryn"},"content":"        expectedCard.getTags().forEach(tag -\u003e {"},{"lineNumber":33,"author":{"gitID":"hzxcaryn"},"content":"            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag));"},{"lineNumber":34,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedEmployee}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysEmployee(Employee expectedEmployee, EmployeeCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getName().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getPhone().value, actualCard.getPhone());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getEmail().value, actualCard.getEmail());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getAddress().value, actualCard.getAddress());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmployee.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTagEquals(expectedEmployee, actualCard);"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * in {@code EmployeeCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @see EmployeeCard#getTagColor(String)"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"    private static String getTagColor(String tagName) {"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"        switch (tagName) {"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"        case \"classmates\":"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"        case \"owesMoney\":"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"            return \"salmon\";"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"        case \"colleagues\":"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"        case \"neighbours\":"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"            return \"teal\";"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"        case \"family\":"},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"        case \"friend\":"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"            return \"pink\";"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":"        case \"friends\":"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"            return \"pale-blue\";"},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"        case \"husband\":"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"            return \"yellow\";"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"        default:"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"            return \"\";"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * {@code expectedEmployee} with the correct color."},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"     * */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private static void assertTagEquals(Employee expectedEmployee,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                                        EmployeeCardHandle actualCard) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedEmployee.getTags().stream().map(tag -\u003e tag.tagName)"},{"lineNumber":84,"author":{"gitID":"hzxcaryn"},"content":"                .collect(Collectors.toList());"},{"lineNumber":85,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":86,"author":{"gitID":"hzxcaryn"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":87,"author":{"gitID":"hzxcaryn"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColor(tag)), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code employeeListPanelHandle} displays the details of {@code employees} correctly and"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static void assertListMatching(EmployeeListPanelHandle employeeListPanelHandle, Employee... employees) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c employees.length; i++) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            assertCardDisplaysEmployee(employees[i], employeeListPanelHandle.getEmployeeCardHandle(i));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code employeeListPanelHandle} displays the details of {@code employees} correctly and"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static void assertListMatching(EmployeeListPanelHandle employeeListPanelHandle, List\u003cEmployee\u003e employees) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertListMatching(employeeListPanelHandle, employees.toArray(new Employee[0]));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code employeeListPanelHandle} equals to {@code size}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static void assertListSize(EmployeeListPanelHandle employeeListPanelHandle, int size) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d employeeListPanelHandle.getListSize();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":41,"-":81}},{"path":"src/test/java/systemtests/PartTimeManagerSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.NUM_EMPLOYEES_STATUS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.EmployeeListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.ptman.MainApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.ptman.TestApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.EventsCenter;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ClearCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.FindCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.ptman.model.PartTimeManager;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.TypicalEmployees;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.BrowserPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.CommandBox;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.ptman.ui.ResultDisplay;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * A system test class for PartTimeManager, which provides access to handles of GUI components and helper methods"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":50,"author":{"gitID":"-"},"content":" */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"public abstract class PartTimeManagerSystemTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"        defaultStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    protected PartTimeManager getInitialData() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return TypicalEmployees.getTypicalPartTimeManager();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public EmployeeListPanelHandle getEmployeeListPanel() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getEmployeeListPanel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":141,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Displays all employees in PTMan."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void showAllEmployees() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getPartTimeManager().getEmployeeList().size(),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                getModel().getFilteredEmployeeList().size());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Displays all employees with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    protected void showEmployeesWithName(String keyword) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredEmployeeList().size()"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                \u003c getModel().getPartTimeManager().getEmployeeList().size());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Selects the employee at {@code index} of the displayed list."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    protected void selectEmployee(Index index) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getEmployeeListPanel().getSelectedCardIndex());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Deletes all employees in PTMan."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    protected void deleteAllEmployees() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getPartTimeManager().getEmployeeList().size());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same employee objects as {@code expectedModel}"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * and the employee list panel displays the employees in the model correctly."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getPartTimeManager(), testApp.readStoragePartTimeManager());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertListMatching(getEmployeeListPanel(), expectedModel.getFilteredEmployeeList());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code EmployeeListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberNumEmployees();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        getEmployeeListPanel().rememberSelectedEmployeeCard();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * of the previously selected employee."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertFalse(getEmployeeListPanel().isAnyCardSelected());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the employee in the employee list panel at"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see EmployeeListPanelHandle#isSelectedEmployeeCardChanged()"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getEmployeeListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getEmployeeListPanel().getSelectedCardIndex());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the employee list panel remain unchanged."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * @see EmployeeListPanelHandle#isSelectedEmployeeCardChanged()"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(getEmployeeListPanel().isSelectedEmployeeCardChanged());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the command box and result display shows the default style."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":253,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(defaultStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the command box and result display shows the error style."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"hzxcaryn"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":261,"author":{"gitID":"hzxcaryn"},"content":"        assertEquals(errorStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertFalse(handle.isNumEmployeesChanged());"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that only the save location in the status bar was unchanged, while sync status"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * is changed to the timing of {@code ClockRule#getInjectedClock()}, and num employees updates to"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * the current num of employees."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"hzxcaryn"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        int currNumEmployees \u003d testApp.getModel().getPartTimeManager().getEmployeeList().size();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        String expectedNumEmployees \u003d String.format(NUM_EMPLOYEES_STATUS, currNumEmployees);"},{"lineNumber":285,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertEquals(expectedNumEmployees, handle.getNumEmployees());"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":293,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":297,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            assertListMatching(getEmployeeListPanel(), getModel().getFilteredEmployeeList());"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":301,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            assertEquals(String.format(NUM_EMPLOYEES_STATUS,"},{"lineNumber":303,"author":{"gitID":"-"},"content":"                    getModel().getPartTimeManager().getEmployeeList().size()), getStatusBarFooter().getNumEmployees());"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":15,"-":300}},{"path":"src/test/java/seedu/ptman/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.NUM_EMPLOYEES_STATUS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.model.PartTimeManagerChangedEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.PartTimeManagerBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final int INITIAL_NUM_EMPLOYEES \u003d 0;"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final PartTimeManagerChangedEvent EVENT_STUB \u003d new PartTimeManagerChangedEvent("},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new PartTimeManagerBuilder().withEmployee(ALICE).build());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_NUM_EMPLOYEES);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                String.format(NUM_EMPLOYEES_STATUS, INITIAL_NUM_EMPLOYEES));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // after ptman book is updated"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                String.format(NUM_EMPLOYEES_STATUS, EVENT_STUB.data.getEmployeeList().size()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, the"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}, and the num employees matches"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * that of {@code expectedNumEmployees}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"    private void assertStatusBarContent(String expectedSaveLocation,"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                                        String expectedSyncStatus, String expectedNumEmployees) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(expectedNumEmployees, statusBarFooterHandle.getNumEmployees());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":5,"-":80}},{"path":"src/test/java/seedu/ptman/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.deleteFirstEmployee;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.ptman.logic.commands.CommandTestUtil.showEmployeeAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalEmployees.getTypicalPartTimeManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.ptman.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalPartTimeManager(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalPartTimeManager(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstEmployee(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all employees"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalPartTimeManager(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all employees"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstEmployee(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the first employee in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deleteEmployee(employeeToDelete);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                fail(\"Impossible: employeeToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":1,"-":67}},{"path":"src/test/java/seedu/ptman/model/employee/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model.employee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long ptman"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"koo1993":1,"-":36}},{"path":"src/test/java/seedu/ptman/model/PasswordTest.java","lines":[{"lineNumber":1,"author":{"gitID":"koo1993"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":3,"author":{"gitID":"koo1993"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.ptman.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"koo1993"},"content":"public class PasswordTest {"},{"lineNumber":12,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"koo1993"},"content":"    public void constructor_invalidPassword_throwsIllegalArgumentException() {"},{"lineNumber":14,"author":{"gitID":"koo1993"},"content":"        String invalidName \u003d \"have space\";"},{"lineNumber":15,"author":{"gitID":"koo1993"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Password(invalidName));"},{"lineNumber":16,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":18,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"koo1993"},"content":"    public void constructor_defaultConstructor_noError() {"},{"lineNumber":20,"author":{"gitID":"koo1993"},"content":"        Password password \u003d new Password();"},{"lineNumber":21,"author":{"gitID":"koo1993"},"content":"        Password expectPassword \u003d new Password(\"DEFAULT1\");"},{"lineNumber":22,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":23,"author":{"gitID":"koo1993"},"content":"        assertEquals(password, expectPassword);"},{"lineNumber":24,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":26,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"koo1993"},"content":"    public void isValidPassword() {"},{"lineNumber":28,"author":{"gitID":"koo1993"},"content":"        // null password"},{"lineNumber":29,"author":{"gitID":"koo1993"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"},{"lineNumber":30,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":31,"author":{"gitID":"koo1993"},"content":"        // invalid Password"},{"lineNumber":32,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\"\")); // empty string"},{"lineNumber":33,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\" \")); // spaces only"},{"lineNumber":34,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\"!#@! fdsafdsafdsa\")); // characters with space"},{"lineNumber":35,"author":{"gitID":"koo1993"},"content":"        assertFalse(Password.isValidPassword(\"less8\")); // less than 8 character"},{"lineNumber":36,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":37,"author":{"gitID":"koo1993"},"content":"        // valid name"},{"lineNumber":38,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"peterjack\")); // alphabets only"},{"lineNumber":39,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"1234567dsa6\")); // numbers only"},{"lineNumber":40,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"peterthe2nd\")); // alphanumeric characters"},{"lineNumber":41,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"CapitalTan\")); // with capital letters"},{"lineNumber":42,"author":{"gitID":"koo1993"},"content":"        assertTrue(Password.isValidPassword(\"Da@acks$RayJr2nd\")); // alphanumeric with captial and special character"},{"lineNumber":43,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":45,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"koo1993"},"content":"    public void isCorrectPassword() {"},{"lineNumber":47,"author":{"gitID":"koo1993"},"content":"        Password password \u003d new Password(\"ThisIsThePassword\");"},{"lineNumber":48,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":49,"author":{"gitID":"koo1993"},"content":"        // wrong password"},{"lineNumber":50,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.isCorrectPassword(\"thisiswrongpassword\"));"},{"lineNumber":51,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.isCorrectPassword(\"ThisIsThepassword\"));"},{"lineNumber":52,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":53,"author":{"gitID":"koo1993"},"content":"        //correct password"},{"lineNumber":54,"author":{"gitID":"koo1993"},"content":"        assertTrue(password.isCorrectPassword(\"ThisIsThePassword\")); //correct password"},{"lineNumber":55,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":57,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":58,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"koo1993"},"content":"    public void changePassword() {"},{"lineNumber":60,"author":{"gitID":"koo1993"},"content":"        Password password \u003d new Password(\"ThisIsThePassword\");"},{"lineNumber":61,"author":{"gitID":"koo1993"},"content":"        Password expectedPassword \u003d new Password(\"newPassword\");"},{"lineNumber":62,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":63,"author":{"gitID":"koo1993"},"content":"        //wrong password"},{"lineNumber":64,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.checkAndChangePassword(\"this is the password\", \"newPassword\"));"},{"lineNumber":65,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.checkAndChangePassword(\"notapassword\", \"newPassword\"));"},{"lineNumber":66,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":67,"author":{"gitID":"koo1993"},"content":"        //correct password and changed"},{"lineNumber":68,"author":{"gitID":"koo1993"},"content":"        assertTrue(password.checkAndChangePassword(\"ThisIsThePassword\", \"newPassword\"));"},{"lineNumber":69,"author":{"gitID":"koo1993"},"content":"        assertEquals(password, expectedPassword);"},{"lineNumber":70,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":72,"author":{"gitID":"koo1993"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"koo1993"},"content":"    public void changeHash() {"},{"lineNumber":74,"author":{"gitID":"koo1993"},"content":"        String encodedHash \u003d \"XCmpWavOTtpfDnpOfqU9zk+g8Ku+jqpjcX4v7V8ZPTE\u003d\"; // hash code for newPassword"},{"lineNumber":75,"author":{"gitID":"koo1993"},"content":"        Password password \u003d new Password(\"ThisIsThePassword\");"},{"lineNumber":76,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":77,"author":{"gitID":"koo1993"},"content":"        assertFalse(password.isCorrectPassword(\"newPassword\"));"},{"lineNumber":78,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":79,"author":{"gitID":"koo1993"},"content":"        password.changeHash(encodedHash);"},{"lineNumber":80,"author":{"gitID":"koo1993"},"content":"        assertTrue(password.isCorrectPassword(\"newPassword\"));"},{"lineNumber":81,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":83,"author":{"gitID":"koo1993"},"content":"}"}],"authorContributionMap":{"koo1993":76,"-":7}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"hzxcaryn"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":25,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"hzxcaryn"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":27,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"hzxcaryn"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":29,"author":{"gitID":"hzxcaryn"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":30,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":9,"-":22}},{"path":"src/test/java/guitests/guihandles/StatusBarFooterHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code StatusBarFooter} at the footer of the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String NUM_EMPLOYEES_STATUS_ID \u003d \"#numEmployeesStatus\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final StatusBar syncStatusNode;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final StatusBar numEmployeesNode;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final StatusBar saveLocationNode;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private String lastRememberedNumEmployees;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle(Node statusBarFooterNode) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.numEmployeesNode \u003d getChildNode(NUM_EMPLOYEES_STATUS_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027num employees\u0027 portion of the status bar."},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getNumEmployees() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return numEmployeesNode.getText();"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027num Employees\u0027 portion of the status bar."},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void rememberNumEmployees() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        lastRememberedNumEmployees \u003d getNumEmployees();"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027num employees\u0027 is different from the value remembered by the most"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean isNumEmployeesChanged() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return !lastRememberedNumEmployees.equals(getNumEmployees());"},{"lineNumber":82,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":11,"-":87}},{"path":"src/test/java/guitests/guihandles/EmployeeCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a employee card in the employee list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class EmployeeCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public EmployeeCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":77,"author":{"gitID":"hzxcaryn"},"content":"                .findFirst()"},{"lineNumber":78,"author":{"gitID":"hzxcaryn"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"Tag does not exist.\"));"},{"lineNumber":79,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":80,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":8,"-":73}},{"path":"src/main/java/seedu/ptman/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"hzxcaryn"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"hzxcaryn"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":2,"-":149}},{"path":"src/main/java/seedu/ptman/ui/EmployeeCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Employee}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class EmployeeCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"EmployeeListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"hzxcaryn"},"content":"    private static final String[] TAG_COLORS \u003d"},{"lineNumber":17,"author":{"gitID":"hzxcaryn"},"content":"        {\"salmon\", \"mint\", \"teal\", \"turquoise\", \"pink\", \"pale-blue\", \"purple\", \"blue\", \"indigo\", \"yellow\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * \u003ca href\u003d\"https://github.com/se-edu/parttimemanager-level4/issues/336\"\u003eThe issue on PartTimeManager level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public final Employee employee;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public EmployeeCard(Employee employee, int displayedIndex) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.employee \u003d employee;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        name.setText(employee.getName().fullName);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        phone.setText(employee.getPhone().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        address.setText(employee.getAddress().value);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        email.setText(employee.getEmail().value);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        addTagLabels(employee);"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"     * Tag colors are derived by calculating the hash code of the {@code tagName} string to"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"     * select a color from the {@code TAG_COLORS} array"},{"lineNumber":59,"author":{"gitID":"hzxcaryn"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"hzxcaryn"},"content":"     * @param tagName"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"     * @return color for the {@code tagName}\u0027s tag label"},{"lineNumber":62,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"hzxcaryn"},"content":"    private String getTagColor(String tagName) {"},{"lineNumber":64,"author":{"gitID":"hzxcaryn"},"content":"        int index \u003d Math.abs(tagName.hashCode()) %  TAG_COLORS.length;"},{"lineNumber":65,"author":{"gitID":"hzxcaryn"},"content":"        return TAG_COLORS[index];"},{"lineNumber":66,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":68,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Adds all tags of {@code employee} as color-coded labels"},{"lineNumber":70,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void addTagLabels(Employee employee) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        employee.getTags().forEach(tag -\u003e {"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":"            Label newLabel \u003d new Label(tag.tagName);"},{"lineNumber":74,"author":{"gitID":"hzxcaryn"},"content":"            newLabel.getStyleClass().add(getTagColor(tag.tagName));"},{"lineNumber":75,"author":{"gitID":"hzxcaryn"},"content":"            tags.getChildren().add(newLabel);"},{"lineNumber":76,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof EmployeeCard)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        EmployeeCard card \u003d (EmployeeCard) other;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 employee.equals(card.employee);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":22,"-":74}},{"path":"src/main/java/seedu/ptman/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"hzxcaryn"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":40,"author":{"gitID":"hzxcaryn"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":41,"author":{"gitID":"hzxcaryn"},"content":"            displayed.setValue(event.message);;"},{"lineNumber":42,"author":{"gitID":"hzxcaryn"},"content":"            if (event.isError) {"},{"lineNumber":43,"author":{"gitID":"hzxcaryn"},"content":"                setStyleToIndicateCommandFailure();"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"            } else {"},{"lineNumber":45,"author":{"gitID":"hzxcaryn"},"content":"                setStyleToDefault();"},{"lineNumber":46,"author":{"gitID":"hzxcaryn"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"hzxcaryn"},"content":"        });"},{"lineNumber":48,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":50,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"hzxcaryn"},"content":"     * Sets the result display style to use the default style."},{"lineNumber":52,"author":{"gitID":"hzxcaryn"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"hzxcaryn"},"content":"    private void setStyleToDefault() {"},{"lineNumber":54,"author":{"gitID":"hzxcaryn"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":55,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":57,"author":{"gitID":"hzxcaryn"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"hzxcaryn"},"content":"     * Sets the result display style to indicate a failed command."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":61,"author":{"gitID":"hzxcaryn"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":21,"-":49}},{"path":"src/main/java/seedu/ptman/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.model.PartTimeManagerChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String NUM_EMPLOYEES_STATUS \u003d \"%d employee(s) total\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":44,"author":{"gitID":"hzxcaryn"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private StatusBar numEmployeesStatus;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation, int numEmployees) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        setNumEmployees(numEmployees);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setNumEmployees(int numEmployees) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.numEmployeesStatus.setText(String.format(NUM_EMPLOYEES_STATUS, numEmployees)));"},{"lineNumber":72,"author":{"gitID":"hzxcaryn"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"hzxcaryn"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void handlePartTimeManagerChangedEvent(PartTimeManagerChangedEvent abce) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setNumEmployees(abce.data.getEmployeeList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":87}},{"path":"src/main/java/seedu/ptman/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.ptman.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"hzxcaryn"},"content":"    public final boolean isError;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"hzxcaryn"},"content":"    public NewResultAvailableEvent(String message, boolean isError) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"hzxcaryn"},"content":"        this.isError \u003d isError;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hzxcaryn":3,"-":20}},{"path":"src/main/java/seedu/ptman/model/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"koo1993"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.ptman.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"koo1993"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":7,"author":{"gitID":"koo1993"},"content":"import java.security.MessageDigest;"},{"lineNumber":8,"author":{"gitID":"koo1993"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":9,"author":{"gitID":"koo1993"},"content":"import java.util.Base64;"},{"lineNumber":10,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":11,"author":{"gitID":"koo1993"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"koo1993"},"content":" * Represents a Password in PartTimeManger"},{"lineNumber":13,"author":{"gitID":"koo1993"},"content":" *"},{"lineNumber":14,"author":{"gitID":"koo1993"},"content":" */"},{"lineNumber":15,"author":{"gitID":"koo1993"},"content":"public class Password {"},{"lineNumber":16,"author":{"gitID":"koo1993"},"content":"    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"koo1993"},"content":"            \"Password should be at least 8 character and no spaces.\";"},{"lineNumber":18,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":19,"author":{"gitID":"koo1993"},"content":"    public static final String DEFAULT_PASSWORD \u003d"},{"lineNumber":20,"author":{"gitID":"koo1993"},"content":"            \"DEFAULT1\";"},{"lineNumber":21,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":22,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"koo1993"},"content":"     * accept all password that do not have whitespaces and at least 8 characters."},{"lineNumber":24,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"koo1993"},"content":"    public static final String PASSWORD_VALIDATION_REGEX \u003d \"^(?\u003d\\\\S+$).{8,}$\";"},{"lineNumber":26,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":27,"author":{"gitID":"koo1993"},"content":"    private String passwordHash;"},{"lineNumber":28,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":29,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"koo1993"},"content":"     * constructor for default password"},{"lineNumber":31,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"koo1993"},"content":"    public Password() {"},{"lineNumber":33,"author":{"gitID":"koo1993"},"content":"        passwordHash \u003d generatePasswordHash(DEFAULT_PASSWORD);"},{"lineNumber":34,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":36,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"koo1993"},"content":"     * Constructor to assign a password"},{"lineNumber":38,"author":{"gitID":"koo1993"},"content":"     * @param password"},{"lineNumber":39,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"koo1993"},"content":"    public Password(String password) {"},{"lineNumber":41,"author":{"gitID":"koo1993"},"content":"        requireNonNull(password);"},{"lineNumber":42,"author":{"gitID":"koo1993"},"content":"        checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"koo1993"},"content":"        passwordHash \u003d generatePasswordHash(password);"},{"lineNumber":44,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":46,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"koo1993"},"content":"     * Only use this method for loading password file,"},{"lineNumber":48,"author":{"gitID":"koo1993"},"content":"     * given that you know the encoded hash."},{"lineNumber":49,"author":{"gitID":"koo1993"},"content":"     * @param encodedHash"},{"lineNumber":50,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"koo1993"},"content":"    public void changeHash(String encodedHash) {"},{"lineNumber":52,"author":{"gitID":"koo1993"},"content":"        passwordHash \u003d encodedHash;"},{"lineNumber":53,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":55,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"koo1993"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"koo1993"},"content":"     * @param test"},{"lineNumber":58,"author":{"gitID":"koo1993"},"content":"     * @return true if password is of correct format"},{"lineNumber":59,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"koo1993"},"content":"    public static boolean isValidPassword(String test) {"},{"lineNumber":61,"author":{"gitID":"koo1993"},"content":"        return test.matches(PASSWORD_VALIDATION_REGEX);"},{"lineNumber":62,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":64,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"koo1993"},"content":"     * check if passwordHash generated from the string is same as current passwordHash"},{"lineNumber":66,"author":{"gitID":"koo1993"},"content":"     * @param password"},{"lineNumber":67,"author":{"gitID":"koo1993"},"content":"     * @return true if same"},{"lineNumber":68,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"koo1993"},"content":"    public boolean isCorrectPassword(String password) {"},{"lineNumber":70,"author":{"gitID":"koo1993"},"content":"        return passwordHash.equals(generatePasswordHash(password));"},{"lineNumber":71,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":73,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"koo1993"},"content":"     * Change password given a password"},{"lineNumber":75,"author":{"gitID":"koo1993"},"content":"     * @return true if password is changed"},{"lineNumber":76,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"koo1993"},"content":"    public boolean checkAndChangePassword(String oldPassword, String newPassword) {"},{"lineNumber":78,"author":{"gitID":"koo1993"},"content":"        if (isCorrectPassword(oldPassword)) {"},{"lineNumber":79,"author":{"gitID":"koo1993"},"content":"            this.passwordHash \u003d generatePasswordHash(newPassword);"},{"lineNumber":80,"author":{"gitID":"koo1993"},"content":"            return true;"},{"lineNumber":81,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"koo1993"},"content":"        return false;"},{"lineNumber":83,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":85,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"koo1993"},"content":"     * Generate passwordHash given a string password"},{"lineNumber":87,"author":{"gitID":"koo1993"},"content":"     * @param password"},{"lineNumber":88,"author":{"gitID":"koo1993"},"content":"     * @return passwordHash in String"},{"lineNumber":89,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"koo1993"},"content":"    public String generatePasswordHash(String password) {"},{"lineNumber":91,"author":{"gitID":"koo1993"},"content":"        String encodedHash \u003d null;"},{"lineNumber":92,"author":{"gitID":"koo1993"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"koo1993"},"content":"            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");"},{"lineNumber":94,"author":{"gitID":"koo1993"},"content":"            byte[] byteHash \u003d digest.digest(password.getBytes(StandardCharsets.UTF_8));"},{"lineNumber":95,"author":{"gitID":"koo1993"},"content":"            encodedHash \u003d Base64.getEncoder().encodeToString(byteHash);"},{"lineNumber":96,"author":{"gitID":"koo1993"},"content":"        } catch (NoSuchAlgorithmException noSuchAlgoException) {"},{"lineNumber":97,"author":{"gitID":"koo1993"},"content":"            System.out.println(\"cannot generate hash: MessageDigest.getInstance\");"},{"lineNumber":98,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"koo1993"},"content":"        return encodedHash;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":105,"author":{"gitID":"koo1993"},"content":"                || (other instanceof Password // instanceof handles nulls"},{"lineNumber":106,"author":{"gitID":"koo1993"},"content":"                \u0026\u0026 this.passwordHash.equals(((Password) other).passwordHash)); // state check"},{"lineNumber":107,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":109,"author":{"gitID":"koo1993"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"koo1993"},"content":"    public int hashCode() {"},{"lineNumber":111,"author":{"gitID":"koo1993"},"content":"        return passwordHash.hashCode();"},{"lineNumber":112,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"koo1993"},"content":"}"}],"authorContributionMap":{"koo1993":104,"-":9}},{"path":"src/main/java/seedu/ptman/model/PartTimeManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.ptman.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.Employee;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.UniqueEmployeeList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.ptman.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.ptman.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class PartTimeManager implements ReadOnlyPartTimeManager {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniqueEmployeeList employees;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        employees \u003d new UniqueEmployeeList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PartTimeManager() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an PartTimeManager using the Employees and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public PartTimeManager(ReadOnlyPartTimeManager toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setEmployees(List\u003cEmployee\u003e employees) throws DuplicateEmployeeException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.employees.setEmployees(employees);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code PartTimeManager} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyPartTimeManager newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cEmployee\u003e syncedEmployeeList \u003d newData.getEmployeeList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            setEmployees(syncedEmployeeList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PartTimeManagers should not have duplicate employees\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// employee-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds an employee to the address book."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Also checks the new employee\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the employee to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DuplicateEmployeeException if an equivalent employee already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void addEmployee(Employee p) throws DuplicateEmployeeException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Employee employee \u003d syncWithMasterTagList(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any employee"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // in the employee list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"        employees.add(employee);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Replaces the given employee {@code target} in the list with {@code editedEmployee}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code PartTimeManager}\u0027s tag list will be updated with the tags of {@code editedEmployee}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicateEmployeeException if updating the employee\u0027s details causes the employee to be equivalent to"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *      another existing employee in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws EmployeeNotFoundException if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Employee)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void updateEmployee(Employee target, Employee editedEmployee)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throws DuplicateEmployeeException, EmployeeNotFoundException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(editedEmployee);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Employee syncedEditedEmployee \u003d syncWithMasterTagList(editedEmployee);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any employee"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // in the employee list."},{"lineNumber":114,"author":{"gitID":"-"},"content":"        employees.setEmployee(target, syncedEditedEmployee);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code employee} that are not in the list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code employee} such that every tag in this employee points to a Tag"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  object in the master list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private Employee syncWithMasterTagList(Employee employee) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final UniqueTagList employeeTags \u003d new UniqueTagList(employee.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        tags.mergeFrom(employeeTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // used for checking employee tag references"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Rebuild the list of employee tags to point to the relevant tags in the master tag list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        employeeTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return new Employee("},{"lineNumber":135,"author":{"gitID":"-"},"content":"                employee.getName(),"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                employee.getPhone(),"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                employee.getEmail(),"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                employee.getAddress(),"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                correctTagReferences"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code PartTimeManager}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * @throws EmployeeNotFoundException if the {@code key} is not in this {@code PartTimeManager}."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public boolean removeEmployee(Employee key) throws EmployeeNotFoundException {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (employees.remove(key)) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            removeUnusedTag();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            throw new EmployeeNotFoundException();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Remove tag from Employee if the tag exist in Employee."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @param tag"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * @param employee"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void removeTagFromEmployee(Tag tag, Employee employee) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(employee.getTags());"},{"lineNumber":171,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":172,"author":{"gitID":"koo1993"},"content":"        if (!newTags.contains(tag)) {"},{"lineNumber":173,"author":{"gitID":"koo1993"},"content":"            return;"},{"lineNumber":174,"author":{"gitID":"koo1993"},"content":"        } else {"},{"lineNumber":175,"author":{"gitID":"koo1993"},"content":"            newTags.remove(tag);"},{"lineNumber":176,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        Employee newEmployee \u003d new Employee(employee.getName(), employee.getPhone(), employee.getEmail(),"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                employee.getAddress(), newTags);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            updateEmployee(employee, newEmployee);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        } catch (DuplicateEmployeeException dpe) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"updating employee should not result in duplicated employee\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        } catch (EmployeeNotFoundException pnfe) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"updating employee should always be able to find the employee you are editing\");"},{"lineNumber":187,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":189,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":191,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"koo1993"},"content":"     * remove tag that is unused in addressbook"},{"lineNumber":193,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"koo1993"},"content":"    private void removeUnusedTag() {"},{"lineNumber":195,"author":{"gitID":"koo1993"},"content":"        HashSet newSet \u003d new HashSet();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        for (Employee employee:employees) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            for (Tag tag: employee.getTags()) {"},{"lineNumber":198,"author":{"gitID":"koo1993"},"content":"                if (!newSet.contains(tag)) {"},{"lineNumber":199,"author":{"gitID":"koo1993"},"content":"                    newSet.add(tag);"},{"lineNumber":200,"author":{"gitID":"koo1993"},"content":"                }"},{"lineNumber":201,"author":{"gitID":"koo1993"},"content":"            }"},{"lineNumber":202,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"koo1993"},"content":"        tags.setTags(newSet);"},{"lineNumber":204,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"koo1993"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"koo1993"},"content":"     * Remove tags from everyone in the address book"},{"lineNumber":207,"author":{"gitID":"koo1993"},"content":"     * @param tag"},{"lineNumber":208,"author":{"gitID":"koo1993"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void removeTagFromAllEmployees(Tag tag) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        for (Employee employee: employees) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            removeTagFromEmployee(tag, employee);"},{"lineNumber":212,"author":{"gitID":"koo1993"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"koo1993"},"content":"        removeUnusedTag();"},{"lineNumber":214,"author":{"gitID":"koo1993"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"koo1993"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        return employees.asObservableList().size() + \" employees, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public ObservableList\u003cEmployee\u003e getEmployeeList() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return employees.asObservableList();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":235,"author":{"gitID":"-"},"content":"                || (other instanceof PartTimeManager // instanceof handles nulls"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.employees.equals(((PartTimeManager) other).employees)"},{"lineNumber":237,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((PartTimeManager) other).tags));"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        return Objects.hash(employees, tags);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"koo1993":32,"-":213}}]
